
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00802000  00005820  000058b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000119  00802098  00802098  0000594c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000594c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000738  00000000  00000000  000059e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f039  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005864  00000000  00000000  00015159  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000099c4  00000000  00000000  0001a9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002748  00000000  00000000  00024384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000404f4  00000000  00000000  00026acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000583c  00000000  00000000  00066fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  0006c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003264  00000000  00000000  0006ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_10>
      2c:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_11>
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__vector_13>
      38:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_14>
      3c:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_15>
      40:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_16>
      44:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__vector_17>
      48:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__vector_18>
      4c:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_19>
      50:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_20>
      54:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_21>
      58:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_22>
      5c:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__vector_23>
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	87 c3       	rjmp	.+1806   	; 0x7ac <__vector_39>
      9e:	00 00       	nop
      a0:	11 c4       	rjmp	.+2082   	; 0x8c4 <__vector_40>
      a2:	00 00       	nop
      a4:	9b c4       	rjmp	.+2358   	; 0x9dc <__vector_41>
      a6:	00 00       	nop
      a8:	25 c5       	rjmp	.+2634   	; 0xaf4 <__vector_42>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__vector_46>
      bc:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__vector_47>
      c0:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__vector_48>
      c4:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_49>
      c8:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_50>
      cc:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__vector_51>
      d0:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__vector_52>
      d4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__vector_53>
      d8:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__vector_54>
      dc:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__vector_55>
      e0:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__vector_56>
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	00 c6       	rjmp	.+3072   	; 0xcf6 <__vector_61>
      f6:	00 00       	nop
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	17 c1       	rjmp	.+558    	; 0x34c <__vector_71>
     11e:	00 00       	nop
     120:	a1 c1       	rjmp	.+834    	; 0x464 <__vector_72>
     122:	00 00       	nop
     124:	2b c2       	rjmp	.+1110   	; 0x57c <__vector_73>
     126:	00 00       	nop
     128:	b5 c2       	rjmp	.+1386   	; 0x694 <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__vector_76>
     134:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__vector_77>
     138:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__vector_78>
     13c:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__vector_79>
     140:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__vector_80>
     144:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__vector_81>
     148:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_82>
     14c:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__vector_83>
     150:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_84>
     154:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__vector_85>
     158:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__vector_86>
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__vector_107>
     1b0:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__vector_108>
     1b4:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__vector_109>
     1b8:	0c 94 26 14 	jmp	0x284c	; 0x284c <__vector_110>
     1bc:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__vector_111>
     1c0:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_112>
     1c4:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__vector_113>
     1c8:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__vector_114>
     1cc:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__vector_115>
     1d0:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__vector_116>
     1d4:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__vector_117>
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	17 c5       	rjmp	.+2606   	; 0xc0c <__vector_119>
     1de:	00 00       	nop
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b0 c0       	rjmp	.+352    	; 0x34a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ac c0       	rjmp	.+344    	; 0x34a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2332>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e3       	ldi	r29, 0x3F	; 63
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60
     30e:	18 be       	out	0x38, r1	; 56
     310:	19 be       	out	0x39, r1	; 57
     312:	1a be       	out	0x3a, r1	; 58
     314:	1b be       	out	0x3b, r1	; 59

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e0 e2       	ldi	r30, 0x20	; 32
     31e:	f8 e5       	ldi	r31, 0x58	; 88
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a8 39       	cpi	r26, 0x98	; 152
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>
     330:	1b be       	out	0x3b, r1	; 59

00000332 <__do_clear_bss>:
     332:	21 e2       	ldi	r18, 0x21	; 33
     334:	a8 e9       	ldi	r26, 0x98	; 152
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a1 3b       	cpi	r26, 0xB1	; 177
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 2a 22 	call	0x4454	; 0x4454 <main>
     346:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     35c:	0f 92       	push	r0
     35e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     362:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     366:	0f 92       	push	r0
     368:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     36c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     370:	0f 92       	push	r0
     372:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     376:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     37a:	0f 92       	push	r0
     37c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     380:	2f 93       	push	r18
     382:	3f 93       	push	r19
     384:	4f 93       	push	r20
     386:	5f 93       	push	r21
     388:	6f 93       	push	r22
     38a:	7f 93       	push	r23
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25
     390:	af 93       	push	r26
     392:	bf 93       	push	r27
     394:	ef 93       	push	r30
     396:	ff 93       	push	r31
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <__vector_71+0x52>
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3a4:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <adca_callback>
     3a8:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <adca_callback+0x1>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	9a 83       	std	Y+2, r25	; 0x02
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     3b8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	83 70       	andi	r24, 0x03	; 3
     3c2:	99 27       	eor	r25, r25
     3c4:	89 2b       	or	r24, r25
     3c6:	39 f4       	brne	.+14     	; 0x3d6 <__vector_71+0x8a>
		index += 2;
     3c8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ca:	8e 5f       	subi	r24, 0xFE	; 254
     3cc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     3ce:	8b 81       	ldd	r24, Y+3	; 0x03
     3d0:	86 95       	lsr	r24
     3d2:	86 95       	lsr	r24
     3d4:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	81 70       	andi	r24, 0x01	; 1
     3de:	99 27       	eor	r25, r25
     3e0:	89 2b       	or	r24, r25
     3e2:	19 f4       	brne	.+6      	; 0x3ea <__vector_71+0x9e>
		index++;
     3e4:	8c 81       	ldd	r24, Y+4	; 0x04
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	ac 01       	movw	r20, r24
     3f0:	40 5e       	subi	r20, 0xE0	; 224
     3f2:	5f 4f       	sbci	r21, 0xFF	; 255
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	84 0f       	add	r24, r20
     408:	95 1f       	adc	r25, r21
     40a:	fc 01       	movw	r30, r24
     40c:	84 81       	ldd	r24, Z+4	; 0x04
     40e:	95 81       	ldd	r25, Z+5	; 0x05
     410:	ac 01       	movw	r20, r24
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	f9 01       	movw	r30, r18
     41a:	19 95       	eicall
}
     41c:	00 00       	nop
     41e:	24 96       	adiw	r28, 0x04	; 4
     420:	cd bf       	out	0x3d, r28	; 61
     422:	de bf       	out	0x3e, r29	; 62
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	7f 91       	pop	r23
     436:	6f 91       	pop	r22
     438:	5f 91       	pop	r21
     43a:	4f 91       	pop	r20
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     446:	0f 90       	pop	r0
     448:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     44c:	0f 90       	pop	r0
     44e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     452:	0f 90       	pop	r0
     454:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     458:	0f 90       	pop	r0
     45a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     474:	0f 92       	push	r0
     476:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     47a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     47e:	0f 92       	push	r0
     480:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     484:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     488:	0f 92       	push	r0
     48a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     48e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     492:	0f 92       	push	r0
     494:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	5f 93       	push	r21
     4a0:	6f 93       	push	r22
     4a2:	7f 93       	push	r23
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	ef 93       	push	r30
     4ae:	ff 93       	push	r31
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <__vector_72+0x52>
     4b6:	1f 92       	push	r1
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     4bc:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <adca_callback>
     4c0:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <adca_callback+0x1>
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	89 83       	std	Y+1, r24	; 0x01
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     4d0:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	83 70       	andi	r24, 0x03	; 3
     4da:	99 27       	eor	r25, r25
     4dc:	89 2b       	or	r24, r25
     4de:	39 f4       	brne	.+14     	; 0x4ee <__vector_72+0x8a>
		index += 2;
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
     4e2:	8e 5f       	subi	r24, 0xFE	; 254
     4e4:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	86 95       	lsr	r24
     4ea:	86 95       	lsr	r24
     4ec:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     4ee:	8b 81       	ldd	r24, Y+3	; 0x03
     4f0:	88 2f       	mov	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	99 27       	eor	r25, r25
     4f8:	89 2b       	or	r24, r25
     4fa:	19 f4       	brne	.+6      	; 0x502 <__vector_72+0x9e>
		index++;
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	8f 5f       	subi	r24, 0xFF	; 255
     500:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	ac 01       	movw	r20, r24
     508:	40 5e       	subi	r20, 0xE0	; 224
     50a:	5f 4f       	sbci	r21, 0xFF	; 255
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	84 0f       	add	r24, r20
     520:	95 1f       	adc	r25, r21
     522:	fc 01       	movw	r30, r24
     524:	84 81       	ldd	r24, Z+4	; 0x04
     526:	95 81       	ldd	r25, Z+5	; 0x05
     528:	ac 01       	movw	r20, r24
     52a:	62 e0       	ldi	r22, 0x02	; 2
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	f9 01       	movw	r30, r18
     532:	19 95       	eicall
}
     534:	00 00       	nop
     536:	24 96       	adiw	r28, 0x04	; 4
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	bf 91       	pop	r27
     546:	af 91       	pop	r26
     548:	9f 91       	pop	r25
     54a:	8f 91       	pop	r24
     54c:	7f 91       	pop	r23
     54e:	6f 91       	pop	r22
     550:	5f 91       	pop	r21
     552:	4f 91       	pop	r20
     554:	3f 91       	pop	r19
     556:	2f 91       	pop	r18
     558:	0f 90       	pop	r0
     55a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     55e:	0f 90       	pop	r0
     560:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     564:	0f 90       	pop	r0
     566:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     56a:	0f 90       	pop	r0
     56c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     570:	0f 90       	pop	r0
     572:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     58c:	0f 92       	push	r0
     58e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     592:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     596:	0f 92       	push	r0
     598:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     59c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     5a0:	0f 92       	push	r0
     5a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     5a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     5aa:	0f 92       	push	r0
     5ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <__vector_73+0x52>
     5ce:	1f 92       	push	r1
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5d4:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <adca_callback>
     5d8:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <adca_callback+0x1>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	84 e0       	ldi	r24, 0x04	; 4
     5e6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     5e8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	88 2f       	mov	r24, r24
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	83 70       	andi	r24, 0x03	; 3
     5f2:	99 27       	eor	r25, r25
     5f4:	89 2b       	or	r24, r25
     5f6:	39 f4       	brne	.+14     	; 0x606 <__vector_73+0x8a>
		index += 2;
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	8e 5f       	subi	r24, 0xFE	; 254
     5fc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	86 95       	lsr	r24
     602:	86 95       	lsr	r24
     604:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	88 2f       	mov	r24, r24
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	81 70       	andi	r24, 0x01	; 1
     60e:	99 27       	eor	r25, r25
     610:	89 2b       	or	r24, r25
     612:	19 f4       	brne	.+6      	; 0x61a <__vector_73+0x9e>
		index++;
     614:	8c 81       	ldd	r24, Y+4	; 0x04
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	ac 01       	movw	r20, r24
     620:	40 5e       	subi	r20, 0xE0	; 224
     622:	5f 4f       	sbci	r21, 0xFF	; 255
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	88 2f       	mov	r24, r24
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	84 0f       	add	r24, r20
     638:	95 1f       	adc	r25, r21
     63a:	fc 01       	movw	r30, r24
     63c:	84 81       	ldd	r24, Z+4	; 0x04
     63e:	95 81       	ldd	r25, Z+5	; 0x05
     640:	ac 01       	movw	r20, r24
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	f9 01       	movw	r30, r18
     64a:	19 95       	eicall
}
     64c:	00 00       	nop
     64e:	24 96       	adiw	r28, 0x04	; 4
     650:	cd bf       	out	0x3d, r28	; 61
     652:	de bf       	out	0x3e, r29	; 62
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	ff 91       	pop	r31
     65a:	ef 91       	pop	r30
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     676:	0f 90       	pop	r0
     678:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     67c:	0f 90       	pop	r0
     67e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     682:	0f 90       	pop	r0
     684:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     688:	0f 90       	pop	r0
     68a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     6a4:	0f 92       	push	r0
     6a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     6aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     6ae:	0f 92       	push	r0
     6b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     6b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     6b8:	0f 92       	push	r0
     6ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     6be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6c2:	0f 92       	push	r0
     6c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6c8:	2f 93       	push	r18
     6ca:	3f 93       	push	r19
     6cc:	4f 93       	push	r20
     6ce:	5f 93       	push	r21
     6d0:	6f 93       	push	r22
     6d2:	7f 93       	push	r23
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	af 93       	push	r26
     6da:	bf 93       	push	r27
     6dc:	ef 93       	push	r30
     6de:	ff 93       	push	r31
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <__vector_74+0x52>
     6e6:	1f 92       	push	r1
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     6ec:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <adca_callback>
     6f0:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <adca_callback+0x1>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	88 e0       	ldi	r24, 0x08	; 8
     6fe:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     700:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	88 2f       	mov	r24, r24
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	83 70       	andi	r24, 0x03	; 3
     70a:	99 27       	eor	r25, r25
     70c:	89 2b       	or	r24, r25
     70e:	39 f4       	brne	.+14     	; 0x71e <__vector_74+0x8a>
		index += 2;
     710:	8c 81       	ldd	r24, Y+4	; 0x04
     712:	8e 5f       	subi	r24, 0xFE	; 254
     714:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	86 95       	lsr	r24
     71a:	86 95       	lsr	r24
     71c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	88 2f       	mov	r24, r24
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	81 70       	andi	r24, 0x01	; 1
     726:	99 27       	eor	r25, r25
     728:	89 2b       	or	r24, r25
     72a:	19 f4       	brne	.+6      	; 0x732 <__vector_74+0x9e>
		index++;
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	ac 01       	movw	r20, r24
     738:	40 5e       	subi	r20, 0xE0	; 224
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	8c 81       	ldd	r24, Y+4	; 0x04
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	84 0f       	add	r24, r20
     750:	95 1f       	adc	r25, r21
     752:	fc 01       	movw	r30, r24
     754:	84 81       	ldd	r24, Z+4	; 0x04
     756:	95 81       	ldd	r25, Z+5	; 0x05
     758:	ac 01       	movw	r20, r24
     75a:	68 e0       	ldi	r22, 0x08	; 8
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	f9 01       	movw	r30, r18
     762:	19 95       	eicall
}
     764:	00 00       	nop
     766:	24 96       	adiw	r28, 0x04	; 4
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     78e:	0f 90       	pop	r0
     790:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     794:	0f 90       	pop	r0
     796:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     79a:	0f 90       	pop	r0
     79c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7a0:	0f 90       	pop	r0
     7a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7bc:	0f 92       	push	r0
     7be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     7c2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7c6:	0f 92       	push	r0
     7c8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     7cc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7d0:	0f 92       	push	r0
     7d2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     7d6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7da:	0f 92       	push	r0
     7dc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <__vector_39+0x52>
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     804:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <adcb_callback>
     808:	30 91 fe 20 	lds	r19, 0x20FE	; 0x8020fe <adcb_callback+0x1>
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     818:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	83 70       	andi	r24, 0x03	; 3
     822:	99 27       	eor	r25, r25
     824:	89 2b       	or	r24, r25
     826:	39 f4       	brne	.+14     	; 0x836 <__vector_39+0x8a>
		index += 2;
     828:	8c 81       	ldd	r24, Y+4	; 0x04
     82a:	8e 5f       	subi	r24, 0xFE	; 254
     82c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	86 95       	lsr	r24
     832:	86 95       	lsr	r24
     834:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	88 2f       	mov	r24, r24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	81 70       	andi	r24, 0x01	; 1
     83e:	99 27       	eor	r25, r25
     840:	89 2b       	or	r24, r25
     842:	19 f4       	brne	.+6      	; 0x84a <__vector_39+0x9e>
		index++;
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
     84e:	ac 01       	movw	r20, r24
     850:	40 5e       	subi	r20, 0xE0	; 224
     852:	5f 4f       	sbci	r21, 0xFF	; 255
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	88 2f       	mov	r24, r24
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	84 0f       	add	r24, r20
     868:	95 1f       	adc	r25, r21
     86a:	fc 01       	movw	r30, r24
     86c:	84 81       	ldd	r24, Z+4	; 0x04
     86e:	95 81       	ldd	r25, Z+5	; 0x05
     870:	ac 01       	movw	r20, r24
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	80 e4       	ldi	r24, 0x40	; 64
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	f9 01       	movw	r30, r18
     87a:	19 95       	eicall
}
     87c:	00 00       	nop
     87e:	24 96       	adiw	r28, 0x04	; 4
     880:	cd bf       	out	0x3d, r28	; 61
     882:	de bf       	out	0x3e, r29	; 62
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	7f 91       	pop	r23
     896:	6f 91       	pop	r22
     898:	5f 91       	pop	r21
     89a:	4f 91       	pop	r20
     89c:	3f 91       	pop	r19
     89e:	2f 91       	pop	r18
     8a0:	0f 90       	pop	r0
     8a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8a6:	0f 90       	pop	r0
     8a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8ac:	0f 90       	pop	r0
     8ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8b2:	0f 90       	pop	r0
     8b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8b8:	0f 90       	pop	r0
     8ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8d4:	0f 92       	push	r0
     8d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8de:	0f 92       	push	r0
     8e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8e8:	0f 92       	push	r0
     8ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8f2:	0f 92       	push	r0
     8f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <__vector_40+0x52>
     916:	1f 92       	push	r1
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     91c:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <adcb_callback>
     920:	30 91 fe 20 	lds	r19, 0x20FE	; 0x8020fe <adcb_callback+0x1>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     930:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	83 70       	andi	r24, 0x03	; 3
     93a:	99 27       	eor	r25, r25
     93c:	89 2b       	or	r24, r25
     93e:	39 f4       	brne	.+14     	; 0x94e <__vector_40+0x8a>
		index += 2;
     940:	8c 81       	ldd	r24, Y+4	; 0x04
     942:	8e 5f       	subi	r24, 0xFE	; 254
     944:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	86 95       	lsr	r24
     94a:	86 95       	lsr	r24
     94c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	88 2f       	mov	r24, r24
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	81 70       	andi	r24, 0x01	; 1
     956:	99 27       	eor	r25, r25
     958:	89 2b       	or	r24, r25
     95a:	19 f4       	brne	.+6      	; 0x962 <__vector_40+0x9e>
		index++;
     95c:	8c 81       	ldd	r24, Y+4	; 0x04
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	ac 01       	movw	r20, r24
     968:	40 5e       	subi	r20, 0xE0	; 224
     96a:	5f 4f       	sbci	r21, 0xFF	; 255
     96c:	8c 81       	ldd	r24, Y+4	; 0x04
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	84 0f       	add	r24, r20
     980:	95 1f       	adc	r25, r21
     982:	fc 01       	movw	r30, r24
     984:	84 81       	ldd	r24, Z+4	; 0x04
     986:	95 81       	ldd	r25, Z+5	; 0x05
     988:	ac 01       	movw	r20, r24
     98a:	62 e0       	ldi	r22, 0x02	; 2
     98c:	80 e4       	ldi	r24, 0x40	; 64
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	f9 01       	movw	r30, r18
     992:	19 95       	eicall
}
     994:	00 00       	nop
     996:	24 96       	adiw	r28, 0x04	; 4
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9be:	0f 90       	pop	r0
     9c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9c4:	0f 90       	pop	r0
     9c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9ca:	0f 90       	pop	r0
     9cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9d0:	0f 90       	pop	r0
     9d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9ec:	0f 92       	push	r0
     9ee:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9f2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9f6:	0f 92       	push	r0
     9f8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9fc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a00:	0f 92       	push	r0
     a02:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a06:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a0a:	0f 92       	push	r0
     a0c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <__vector_41+0x52>
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a34:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <adcb_callback>
     a38:	30 91 fe 20 	lds	r19, 0x20FE	; 0x8020fe <adcb_callback+0x1>
     a3c:	80 e4       	ldi	r24, 0x40	; 64
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     a48:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	88 2f       	mov	r24, r24
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	83 70       	andi	r24, 0x03	; 3
     a52:	99 27       	eor	r25, r25
     a54:	89 2b       	or	r24, r25
     a56:	39 f4       	brne	.+14     	; 0xa66 <__vector_41+0x8a>
		index += 2;
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
     a5a:	8e 5f       	subi	r24, 0xFE	; 254
     a5c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	86 95       	lsr	r24
     a62:	86 95       	lsr	r24
     a64:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	81 70       	andi	r24, 0x01	; 1
     a6e:	99 27       	eor	r25, r25
     a70:	89 2b       	or	r24, r25
     a72:	19 f4       	brne	.+6      	; 0xa7a <__vector_41+0x9e>
		index++;
     a74:	8c 81       	ldd	r24, Y+4	; 0x04
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	ac 01       	movw	r20, r24
     a80:	40 5e       	subi	r20, 0xE0	; 224
     a82:	5f 4f       	sbci	r21, 0xFF	; 255
     a84:	8c 81       	ldd	r24, Y+4	; 0x04
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	84 0f       	add	r24, r20
     a98:	95 1f       	adc	r25, r21
     a9a:	fc 01       	movw	r30, r24
     a9c:	84 81       	ldd	r24, Z+4	; 0x04
     a9e:	95 81       	ldd	r25, Z+5	; 0x05
     aa0:	ac 01       	movw	r20, r24
     aa2:	64 e0       	ldi	r22, 0x04	; 4
     aa4:	80 e4       	ldi	r24, 0x40	; 64
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	f9 01       	movw	r30, r18
     aaa:	19 95       	eicall
}
     aac:	00 00       	nop
     aae:	24 96       	adiw	r28, 0x04	; 4
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad6:	0f 90       	pop	r0
     ad8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     adc:	0f 90       	pop	r0
     ade:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ae2:	0f 90       	pop	r0
     ae4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ae8:	0f 90       	pop	r0
     aea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b04:	0f 92       	push	r0
     b06:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b0a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b0e:	0f 92       	push	r0
     b10:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b14:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b18:	0f 92       	push	r0
     b1a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b1e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b22:	0f 92       	push	r0
     b24:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <__vector_42+0x52>
     b46:	1f 92       	push	r1
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     b4c:	20 91 fd 20 	lds	r18, 0x20FD	; 0x8020fd <adcb_callback>
     b50:	30 91 fe 20 	lds	r19, 0x20FE	; 0x8020fe <adcb_callback+0x1>
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     b60:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 2f       	mov	r24, r24
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	83 70       	andi	r24, 0x03	; 3
     b6a:	99 27       	eor	r25, r25
     b6c:	89 2b       	or	r24, r25
     b6e:	39 f4       	brne	.+14     	; 0xb7e <__vector_42+0x8a>
		index += 2;
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	8e 5f       	subi	r24, 0xFE	; 254
     b74:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	86 95       	lsr	r24
     b7a:	86 95       	lsr	r24
     b7c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	81 70       	andi	r24, 0x01	; 1
     b86:	99 27       	eor	r25, r25
     b88:	89 2b       	or	r24, r25
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__vector_42+0x9e>
		index++;
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	ac 01       	movw	r20, r24
     b98:	40 5e       	subi	r20, 0xE0	; 224
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	84 0f       	add	r24, r20
     bb0:	95 1f       	adc	r25, r21
     bb2:	fc 01       	movw	r30, r24
     bb4:	84 81       	ldd	r24, Z+4	; 0x04
     bb6:	95 81       	ldd	r25, Z+5	; 0x05
     bb8:	ac 01       	movw	r20, r24
     bba:	68 e0       	ldi	r22, 0x08	; 8
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	f9 01       	movw	r30, r18
     bc2:	19 95       	eicall
}
     bc4:	00 00       	nop
     bc6:	24 96       	adiw	r28, 0x04	; 4
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	0f 90       	pop	r0
     bea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bee:	0f 90       	pop	r0
     bf0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bf4:	0f 90       	pop	r0
     bf6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bfa:	0f 90       	pop	r0
     bfc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c00:	0f 90       	pop	r0
     c02:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_119>:
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
	if(DEBUG) printf("%s \n",(const)data);
}

ISR(READ_INTURUPT)
{
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c1c:	0f 92       	push	r0
     c1e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c22:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c26:	0f 92       	push	r0
     c28:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c2c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c30:	0f 92       	push	r0
     c32:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	ef 93       	push	r30
     c3c:	ff 93       	push	r31
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
     c46:	80 ea       	ldi	r24, 0xA0	; 160
     c48:	9b e0       	ldi	r25, 0x0B	; 11
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <XbeeRx>
     c52:	00 00       	nop
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	0f 90       	pop	r0
     c62:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c66:	0f 90       	pop	r0
     c68:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c6c:	0f 90       	pop	r0
     c6e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c72:	0f 90       	pop	r0
     c74:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <gps_init>:
		is_gps_rx_triggered=0;
}
void gps_write(char * data,size_t length)
{
	usart_serial_write_packet(gps_uart.Usart,data,length);
}
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	80 e8       	ldi	r24, 0x80	; 128
     c88:	95 e2       	ldi	r25, 0x25	; 37
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <__data_end+0x6>
     c92:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <__data_end+0x7>
     c96:	a0 93 a0 20 	sts	0x20A0, r26	; 0x8020a0 <__data_end+0x8>
     c9a:	b0 93 a1 20 	sts	0x20A1, r27	; 0x8020a1 <__data_end+0x9>
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	96 e0       	ldi	r25, 0x06	; 6
     ca2:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <__data_end>
     ca6:	90 93 99 20 	sts	0x2099, r25	; 0x802099 <__data_end+0x1>
     caa:	80 eb       	ldi	r24, 0xB0	; 176
     cac:	9a e0       	ldi	r25, 0x0A	; 10
     cae:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <__data_end+0x2>
     cb2:	90 93 9b 20 	sts	0x209B, r25	; 0x80209b <__data_end+0x3>
     cb6:	80 e8       	ldi	r24, 0x80	; 128
     cb8:	80 93 9d 20 	sts	0x209D, r24	; 0x80209d <__data_end+0x5>
     cbc:	80 e4       	ldi	r24, 0x40	; 64
     cbe:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <__data_end+0x4>
     cc2:	88 e9       	ldi	r24, 0x98	; 152
     cc4:	90 e2       	ldi	r25, 0x20	; 32
     cc6:	0e 94 16 21 	call	0x422c	; 0x422c <uart_init>
     cca:	80 eb       	ldi	r24, 0xB0	; 176
     ccc:	9a e0       	ldi	r25, 0x0A	; 10
     cce:	24 e1       	ldi	r18, 0x14	; 20
     cd0:	fc 01       	movw	r30, r24
     cd2:	23 83       	std	Z+3, r18	; 0x03
     cd4:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <is_gps_rx_triggered>
     cd8:	00 00       	nop
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <gps_read>:
uint8_t gps_read()
{
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	return GPS_UART.DATA;
     ce8:	80 eb       	ldi	r24, 0xB0	; 176
     cea:	9a e0       	ldi	r25, 0x0A	; 10
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <__vector_61>:
ISR(GPS_READ_INTERUPT)
{
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     cfe:	0f 92       	push	r0
     d00:	11 24       	eor	r1, r1
     d02:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d06:	0f 92       	push	r0
     d08:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d0c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d10:	0f 92       	push	r0
     d12:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d16:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d1a:	0f 92       	push	r0
     d1c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d20:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d24:	0f 92       	push	r0
     d26:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	rxdata=gps_read();
     d4a:	ca df       	rcall	.-108    	; 0xce0 <gps_read>
     d4c:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <rxdata>
	printf(rxdata);
     d50:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <rxdata>
     d54:	08 2e       	mov	r0, r24
     d56:	00 0c       	add	r0, r0
     d58:	99 0b       	sbc	r25, r25
     d5a:	29 2f       	mov	r18, r25
     d5c:	2f 93       	push	r18
     d5e:	8f 93       	push	r24
     d60:	0e 94 4c 2b 	call	0x5698	; 0x5698 <printf>
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
	is_gps_rx_triggered=1;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <is_gps_rx_triggered>
}
     d6e:	00 00       	nop
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	ff 91       	pop	r31
     d76:	ef 91       	pop	r30
     d78:	bf 91       	pop	r27
     d7a:	af 91       	pop	r26
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	7f 91       	pop	r23
     d82:	6f 91       	pop	r22
     d84:	5f 91       	pop	r21
     d86:	4f 91       	pop	r20
     d88:	3f 91       	pop	r19
     d8a:	2f 91       	pop	r18
     d8c:	0f 90       	pop	r0
     d8e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d92:	0f 90       	pop	r0
     d94:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d98:	0f 90       	pop	r0
     d9a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d9e:	0f 90       	pop	r0
     da0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     da4:	0f 90       	pop	r0
     da6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	1f 92       	push	r1
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     dba:	8f e3       	ldi	r24, 0x3F	; 63
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	fc 01       	movw	r30, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     dc4:	f8 94       	cli
	return flags;
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc8:	0f 90       	pop	r0
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	1f 92       	push	r1
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	29 81       	ldd	r18, Y+1	; 0x01
     de2:	fc 01       	movw	r30, r24
     de4:	20 83       	st	Z, r18
}
     de6:	00 00       	nop
     de8:	0f 90       	pop	r0
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	1f 92       	push	r1
     df6:	1f 92       	push	r1
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     dfe:	d8 df       	rcall	.-80     	; 0xdb0 <cpu_irq_save>
     e00:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     e02:	80 e5       	ldi	r24, 0x50	; 80
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	20 e5       	ldi	r18, 0x50	; 80
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	f9 01       	movw	r30, r18
     e0c:	30 81       	ld	r19, Z
     e0e:	2a 81       	ldd	r18, Y+2	; 0x02
     e10:	23 2b       	or	r18, r19
     e12:	fc 01       	movw	r30, r24
     e14:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	db df       	rcall	.-74     	; 0xdd0 <cpu_irq_restore>
}
     e1a:	00 00       	nop
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	1f 92       	push	r1
     e2c:	1f 92       	push	r1
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     e34:	80 e5       	ldi	r24, 0x50	; 80
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	22 e0       	ldi	r18, 0x02	; 2
     e3a:	fc 01       	movw	r30, r24
     e3c:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
     e3e:	b8 df       	rcall	.-144    	; 0xdb0 <cpu_irq_save>
     e40:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     e42:	80 e5       	ldi	r24, 0x50	; 80
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	20 e5       	ldi	r18, 0x50	; 80
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	30 81       	ld	r19, Z
     e4e:	2a 81       	ldd	r18, Y+2	; 0x02
     e50:	23 2b       	or	r18, r19
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	bb df       	rcall	.-138    	; 0xdd0 <cpu_irq_restore>
}
     e5a:	00 00       	nop
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	1f 92       	push	r1
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     e74:	9d df       	rcall	.-198    	; 0xdb0 <cpu_irq_save>
     e76:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
     e78:	80 e5       	ldi	r24, 0x50	; 80
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	20 e5       	ldi	r18, 0x50	; 80
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	f9 01       	movw	r30, r18
     e82:	20 81       	ld	r18, Z
     e84:	32 2f       	mov	r19, r18
     e86:	2a 81       	ldd	r18, Y+2	; 0x02
     e88:	20 95       	com	r18
     e8a:	23 23       	and	r18, r19
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9e df       	rcall	.-196    	; 0xdd0 <cpu_irq_restore>
}
     e94:	00 00       	nop
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	1f 92       	push	r1
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	88 30       	cpi	r24, 0x08	; 8
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <osc_enable+0x18>
		osc_enable_internal(id);
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9d df       	rcall	.-198    	; 0xdf0 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	b5 df       	rcall	.-150    	; 0xe26 <osc_enable_external>
	}
}
     ebc:	00 00       	nop
     ebe:	0f 90       	pop	r0
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	1f 92       	push	r1
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ed2:	80 e5       	ldi	r24, 0x50	; 80
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	98 23       	and	r25, r24
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	99 23       	and	r25, r25
     ee2:	09 f4       	brne	.+2      	; 0xee6 <osc_is_ready+0x20>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
}
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	1f 92       	push	r1
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
     efa:	00 00       	nop
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	e3 df       	rcall	.-58     	; 0xec6 <osc_is_ready>
     f00:	98 2f       	mov	r25, r24
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 27       	eor	r24, r25
     f06:	88 23       	and	r24, r24
     f08:	c9 f7       	brne	.-14     	; 0xefc <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
     f0a:	00 00       	nop
     f0c:	0f 90       	pop	r0
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	1f 92       	push	r1
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	8a 30       	cpi	r24, 0x0A	; 10
     f28:	91 05       	cpc	r25, r1
     f2a:	a1 f0       	breq	.+40     	; 0xf54 <sysclk_rtcsrc_enable+0x40>
     f2c:	8b 30       	cpi	r24, 0x0B	; 11
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <sysclk_rtcsrc_enable+0x2a>
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	91 05       	cpc	r25, r1
     f36:	71 f0       	breq	.+28     	; 0xf54 <sysclk_rtcsrc_enable+0x40>
     f38:	04 97       	sbiw	r24, 0x04	; 4
     f3a:	39 f0       	breq	.+14     	; 0xf4a <sysclk_rtcsrc_enable+0x36>
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <sysclk_rtcsrc_enable+0x4a>
     f3e:	8c 30       	cpi	r24, 0x0C	; 12
     f40:	91 05       	cpc	r25, r1
     f42:	19 f0       	breq	.+6      	; 0xf4a <sysclk_rtcsrc_enable+0x36>
     f44:	0e 97       	sbiw	r24, 0x0e	; 14
     f46:	31 f0       	breq	.+12     	; 0xf54 <sysclk_rtcsrc_enable+0x40>
     f48:	0a c0       	rjmp	.+20     	; 0xf5e <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
     f4a:	84 e0       	ldi	r24, 0x04	; 4
     f4c:	a9 df       	rcall	.-174    	; 0xea0 <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
     f4e:	84 e0       	ldi	r24, 0x04	; 4
     f50:	ce df       	rcall	.-100    	; 0xeee <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <sysclk_rtcsrc_enable+0x4a>
     f54:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
     f56:	a4 df       	rcall	.-184    	; 0xea0 <osc_enable>
     f58:	88 e0       	ldi	r24, 0x08	; 8
     f5a:	c9 df       	rcall	.-110    	; 0xeee <osc_wait_ready>
		break;
     f5c:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     f5e:	80 e4       	ldi	r24, 0x40	; 64
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	29 81       	ldd	r18, Y+1	; 0x01
     f64:	21 60       	ori	r18, 0x01	; 1
     f66:	fc 01       	movw	r30, r24
     f68:	23 83       	std	Z+3, r18	; 0x03
}
     f6a:	00 00       	nop
     f6c:	0f 90       	pop	r0
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	00 d0       	rcall	.+0      	; 0xf7a <sysclk_init+0x6>
     f7a:	1f 92       	push	r1
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
     f80:	80 e7       	ldi	r24, 0x70	; 112
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
     f88:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     f8a:	1b 82       	std	Y+3, r1	; 0x03
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <sysclk_init+0x34>
		*(reg++) = 0xff;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	9c 01       	movw	r18, r24
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	29 83       	std	Y+1, r18	; 0x01
     f9a:	3a 83       	std	Y+2, r19	; 0x02
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	8b 83       	std	Y+3, r24	; 0x03
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	87 30       	cpi	r24, 0x07	; 7
     fac:	80 f3       	brcs	.-32     	; 0xf8e <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	77 df       	rcall	.-274    	; 0xea0 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	9c df       	rcall	.-200    	; 0xeee <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
     fb6:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	80 e4       	ldi	r24, 0x40	; 64
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	70 d0       	rcall	.+224    	; 0x10a0 <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
     fc4:	11 f4       	brne	.+4      	; 0xfca <sysclk_init+0x56>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
     fc8:	4e df       	rcall	.-356    	; 0xe66 <osc_disable>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	a3 df       	rcall	.-186    	; 0xf14 <sysclk_rtcsrc_enable>
#endif
}
     fce:	24 96       	adiw	r28, 0x04	; 4
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <sysclk_enable_module+0x6>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	8a 83       	std	Y+2, r24	; 0x02
     fe6:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
     fe8:	e3 de       	rcall	.-570    	; 0xdb0 <cpu_irq_save>
     fea:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	80 59       	subi	r24, 0x90	; 144
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	2a 81       	ldd	r18, Y+2	; 0x02
     ff8:	22 2f       	mov	r18, r18
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	20 59       	subi	r18, 0x90	; 144
     ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    1000:	f9 01       	movw	r30, r18
    1002:	20 81       	ld	r18, Z
    1004:	32 2f       	mov	r19, r18
    1006:	2b 81       	ldd	r18, Y+3	; 0x03
    1008:	20 95       	com	r18
    100a:	23 23       	and	r18, r19
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	de de       	rcall	.-580    	; 0xdd0 <cpu_irq_restore>
}
    1014:	00 00       	nop
    1016:	23 96       	adiw	r28, 0x03	; 3
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	00 d0       	rcall	.+0      	; 0x1028 <_read+0x6>
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	8a 83       	std	Y+2, r24	; 0x02
    102e:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    1030:	20 91 99 21 	lds	r18, 0x2199	; 0x802199 <ptr_get>
    1034:	30 91 9a 21 	lds	r19, 0x219A	; 0x80219a <ptr_get+0x1>
    1038:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <stdio_base>
    103c:	90 91 9e 21 	lds	r25, 0x219E	; 0x80219e <stdio_base+0x1>
    1040:	ae 01       	movw	r20, r28
    1042:	4f 5f       	subi	r20, 0xFF	; 255
    1044:	5f 4f       	sbci	r21, 0xFF	; 255
    1046:	ba 01       	movw	r22, r20
    1048:	f9 01       	movw	r30, r18
    104a:	19 95       	eicall
	return c;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	08 2e       	mov	r0, r24
    1050:	00 0c       	add	r0, r0
    1052:	99 0b       	sbc	r25, r25
}
    1054:	23 96       	adiw	r28, 0x03	; 3
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	00 d0       	rcall	.+0      	; 0x1066 <_write+0x6>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6a 83       	std	Y+2, r22	; 0x02
    106e:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    1070:	20 91 9b 21 	lds	r18, 0x219B	; 0x80219b <ptr_put>
    1074:	30 91 9c 21 	lds	r19, 0x219C	; 0x80219c <ptr_put+0x1>
    1078:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <stdio_base>
    107c:	90 91 9e 21 	lds	r25, 0x219E	; 0x80219e <stdio_base+0x1>
    1080:	69 81       	ldd	r22, Y+1	; 0x01
    1082:	f9 01       	movw	r30, r18
    1084:	19 95       	eicall
    1086:	99 23       	and	r25, r25
    1088:	1c f4       	brge	.+6      	; 0x1090 <_write+0x30>
		return -1;
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	9f ef       	ldi	r25, 0xFF	; 255
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <_write+0x34>
	}
	return 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
}
    1094:	23 96       	adiw	r28, 0x03	; 3
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    10a0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    10a2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    10a4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    10a6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    10a8:	60 83       	st	Z, r22
	ret                             // Return to caller
    10aa:	08 95       	ret

000010ac <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    10bc:	0f 92       	push	r0
    10be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    10c2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10c6:	0f 92       	push	r0
    10c8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    10d8:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <rtc_data>
    10dc:	90 91 a0 21 	lds	r25, 0x21A0	; 0x8021a0 <rtc_data+0x1>
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <rtc_data>
    10e6:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <rtc_data+0x1>
}
    10ea:	00 00       	nop
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	0f 90       	pop	r0
    10f6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10fa:	0f 90       	pop	r0
    10fc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1100:	0f 90       	pop	r0
    1102:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    111c:	0f 92       	push	r0
    111e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1122:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1126:	0f 92       	push	r0
    1128:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    112c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1130:	0f 92       	push	r0
    1132:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1136:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    113a:	0f 92       	push	r0
    113c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1140:	2f 93       	push	r18
    1142:	3f 93       	push	r19
    1144:	4f 93       	push	r20
    1146:	5f 93       	push	r21
    1148:	6f 93       	push	r22
    114a:	7f 93       	push	r23
    114c:	8f 93       	push	r24
    114e:	9f 93       	push	r25
    1150:	af 93       	push	r26
    1152:	bf 93       	push	r27
    1154:	ef 93       	push	r30
    1156:	ff 93       	push	r31
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	28 97       	sbiw	r28, 0x08	; 8
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    1166:	20 91 9f 21 	lds	r18, 0x219F	; 0x80219f <rtc_data>
    116a:	30 91 a0 21 	lds	r19, 0x21A0	; 0x8021a0 <rtc_data+0x1>
    116e:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <rtc_data+0x2>
    1172:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <rtc_data+0x3>
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	08 f4       	brcc	.+2      	; 0x117e <__vector_11+0x72>
    117c:	63 c0       	rjmp	.+198    	; 0x1244 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	94 e0       	ldi	r25, 0x04	; 4
    1182:	21 e0       	ldi	r18, 0x01	; 1
    1184:	fc 01       	movw	r30, r24
    1186:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    1188:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <rtc_data+0x6>
    118c:	90 91 a6 21 	lds	r25, 0x21A6	; 0x8021a6 <rtc_data+0x7>
    1190:	89 2b       	or	r24, r25
    1192:	09 f4       	brne	.+2      	; 0x1196 <__vector_11+0x8a>
    1194:	57 c0       	rjmp	.+174    	; 0x1244 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    1196:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <rtc_data>
    119a:	90 91 a0 21 	lds	r25, 0x21A0	; 0x8021a0 <rtc_data+0x1>
    119e:	cc 01       	movw	r24, r24
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	ac 01       	movw	r20, r24
    11a6:	33 27       	eor	r19, r19
    11a8:	22 27       	eor	r18, r18
					| RTC.CNT;
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	94 e0       	ldi	r25, 0x04	; 4
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 85       	ldd	r24, Z+8	; 0x08
    11b2:	91 85       	ldd	r25, Z+9	; 0x09
    11b4:	cc 01       	movw	r24, r24
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    11ba:	82 2b       	or	r24, r18
    11bc:	93 2b       	or	r25, r19
    11be:	a4 2b       	or	r26, r20
    11c0:	b5 2b       	or	r27, r21
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	ab 83       	std	Y+3, r26	; 0x03
    11c8:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    11ca:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <rtc_data+0x2>
    11ce:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <rtc_data+0x3>
    11d2:	cc 01       	movw	r24, r24
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ac 01       	movw	r20, r24
    11da:	33 27       	eor	r19, r19
    11dc:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    11de:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <rtc_data+0x4>
    11e2:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <rtc_data+0x5>
    11e6:	cc 01       	movw	r24, r24
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    11ec:	82 2b       	or	r24, r18
    11ee:	93 2b       	or	r25, r19
    11f0:	a4 2b       	or	r26, r20
    11f2:	b5 2b       	or	r27, r21
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	af 83       	std	Y+7, r26	; 0x07
    11fa:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    11fc:	2d 81       	ldd	r18, Y+5	; 0x05
    11fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1200:	4f 81       	ldd	r20, Y+7	; 0x07
    1202:	58 85       	ldd	r21, Y+8	; 0x08
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	ab 81       	ldd	r26, Y+3	; 0x03
    120a:	bc 81       	ldd	r27, Y+4	; 0x04
    120c:	28 17       	cp	r18, r24
    120e:	39 07       	cpc	r19, r25
    1210:	4a 07       	cpc	r20, r26
    1212:	5b 07       	cpc	r21, r27
    1214:	58 f0       	brcs	.+22     	; 0x122c <__vector_11+0x120>
				count = alarm + 1;
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	af 81       	ldd	r26, Y+7	; 0x07
    121c:	b8 85       	ldd	r27, Y+8	; 0x08
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	a1 1d       	adc	r26, r1
    1222:	b1 1d       	adc	r27, r1
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	ab 83       	std	Y+3, r26	; 0x03
    122a:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    122c:	20 91 a5 21 	lds	r18, 0x21A5	; 0x8021a5 <rtc_data+0x6>
    1230:	30 91 a6 21 	lds	r19, 0x21A6	; 0x8021a6 <rtc_data+0x7>
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	ab 81       	ldd	r26, Y+3	; 0x03
    123a:	bc 81       	ldd	r27, Y+4	; 0x04
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	f9 01       	movw	r30, r18
    1242:	19 95       	eicall
		}
	}
}
    1244:	00 00       	nop
    1246:	28 96       	adiw	r28, 0x08	; 8
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    126e:	0f 90       	pop	r0
    1270:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1274:	0f 90       	pop	r0
    1276:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    127a:	0f 90       	pop	r0
    127c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1280:	0f 90       	pop	r0
    1282:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    129c:	0f 92       	push	r0
    129e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12a2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12a6:	0f 92       	push	r0
    12a8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12ac:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12b0:	0f 92       	push	r0
    12b2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12b6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12ba:	0f 92       	push	r0
    12bc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    12e0:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tcc0_ovf_callback>
    12e4:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tcc0_ovf_callback+0x1>
    12e8:	89 2b       	or	r24, r25
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
    12ec:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tcc0_ovf_callback>
    12f0:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tcc0_ovf_callback+0x1>
    12f4:	fc 01       	movw	r30, r24
    12f6:	19 95       	eicall
	}
}
    12f8:	00 00       	nop
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	ff 91       	pop	r31
    1300:	ef 91       	pop	r30
    1302:	bf 91       	pop	r27
    1304:	af 91       	pop	r26
    1306:	9f 91       	pop	r25
    1308:	8f 91       	pop	r24
    130a:	7f 91       	pop	r23
    130c:	6f 91       	pop	r22
    130e:	5f 91       	pop	r21
    1310:	4f 91       	pop	r20
    1312:	3f 91       	pop	r19
    1314:	2f 91       	pop	r18
    1316:	0f 90       	pop	r0
    1318:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    131c:	0f 90       	pop	r0
    131e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1322:	0f 90       	pop	r0
    1324:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1328:	0f 90       	pop	r0
    132a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    132e:	0f 90       	pop	r0
    1330:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    134a:	0f 92       	push	r0
    134c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1350:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1354:	0f 92       	push	r0
    1356:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    135a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    135e:	0f 92       	push	r0
    1360:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1364:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1368:	0f 92       	push	r0
    136a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	4f 93       	push	r20
    1374:	5f 93       	push	r21
    1376:	6f 93       	push	r22
    1378:	7f 93       	push	r23
    137a:	8f 93       	push	r24
    137c:	9f 93       	push	r25
    137e:	af 93       	push	r26
    1380:	bf 93       	push	r27
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    138e:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tcc0_err_callback>
    1392:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tcc0_err_callback+0x1>
    1396:	89 2b       	or	r24, r25
    1398:	31 f0       	breq	.+12     	; 0x13a6 <__vector_15+0x6c>
		tc_tcc0_err_callback();
    139a:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tcc0_err_callback>
    139e:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tcc0_err_callback+0x1>
    13a2:	fc 01       	movw	r30, r24
    13a4:	19 95       	eicall
	}
}
    13a6:	00 00       	nop
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13ca:	0f 90       	pop	r0
    13cc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13d0:	0f 90       	pop	r0
    13d2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13d6:	0f 90       	pop	r0
    13d8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13dc:	0f 90       	pop	r0
    13de:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13f8:	0f 92       	push	r0
    13fa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13fe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1402:	0f 92       	push	r0
    1404:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1408:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    140c:	0f 92       	push	r0
    140e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1412:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1416:	0f 92       	push	r0
    1418:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	4f 93       	push	r20
    1422:	5f 93       	push	r21
    1424:	6f 93       	push	r22
    1426:	7f 93       	push	r23
    1428:	8f 93       	push	r24
    142a:	9f 93       	push	r25
    142c:	af 93       	push	r26
    142e:	bf 93       	push	r27
    1430:	ef 93       	push	r30
    1432:	ff 93       	push	r31
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    143c:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcc0_cca_callback>
    1440:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcc0_cca_callback+0x1>
    1444:	89 2b       	or	r24, r25
    1446:	31 f0       	breq	.+12     	; 0x1454 <__vector_16+0x6c>
		tc_tcc0_cca_callback();
    1448:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcc0_cca_callback>
    144c:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcc0_cca_callback+0x1>
    1450:	fc 01       	movw	r30, r24
    1452:	19 95       	eicall
	}
}
    1454:	00 00       	nop
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1478:	0f 90       	pop	r0
    147a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    147e:	0f 90       	pop	r0
    1480:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1484:	0f 90       	pop	r0
    1486:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    148a:	0f 90       	pop	r0
    148c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    1496:	1f 92       	push	r1
    1498:	0f 92       	push	r0
    149a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    14a6:	0f 92       	push	r0
    14a8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    14ac:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    14b0:	0f 92       	push	r0
    14b2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    14b6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    14ba:	0f 92       	push	r0
    14bc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    14c0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14c4:	0f 92       	push	r0
    14c6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    14ea:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcc0_ccb_callback>
    14ee:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcc0_ccb_callback+0x1>
    14f2:	89 2b       	or	r24, r25
    14f4:	31 f0       	breq	.+12     	; 0x1502 <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
    14f6:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcc0_ccb_callback>
    14fa:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcc0_ccb_callback+0x1>
    14fe:	fc 01       	movw	r30, r24
    1500:	19 95       	eicall
	}
}
    1502:	00 00       	nop
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	ff 91       	pop	r31
    150a:	ef 91       	pop	r30
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	0f 90       	pop	r0
    1522:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1526:	0f 90       	pop	r0
    1528:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    152c:	0f 90       	pop	r0
    152e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1532:	0f 90       	pop	r0
    1534:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1538:	0f 90       	pop	r0
    153a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    1544:	1f 92       	push	r1
    1546:	0f 92       	push	r0
    1548:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1554:	0f 92       	push	r0
    1556:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    155a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    155e:	0f 92       	push	r0
    1560:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1564:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1568:	0f 92       	push	r0
    156a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    156e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1572:	0f 92       	push	r0
    1574:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1578:	2f 93       	push	r18
    157a:	3f 93       	push	r19
    157c:	4f 93       	push	r20
    157e:	5f 93       	push	r21
    1580:	6f 93       	push	r22
    1582:	7f 93       	push	r23
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	af 93       	push	r26
    158a:	bf 93       	push	r27
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    1598:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcc0_ccc_callback>
    159c:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcc0_ccc_callback+0x1>
    15a0:	89 2b       	or	r24, r25
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
    15a4:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcc0_ccc_callback>
    15a8:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcc0_ccc_callback+0x1>
    15ac:	fc 01       	movw	r30, r24
    15ae:	19 95       	eicall
	}
}
    15b0:	00 00       	nop
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15d4:	0f 90       	pop	r0
    15d6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15da:	0f 90       	pop	r0
    15dc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15e0:	0f 90       	pop	r0
    15e2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15e6:	0f 90       	pop	r0
    15e8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1602:	0f 92       	push	r0
    1604:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1608:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    160c:	0f 92       	push	r0
    160e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1612:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1616:	0f 92       	push	r0
    1618:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    161c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1620:	0f 92       	push	r0
    1622:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1626:	2f 93       	push	r18
    1628:	3f 93       	push	r19
    162a:	4f 93       	push	r20
    162c:	5f 93       	push	r21
    162e:	6f 93       	push	r22
    1630:	7f 93       	push	r23
    1632:	8f 93       	push	r24
    1634:	9f 93       	push	r25
    1636:	af 93       	push	r26
    1638:	bf 93       	push	r27
    163a:	ef 93       	push	r30
    163c:	ff 93       	push	r31
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    1646:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tcc0_ccd_callback>
    164a:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tcc0_ccd_callback+0x1>
    164e:	89 2b       	or	r24, r25
    1650:	31 f0       	breq	.+12     	; 0x165e <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
    1652:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tcc0_ccd_callback>
    1656:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tcc0_ccd_callback+0x1>
    165a:	fc 01       	movw	r30, r24
    165c:	19 95       	eicall
	}
}
    165e:	00 00       	nop
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	ff 91       	pop	r31
    1666:	ef 91       	pop	r30
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	0f 90       	pop	r0
    167e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1682:	0f 90       	pop	r0
    1684:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1688:	0f 90       	pop	r0
    168a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    168e:	0f 90       	pop	r0
    1690:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1694:	0f 90       	pop	r0
    1696:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    16b0:	0f 92       	push	r0
    16b2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    16b6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    16ba:	0f 92       	push	r0
    16bc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    16c0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    16c4:	0f 92       	push	r0
    16c6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    16ca:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    16ce:	0f 92       	push	r0
    16d0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    16f4:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tcc1_ovf_callback>
    16f8:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tcc1_ovf_callback+0x1>
    16fc:	89 2b       	or	r24, r25
    16fe:	31 f0       	breq	.+12     	; 0x170c <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
    1700:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tcc1_ovf_callback>
    1704:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tcc1_ovf_callback+0x1>
    1708:	fc 01       	movw	r30, r24
    170a:	19 95       	eicall
	}
}
    170c:	00 00       	nop
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	ff 91       	pop	r31
    1714:	ef 91       	pop	r30
    1716:	bf 91       	pop	r27
    1718:	af 91       	pop	r26
    171a:	9f 91       	pop	r25
    171c:	8f 91       	pop	r24
    171e:	7f 91       	pop	r23
    1720:	6f 91       	pop	r22
    1722:	5f 91       	pop	r21
    1724:	4f 91       	pop	r20
    1726:	3f 91       	pop	r19
    1728:	2f 91       	pop	r18
    172a:	0f 90       	pop	r0
    172c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1730:	0f 90       	pop	r0
    1732:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1736:	0f 90       	pop	r0
    1738:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    173c:	0f 90       	pop	r0
    173e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1742:	0f 90       	pop	r0
    1744:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1756:	0f 92       	push	r0
    1758:	11 24       	eor	r1, r1
    175a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    175e:	0f 92       	push	r0
    1760:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1764:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1768:	0f 92       	push	r0
    176a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    176e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1772:	0f 92       	push	r0
    1774:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1778:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    177c:	0f 92       	push	r0
    177e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    17a2:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcc1_err_callback>
    17a6:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcc1_err_callback+0x1>
    17aa:	89 2b       	or	r24, r25
    17ac:	31 f0       	breq	.+12     	; 0x17ba <__vector_21+0x6c>
		tc_tcc1_err_callback();
    17ae:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcc1_err_callback>
    17b2:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcc1_err_callback+0x1>
    17b6:	fc 01       	movw	r30, r24
    17b8:	19 95       	eicall
	}
}
    17ba:	00 00       	nop
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    17de:	0f 90       	pop	r0
    17e0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    17e4:	0f 90       	pop	r0
    17e6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17ea:	0f 90       	pop	r0
    17ec:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17f0:	0f 90       	pop	r0
    17f2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    180c:	0f 92       	push	r0
    180e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1812:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1816:	0f 92       	push	r0
    1818:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    181c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1820:	0f 92       	push	r0
    1822:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1826:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    182a:	0f 92       	push	r0
    182c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    1850:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcc1_cca_callback>
    1854:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcc1_cca_callback+0x1>
    1858:	89 2b       	or	r24, r25
    185a:	31 f0       	breq	.+12     	; 0x1868 <__vector_22+0x6c>
		tc_tcc1_cca_callback();
    185c:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcc1_cca_callback>
    1860:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcc1_cca_callback+0x1>
    1864:	fc 01       	movw	r30, r24
    1866:	19 95       	eicall
	}
}
    1868:	00 00       	nop
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    188c:	0f 90       	pop	r0
    188e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1892:	0f 90       	pop	r0
    1894:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1898:	0f 90       	pop	r0
    189a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    189e:	0f 90       	pop	r0
    18a0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    18a4:	0f 90       	pop	r0
    18a6:	1f 90       	pop	r1
    18a8:	18 95       	reti

000018aa <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    18aa:	1f 92       	push	r1
    18ac:	0f 92       	push	r0
    18ae:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    18ba:	0f 92       	push	r0
    18bc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    18c0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18c4:	0f 92       	push	r0
    18c6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18ca:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18ce:	0f 92       	push	r0
    18d0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18d4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18d8:	0f 92       	push	r0
    18da:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    18fe:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcc1_ccb_callback>
    1902:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcc1_ccb_callback+0x1>
    1906:	89 2b       	or	r24, r25
    1908:	31 f0       	breq	.+12     	; 0x1916 <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
    190a:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcc1_ccb_callback>
    190e:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcc1_ccb_callback+0x1>
    1912:	fc 01       	movw	r30, r24
    1914:	19 95       	eicall
	}
}
    1916:	00 00       	nop
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	bf 91       	pop	r27
    1922:	af 91       	pop	r26
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	7f 91       	pop	r23
    192a:	6f 91       	pop	r22
    192c:	5f 91       	pop	r21
    192e:	4f 91       	pop	r20
    1930:	3f 91       	pop	r19
    1932:	2f 91       	pop	r18
    1934:	0f 90       	pop	r0
    1936:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    193a:	0f 90       	pop	r0
    193c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1940:	0f 90       	pop	r0
    1942:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1946:	0f 90       	pop	r0
    1948:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    194c:	0f 90       	pop	r0
    194e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1952:	0f 90       	pop	r0
    1954:	1f 90       	pop	r1
    1956:	18 95       	reti

00001958 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1958:	1f 92       	push	r1
    195a:	0f 92       	push	r0
    195c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1960:	0f 92       	push	r0
    1962:	11 24       	eor	r1, r1
    1964:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1968:	0f 92       	push	r0
    196a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    196e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1972:	0f 92       	push	r0
    1974:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1978:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    197c:	0f 92       	push	r0
    197e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1982:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1986:	0f 92       	push	r0
    1988:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    19ac:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcd0_ovf_callback>
    19b0:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcd0_ovf_callback+0x1>
    19b4:	89 2b       	or	r24, r25
    19b6:	31 f0       	breq	.+12     	; 0x19c4 <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
    19b8:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcd0_ovf_callback>
    19bc:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcd0_ovf_callback+0x1>
    19c0:	fc 01       	movw	r30, r24
    19c2:	19 95       	eicall
	}
}
    19c4:	00 00       	nop
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    19e8:	0f 90       	pop	r0
    19ea:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    19ee:	0f 90       	pop	r0
    19f0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19f4:	0f 90       	pop	r0
    19f6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19fa:	0f 90       	pop	r0
    19fc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a00:	0f 90       	pop	r0
    1a02:	1f 90       	pop	r1
    1a04:	18 95       	reti

00001a06 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1a06:	1f 92       	push	r1
    1a08:	0f 92       	push	r0
    1a0a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a16:	0f 92       	push	r0
    1a18:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a1c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a20:	0f 92       	push	r0
    1a22:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a26:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a2a:	0f 92       	push	r0
    1a2c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a30:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a34:	0f 92       	push	r0
    1a36:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    1a5a:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcd0_err_callback>
    1a5e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcd0_err_callback+0x1>
    1a62:	89 2b       	or	r24, r25
    1a64:	31 f0       	breq	.+12     	; 0x1a72 <__vector_78+0x6c>
		tc_tcd0_err_callback();
    1a66:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcd0_err_callback>
    1a6a:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcd0_err_callback+0x1>
    1a6e:	fc 01       	movw	r30, r24
    1a70:	19 95       	eicall
	}
}
    1a72:	00 00       	nop
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a96:	0f 90       	pop	r0
    1a98:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a9c:	0f 90       	pop	r0
    1a9e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1aa2:	0f 90       	pop	r0
    1aa4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1aa8:	0f 90       	pop	r0
    1aaa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1ab4:	1f 92       	push	r1
    1ab6:	0f 92       	push	r0
    1ab8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1abc:	0f 92       	push	r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ac4:	0f 92       	push	r0
    1ac6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1aca:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ace:	0f 92       	push	r0
    1ad0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ad4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ad8:	0f 92       	push	r0
    1ada:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ade:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ae2:	0f 92       	push	r0
    1ae4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ae8:	2f 93       	push	r18
    1aea:	3f 93       	push	r19
    1aec:	4f 93       	push	r20
    1aee:	5f 93       	push	r21
    1af0:	6f 93       	push	r22
    1af2:	7f 93       	push	r23
    1af4:	8f 93       	push	r24
    1af6:	9f 93       	push	r25
    1af8:	af 93       	push	r26
    1afa:	bf 93       	push	r27
    1afc:	ef 93       	push	r30
    1afe:	ff 93       	push	r31
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    1b08:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tcd0_cca_callback>
    1b0c:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tcd0_cca_callback+0x1>
    1b10:	89 2b       	or	r24, r25
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    1b14:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <tc_tcd0_cca_callback>
    1b18:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <tc_tcd0_cca_callback+0x1>
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	19 95       	eicall
	}
}
    1b20:	00 00       	nop
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b44:	0f 90       	pop	r0
    1b46:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b4a:	0f 90       	pop	r0
    1b4c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b50:	0f 90       	pop	r0
    1b52:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b56:	0f 90       	pop	r0
    1b58:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b5c:	0f 90       	pop	r0
    1b5e:	1f 90       	pop	r1
    1b60:	18 95       	reti

00001b62 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1b62:	1f 92       	push	r1
    1b64:	0f 92       	push	r0
    1b66:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b6a:	0f 92       	push	r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b72:	0f 92       	push	r0
    1b74:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b78:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b7c:	0f 92       	push	r0
    1b7e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b82:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b86:	0f 92       	push	r0
    1b88:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b8c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b90:	0f 92       	push	r0
    1b92:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    1bb6:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tcd0_ccb_callback>
    1bba:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tcd0_ccb_callback+0x1>
    1bbe:	89 2b       	or	r24, r25
    1bc0:	31 f0       	breq	.+12     	; 0x1bce <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    1bc2:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <tc_tcd0_ccb_callback>
    1bc6:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <tc_tcd0_ccb_callback+0x1>
    1bca:	fc 01       	movw	r30, r24
    1bcc:	19 95       	eicall
	}
}
    1bce:	00 00       	nop
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	bf 91       	pop	r27
    1bda:	af 91       	pop	r26
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	7f 91       	pop	r23
    1be2:	6f 91       	pop	r22
    1be4:	5f 91       	pop	r21
    1be6:	4f 91       	pop	r20
    1be8:	3f 91       	pop	r19
    1bea:	2f 91       	pop	r18
    1bec:	0f 90       	pop	r0
    1bee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1bf2:	0f 90       	pop	r0
    1bf4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bf8:	0f 90       	pop	r0
    1bfa:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1bfe:	0f 90       	pop	r0
    1c00:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c04:	0f 90       	pop	r0
    1c06:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c0a:	0f 90       	pop	r0
    1c0c:	1f 90       	pop	r1
    1c0e:	18 95       	reti

00001c10 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1c10:	1f 92       	push	r1
    1c12:	0f 92       	push	r0
    1c14:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c18:	0f 92       	push	r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c20:	0f 92       	push	r0
    1c22:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c26:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c2a:	0f 92       	push	r0
    1c2c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c30:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c34:	0f 92       	push	r0
    1c36:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c3a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c3e:	0f 92       	push	r0
    1c40:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c44:	2f 93       	push	r18
    1c46:	3f 93       	push	r19
    1c48:	4f 93       	push	r20
    1c4a:	5f 93       	push	r21
    1c4c:	6f 93       	push	r22
    1c4e:	7f 93       	push	r23
    1c50:	8f 93       	push	r24
    1c52:	9f 93       	push	r25
    1c54:	af 93       	push	r26
    1c56:	bf 93       	push	r27
    1c58:	ef 93       	push	r30
    1c5a:	ff 93       	push	r31
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    1c64:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tcd0_ccc_callback>
    1c68:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tcd0_ccc_callback+0x1>
    1c6c:	89 2b       	or	r24, r25
    1c6e:	31 f0       	breq	.+12     	; 0x1c7c <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    1c70:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <tc_tcd0_ccc_callback>
    1c74:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <tc_tcd0_ccc_callback+0x1>
    1c78:	fc 01       	movw	r30, r24
    1c7a:	19 95       	eicall
	}
}
    1c7c:	00 00       	nop
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	ff 91       	pop	r31
    1c84:	ef 91       	pop	r30
    1c86:	bf 91       	pop	r27
    1c88:	af 91       	pop	r26
    1c8a:	9f 91       	pop	r25
    1c8c:	8f 91       	pop	r24
    1c8e:	7f 91       	pop	r23
    1c90:	6f 91       	pop	r22
    1c92:	5f 91       	pop	r21
    1c94:	4f 91       	pop	r20
    1c96:	3f 91       	pop	r19
    1c98:	2f 91       	pop	r18
    1c9a:	0f 90       	pop	r0
    1c9c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ca0:	0f 90       	pop	r0
    1ca2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ca6:	0f 90       	pop	r0
    1ca8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cac:	0f 90       	pop	r0
    1cae:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cb2:	0f 90       	pop	r0
    1cb4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	18 95       	reti

00001cbe <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1cc6:	0f 92       	push	r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cce:	0f 92       	push	r0
    1cd0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cd4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cd8:	0f 92       	push	r0
    1cda:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cde:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ce2:	0f 92       	push	r0
    1ce4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ce8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1cec:	0f 92       	push	r0
    1cee:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1cf2:	2f 93       	push	r18
    1cf4:	3f 93       	push	r19
    1cf6:	4f 93       	push	r20
    1cf8:	5f 93       	push	r21
    1cfa:	6f 93       	push	r22
    1cfc:	7f 93       	push	r23
    1cfe:	8f 93       	push	r24
    1d00:	9f 93       	push	r25
    1d02:	af 93       	push	r26
    1d04:	bf 93       	push	r27
    1d06:	ef 93       	push	r30
    1d08:	ff 93       	push	r31
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    1d12:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcd0_ccd_callback>
    1d16:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcd0_ccd_callback+0x1>
    1d1a:	89 2b       	or	r24, r25
    1d1c:	31 f0       	breq	.+12     	; 0x1d2a <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    1d1e:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <tc_tcd0_ccd_callback>
    1d22:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <tc_tcd0_ccd_callback+0x1>
    1d26:	fc 01       	movw	r30, r24
    1d28:	19 95       	eicall
	}
}
    1d2a:	00 00       	nop
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	0f 90       	pop	r0
    1d4a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d4e:	0f 90       	pop	r0
    1d50:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d54:	0f 90       	pop	r0
    1d56:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d5a:	0f 90       	pop	r0
    1d5c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d60:	0f 90       	pop	r0
    1d62:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d66:	0f 90       	pop	r0
    1d68:	1f 90       	pop	r1
    1d6a:	18 95       	reti

00001d6c <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1d6c:	1f 92       	push	r1
    1d6e:	0f 92       	push	r0
    1d70:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d7c:	0f 92       	push	r0
    1d7e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d82:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d86:	0f 92       	push	r0
    1d88:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d8c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d90:	0f 92       	push	r0
    1d92:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d96:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d9a:	0f 92       	push	r0
    1d9c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1da0:	2f 93       	push	r18
    1da2:	3f 93       	push	r19
    1da4:	4f 93       	push	r20
    1da6:	5f 93       	push	r21
    1da8:	6f 93       	push	r22
    1daa:	7f 93       	push	r23
    1dac:	8f 93       	push	r24
    1dae:	9f 93       	push	r25
    1db0:	af 93       	push	r26
    1db2:	bf 93       	push	r27
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    1dc0:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcd1_ovf_callback>
    1dc4:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcd1_ovf_callback+0x1>
    1dc8:	89 2b       	or	r24, r25
    1dca:	31 f0       	breq	.+12     	; 0x1dd8 <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    1dcc:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <tc_tcd1_ovf_callback>
    1dd0:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <tc_tcd1_ovf_callback+0x1>
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	19 95       	eicall
	}
}
    1dd8:	00 00       	nop
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	ff 91       	pop	r31
    1de0:	ef 91       	pop	r30
    1de2:	bf 91       	pop	r27
    1de4:	af 91       	pop	r26
    1de6:	9f 91       	pop	r25
    1de8:	8f 91       	pop	r24
    1dea:	7f 91       	pop	r23
    1dec:	6f 91       	pop	r22
    1dee:	5f 91       	pop	r21
    1df0:	4f 91       	pop	r20
    1df2:	3f 91       	pop	r19
    1df4:	2f 91       	pop	r18
    1df6:	0f 90       	pop	r0
    1df8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1dfc:	0f 90       	pop	r0
    1dfe:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e02:	0f 90       	pop	r0
    1e04:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e08:	0f 90       	pop	r0
    1e0a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e0e:	0f 90       	pop	r0
    1e10:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e22:	0f 92       	push	r0
    1e24:	11 24       	eor	r1, r1
    1e26:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e2a:	0f 92       	push	r0
    1e2c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e30:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e34:	0f 92       	push	r0
    1e36:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e3a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e3e:	0f 92       	push	r0
    1e40:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e44:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e48:	0f 92       	push	r0
    1e4a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e4e:	2f 93       	push	r18
    1e50:	3f 93       	push	r19
    1e52:	4f 93       	push	r20
    1e54:	5f 93       	push	r21
    1e56:	6f 93       	push	r22
    1e58:	7f 93       	push	r23
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
    1e5e:	af 93       	push	r26
    1e60:	bf 93       	push	r27
    1e62:	ef 93       	push	r30
    1e64:	ff 93       	push	r31
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    1e6e:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcd1_err_callback>
    1e72:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcd1_err_callback+0x1>
    1e76:	89 2b       	or	r24, r25
    1e78:	31 f0       	breq	.+12     	; 0x1e86 <__vector_84+0x6c>
		tc_tcd1_err_callback();
    1e7a:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <tc_tcd1_err_callback>
    1e7e:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <tc_tcd1_err_callback+0x1>
    1e82:	fc 01       	movw	r30, r24
    1e84:	19 95       	eicall
	}
}
    1e86:	00 00       	nop
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	ff 91       	pop	r31
    1e8e:	ef 91       	pop	r30
    1e90:	bf 91       	pop	r27
    1e92:	af 91       	pop	r26
    1e94:	9f 91       	pop	r25
    1e96:	8f 91       	pop	r24
    1e98:	7f 91       	pop	r23
    1e9a:	6f 91       	pop	r22
    1e9c:	5f 91       	pop	r21
    1e9e:	4f 91       	pop	r20
    1ea0:	3f 91       	pop	r19
    1ea2:	2f 91       	pop	r18
    1ea4:	0f 90       	pop	r0
    1ea6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1eaa:	0f 90       	pop	r0
    1eac:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1eb0:	0f 90       	pop	r0
    1eb2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1eb6:	0f 90       	pop	r0
    1eb8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ebc:	0f 90       	pop	r0
    1ebe:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1ec8:	1f 92       	push	r1
    1eca:	0f 92       	push	r0
    1ecc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ed0:	0f 92       	push	r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ed8:	0f 92       	push	r0
    1eda:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ede:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ee2:	0f 92       	push	r0
    1ee4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ee8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1eec:	0f 92       	push	r0
    1eee:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ef2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ef6:	0f 92       	push	r0
    1ef8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	4f 93       	push	r20
    1f02:	5f 93       	push	r21
    1f04:	6f 93       	push	r22
    1f06:	7f 93       	push	r23
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    1f1c:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcd1_cca_callback>
    1f20:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcd1_cca_callback+0x1>
    1f24:	89 2b       	or	r24, r25
    1f26:	31 f0       	breq	.+12     	; 0x1f34 <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    1f28:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <tc_tcd1_cca_callback>
    1f2c:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <tc_tcd1_cca_callback+0x1>
    1f30:	fc 01       	movw	r30, r24
    1f32:	19 95       	eicall
	}
}
    1f34:	00 00       	nop
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	ff 91       	pop	r31
    1f3c:	ef 91       	pop	r30
    1f3e:	bf 91       	pop	r27
    1f40:	af 91       	pop	r26
    1f42:	9f 91       	pop	r25
    1f44:	8f 91       	pop	r24
    1f46:	7f 91       	pop	r23
    1f48:	6f 91       	pop	r22
    1f4a:	5f 91       	pop	r21
    1f4c:	4f 91       	pop	r20
    1f4e:	3f 91       	pop	r19
    1f50:	2f 91       	pop	r18
    1f52:	0f 90       	pop	r0
    1f54:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f58:	0f 90       	pop	r0
    1f5a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f5e:	0f 90       	pop	r0
    1f60:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f64:	0f 90       	pop	r0
    1f66:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f6a:	0f 90       	pop	r0
    1f6c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f70:	0f 90       	pop	r0
    1f72:	1f 90       	pop	r1
    1f74:	18 95       	reti

00001f76 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1f76:	1f 92       	push	r1
    1f78:	0f 92       	push	r0
    1f7a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f7e:	0f 92       	push	r0
    1f80:	11 24       	eor	r1, r1
    1f82:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f86:	0f 92       	push	r0
    1f88:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f8c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f90:	0f 92       	push	r0
    1f92:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f96:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f9a:	0f 92       	push	r0
    1f9c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1fa0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1fa4:	0f 92       	push	r0
    1fa6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1faa:	2f 93       	push	r18
    1fac:	3f 93       	push	r19
    1fae:	4f 93       	push	r20
    1fb0:	5f 93       	push	r21
    1fb2:	6f 93       	push	r22
    1fb4:	7f 93       	push	r23
    1fb6:	8f 93       	push	r24
    1fb8:	9f 93       	push	r25
    1fba:	af 93       	push	r26
    1fbc:	bf 93       	push	r27
    1fbe:	ef 93       	push	r30
    1fc0:	ff 93       	push	r31
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    1fca:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcd1_ccb_callback>
    1fce:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcd1_ccb_callback+0x1>
    1fd2:	89 2b       	or	r24, r25
    1fd4:	31 f0       	breq	.+12     	; 0x1fe2 <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    1fd6:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <tc_tcd1_ccb_callback>
    1fda:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <tc_tcd1_ccb_callback+0x1>
    1fde:	fc 01       	movw	r30, r24
    1fe0:	19 95       	eicall
	}
}
    1fe2:	00 00       	nop
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	ff 91       	pop	r31
    1fea:	ef 91       	pop	r30
    1fec:	bf 91       	pop	r27
    1fee:	af 91       	pop	r26
    1ff0:	9f 91       	pop	r25
    1ff2:	8f 91       	pop	r24
    1ff4:	7f 91       	pop	r23
    1ff6:	6f 91       	pop	r22
    1ff8:	5f 91       	pop	r21
    1ffa:	4f 91       	pop	r20
    1ffc:	3f 91       	pop	r19
    1ffe:	2f 91       	pop	r18
    2000:	0f 90       	pop	r0
    2002:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2006:	0f 90       	pop	r0
    2008:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    200c:	0f 90       	pop	r0
    200e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2012:	0f 90       	pop	r0
    2014:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2018:	0f 90       	pop	r0
    201a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    2024:	1f 92       	push	r1
    2026:	0f 92       	push	r0
    2028:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    202c:	0f 92       	push	r0
    202e:	11 24       	eor	r1, r1
    2030:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2034:	0f 92       	push	r0
    2036:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    203a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    203e:	0f 92       	push	r0
    2040:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2044:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2048:	0f 92       	push	r0
    204a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    204e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2052:	0f 92       	push	r0
    2054:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2058:	2f 93       	push	r18
    205a:	3f 93       	push	r19
    205c:	4f 93       	push	r20
    205e:	5f 93       	push	r21
    2060:	6f 93       	push	r22
    2062:	7f 93       	push	r23
    2064:	8f 93       	push	r24
    2066:	9f 93       	push	r25
    2068:	af 93       	push	r26
    206a:	bf 93       	push	r27
    206c:	ef 93       	push	r30
    206e:	ff 93       	push	r31
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    2078:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tce0_ovf_callback>
    207c:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tce0_ovf_callback+0x1>
    2080:	89 2b       	or	r24, r25
    2082:	31 f0       	breq	.+12     	; 0x2090 <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    2084:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <tc_tce0_ovf_callback>
    2088:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <tc_tce0_ovf_callback+0x1>
    208c:	fc 01       	movw	r30, r24
    208e:	19 95       	eicall
	}
}
    2090:	00 00       	nop
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	ff 91       	pop	r31
    2098:	ef 91       	pop	r30
    209a:	bf 91       	pop	r27
    209c:	af 91       	pop	r26
    209e:	9f 91       	pop	r25
    20a0:	8f 91       	pop	r24
    20a2:	7f 91       	pop	r23
    20a4:	6f 91       	pop	r22
    20a6:	5f 91       	pop	r21
    20a8:	4f 91       	pop	r20
    20aa:	3f 91       	pop	r19
    20ac:	2f 91       	pop	r18
    20ae:	0f 90       	pop	r0
    20b0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20b4:	0f 90       	pop	r0
    20b6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20ba:	0f 90       	pop	r0
    20bc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20c0:	0f 90       	pop	r0
    20c2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20c6:	0f 90       	pop	r0
    20c8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20cc:	0f 90       	pop	r0
    20ce:	1f 90       	pop	r1
    20d0:	18 95       	reti

000020d2 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    20d2:	1f 92       	push	r1
    20d4:	0f 92       	push	r0
    20d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20e2:	0f 92       	push	r0
    20e4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20e8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20ec:	0f 92       	push	r0
    20ee:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20f2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20f6:	0f 92       	push	r0
    20f8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20fc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2100:	0f 92       	push	r0
    2102:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2106:	2f 93       	push	r18
    2108:	3f 93       	push	r19
    210a:	4f 93       	push	r20
    210c:	5f 93       	push	r21
    210e:	6f 93       	push	r22
    2110:	7f 93       	push	r23
    2112:	8f 93       	push	r24
    2114:	9f 93       	push	r25
    2116:	af 93       	push	r26
    2118:	bf 93       	push	r27
    211a:	ef 93       	push	r30
    211c:	ff 93       	push	r31
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    2126:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tce0_err_callback>
    212a:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tce0_err_callback+0x1>
    212e:	89 2b       	or	r24, r25
    2130:	31 f0       	breq	.+12     	; 0x213e <__vector_48+0x6c>
		tc_tce0_err_callback();
    2132:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <tc_tce0_err_callback>
    2136:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <tc_tce0_err_callback+0x1>
    213a:	fc 01       	movw	r30, r24
    213c:	19 95       	eicall
	}
}
    213e:	00 00       	nop
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	ff 91       	pop	r31
    2146:	ef 91       	pop	r30
    2148:	bf 91       	pop	r27
    214a:	af 91       	pop	r26
    214c:	9f 91       	pop	r25
    214e:	8f 91       	pop	r24
    2150:	7f 91       	pop	r23
    2152:	6f 91       	pop	r22
    2154:	5f 91       	pop	r21
    2156:	4f 91       	pop	r20
    2158:	3f 91       	pop	r19
    215a:	2f 91       	pop	r18
    215c:	0f 90       	pop	r0
    215e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2162:	0f 90       	pop	r0
    2164:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2168:	0f 90       	pop	r0
    216a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    216e:	0f 90       	pop	r0
    2170:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2174:	0f 90       	pop	r0
    2176:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    217a:	0f 90       	pop	r0
    217c:	1f 90       	pop	r1
    217e:	18 95       	reti

00002180 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2188:	0f 92       	push	r0
    218a:	11 24       	eor	r1, r1
    218c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2190:	0f 92       	push	r0
    2192:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2196:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    219a:	0f 92       	push	r0
    219c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    21a0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    21a4:	0f 92       	push	r0
    21a6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    21aa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21ae:	0f 92       	push	r0
    21b0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21b4:	2f 93       	push	r18
    21b6:	3f 93       	push	r19
    21b8:	4f 93       	push	r20
    21ba:	5f 93       	push	r21
    21bc:	6f 93       	push	r22
    21be:	7f 93       	push	r23
    21c0:	8f 93       	push	r24
    21c2:	9f 93       	push	r25
    21c4:	af 93       	push	r26
    21c6:	bf 93       	push	r27
    21c8:	ef 93       	push	r30
    21ca:	ff 93       	push	r31
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    21d4:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tce0_cca_callback>
    21d8:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tce0_cca_callback+0x1>
    21dc:	89 2b       	or	r24, r25
    21de:	31 f0       	breq	.+12     	; 0x21ec <__vector_49+0x6c>
		tc_tce0_cca_callback();
    21e0:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <tc_tce0_cca_callback>
    21e4:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <tc_tce0_cca_callback+0x1>
    21e8:	fc 01       	movw	r30, r24
    21ea:	19 95       	eicall
	}
}
    21ec:	00 00       	nop
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	bf 91       	pop	r27
    21f8:	af 91       	pop	r26
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	7f 91       	pop	r23
    2200:	6f 91       	pop	r22
    2202:	5f 91       	pop	r21
    2204:	4f 91       	pop	r20
    2206:	3f 91       	pop	r19
    2208:	2f 91       	pop	r18
    220a:	0f 90       	pop	r0
    220c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2210:	0f 90       	pop	r0
    2212:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2216:	0f 90       	pop	r0
    2218:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    221c:	0f 90       	pop	r0
    221e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2222:	0f 90       	pop	r0
    2224:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2236:	0f 92       	push	r0
    2238:	11 24       	eor	r1, r1
    223a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    223e:	0f 92       	push	r0
    2240:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2244:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2248:	0f 92       	push	r0
    224a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    224e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2252:	0f 92       	push	r0
    2254:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2258:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    225c:	0f 92       	push	r0
    225e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2262:	2f 93       	push	r18
    2264:	3f 93       	push	r19
    2266:	4f 93       	push	r20
    2268:	5f 93       	push	r21
    226a:	6f 93       	push	r22
    226c:	7f 93       	push	r23
    226e:	8f 93       	push	r24
    2270:	9f 93       	push	r25
    2272:	af 93       	push	r26
    2274:	bf 93       	push	r27
    2276:	ef 93       	push	r30
    2278:	ff 93       	push	r31
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    2282:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tce0_ccb_callback>
    2286:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tce0_ccb_callback+0x1>
    228a:	89 2b       	or	r24, r25
    228c:	31 f0       	breq	.+12     	; 0x229a <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    228e:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <tc_tce0_ccb_callback>
    2292:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <tc_tce0_ccb_callback+0x1>
    2296:	fc 01       	movw	r30, r24
    2298:	19 95       	eicall
	}
}
    229a:	00 00       	nop
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	ff 91       	pop	r31
    22a2:	ef 91       	pop	r30
    22a4:	bf 91       	pop	r27
    22a6:	af 91       	pop	r26
    22a8:	9f 91       	pop	r25
    22aa:	8f 91       	pop	r24
    22ac:	7f 91       	pop	r23
    22ae:	6f 91       	pop	r22
    22b0:	5f 91       	pop	r21
    22b2:	4f 91       	pop	r20
    22b4:	3f 91       	pop	r19
    22b6:	2f 91       	pop	r18
    22b8:	0f 90       	pop	r0
    22ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22be:	0f 90       	pop	r0
    22c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22c4:	0f 90       	pop	r0
    22c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22ca:	0f 90       	pop	r0
    22cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22d0:	0f 90       	pop	r0
    22d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22d6:	0f 90       	pop	r0
    22d8:	1f 90       	pop	r1
    22da:	18 95       	reti

000022dc <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    22dc:	1f 92       	push	r1
    22de:	0f 92       	push	r0
    22e0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22e4:	0f 92       	push	r0
    22e6:	11 24       	eor	r1, r1
    22e8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22ec:	0f 92       	push	r0
    22ee:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22f2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22f6:	0f 92       	push	r0
    22f8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22fc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2300:	0f 92       	push	r0
    2302:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2306:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    230a:	0f 92       	push	r0
    230c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2310:	2f 93       	push	r18
    2312:	3f 93       	push	r19
    2314:	4f 93       	push	r20
    2316:	5f 93       	push	r21
    2318:	6f 93       	push	r22
    231a:	7f 93       	push	r23
    231c:	8f 93       	push	r24
    231e:	9f 93       	push	r25
    2320:	af 93       	push	r26
    2322:	bf 93       	push	r27
    2324:	ef 93       	push	r30
    2326:	ff 93       	push	r31
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    2330:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tce0_ccc_callback>
    2334:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tce0_ccc_callback+0x1>
    2338:	89 2b       	or	r24, r25
    233a:	31 f0       	breq	.+12     	; 0x2348 <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    233c:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <tc_tce0_ccc_callback>
    2340:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <tc_tce0_ccc_callback+0x1>
    2344:	fc 01       	movw	r30, r24
    2346:	19 95       	eicall
	}
}
    2348:	00 00       	nop
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	ff 91       	pop	r31
    2350:	ef 91       	pop	r30
    2352:	bf 91       	pop	r27
    2354:	af 91       	pop	r26
    2356:	9f 91       	pop	r25
    2358:	8f 91       	pop	r24
    235a:	7f 91       	pop	r23
    235c:	6f 91       	pop	r22
    235e:	5f 91       	pop	r21
    2360:	4f 91       	pop	r20
    2362:	3f 91       	pop	r19
    2364:	2f 91       	pop	r18
    2366:	0f 90       	pop	r0
    2368:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    236c:	0f 90       	pop	r0
    236e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2372:	0f 90       	pop	r0
    2374:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2378:	0f 90       	pop	r0
    237a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    237e:	0f 90       	pop	r0
    2380:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2384:	0f 90       	pop	r0
    2386:	1f 90       	pop	r1
    2388:	18 95       	reti

0000238a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    238a:	1f 92       	push	r1
    238c:	0f 92       	push	r0
    238e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2392:	0f 92       	push	r0
    2394:	11 24       	eor	r1, r1
    2396:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    239a:	0f 92       	push	r0
    239c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    23a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    23a4:	0f 92       	push	r0
    23a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    23aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23ae:	0f 92       	push	r0
    23b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23b8:	0f 92       	push	r0
    23ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23be:	2f 93       	push	r18
    23c0:	3f 93       	push	r19
    23c2:	4f 93       	push	r20
    23c4:	5f 93       	push	r21
    23c6:	6f 93       	push	r22
    23c8:	7f 93       	push	r23
    23ca:	8f 93       	push	r24
    23cc:	9f 93       	push	r25
    23ce:	af 93       	push	r26
    23d0:	bf 93       	push	r27
    23d2:	ef 93       	push	r30
    23d4:	ff 93       	push	r31
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    23de:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <tc_tce0_ccd_callback>
    23e2:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <tc_tce0_ccd_callback+0x1>
    23e6:	89 2b       	or	r24, r25
    23e8:	31 f0       	breq	.+12     	; 0x23f6 <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    23ea:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <tc_tce0_ccd_callback>
    23ee:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <tc_tce0_ccd_callback+0x1>
    23f2:	fc 01       	movw	r30, r24
    23f4:	19 95       	eicall
	}
}
    23f6:	00 00       	nop
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	7f 91       	pop	r23
    240a:	6f 91       	pop	r22
    240c:	5f 91       	pop	r21
    240e:	4f 91       	pop	r20
    2410:	3f 91       	pop	r19
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    241a:	0f 90       	pop	r0
    241c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2420:	0f 90       	pop	r0
    2422:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2426:	0f 90       	pop	r0
    2428:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    242c:	0f 90       	pop	r0
    242e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2432:	0f 90       	pop	r0
    2434:	1f 90       	pop	r1
    2436:	18 95       	reti

00002438 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    2438:	1f 92       	push	r1
    243a:	0f 92       	push	r0
    243c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2448:	0f 92       	push	r0
    244a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    244e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2452:	0f 92       	push	r0
    2454:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2458:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    245c:	0f 92       	push	r0
    245e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2462:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2466:	0f 92       	push	r0
    2468:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    246c:	2f 93       	push	r18
    246e:	3f 93       	push	r19
    2470:	4f 93       	push	r20
    2472:	5f 93       	push	r21
    2474:	6f 93       	push	r22
    2476:	7f 93       	push	r23
    2478:	8f 93       	push	r24
    247a:	9f 93       	push	r25
    247c:	af 93       	push	r26
    247e:	bf 93       	push	r27
    2480:	ef 93       	push	r30
    2482:	ff 93       	push	r31
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    248c:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <tc_tce1_ovf_callback>
    2490:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <tc_tce1_ovf_callback+0x1>
    2494:	89 2b       	or	r24, r25
    2496:	31 f0       	breq	.+12     	; 0x24a4 <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    2498:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <tc_tce1_ovf_callback>
    249c:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <tc_tce1_ovf_callback+0x1>
    24a0:	fc 01       	movw	r30, r24
    24a2:	19 95       	eicall
	}
}
    24a4:	00 00       	nop
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	ff 91       	pop	r31
    24ac:	ef 91       	pop	r30
    24ae:	bf 91       	pop	r27
    24b0:	af 91       	pop	r26
    24b2:	9f 91       	pop	r25
    24b4:	8f 91       	pop	r24
    24b6:	7f 91       	pop	r23
    24b8:	6f 91       	pop	r22
    24ba:	5f 91       	pop	r21
    24bc:	4f 91       	pop	r20
    24be:	3f 91       	pop	r19
    24c0:	2f 91       	pop	r18
    24c2:	0f 90       	pop	r0
    24c4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24c8:	0f 90       	pop	r0
    24ca:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24ce:	0f 90       	pop	r0
    24d0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24d4:	0f 90       	pop	r0
    24d6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24da:	0f 90       	pop	r0
    24dc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24e0:	0f 90       	pop	r0
    24e2:	1f 90       	pop	r1
    24e4:	18 95       	reti

000024e6 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    24e6:	1f 92       	push	r1
    24e8:	0f 92       	push	r0
    24ea:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24f6:	0f 92       	push	r0
    24f8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24fc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2500:	0f 92       	push	r0
    2502:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2506:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    250a:	0f 92       	push	r0
    250c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2510:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2514:	0f 92       	push	r0
    2516:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    251a:	2f 93       	push	r18
    251c:	3f 93       	push	r19
    251e:	4f 93       	push	r20
    2520:	5f 93       	push	r21
    2522:	6f 93       	push	r22
    2524:	7f 93       	push	r23
    2526:	8f 93       	push	r24
    2528:	9f 93       	push	r25
    252a:	af 93       	push	r26
    252c:	bf 93       	push	r27
    252e:	ef 93       	push	r30
    2530:	ff 93       	push	r31
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    253a:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <tc_tce1_err_callback>
    253e:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <tc_tce1_err_callback+0x1>
    2542:	89 2b       	or	r24, r25
    2544:	31 f0       	breq	.+12     	; 0x2552 <__vector_54+0x6c>
		tc_tce1_err_callback();
    2546:	80 91 d8 20 	lds	r24, 0x20D8	; 0x8020d8 <tc_tce1_err_callback>
    254a:	90 91 d9 20 	lds	r25, 0x20D9	; 0x8020d9 <tc_tce1_err_callback+0x1>
    254e:	fc 01       	movw	r30, r24
    2550:	19 95       	eicall
	}
}
    2552:	00 00       	nop
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	ff 91       	pop	r31
    255a:	ef 91       	pop	r30
    255c:	bf 91       	pop	r27
    255e:	af 91       	pop	r26
    2560:	9f 91       	pop	r25
    2562:	8f 91       	pop	r24
    2564:	7f 91       	pop	r23
    2566:	6f 91       	pop	r22
    2568:	5f 91       	pop	r21
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2576:	0f 90       	pop	r0
    2578:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    257c:	0f 90       	pop	r0
    257e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2582:	0f 90       	pop	r0
    2584:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2588:	0f 90       	pop	r0
    258a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    258e:	0f 90       	pop	r0
    2590:	1f 90       	pop	r1
    2592:	18 95       	reti

00002594 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    2594:	1f 92       	push	r1
    2596:	0f 92       	push	r0
    2598:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    259c:	0f 92       	push	r0
    259e:	11 24       	eor	r1, r1
    25a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    25a4:	0f 92       	push	r0
    25a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    25aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25ae:	0f 92       	push	r0
    25b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25b8:	0f 92       	push	r0
    25ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25c2:	0f 92       	push	r0
    25c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25c8:	2f 93       	push	r18
    25ca:	3f 93       	push	r19
    25cc:	4f 93       	push	r20
    25ce:	5f 93       	push	r21
    25d0:	6f 93       	push	r22
    25d2:	7f 93       	push	r23
    25d4:	8f 93       	push	r24
    25d6:	9f 93       	push	r25
    25d8:	af 93       	push	r26
    25da:	bf 93       	push	r27
    25dc:	ef 93       	push	r30
    25de:	ff 93       	push	r31
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    25e8:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <tc_tce1_cca_callback>
    25ec:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <tc_tce1_cca_callback+0x1>
    25f0:	89 2b       	or	r24, r25
    25f2:	31 f0       	breq	.+12     	; 0x2600 <__vector_55+0x6c>
		tc_tce1_cca_callback();
    25f4:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <tc_tce1_cca_callback>
    25f8:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <tc_tce1_cca_callback+0x1>
    25fc:	fc 01       	movw	r30, r24
    25fe:	19 95       	eicall
	}
}
    2600:	00 00       	nop
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	ff 91       	pop	r31
    2608:	ef 91       	pop	r30
    260a:	bf 91       	pop	r27
    260c:	af 91       	pop	r26
    260e:	9f 91       	pop	r25
    2610:	8f 91       	pop	r24
    2612:	7f 91       	pop	r23
    2614:	6f 91       	pop	r22
    2616:	5f 91       	pop	r21
    2618:	4f 91       	pop	r20
    261a:	3f 91       	pop	r19
    261c:	2f 91       	pop	r18
    261e:	0f 90       	pop	r0
    2620:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2624:	0f 90       	pop	r0
    2626:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    262a:	0f 90       	pop	r0
    262c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2630:	0f 90       	pop	r0
    2632:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2636:	0f 90       	pop	r0
    2638:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    263c:	0f 90       	pop	r0
    263e:	1f 90       	pop	r1
    2640:	18 95       	reti

00002642 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    2642:	1f 92       	push	r1
    2644:	0f 92       	push	r0
    2646:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    264a:	0f 92       	push	r0
    264c:	11 24       	eor	r1, r1
    264e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2652:	0f 92       	push	r0
    2654:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2658:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    265c:	0f 92       	push	r0
    265e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2662:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2666:	0f 92       	push	r0
    2668:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    266c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2670:	0f 92       	push	r0
    2672:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2676:	2f 93       	push	r18
    2678:	3f 93       	push	r19
    267a:	4f 93       	push	r20
    267c:	5f 93       	push	r21
    267e:	6f 93       	push	r22
    2680:	7f 93       	push	r23
    2682:	8f 93       	push	r24
    2684:	9f 93       	push	r25
    2686:	af 93       	push	r26
    2688:	bf 93       	push	r27
    268a:	ef 93       	push	r30
    268c:	ff 93       	push	r31
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    2696:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <tc_tce1_ccb_callback>
    269a:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <tc_tce1_ccb_callback+0x1>
    269e:	89 2b       	or	r24, r25
    26a0:	31 f0       	breq	.+12     	; 0x26ae <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    26a2:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <tc_tce1_ccb_callback>
    26a6:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <tc_tce1_ccb_callback+0x1>
    26aa:	fc 01       	movw	r30, r24
    26ac:	19 95       	eicall
	}
}
    26ae:	00 00       	nop
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	ff 91       	pop	r31
    26b6:	ef 91       	pop	r30
    26b8:	bf 91       	pop	r27
    26ba:	af 91       	pop	r26
    26bc:	9f 91       	pop	r25
    26be:	8f 91       	pop	r24
    26c0:	7f 91       	pop	r23
    26c2:	6f 91       	pop	r22
    26c4:	5f 91       	pop	r21
    26c6:	4f 91       	pop	r20
    26c8:	3f 91       	pop	r19
    26ca:	2f 91       	pop	r18
    26cc:	0f 90       	pop	r0
    26ce:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    26d2:	0f 90       	pop	r0
    26d4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    26d8:	0f 90       	pop	r0
    26da:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    26de:	0f 90       	pop	r0
    26e0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    26e4:	0f 90       	pop	r0
    26e6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26ea:	0f 90       	pop	r0
    26ec:	1f 90       	pop	r1
    26ee:	18 95       	reti

000026f0 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    26f0:	1f 92       	push	r1
    26f2:	0f 92       	push	r0
    26f4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    26f8:	0f 92       	push	r0
    26fa:	11 24       	eor	r1, r1
    26fc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2700:	0f 92       	push	r0
    2702:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2706:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    270a:	0f 92       	push	r0
    270c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2710:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2714:	0f 92       	push	r0
    2716:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    271a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    271e:	0f 92       	push	r0
    2720:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2724:	2f 93       	push	r18
    2726:	3f 93       	push	r19
    2728:	4f 93       	push	r20
    272a:	5f 93       	push	r21
    272c:	6f 93       	push	r22
    272e:	7f 93       	push	r23
    2730:	8f 93       	push	r24
    2732:	9f 93       	push	r25
    2734:	af 93       	push	r26
    2736:	bf 93       	push	r27
    2738:	ef 93       	push	r30
    273a:	ff 93       	push	r31
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    2744:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <tc_tcf0_ovf_callback>
    2748:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <tc_tcf0_ovf_callback+0x1>
    274c:	89 2b       	or	r24, r25
    274e:	31 f0       	breq	.+12     	; 0x275c <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    2750:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <tc_tcf0_ovf_callback>
    2754:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <tc_tcf0_ovf_callback+0x1>
    2758:	fc 01       	movw	r30, r24
    275a:	19 95       	eicall
	}
}
    275c:	00 00       	nop
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	ff 91       	pop	r31
    2764:	ef 91       	pop	r30
    2766:	bf 91       	pop	r27
    2768:	af 91       	pop	r26
    276a:	9f 91       	pop	r25
    276c:	8f 91       	pop	r24
    276e:	7f 91       	pop	r23
    2770:	6f 91       	pop	r22
    2772:	5f 91       	pop	r21
    2774:	4f 91       	pop	r20
    2776:	3f 91       	pop	r19
    2778:	2f 91       	pop	r18
    277a:	0f 90       	pop	r0
    277c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2780:	0f 90       	pop	r0
    2782:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2786:	0f 90       	pop	r0
    2788:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    278c:	0f 90       	pop	r0
    278e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2792:	0f 90       	pop	r0
    2794:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2798:	0f 90       	pop	r0
    279a:	1f 90       	pop	r1
    279c:	18 95       	reti

0000279e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    279e:	1f 92       	push	r1
    27a0:	0f 92       	push	r0
    27a2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    27a6:	0f 92       	push	r0
    27a8:	11 24       	eor	r1, r1
    27aa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    27ae:	0f 92       	push	r0
    27b0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    27b4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    27b8:	0f 92       	push	r0
    27ba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    27be:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    27c2:	0f 92       	push	r0
    27c4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    27c8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    27cc:	0f 92       	push	r0
    27ce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    27d2:	2f 93       	push	r18
    27d4:	3f 93       	push	r19
    27d6:	4f 93       	push	r20
    27d8:	5f 93       	push	r21
    27da:	6f 93       	push	r22
    27dc:	7f 93       	push	r23
    27de:	8f 93       	push	r24
    27e0:	9f 93       	push	r25
    27e2:	af 93       	push	r26
    27e4:	bf 93       	push	r27
    27e6:	ef 93       	push	r30
    27e8:	ff 93       	push	r31
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    27f2:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <tc_tcf0_err_callback>
    27f6:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <tc_tcf0_err_callback+0x1>
    27fa:	89 2b       	or	r24, r25
    27fc:	31 f0       	breq	.+12     	; 0x280a <__vector_109+0x6c>
		tc_tcf0_err_callback();
    27fe:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <tc_tcf0_err_callback>
    2802:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <tc_tcf0_err_callback+0x1>
    2806:	fc 01       	movw	r30, r24
    2808:	19 95       	eicall
	}
}
    280a:	00 00       	nop
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	ff 91       	pop	r31
    2812:	ef 91       	pop	r30
    2814:	bf 91       	pop	r27
    2816:	af 91       	pop	r26
    2818:	9f 91       	pop	r25
    281a:	8f 91       	pop	r24
    281c:	7f 91       	pop	r23
    281e:	6f 91       	pop	r22
    2820:	5f 91       	pop	r21
    2822:	4f 91       	pop	r20
    2824:	3f 91       	pop	r19
    2826:	2f 91       	pop	r18
    2828:	0f 90       	pop	r0
    282a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    282e:	0f 90       	pop	r0
    2830:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2834:	0f 90       	pop	r0
    2836:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    283a:	0f 90       	pop	r0
    283c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2840:	0f 90       	pop	r0
    2842:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2846:	0f 90       	pop	r0
    2848:	1f 90       	pop	r1
    284a:	18 95       	reti

0000284c <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    284c:	1f 92       	push	r1
    284e:	0f 92       	push	r0
    2850:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2854:	0f 92       	push	r0
    2856:	11 24       	eor	r1, r1
    2858:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    285c:	0f 92       	push	r0
    285e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2862:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2866:	0f 92       	push	r0
    2868:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    286c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2870:	0f 92       	push	r0
    2872:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2876:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    287a:	0f 92       	push	r0
    287c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2880:	2f 93       	push	r18
    2882:	3f 93       	push	r19
    2884:	4f 93       	push	r20
    2886:	5f 93       	push	r21
    2888:	6f 93       	push	r22
    288a:	7f 93       	push	r23
    288c:	8f 93       	push	r24
    288e:	9f 93       	push	r25
    2890:	af 93       	push	r26
    2892:	bf 93       	push	r27
    2894:	ef 93       	push	r30
    2896:	ff 93       	push	r31
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    28a0:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <tc_tcf0_cca_callback>
    28a4:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <tc_tcf0_cca_callback+0x1>
    28a8:	89 2b       	or	r24, r25
    28aa:	31 f0       	breq	.+12     	; 0x28b8 <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    28ac:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <tc_tcf0_cca_callback>
    28b0:	90 91 e3 20 	lds	r25, 0x20E3	; 0x8020e3 <tc_tcf0_cca_callback+0x1>
    28b4:	fc 01       	movw	r30, r24
    28b6:	19 95       	eicall
	}
}
    28b8:	00 00       	nop
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	ff 91       	pop	r31
    28c0:	ef 91       	pop	r30
    28c2:	bf 91       	pop	r27
    28c4:	af 91       	pop	r26
    28c6:	9f 91       	pop	r25
    28c8:	8f 91       	pop	r24
    28ca:	7f 91       	pop	r23
    28cc:	6f 91       	pop	r22
    28ce:	5f 91       	pop	r21
    28d0:	4f 91       	pop	r20
    28d2:	3f 91       	pop	r19
    28d4:	2f 91       	pop	r18
    28d6:	0f 90       	pop	r0
    28d8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    28dc:	0f 90       	pop	r0
    28de:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    28e2:	0f 90       	pop	r0
    28e4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    28e8:	0f 90       	pop	r0
    28ea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    28ee:	0f 90       	pop	r0
    28f0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    28f4:	0f 90       	pop	r0
    28f6:	1f 90       	pop	r1
    28f8:	18 95       	reti

000028fa <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    28fa:	1f 92       	push	r1
    28fc:	0f 92       	push	r0
    28fe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2902:	0f 92       	push	r0
    2904:	11 24       	eor	r1, r1
    2906:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    290a:	0f 92       	push	r0
    290c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2910:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2914:	0f 92       	push	r0
    2916:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    291a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    291e:	0f 92       	push	r0
    2920:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2924:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2928:	0f 92       	push	r0
    292a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    292e:	2f 93       	push	r18
    2930:	3f 93       	push	r19
    2932:	4f 93       	push	r20
    2934:	5f 93       	push	r21
    2936:	6f 93       	push	r22
    2938:	7f 93       	push	r23
    293a:	8f 93       	push	r24
    293c:	9f 93       	push	r25
    293e:	af 93       	push	r26
    2940:	bf 93       	push	r27
    2942:	ef 93       	push	r30
    2944:	ff 93       	push	r31
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    294e:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <tc_tcf0_ccb_callback>
    2952:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <tc_tcf0_ccb_callback+0x1>
    2956:	89 2b       	or	r24, r25
    2958:	31 f0       	breq	.+12     	; 0x2966 <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    295a:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <tc_tcf0_ccb_callback>
    295e:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <tc_tcf0_ccb_callback+0x1>
    2962:	fc 01       	movw	r30, r24
    2964:	19 95       	eicall
	}
}
    2966:	00 00       	nop
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	ff 91       	pop	r31
    296e:	ef 91       	pop	r30
    2970:	bf 91       	pop	r27
    2972:	af 91       	pop	r26
    2974:	9f 91       	pop	r25
    2976:	8f 91       	pop	r24
    2978:	7f 91       	pop	r23
    297a:	6f 91       	pop	r22
    297c:	5f 91       	pop	r21
    297e:	4f 91       	pop	r20
    2980:	3f 91       	pop	r19
    2982:	2f 91       	pop	r18
    2984:	0f 90       	pop	r0
    2986:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    298a:	0f 90       	pop	r0
    298c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2990:	0f 90       	pop	r0
    2992:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2996:	0f 90       	pop	r0
    2998:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    299c:	0f 90       	pop	r0
    299e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    29b0:	0f 92       	push	r0
    29b2:	11 24       	eor	r1, r1
    29b4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    29b8:	0f 92       	push	r0
    29ba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    29be:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29c2:	0f 92       	push	r0
    29c4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    29c8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29cc:	0f 92       	push	r0
    29ce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    29d2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29d6:	0f 92       	push	r0
    29d8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    29dc:	2f 93       	push	r18
    29de:	3f 93       	push	r19
    29e0:	4f 93       	push	r20
    29e2:	5f 93       	push	r21
    29e4:	6f 93       	push	r22
    29e6:	7f 93       	push	r23
    29e8:	8f 93       	push	r24
    29ea:	9f 93       	push	r25
    29ec:	af 93       	push	r26
    29ee:	bf 93       	push	r27
    29f0:	ef 93       	push	r30
    29f2:	ff 93       	push	r31
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    29fc:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <tc_tcf0_ccc_callback>
    2a00:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <tc_tcf0_ccc_callback+0x1>
    2a04:	89 2b       	or	r24, r25
    2a06:	31 f0       	breq	.+12     	; 0x2a14 <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    2a08:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <tc_tcf0_ccc_callback>
    2a0c:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <tc_tcf0_ccc_callback+0x1>
    2a10:	fc 01       	movw	r30, r24
    2a12:	19 95       	eicall
	}
}
    2a14:	00 00       	nop
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	ff 91       	pop	r31
    2a1c:	ef 91       	pop	r30
    2a1e:	bf 91       	pop	r27
    2a20:	af 91       	pop	r26
    2a22:	9f 91       	pop	r25
    2a24:	8f 91       	pop	r24
    2a26:	7f 91       	pop	r23
    2a28:	6f 91       	pop	r22
    2a2a:	5f 91       	pop	r21
    2a2c:	4f 91       	pop	r20
    2a2e:	3f 91       	pop	r19
    2a30:	2f 91       	pop	r18
    2a32:	0f 90       	pop	r0
    2a34:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a38:	0f 90       	pop	r0
    2a3a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a3e:	0f 90       	pop	r0
    2a40:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a44:	0f 90       	pop	r0
    2a46:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a4a:	0f 90       	pop	r0
    2a4c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a50:	0f 90       	pop	r0
    2a52:	1f 90       	pop	r1
    2a54:	18 95       	reti

00002a56 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    2a56:	1f 92       	push	r1
    2a58:	0f 92       	push	r0
    2a5a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2a5e:	0f 92       	push	r0
    2a60:	11 24       	eor	r1, r1
    2a62:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a66:	0f 92       	push	r0
    2a68:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2a6c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a70:	0f 92       	push	r0
    2a72:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2a76:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a7a:	0f 92       	push	r0
    2a7c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2a80:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a84:	0f 92       	push	r0
    2a86:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2a8a:	2f 93       	push	r18
    2a8c:	3f 93       	push	r19
    2a8e:	4f 93       	push	r20
    2a90:	5f 93       	push	r21
    2a92:	6f 93       	push	r22
    2a94:	7f 93       	push	r23
    2a96:	8f 93       	push	r24
    2a98:	9f 93       	push	r25
    2a9a:	af 93       	push	r26
    2a9c:	bf 93       	push	r27
    2a9e:	ef 93       	push	r30
    2aa0:	ff 93       	push	r31
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    2aaa:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <tc_tcf0_ccd_callback>
    2aae:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <tc_tcf0_ccd_callback+0x1>
    2ab2:	89 2b       	or	r24, r25
    2ab4:	31 f0       	breq	.+12     	; 0x2ac2 <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    2ab6:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <tc_tcf0_ccd_callback>
    2aba:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <tc_tcf0_ccd_callback+0x1>
    2abe:	fc 01       	movw	r30, r24
    2ac0:	19 95       	eicall
	}
}
    2ac2:	00 00       	nop
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	ff 91       	pop	r31
    2aca:	ef 91       	pop	r30
    2acc:	bf 91       	pop	r27
    2ace:	af 91       	pop	r26
    2ad0:	9f 91       	pop	r25
    2ad2:	8f 91       	pop	r24
    2ad4:	7f 91       	pop	r23
    2ad6:	6f 91       	pop	r22
    2ad8:	5f 91       	pop	r21
    2ada:	4f 91       	pop	r20
    2adc:	3f 91       	pop	r19
    2ade:	2f 91       	pop	r18
    2ae0:	0f 90       	pop	r0
    2ae2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ae6:	0f 90       	pop	r0
    2ae8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2aec:	0f 90       	pop	r0
    2aee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2af2:	0f 90       	pop	r0
    2af4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2af8:	0f 90       	pop	r0
    2afa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2afe:	0f 90       	pop	r0
    2b00:	1f 90       	pop	r1
    2b02:	18 95       	reti

00002b04 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    2b04:	1f 92       	push	r1
    2b06:	0f 92       	push	r0
    2b08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2b0c:	0f 92       	push	r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b14:	0f 92       	push	r0
    2b16:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2b1a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b1e:	0f 92       	push	r0
    2b20:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2b24:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b28:	0f 92       	push	r0
    2b2a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b32:	0f 92       	push	r0
    2b34:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b38:	2f 93       	push	r18
    2b3a:	3f 93       	push	r19
    2b3c:	4f 93       	push	r20
    2b3e:	5f 93       	push	r21
    2b40:	6f 93       	push	r22
    2b42:	7f 93       	push	r23
    2b44:	8f 93       	push	r24
    2b46:	9f 93       	push	r25
    2b48:	af 93       	push	r26
    2b4a:	bf 93       	push	r27
    2b4c:	ef 93       	push	r30
    2b4e:	ff 93       	push	r31
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    2b58:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <tc_tcf1_ovf_callback>
    2b5c:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <tc_tcf1_ovf_callback+0x1>
    2b60:	89 2b       	or	r24, r25
    2b62:	31 f0       	breq	.+12     	; 0x2b70 <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    2b64:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <tc_tcf1_ovf_callback>
    2b68:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <tc_tcf1_ovf_callback+0x1>
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	19 95       	eicall
	}
}
    2b70:	00 00       	nop
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	ff 91       	pop	r31
    2b78:	ef 91       	pop	r30
    2b7a:	bf 91       	pop	r27
    2b7c:	af 91       	pop	r26
    2b7e:	9f 91       	pop	r25
    2b80:	8f 91       	pop	r24
    2b82:	7f 91       	pop	r23
    2b84:	6f 91       	pop	r22
    2b86:	5f 91       	pop	r21
    2b88:	4f 91       	pop	r20
    2b8a:	3f 91       	pop	r19
    2b8c:	2f 91       	pop	r18
    2b8e:	0f 90       	pop	r0
    2b90:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2b94:	0f 90       	pop	r0
    2b96:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2b9a:	0f 90       	pop	r0
    2b9c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ba0:	0f 90       	pop	r0
    2ba2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ba6:	0f 90       	pop	r0
    2ba8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2bac:	0f 90       	pop	r0
    2bae:	1f 90       	pop	r1
    2bb0:	18 95       	reti

00002bb2 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    2bb2:	1f 92       	push	r1
    2bb4:	0f 92       	push	r0
    2bb6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2bba:	0f 92       	push	r0
    2bbc:	11 24       	eor	r1, r1
    2bbe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2bc2:	0f 92       	push	r0
    2bc4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2bc8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2bcc:	0f 92       	push	r0
    2bce:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2bd2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bd6:	0f 92       	push	r0
    2bd8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2bdc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2be0:	0f 92       	push	r0
    2be2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2be6:	2f 93       	push	r18
    2be8:	3f 93       	push	r19
    2bea:	4f 93       	push	r20
    2bec:	5f 93       	push	r21
    2bee:	6f 93       	push	r22
    2bf0:	7f 93       	push	r23
    2bf2:	8f 93       	push	r24
    2bf4:	9f 93       	push	r25
    2bf6:	af 93       	push	r26
    2bf8:	bf 93       	push	r27
    2bfa:	ef 93       	push	r30
    2bfc:	ff 93       	push	r31
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    2c06:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <tc_tcf1_err_callback>
    2c0a:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <tc_tcf1_err_callback+0x1>
    2c0e:	89 2b       	or	r24, r25
    2c10:	31 f0       	breq	.+12     	; 0x2c1e <__vector_115+0x6c>
		tc_tcf1_err_callback();
    2c12:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <tc_tcf1_err_callback>
    2c16:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <tc_tcf1_err_callback+0x1>
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	19 95       	eicall
	}
}
    2c1e:	00 00       	nop
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	ff 91       	pop	r31
    2c26:	ef 91       	pop	r30
    2c28:	bf 91       	pop	r27
    2c2a:	af 91       	pop	r26
    2c2c:	9f 91       	pop	r25
    2c2e:	8f 91       	pop	r24
    2c30:	7f 91       	pop	r23
    2c32:	6f 91       	pop	r22
    2c34:	5f 91       	pop	r21
    2c36:	4f 91       	pop	r20
    2c38:	3f 91       	pop	r19
    2c3a:	2f 91       	pop	r18
    2c3c:	0f 90       	pop	r0
    2c3e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c42:	0f 90       	pop	r0
    2c44:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c48:	0f 90       	pop	r0
    2c4a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c4e:	0f 90       	pop	r0
    2c50:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c54:	0f 90       	pop	r0
    2c56:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c5a:	0f 90       	pop	r0
    2c5c:	1f 90       	pop	r1
    2c5e:	18 95       	reti

00002c60 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    2c60:	1f 92       	push	r1
    2c62:	0f 92       	push	r0
    2c64:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2c68:	0f 92       	push	r0
    2c6a:	11 24       	eor	r1, r1
    2c6c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c70:	0f 92       	push	r0
    2c72:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2c76:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c7a:	0f 92       	push	r0
    2c7c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2c80:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c84:	0f 92       	push	r0
    2c86:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2c8a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c8e:	0f 92       	push	r0
    2c90:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2c94:	2f 93       	push	r18
    2c96:	3f 93       	push	r19
    2c98:	4f 93       	push	r20
    2c9a:	5f 93       	push	r21
    2c9c:	6f 93       	push	r22
    2c9e:	7f 93       	push	r23
    2ca0:	8f 93       	push	r24
    2ca2:	9f 93       	push	r25
    2ca4:	af 93       	push	r26
    2ca6:	bf 93       	push	r27
    2ca8:	ef 93       	push	r30
    2caa:	ff 93       	push	r31
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    2cb4:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <tc_tcf1_cca_callback>
    2cb8:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <tc_tcf1_cca_callback+0x1>
    2cbc:	89 2b       	or	r24, r25
    2cbe:	31 f0       	breq	.+12     	; 0x2ccc <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    2cc0:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <tc_tcf1_cca_callback>
    2cc4:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <tc_tcf1_cca_callback+0x1>
    2cc8:	fc 01       	movw	r30, r24
    2cca:	19 95       	eicall
	}
}
    2ccc:	00 00       	nop
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	ff 91       	pop	r31
    2cd4:	ef 91       	pop	r30
    2cd6:	bf 91       	pop	r27
    2cd8:	af 91       	pop	r26
    2cda:	9f 91       	pop	r25
    2cdc:	8f 91       	pop	r24
    2cde:	7f 91       	pop	r23
    2ce0:	6f 91       	pop	r22
    2ce2:	5f 91       	pop	r21
    2ce4:	4f 91       	pop	r20
    2ce6:	3f 91       	pop	r19
    2ce8:	2f 91       	pop	r18
    2cea:	0f 90       	pop	r0
    2cec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2cf0:	0f 90       	pop	r0
    2cf2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2cf6:	0f 90       	pop	r0
    2cf8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2cfc:	0f 90       	pop	r0
    2cfe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d02:	0f 90       	pop	r0
    2d04:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d08:	0f 90       	pop	r0
    2d0a:	1f 90       	pop	r1
    2d0c:	18 95       	reti

00002d0e <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    2d0e:	1f 92       	push	r1
    2d10:	0f 92       	push	r0
    2d12:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2d16:	0f 92       	push	r0
    2d18:	11 24       	eor	r1, r1
    2d1a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d1e:	0f 92       	push	r0
    2d20:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2d24:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d28:	0f 92       	push	r0
    2d2a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2d2e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d32:	0f 92       	push	r0
    2d34:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2d38:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d3c:	0f 92       	push	r0
    2d3e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d42:	2f 93       	push	r18
    2d44:	3f 93       	push	r19
    2d46:	4f 93       	push	r20
    2d48:	5f 93       	push	r21
    2d4a:	6f 93       	push	r22
    2d4c:	7f 93       	push	r23
    2d4e:	8f 93       	push	r24
    2d50:	9f 93       	push	r25
    2d52:	af 93       	push	r26
    2d54:	bf 93       	push	r27
    2d56:	ef 93       	push	r30
    2d58:	ff 93       	push	r31
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    2d62:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <tc_tcf1_ccb_callback>
    2d66:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <tc_tcf1_ccb_callback+0x1>
    2d6a:	89 2b       	or	r24, r25
    2d6c:	31 f0       	breq	.+12     	; 0x2d7a <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    2d6e:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <tc_tcf1_ccb_callback>
    2d72:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <tc_tcf1_ccb_callback+0x1>
    2d76:	fc 01       	movw	r30, r24
    2d78:	19 95       	eicall
	}
}
    2d7a:	00 00       	nop
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	ff 91       	pop	r31
    2d82:	ef 91       	pop	r30
    2d84:	bf 91       	pop	r27
    2d86:	af 91       	pop	r26
    2d88:	9f 91       	pop	r25
    2d8a:	8f 91       	pop	r24
    2d8c:	7f 91       	pop	r23
    2d8e:	6f 91       	pop	r22
    2d90:	5f 91       	pop	r21
    2d92:	4f 91       	pop	r20
    2d94:	3f 91       	pop	r19
    2d96:	2f 91       	pop	r18
    2d98:	0f 90       	pop	r0
    2d9a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2d9e:	0f 90       	pop	r0
    2da0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2da4:	0f 90       	pop	r0
    2da6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2daa:	0f 90       	pop	r0
    2dac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2db0:	0f 90       	pop	r0
    2db2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2db6:	0f 90       	pop	r0
    2db8:	1f 90       	pop	r1
    2dba:	18 95       	reti

00002dbc <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    2dbc:	1f 92       	push	r1
    2dbe:	0f 92       	push	r0
    2dc0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2dc4:	0f 92       	push	r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2dcc:	0f 92       	push	r0
    2dce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2dd2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2dd6:	0f 92       	push	r0
    2dd8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ddc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2de0:	0f 92       	push	r0
    2de2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2de6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2dea:	0f 92       	push	r0
    2dec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2df0:	2f 93       	push	r18
    2df2:	3f 93       	push	r19
    2df4:	4f 93       	push	r20
    2df6:	5f 93       	push	r21
    2df8:	6f 93       	push	r22
    2dfa:	7f 93       	push	r23
    2dfc:	8f 93       	push	r24
    2dfe:	9f 93       	push	r25
    2e00:	af 93       	push	r26
    2e02:	bf 93       	push	r27
    2e04:	ef 93       	push	r30
    2e06:	ff 93       	push	r31
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	e9 d1       	rcall	.+978    	; 0x31e4 <twim_interrupt_handler>
    2e12:	00 00       	nop
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	ff 91       	pop	r31
    2e1a:	ef 91       	pop	r30
    2e1c:	bf 91       	pop	r27
    2e1e:	af 91       	pop	r26
    2e20:	9f 91       	pop	r25
    2e22:	8f 91       	pop	r24
    2e24:	7f 91       	pop	r23
    2e26:	6f 91       	pop	r22
    2e28:	5f 91       	pop	r21
    2e2a:	4f 91       	pop	r20
    2e2c:	3f 91       	pop	r19
    2e2e:	2f 91       	pop	r18
    2e30:	0f 90       	pop	r0
    2e32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e36:	0f 90       	pop	r0
    2e38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e3c:	0f 90       	pop	r0
    2e3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e42:	0f 90       	pop	r0
    2e44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e48:	0f 90       	pop	r0
    2e4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e4e:	0f 90       	pop	r0
    2e50:	1f 90       	pop	r1
    2e52:	18 95       	reti

00002e54 <__vector_76>:
    2e54:	1f 92       	push	r1
    2e56:	0f 92       	push	r0
    2e58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e5c:	0f 92       	push	r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e64:	0f 92       	push	r0
    2e66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e6e:	0f 92       	push	r0
    2e70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2e74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e78:	0f 92       	push	r0
    2e7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2e7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e82:	0f 92       	push	r0
    2e84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	4f 93       	push	r20
    2e8e:	5f 93       	push	r21
    2e90:	6f 93       	push	r22
    2e92:	7f 93       	push	r23
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	ef 93       	push	r30
    2e9e:	ff 93       	push	r31
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	9d d1       	rcall	.+826    	; 0x31e4 <twim_interrupt_handler>
    2eaa:	00 00       	nop
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	ff 91       	pop	r31
    2eb2:	ef 91       	pop	r30
    2eb4:	bf 91       	pop	r27
    2eb6:	af 91       	pop	r26
    2eb8:	9f 91       	pop	r25
    2eba:	8f 91       	pop	r24
    2ebc:	7f 91       	pop	r23
    2ebe:	6f 91       	pop	r22
    2ec0:	5f 91       	pop	r21
    2ec2:	4f 91       	pop	r20
    2ec4:	3f 91       	pop	r19
    2ec6:	2f 91       	pop	r18
    2ec8:	0f 90       	pop	r0
    2eca:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ece:	0f 90       	pop	r0
    2ed0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2ed4:	0f 90       	pop	r0
    2ed6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2eda:	0f 90       	pop	r0
    2edc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ee0:	0f 90       	pop	r0
    2ee2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ee6:	0f 90       	pop	r0
    2ee8:	1f 90       	pop	r1
    2eea:	18 95       	reti

00002eec <__vector_46>:
    2eec:	1f 92       	push	r1
    2eee:	0f 92       	push	r0
    2ef0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ef4:	0f 92       	push	r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2efc:	0f 92       	push	r0
    2efe:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f02:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f06:	0f 92       	push	r0
    2f08:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f0c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f10:	0f 92       	push	r0
    2f12:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f16:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f1a:	0f 92       	push	r0
    2f1c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f20:	2f 93       	push	r18
    2f22:	3f 93       	push	r19
    2f24:	4f 93       	push	r20
    2f26:	5f 93       	push	r21
    2f28:	6f 93       	push	r22
    2f2a:	7f 93       	push	r23
    2f2c:	8f 93       	push	r24
    2f2e:	9f 93       	push	r25
    2f30:	af 93       	push	r26
    2f32:	bf 93       	push	r27
    2f34:	ef 93       	push	r30
    2f36:	ff 93       	push	r31
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	51 d1       	rcall	.+674    	; 0x31e4 <twim_interrupt_handler>
    2f42:	00 00       	nop
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	ff 91       	pop	r31
    2f4a:	ef 91       	pop	r30
    2f4c:	bf 91       	pop	r27
    2f4e:	af 91       	pop	r26
    2f50:	9f 91       	pop	r25
    2f52:	8f 91       	pop	r24
    2f54:	7f 91       	pop	r23
    2f56:	6f 91       	pop	r22
    2f58:	5f 91       	pop	r21
    2f5a:	4f 91       	pop	r20
    2f5c:	3f 91       	pop	r19
    2f5e:	2f 91       	pop	r18
    2f60:	0f 90       	pop	r0
    2f62:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2f66:	0f 90       	pop	r0
    2f68:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2f6c:	0f 90       	pop	r0
    2f6e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f72:	0f 90       	pop	r0
    2f74:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f78:	0f 90       	pop	r0
    2f7a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f7e:	0f 90       	pop	r0
    2f80:	1f 90       	pop	r1
    2f82:	18 95       	reti

00002f84 <__vector_107>:
    2f84:	1f 92       	push	r1
    2f86:	0f 92       	push	r0
    2f88:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2f8c:	0f 92       	push	r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f94:	0f 92       	push	r0
    2f96:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2f9a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2f9e:	0f 92       	push	r0
    2fa0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fa4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fa8:	0f 92       	push	r0
    2faa:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fae:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fb2:	0f 92       	push	r0
    2fb4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fb8:	2f 93       	push	r18
    2fba:	3f 93       	push	r19
    2fbc:	4f 93       	push	r20
    2fbe:	5f 93       	push	r21
    2fc0:	6f 93       	push	r22
    2fc2:	7f 93       	push	r23
    2fc4:	8f 93       	push	r24
    2fc6:	9f 93       	push	r25
    2fc8:	af 93       	push	r26
    2fca:	bf 93       	push	r27
    2fcc:	ef 93       	push	r30
    2fce:	ff 93       	push	r31
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	05 d1       	rcall	.+522    	; 0x31e4 <twim_interrupt_handler>
    2fda:	00 00       	nop
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	ff 91       	pop	r31
    2fe2:	ef 91       	pop	r30
    2fe4:	bf 91       	pop	r27
    2fe6:	af 91       	pop	r26
    2fe8:	9f 91       	pop	r25
    2fea:	8f 91       	pop	r24
    2fec:	7f 91       	pop	r23
    2fee:	6f 91       	pop	r22
    2ff0:	5f 91       	pop	r21
    2ff2:	4f 91       	pop	r20
    2ff4:	3f 91       	pop	r19
    2ff6:	2f 91       	pop	r18
    2ff8:	0f 90       	pop	r0
    2ffa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ffe:	0f 90       	pop	r0
    3000:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3004:	0f 90       	pop	r0
    3006:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    300a:	0f 90       	pop	r0
    300c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3010:	0f 90       	pop	r0
    3012:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3016:	0f 90       	pop	r0
    3018:	1f 90       	pop	r1
    301a:	18 95       	reti

0000301c <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	28 97       	sbiw	r28, 0x08	; 8
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    302a:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <transfer>
    302e:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <transfer+0x1>
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    3036:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <transfer+0x2>
    303a:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <transfer+0x3>
    303e:	8b 83       	std	Y+3, r24	; 0x03
    3040:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    3042:	20 91 f6 20 	lds	r18, 0x20F6	; 0x8020f6 <transfer+0x4>
    3046:	30 91 f7 20 	lds	r19, 0x20F7	; 0x8020f7 <transfer+0x5>
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	fc 01       	movw	r30, r24
    3050:	84 81       	ldd	r24, Z+4	; 0x04
    3052:	95 81       	ldd	r25, Z+5	; 0x05
    3054:	28 17       	cp	r18, r24
    3056:	39 07       	cpc	r19, r25
    3058:	e4 f4       	brge	.+56     	; 0x3092 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	9c 81       	ldd	r25, Y+4	; 0x04
    305e:	01 96       	adiw	r24, 0x01	; 1
    3060:	8d 83       	std	Y+5, r24	; 0x05
    3062:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    3064:	80 91 f6 20 	lds	r24, 0x20F6	; 0x8020f6 <transfer+0x4>
    3068:	90 91 f7 20 	lds	r25, 0x20F7	; 0x8020f7 <transfer+0x5>
    306c:	9c 01       	movw	r18, r24
    306e:	2f 5f       	subi	r18, 0xFF	; 255
    3070:	3f 4f       	sbci	r19, 0xFF	; 255
    3072:	20 93 f6 20 	sts	0x20F6, r18	; 0x8020f6 <transfer+0x4>
    3076:	30 93 f7 20 	sts	0x20F7, r19	; 0x8020f7 <transfer+0x5>
    307a:	9c 01       	movw	r18, r24
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	9e 81       	ldd	r25, Y+6	; 0x06
    3080:	82 0f       	add	r24, r18
    3082:	93 1f       	adc	r25, r19
    3084:	fc 01       	movw	r30, r24
    3086:	20 81       	ld	r18, Z
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	fc 01       	movw	r30, r24
    308e:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    3090:	3f c0       	rjmp	.+126    	; 0x3110 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    3092:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <transfer+0x6>
    3096:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <transfer+0x7>
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	fc 01       	movw	r30, r24
    30a0:	80 85       	ldd	r24, Z+8	; 0x08
    30a2:	91 85       	ldd	r25, Z+9	; 0x09
    30a4:	28 17       	cp	r18, r24
    30a6:	39 07       	cpc	r19, r25
    30a8:	60 f5       	brcc	.+88     	; 0x3102 <twim_write_handler+0xe6>

		if (transfer.read) {
    30aa:	80 91 fa 20 	lds	r24, 0x20FA	; 0x8020fa <transfer+0x8>
    30ae:	88 23       	and	r24, r24
    30b0:	59 f0       	breq	.+22     	; 0x30c8 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	9a 81       	ldd	r25, Y+2	; 0x02
    30b6:	fc 01       	movw	r30, r24
    30b8:	86 81       	ldd	r24, Z+6	; 0x06
    30ba:	28 2f       	mov	r18, r24
    30bc:	21 60       	ori	r18, 0x01	; 1
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	9a 81       	ldd	r25, Y+2	; 0x02
    30c2:	fc 01       	movw	r30, r24
    30c4:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    30c6:	24 c0       	rjmp	.+72     	; 0x3110 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	fc 01       	movw	r30, r24
    30ce:	86 81       	ldd	r24, Z+6	; 0x06
    30d0:	97 81       	ldd	r25, Z+7	; 0x07
    30d2:	8f 83       	std	Y+7, r24	; 0x07
    30d4:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    30d6:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <transfer+0x6>
    30da:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <transfer+0x7>
    30de:	9c 01       	movw	r18, r24
    30e0:	2f 5f       	subi	r18, 0xFF	; 255
    30e2:	3f 4f       	sbci	r19, 0xFF	; 255
    30e4:	20 93 f8 20 	sts	0x20F8, r18	; 0x8020f8 <transfer+0x6>
    30e8:	30 93 f9 20 	sts	0x20F9, r19	; 0x8020f9 <transfer+0x7>
    30ec:	2f 81       	ldd	r18, Y+7	; 0x07
    30ee:	38 85       	ldd	r19, Y+8	; 0x08
    30f0:	82 0f       	add	r24, r18
    30f2:	93 1f       	adc	r25, r19
    30f4:	fc 01       	movw	r30, r24
    30f6:	20 81       	ld	r18, Z
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	9a 81       	ldd	r25, Y+2	; 0x02
    30fc:	fc 01       	movw	r30, r24
    30fe:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    3100:	07 c0       	rjmp	.+14     	; 0x3110 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	23 e0       	ldi	r18, 0x03	; 3
    3108:	fc 01       	movw	r30, r24
    310a:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    310c:	10 92 fc 20 	sts	0x20FC, r1	; 0x8020fc <transfer+0xa>
	}
}
    3110:	00 00       	nop
    3112:	28 96       	adiw	r28, 0x08	; 8
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	df 91       	pop	r29
    311a:	cf 91       	pop	r28
    311c:	08 95       	ret

0000311e <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    311e:	cf 93       	push	r28
    3120:	df 93       	push	r29
    3122:	00 d0       	rcall	.+0      	; 0x3124 <twim_read_handler+0x6>
    3124:	00 d0       	rcall	.+0      	; 0x3126 <twim_read_handler+0x8>
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    312a:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <transfer>
    312e:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <transfer+0x1>
    3132:	89 83       	std	Y+1, r24	; 0x01
    3134:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    3136:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <transfer+0x2>
    313a:	90 91 f5 20 	lds	r25, 0x20F5	; 0x8020f5 <transfer+0x3>
    313e:	8b 83       	std	Y+3, r24	; 0x03
    3140:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    3142:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <transfer+0x6>
    3146:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <transfer+0x7>
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	fc 01       	movw	r30, r24
    3150:	80 85       	ldd	r24, Z+8	; 0x08
    3152:	91 85       	ldd	r25, Z+9	; 0x09
    3154:	28 17       	cp	r18, r24
    3156:	39 07       	cpc	r19, r25
    3158:	b0 f5       	brcc	.+108    	; 0x31c6 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	9c 81       	ldd	r25, Y+4	; 0x04
    315e:	fc 01       	movw	r30, r24
    3160:	86 81       	ldd	r24, Z+6	; 0x06
    3162:	97 81       	ldd	r25, Z+7	; 0x07
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    3168:	80 91 f8 20 	lds	r24, 0x20F8	; 0x8020f8 <transfer+0x6>
    316c:	90 91 f9 20 	lds	r25, 0x20F9	; 0x8020f9 <transfer+0x7>
    3170:	9c 01       	movw	r18, r24
    3172:	2f 5f       	subi	r18, 0xFF	; 255
    3174:	3f 4f       	sbci	r19, 0xFF	; 255
    3176:	20 93 f8 20 	sts	0x20F8, r18	; 0x8020f8 <transfer+0x6>
    317a:	30 93 f9 20 	sts	0x20F9, r19	; 0x8020f9 <transfer+0x7>
    317e:	2d 81       	ldd	r18, Y+5	; 0x05
    3180:	3e 81       	ldd	r19, Y+6	; 0x06
    3182:	82 0f       	add	r24, r18
    3184:	93 1f       	adc	r25, r19
    3186:	29 81       	ldd	r18, Y+1	; 0x01
    3188:	3a 81       	ldd	r19, Y+2	; 0x02
    318a:	f9 01       	movw	r30, r18
    318c:	27 81       	ldd	r18, Z+7	; 0x07
    318e:	fc 01       	movw	r30, r24
    3190:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    3192:	20 91 f8 20 	lds	r18, 0x20F8	; 0x8020f8 <transfer+0x6>
    3196:	30 91 f9 20 	lds	r19, 0x20F9	; 0x8020f9 <transfer+0x7>
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	fc 01       	movw	r30, r24
    31a0:	80 85       	ldd	r24, Z+8	; 0x08
    31a2:	91 85       	ldd	r25, Z+9	; 0x09
    31a4:	28 17       	cp	r18, r24
    31a6:	39 07       	cpc	r19, r25
    31a8:	30 f4       	brcc	.+12     	; 0x31b6 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	22 e0       	ldi	r18, 0x02	; 2
    31b0:	fc 01       	movw	r30, r24
    31b2:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    31b4:	10 c0       	rjmp	.+32     	; 0x31d6 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	27 e0       	ldi	r18, 0x07	; 7
    31bc:	fc 01       	movw	r30, r24
    31be:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    31c0:	10 92 fc 20 	sts	0x20FC, r1	; 0x8020fc <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    31c4:	08 c0       	rjmp	.+16     	; 0x31d6 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	23 e0       	ldi	r18, 0x03	; 3
    31cc:	fc 01       	movw	r30, r24
    31ce:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    31d0:	89 ef       	ldi	r24, 0xF9	; 249
    31d2:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <transfer+0xa>
	}
}
    31d6:	00 00       	nop
    31d8:	26 96       	adiw	r28, 0x06	; 6
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	08 95       	ret

000031e4 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	1f 92       	push	r1
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    31ee:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <transfer>
    31f2:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <transfer+0x1>
    31f6:	fc 01       	movw	r30, r24
    31f8:	84 81       	ldd	r24, Z+4	; 0x04
    31fa:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	88 70       	andi	r24, 0x08	; 8
    3204:	99 27       	eor	r25, r25
    3206:	89 2b       	or	r24, r25
    3208:	99 f0       	breq	.+38     	; 0x3230 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    320a:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <transfer>
    320e:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <transfer+0x1>
    3212:	29 81       	ldd	r18, Y+1	; 0x01
    3214:	28 60       	ori	r18, 0x08	; 8
    3216:	fc 01       	movw	r30, r24
    3218:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    321a:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <transfer>
    321e:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <transfer+0x1>
    3222:	23 e0       	ldi	r18, 0x03	; 3
    3224:	fc 01       	movw	r30, r24
    3226:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    3228:	86 ef       	ldi	r24, 0xF6	; 246
    322a:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    322e:	2a c0       	rjmp	.+84     	; 0x3284 <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	84 70       	andi	r24, 0x04	; 4
    3238:	99 27       	eor	r25, r25
    323a:	89 2b       	or	r24, r25
    323c:	39 f4       	brne	.+14     	; 0x324c <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	80 71       	andi	r24, 0x10	; 16
    3246:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3248:	89 2b       	or	r24, r25
    324a:	59 f0       	breq	.+22     	; 0x3262 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    324c:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <transfer>
    3250:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <transfer+0x1>
    3254:	23 e0       	ldi	r18, 0x03	; 3
    3256:	fc 01       	movw	r30, r24
    3258:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    325a:	8f ef       	ldi	r24, 0xFF	; 255
    325c:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3260:	11 c0       	rjmp	.+34     	; 0x3284 <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	88 2f       	mov	r24, r24
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	80 74       	andi	r24, 0x40	; 64
    326a:	99 27       	eor	r25, r25
    326c:	89 2b       	or	r24, r25
    326e:	11 f0       	breq	.+4      	; 0x3274 <twim_interrupt_handler+0x90>

		twim_write_handler();
    3270:	d5 de       	rcall	.-598    	; 0x301c <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    3272:	08 c0       	rjmp	.+16     	; 0x3284 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	88 23       	and	r24, r24

		twim_read_handler();
    3278:	14 f4       	brge	.+4      	; 0x327e <twim_interrupt_handler+0x9a>
    327a:	51 df       	rcall	.-350    	; 0x311e <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    327c:	03 c0       	rjmp	.+6      	; 0x3284 <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    327e:	8b ef       	ldi	r24, 0xFB	; 251
    3280:	80 93 fc 20 	sts	0x20FC, r24	; 0x8020fc <transfer+0xa>
	}
}
    3284:	00 00       	nop
    3286:	0f 90       	pop	r0
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	08 95       	ret

0000328e <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	1f 92       	push	r1
    3294:	1f 92       	push	r1
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	89 83       	std	Y+1, r24	; 0x01
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	fc 01       	movw	r30, r24
    32a4:	84 81       	ldd	r24, Z+4	; 0x04
    32a6:	28 2f       	mov	r18, r24
    32a8:	20 61       	ori	r18, 0x10	; 16
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	9a 81       	ldd	r25, Y+2	; 0x02
    32ae:	fc 01       	movw	r30, r24
    32b0:	24 83       	std	Z+4, r18	; 0x04
    32b2:	00 00       	nop
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	08 95       	ret

000032be <usart_format_set>:
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	25 97       	sbiw	r28, 0x05	; 5
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	6b 83       	std	Y+3, r22	; 0x03
    32d2:	4c 83       	std	Y+4, r20	; 0x04
    32d4:	2d 83       	std	Y+5, r18	; 0x05
    32d6:	9b 81       	ldd	r25, Y+3	; 0x03
    32d8:	8c 81       	ldd	r24, Y+4	; 0x04
    32da:	89 2b       	or	r24, r25
    32dc:	98 2f       	mov	r25, r24
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	88 23       	and	r24, r24
    32e2:	11 f0       	breq	.+4      	; 0x32e8 <usart_format_set+0x2a>
    32e4:	88 e0       	ldi	r24, 0x08	; 8
    32e6:	01 c0       	rjmp	.+2      	; 0x32ea <usart_format_set+0x2c>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	89 2b       	or	r24, r25
    32ec:	28 2f       	mov	r18, r24
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	fc 01       	movw	r30, r24
    32f4:	25 83       	std	Z+5, r18	; 0x05
    32f6:	00 00       	nop
    32f8:	25 96       	adiw	r28, 0x05	; 5
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	08 95       	ret

00003304 <usart_tx_enable>:
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	1f 92       	push	r1
    330a:	1f 92       	push	r1
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	9a 83       	std	Y+2, r25	; 0x02
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	fc 01       	movw	r30, r24
    331a:	84 81       	ldd	r24, Z+4	; 0x04
    331c:	28 2f       	mov	r18, r24
    331e:	28 60       	ori	r18, 0x08	; 8
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	9a 81       	ldd	r25, Y+2	; 0x02
    3324:	fc 01       	movw	r30, r24
    3326:	24 83       	std	Z+4, r18	; 0x04
    3328:	00 00       	nop
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	08 95       	ret

00003334 <usart_set_mode>:
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	00 d0       	rcall	.+0      	; 0x333a <usart_set_mode+0x6>
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	89 83       	std	Y+1, r24	; 0x01
    3340:	9a 83       	std	Y+2, r25	; 0x02
    3342:	6b 83       	std	Y+3, r22	; 0x03
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	9a 81       	ldd	r25, Y+2	; 0x02
    3348:	fc 01       	movw	r30, r24
    334a:	85 81       	ldd	r24, Z+5	; 0x05
    334c:	98 2f       	mov	r25, r24
    334e:	9f 73       	andi	r25, 0x3F	; 63
    3350:	8b 81       	ldd	r24, Y+3	; 0x03
    3352:	89 2b       	or	r24, r25
    3354:	28 2f       	mov	r18, r24
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	9a 81       	ldd	r25, Y+2	; 0x02
    335a:	fc 01       	movw	r30, r24
    335c:	25 83       	std	Z+5, r18	; 0x05
    335e:	00 00       	nop
    3360:	23 96       	adiw	r28, 0x03	; 3
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	08 95       	ret

0000336c <usart_data_register_is_empty>:
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	1f 92       	push	r1
    3372:	1f 92       	push	r1
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	89 83       	std	Y+1, r24	; 0x01
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	fc 01       	movw	r30, r24
    3382:	81 81       	ldd	r24, Z+1	; 0x01
    3384:	88 2f       	mov	r24, r24
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	80 72       	andi	r24, 0x20	; 32
    338a:	99 27       	eor	r25, r25
    338c:	21 e0       	ldi	r18, 0x01	; 1
    338e:	89 2b       	or	r24, r25
    3390:	09 f4       	brne	.+2      	; 0x3394 <usart_data_register_is_empty+0x28>
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	82 2f       	mov	r24, r18
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	08 95       	ret

000033a0 <usart_rx_is_complete>:
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	1f 92       	push	r1
    33a6:	1f 92       	push	r1
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	fc 01       	movw	r30, r24
    33b6:	81 81       	ldd	r24, Z+1	; 0x01
    33b8:	88 2f       	mov	r24, r24
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	80 78       	andi	r24, 0x80	; 128
    33be:	99 27       	eor	r25, r25
    33c0:	21 e0       	ldi	r18, 0x01	; 1
    33c2:	89 2b       	or	r24, r25
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <usart_rx_is_complete+0x28>
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	82 2f       	mov	r24, r18
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	08 95       	ret

000033d4 <sysclk_get_main_hz>:
    33d4:	cf 93       	push	r28
    33d6:	df 93       	push	r29
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	98 e4       	ldi	r25, 0x48	; 72
    33e0:	a8 ee       	ldi	r26, 0xE8	; 232
    33e2:	b1 e0       	ldi	r27, 0x01	; 1
    33e4:	bc 01       	movw	r22, r24
    33e6:	cd 01       	movw	r24, r26
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	08 95       	ret

000033ee <sysclk_get_per4_hz>:
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	1f 92       	push	r1
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	19 82       	std	Y+1, r1	; 0x01
    33fa:	ec df       	rcall	.-40     	; 0x33d4 <sysclk_get_main_hz>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	29 81       	ldd	r18, Y+1	; 0x01
    3402:	22 2f       	mov	r18, r18
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	04 c0       	rjmp	.+8      	; 0x3410 <sysclk_get_per4_hz+0x22>
    3408:	b6 95       	lsr	r27
    340a:	a7 95       	ror	r26
    340c:	97 95       	ror	r25
    340e:	87 95       	ror	r24
    3410:	2a 95       	dec	r18
    3412:	d2 f7       	brpl	.-12     	; 0x3408 <sysclk_get_per4_hz+0x1a>
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0f 90       	pop	r0
    341a:	df 91       	pop	r29
    341c:	cf 91       	pop	r28
    341e:	08 95       	ret

00003420 <sysclk_get_per2_hz>:
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	e2 df       	rcall	.-60     	; 0x33ee <sysclk_get_per4_hz>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	08 95       	ret

00003438 <sysclk_get_per_hz>:
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	ef df       	rcall	.-34     	; 0x3420 <sysclk_get_per2_hz>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	08 95       	ret

00003450 <sysclk_enable_peripheral_clock>:
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	1f 92       	push	r1
    3456:	1f 92       	push	r1
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	9a 83       	std	Y+2, r25	; 0x02
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	9a 81       	ldd	r25, Y+2	; 0x02
    3464:	89 2b       	or	r24, r25
    3466:	09 f4       	brne	.+2      	; 0x346a <sysclk_enable_peripheral_clock+0x1a>
    3468:	85 c1       	rjmp	.+778    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	80 3c       	cpi	r24, 0xC0	; 192
    3470:	91 05       	cpc	r25, r1
    3472:	29 f4       	brne	.+10     	; 0x347e <sysclk_enable_peripheral_clock+0x2e>
    3474:	60 e1       	ldi	r22, 0x10	; 16
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    347c:	7b c1       	rjmp	.+758    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	80 34       	cpi	r24, 0x40	; 64
    3484:	94 40       	sbci	r25, 0x04	; 4
    3486:	29 f4       	brne	.+10     	; 0x3492 <sysclk_enable_peripheral_clock+0x42>
    3488:	68 e0       	ldi	r22, 0x08	; 8
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3490:	71 c1       	rjmp	.+738    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	9a 81       	ldd	r25, Y+2	; 0x02
    3496:	81 15       	cp	r24, r1
    3498:	94 40       	sbci	r25, 0x04	; 4
    349a:	29 f4       	brne	.+10     	; 0x34a6 <sysclk_enable_peripheral_clock+0x56>
    349c:	64 e0       	ldi	r22, 0x04	; 4
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    34a4:	67 c1       	rjmp	.+718    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	80 38       	cpi	r24, 0x80	; 128
    34ac:	91 40       	sbci	r25, 0x01	; 1
    34ae:	29 f4       	brne	.+10     	; 0x34ba <sysclk_enable_peripheral_clock+0x6a>
    34b0:	62 e0       	ldi	r22, 0x02	; 2
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    34b8:	5d c1       	rjmp	.+698    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	9a 81       	ldd	r25, Y+2	; 0x02
    34be:	81 15       	cp	r24, r1
    34c0:	91 40       	sbci	r25, 0x01	; 1
    34c2:	29 f4       	brne	.+10     	; 0x34ce <sysclk_enable_peripheral_clock+0x7e>
    34c4:	61 e0       	ldi	r22, 0x01	; 1
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    34cc:	53 c1       	rjmp	.+678    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	80 38       	cpi	r24, 0x80	; 128
    34d4:	93 40       	sbci	r25, 0x03	; 3
    34d6:	29 f4       	brne	.+10     	; 0x34e2 <sysclk_enable_peripheral_clock+0x92>
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    34e0:	49 c1       	rjmp	.+658    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	9a 81       	ldd	r25, Y+2	; 0x02
    34e6:	80 39       	cpi	r24, 0x90	; 144
    34e8:	93 40       	sbci	r25, 0x03	; 3
    34ea:	29 f4       	brne	.+10     	; 0x34f6 <sysclk_enable_peripheral_clock+0xa6>
    34ec:	61 e0       	ldi	r22, 0x01	; 1
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    34f4:	3f c1       	rjmp	.+638    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	81 15       	cp	r24, r1
    34fc:	92 40       	sbci	r25, 0x02	; 2
    34fe:	29 f4       	brne	.+10     	; 0x350a <sysclk_enable_peripheral_clock+0xba>
    3500:	62 e0       	ldi	r22, 0x02	; 2
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3508:	35 c1       	rjmp	.+618    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	80 34       	cpi	r24, 0x40	; 64
    3510:	92 40       	sbci	r25, 0x02	; 2
    3512:	29 f4       	brne	.+10     	; 0x351e <sysclk_enable_peripheral_clock+0xce>
    3514:	62 e0       	ldi	r22, 0x02	; 2
    3516:	82 e0       	ldi	r24, 0x02	; 2
    3518:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    351c:	2b c1       	rjmp	.+598    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	9a 81       	ldd	r25, Y+2	; 0x02
    3522:	81 15       	cp	r24, r1
    3524:	93 40       	sbci	r25, 0x03	; 3
    3526:	29 f4       	brne	.+10     	; 0x3532 <sysclk_enable_peripheral_clock+0xe2>
    3528:	64 e0       	ldi	r22, 0x04	; 4
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3530:	21 c1       	rjmp	.+578    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	9a 81       	ldd	r25, Y+2	; 0x02
    3536:	80 32       	cpi	r24, 0x20	; 32
    3538:	93 40       	sbci	r25, 0x03	; 3
    353a:	29 f4       	brne	.+10     	; 0x3546 <sysclk_enable_peripheral_clock+0xf6>
    353c:	64 e0       	ldi	r22, 0x04	; 4
    353e:	82 e0       	ldi	r24, 0x02	; 2
    3540:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3544:	17 c1       	rjmp	.+558    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	81 15       	cp	r24, r1
    354c:	98 40       	sbci	r25, 0x08	; 8
    354e:	29 f4       	brne	.+10     	; 0x355a <sysclk_enable_peripheral_clock+0x10a>
    3550:	61 e0       	ldi	r22, 0x01	; 1
    3552:	83 e0       	ldi	r24, 0x03	; 3
    3554:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3558:	0d c1       	rjmp	.+538    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	81 15       	cp	r24, r1
    3560:	99 40       	sbci	r25, 0x09	; 9
    3562:	29 f4       	brne	.+10     	; 0x356e <sysclk_enable_peripheral_clock+0x11e>
    3564:	61 e0       	ldi	r22, 0x01	; 1
    3566:	84 e0       	ldi	r24, 0x04	; 4
    3568:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    356c:	03 c1       	rjmp	.+518    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	81 15       	cp	r24, r1
    3574:	9a 40       	sbci	r25, 0x0A	; 10
    3576:	29 f4       	brne	.+10     	; 0x3582 <sysclk_enable_peripheral_clock+0x132>
    3578:	61 e0       	ldi	r22, 0x01	; 1
    357a:	85 e0       	ldi	r24, 0x05	; 5
    357c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3580:	f9 c0       	rjmp	.+498    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	81 15       	cp	r24, r1
    3588:	9b 40       	sbci	r25, 0x0B	; 11
    358a:	29 f4       	brne	.+10     	; 0x3596 <sysclk_enable_peripheral_clock+0x146>
    358c:	61 e0       	ldi	r22, 0x01	; 1
    358e:	86 e0       	ldi	r24, 0x06	; 6
    3590:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3594:	ef c0       	rjmp	.+478    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	80 34       	cpi	r24, 0x40	; 64
    359c:	98 40       	sbci	r25, 0x08	; 8
    359e:	29 f4       	brne	.+10     	; 0x35aa <sysclk_enable_peripheral_clock+0x15a>
    35a0:	62 e0       	ldi	r22, 0x02	; 2
    35a2:	83 e0       	ldi	r24, 0x03	; 3
    35a4:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    35a8:	e5 c0       	rjmp	.+458    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	80 34       	cpi	r24, 0x40	; 64
    35b0:	99 40       	sbci	r25, 0x09	; 9
    35b2:	29 f4       	brne	.+10     	; 0x35be <sysclk_enable_peripheral_clock+0x16e>
    35b4:	62 e0       	ldi	r22, 0x02	; 2
    35b6:	84 e0       	ldi	r24, 0x04	; 4
    35b8:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    35bc:	db c0       	rjmp	.+438    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	9a 81       	ldd	r25, Y+2	; 0x02
    35c2:	80 34       	cpi	r24, 0x40	; 64
    35c4:	9a 40       	sbci	r25, 0x0A	; 10
    35c6:	29 f4       	brne	.+10     	; 0x35d2 <sysclk_enable_peripheral_clock+0x182>
    35c8:	62 e0       	ldi	r22, 0x02	; 2
    35ca:	85 e0       	ldi	r24, 0x05	; 5
    35cc:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    35d0:	d1 c0       	rjmp	.+418    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	80 34       	cpi	r24, 0x40	; 64
    35d8:	9b 40       	sbci	r25, 0x0B	; 11
    35da:	29 f4       	brne	.+10     	; 0x35e6 <sysclk_enable_peripheral_clock+0x196>
    35dc:	62 e0       	ldi	r22, 0x02	; 2
    35de:	86 e0       	ldi	r24, 0x06	; 6
    35e0:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    35e4:	c7 c0       	rjmp	.+398    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ea:	80 39       	cpi	r24, 0x90	; 144
    35ec:	98 40       	sbci	r25, 0x08	; 8
    35ee:	29 f4       	brne	.+10     	; 0x35fa <sysclk_enable_peripheral_clock+0x1aa>
    35f0:	64 e0       	ldi	r22, 0x04	; 4
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    35f8:	bd c0       	rjmp	.+378    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	9a 81       	ldd	r25, Y+2	; 0x02
    35fe:	80 39       	cpi	r24, 0x90	; 144
    3600:	99 40       	sbci	r25, 0x09	; 9
    3602:	29 f4       	brne	.+10     	; 0x360e <sysclk_enable_peripheral_clock+0x1be>
    3604:	64 e0       	ldi	r22, 0x04	; 4
    3606:	84 e0       	ldi	r24, 0x04	; 4
    3608:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    360c:	b3 c0       	rjmp	.+358    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	80 39       	cpi	r24, 0x90	; 144
    3614:	9a 40       	sbci	r25, 0x0A	; 10
    3616:	29 f4       	brne	.+10     	; 0x3622 <sysclk_enable_peripheral_clock+0x1d2>
    3618:	64 e0       	ldi	r22, 0x04	; 4
    361a:	85 e0       	ldi	r24, 0x05	; 5
    361c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3620:	a9 c0       	rjmp	.+338    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	9a 81       	ldd	r25, Y+2	; 0x02
    3626:	80 39       	cpi	r24, 0x90	; 144
    3628:	9b 40       	sbci	r25, 0x0B	; 11
    362a:	29 f4       	brne	.+10     	; 0x3636 <sysclk_enable_peripheral_clock+0x1e6>
    362c:	64 e0       	ldi	r22, 0x04	; 4
    362e:	86 e0       	ldi	r24, 0x06	; 6
    3630:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3634:	9f c0       	rjmp	.+318    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	80 3c       	cpi	r24, 0xC0	; 192
    363c:	98 40       	sbci	r25, 0x08	; 8
    363e:	29 f4       	brne	.+10     	; 0x364a <sysclk_enable_peripheral_clock+0x1fa>
    3640:	68 e0       	ldi	r22, 0x08	; 8
    3642:	83 e0       	ldi	r24, 0x03	; 3
    3644:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3648:	95 c0       	rjmp	.+298    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	80 3c       	cpi	r24, 0xC0	; 192
    3650:	99 40       	sbci	r25, 0x09	; 9
    3652:	29 f4       	brne	.+10     	; 0x365e <sysclk_enable_peripheral_clock+0x20e>
    3654:	68 e0       	ldi	r22, 0x08	; 8
    3656:	84 e0       	ldi	r24, 0x04	; 4
    3658:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    365c:	8b c0       	rjmp	.+278    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	80 3c       	cpi	r24, 0xC0	; 192
    3664:	9a 40       	sbci	r25, 0x0A	; 10
    3666:	29 f4       	brne	.+10     	; 0x3672 <sysclk_enable_peripheral_clock+0x222>
    3668:	68 e0       	ldi	r22, 0x08	; 8
    366a:	85 e0       	ldi	r24, 0x05	; 5
    366c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3670:	81 c0       	rjmp	.+258    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	80 3c       	cpi	r24, 0xC0	; 192
    3678:	9b 40       	sbci	r25, 0x0B	; 11
    367a:	29 f4       	brne	.+10     	; 0x3686 <sysclk_enable_peripheral_clock+0x236>
    367c:	68 e0       	ldi	r22, 0x08	; 8
    367e:	86 e0       	ldi	r24, 0x06	; 6
    3680:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3684:	77 c0       	rjmp	.+238    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	9a 81       	ldd	r25, Y+2	; 0x02
    368a:	80 3a       	cpi	r24, 0xA0	; 160
    368c:	98 40       	sbci	r25, 0x08	; 8
    368e:	29 f4       	brne	.+10     	; 0x369a <sysclk_enable_peripheral_clock+0x24a>
    3690:	60 e1       	ldi	r22, 0x10	; 16
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3698:	6d c0       	rjmp	.+218    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	80 3a       	cpi	r24, 0xA0	; 160
    36a0:	99 40       	sbci	r25, 0x09	; 9
    36a2:	29 f4       	brne	.+10     	; 0x36ae <sysclk_enable_peripheral_clock+0x25e>
    36a4:	60 e1       	ldi	r22, 0x10	; 16
    36a6:	84 e0       	ldi	r24, 0x04	; 4
    36a8:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    36ac:	63 c0       	rjmp	.+198    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	9a 81       	ldd	r25, Y+2	; 0x02
    36b2:	80 3a       	cpi	r24, 0xA0	; 160
    36b4:	9a 40       	sbci	r25, 0x0A	; 10
    36b6:	29 f4       	brne	.+10     	; 0x36c2 <sysclk_enable_peripheral_clock+0x272>
    36b8:	60 e1       	ldi	r22, 0x10	; 16
    36ba:	85 e0       	ldi	r24, 0x05	; 5
    36bc:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    36c0:	59 c0       	rjmp	.+178    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	9a 81       	ldd	r25, Y+2	; 0x02
    36c6:	80 3a       	cpi	r24, 0xA0	; 160
    36c8:	9b 40       	sbci	r25, 0x0B	; 11
    36ca:	29 f4       	brne	.+10     	; 0x36d6 <sysclk_enable_peripheral_clock+0x286>
    36cc:	60 e1       	ldi	r22, 0x10	; 16
    36ce:	86 e0       	ldi	r24, 0x06	; 6
    36d0:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    36d4:	4f c0       	rjmp	.+158    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	80 3b       	cpi	r24, 0xB0	; 176
    36dc:	98 40       	sbci	r25, 0x08	; 8
    36de:	29 f4       	brne	.+10     	; 0x36ea <sysclk_enable_peripheral_clock+0x29a>
    36e0:	60 e2       	ldi	r22, 0x20	; 32
    36e2:	83 e0       	ldi	r24, 0x03	; 3
    36e4:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    36e8:	45 c0       	rjmp	.+138    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	80 3b       	cpi	r24, 0xB0	; 176
    36f0:	99 40       	sbci	r25, 0x09	; 9
    36f2:	29 f4       	brne	.+10     	; 0x36fe <sysclk_enable_peripheral_clock+0x2ae>
    36f4:	60 e2       	ldi	r22, 0x20	; 32
    36f6:	84 e0       	ldi	r24, 0x04	; 4
    36f8:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    36fc:	3b c0       	rjmp	.+118    	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	80 3b       	cpi	r24, 0xB0	; 176
    3704:	9a 40       	sbci	r25, 0x0A	; 10
    3706:	29 f4       	brne	.+10     	; 0x3712 <sysclk_enable_peripheral_clock+0x2c2>
    3708:	60 e2       	ldi	r22, 0x20	; 32
    370a:	85 e0       	ldi	r24, 0x05	; 5
    370c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3710:	31 c0       	rjmp	.+98     	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	9a 81       	ldd	r25, Y+2	; 0x02
    3716:	80 3b       	cpi	r24, 0xB0	; 176
    3718:	9b 40       	sbci	r25, 0x0B	; 11
    371a:	29 f4       	brne	.+10     	; 0x3726 <sysclk_enable_peripheral_clock+0x2d6>
    371c:	60 e2       	ldi	r22, 0x20	; 32
    371e:	86 e0       	ldi	r24, 0x06	; 6
    3720:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3724:	27 c0       	rjmp	.+78     	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	80 38       	cpi	r24, 0x80	; 128
    372c:	94 40       	sbci	r25, 0x04	; 4
    372e:	29 f4       	brne	.+10     	; 0x373a <sysclk_enable_peripheral_clock+0x2ea>
    3730:	60 e4       	ldi	r22, 0x40	; 64
    3732:	83 e0       	ldi	r24, 0x03	; 3
    3734:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3738:	1d c0       	rjmp	.+58     	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	9a 81       	ldd	r25, Y+2	; 0x02
    373e:	80 39       	cpi	r24, 0x90	; 144
    3740:	94 40       	sbci	r25, 0x04	; 4
    3742:	29 f4       	brne	.+10     	; 0x374e <sysclk_enable_peripheral_clock+0x2fe>
    3744:	60 e4       	ldi	r22, 0x40	; 64
    3746:	84 e0       	ldi	r24, 0x04	; 4
    3748:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    374c:	13 c0       	rjmp	.+38     	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	9a 81       	ldd	r25, Y+2	; 0x02
    3752:	80 3a       	cpi	r24, 0xA0	; 160
    3754:	94 40       	sbci	r25, 0x04	; 4
    3756:	29 f4       	brne	.+10     	; 0x3762 <sysclk_enable_peripheral_clock+0x312>
    3758:	60 e4       	ldi	r22, 0x40	; 64
    375a:	85 e0       	ldi	r24, 0x05	; 5
    375c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3760:	09 c0       	rjmp	.+18     	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	80 3b       	cpi	r24, 0xB0	; 176
    3768:	94 40       	sbci	r25, 0x04	; 4
    376a:	21 f4       	brne	.+8      	; 0x3774 <sysclk_enable_peripheral_clock+0x324>
    376c:	60 e4       	ldi	r22, 0x40	; 64
    376e:	86 e0       	ldi	r24, 0x06	; 6
    3770:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3774:	00 00       	nop
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

00003780 <usart_init_rs232>:
    3780:	0f 93       	push	r16
    3782:	1f 93       	push	r17
    3784:	cf 93       	push	r28
    3786:	df 93       	push	r29
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	25 97       	sbiw	r28, 0x05	; 5
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	8a 83       	std	Y+2, r24	; 0x02
    3794:	9b 83       	std	Y+3, r25	; 0x03
    3796:	6c 83       	std	Y+4, r22	; 0x04
    3798:	7d 83       	std	Y+5, r23	; 0x05
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	9b 81       	ldd	r25, Y+3	; 0x03
    379e:	58 de       	rcall	.-848    	; 0x3450 <sysclk_enable_peripheral_clock>
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	9b 81       	ldd	r25, Y+3	; 0x03
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	c6 dd       	rcall	.-1140   	; 0x3334 <usart_set_mode>
    37a8:	8c 81       	ldd	r24, Y+4	; 0x04
    37aa:	9d 81       	ldd	r25, Y+5	; 0x05
    37ac:	fc 01       	movw	r30, r24
    37ae:	26 81       	ldd	r18, Z+6	; 0x06
    37b0:	8c 81       	ldd	r24, Y+4	; 0x04
    37b2:	9d 81       	ldd	r25, Y+5	; 0x05
    37b4:	fc 01       	movw	r30, r24
    37b6:	45 81       	ldd	r20, Z+5	; 0x05
    37b8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ba:	9d 81       	ldd	r25, Y+5	; 0x05
    37bc:	fc 01       	movw	r30, r24
    37be:	34 81       	ldd	r19, Z+4	; 0x04
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	9b 81       	ldd	r25, Y+3	; 0x03
    37c4:	63 2f       	mov	r22, r19
    37c6:	7b dd       	rcall	.-1290   	; 0x32be <usart_format_set>
    37c8:	37 de       	rcall	.-914    	; 0x3438 <sysclk_get_per_hz>
    37ca:	9b 01       	movw	r18, r22
    37cc:	ac 01       	movw	r20, r24
    37ce:	8c 81       	ldd	r24, Y+4	; 0x04
    37d0:	9d 81       	ldd	r25, Y+5	; 0x05
    37d2:	fc 01       	movw	r30, r24
    37d4:	80 81       	ld	r24, Z
    37d6:	91 81       	ldd	r25, Z+1	; 0x01
    37d8:	a2 81       	ldd	r26, Z+2	; 0x02
    37da:	b3 81       	ldd	r27, Z+3	; 0x03
    37dc:	ea 81       	ldd	r30, Y+2	; 0x02
    37de:	fb 81       	ldd	r31, Y+3	; 0x03
    37e0:	89 01       	movw	r16, r18
    37e2:	9a 01       	movw	r18, r20
    37e4:	ac 01       	movw	r20, r24
    37e6:	bd 01       	movw	r22, r26
    37e8:	cf 01       	movw	r24, r30
    37ea:	48 d0       	rcall	.+144    	; 0x387c <usart_set_baudrate>
    37ec:	89 83       	std	Y+1, r24	; 0x01
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	9b 81       	ldd	r25, Y+3	; 0x03
    37f2:	88 dd       	rcall	.-1264   	; 0x3304 <usart_tx_enable>
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	9b 81       	ldd	r25, Y+3	; 0x03
    37f8:	4a dd       	rcall	.-1388   	; 0x328e <usart_rx_enable>
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	25 96       	adiw	r28, 0x05	; 5
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	1f 91       	pop	r17
    3808:	0f 91       	pop	r16
    380a:	08 95       	ret

0000380c <usart_putchar>:
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
    3810:	00 d0       	rcall	.+0      	; 0x3812 <usart_putchar+0x6>
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	89 83       	std	Y+1, r24	; 0x01
    3818:	9a 83       	std	Y+2, r25	; 0x02
    381a:	6b 83       	std	Y+3, r22	; 0x03
    381c:	00 00       	nop
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	9a 81       	ldd	r25, Y+2	; 0x02
    3822:	a4 dd       	rcall	.-1208   	; 0x336c <usart_data_register_is_empty>
    3824:	98 2f       	mov	r25, r24
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	89 27       	eor	r24, r25
    382a:	88 23       	and	r24, r24
    382c:	c1 f7       	brne	.-16     	; 0x381e <usart_putchar+0x12>
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	9a 81       	ldd	r25, Y+2	; 0x02
    3832:	2b 81       	ldd	r18, Y+3	; 0x03
    3834:	fc 01       	movw	r30, r24
    3836:	20 83       	st	Z, r18
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	23 96       	adiw	r28, 0x03	; 3
    383e:	cd bf       	out	0x3d, r28	; 61
    3840:	de bf       	out	0x3e, r29	; 62
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	08 95       	ret

00003848 <usart_getchar>:
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	1f 92       	push	r1
    384e:	1f 92       	push	r1
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	89 83       	std	Y+1, r24	; 0x01
    3856:	9a 83       	std	Y+2, r25	; 0x02
    3858:	00 00       	nop
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	a0 dd       	rcall	.-1216   	; 0x33a0 <usart_rx_is_complete>
    3860:	98 2f       	mov	r25, r24
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	89 27       	eor	r24, r25
    3866:	88 23       	and	r24, r24
    3868:	c1 f7       	brne	.-16     	; 0x385a <usart_getchar+0x12>
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	9a 81       	ldd	r25, Y+2	; 0x02
    386e:	fc 01       	movw	r30, r24
    3870:	80 81       	ld	r24, Z
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	08 95       	ret

0000387c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	6f 97       	sbiw	r28, 0x1f	; 31
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	de bf       	out	0x3e, r29	; 62
    3892:	8e 8b       	std	Y+22, r24	; 0x16
    3894:	9f 8b       	std	Y+23, r25	; 0x17
    3896:	48 8f       	std	Y+24, r20	; 0x18
    3898:	59 8f       	std	Y+25, r21	; 0x19
    389a:	6a 8f       	std	Y+26, r22	; 0x1a
    389c:	7b 8f       	std	Y+27, r23	; 0x1b
    389e:	0c 8f       	std	Y+28, r16	; 0x1c
    38a0:	1d 8f       	std	Y+29, r17	; 0x1d
    38a2:	2e 8f       	std	Y+30, r18	; 0x1e
    38a4:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    38a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38aa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    38ac:	bf 8d       	ldd	r27, Y+31	; 0x1f
    38ae:	68 94       	set
    38b0:	12 f8       	bld	r1, 2
    38b2:	b6 95       	lsr	r27
    38b4:	a7 95       	ror	r26
    38b6:	97 95       	ror	r25
    38b8:	87 95       	ror	r24
    38ba:	16 94       	lsr	r1
    38bc:	d1 f7       	brne	.-12     	; 0x38b2 <usart_set_baudrate+0x36>
    38be:	8e 87       	std	Y+14, r24	; 0x0e
    38c0:	9f 87       	std	Y+15, r25	; 0x0f
    38c2:	a8 8b       	std	Y+16, r26	; 0x10
    38c4:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    38c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38ca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    38cc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    38ce:	07 2e       	mov	r0, r23
    38d0:	76 e1       	ldi	r23, 0x16	; 22
    38d2:	b6 95       	lsr	r27
    38d4:	a7 95       	ror	r26
    38d6:	97 95       	ror	r25
    38d8:	87 95       	ror	r24
    38da:	7a 95       	dec	r23
    38dc:	d1 f7       	brne	.-12     	; 0x38d2 <usart_set_baudrate+0x56>
    38de:	70 2d       	mov	r23, r0
    38e0:	8a 87       	std	Y+10, r24	; 0x0a
    38e2:	9b 87       	std	Y+11, r25	; 0x0b
    38e4:	ac 87       	std	Y+12, r26	; 0x0c
    38e6:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    38e8:	8e 89       	ldd	r24, Y+22	; 0x16
    38ea:	9f 89       	ldd	r25, Y+23	; 0x17
    38ec:	fc 01       	movw	r30, r24
    38ee:	84 81       	ldd	r24, Z+4	; 0x04
    38f0:	88 2f       	mov	r24, r24
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	84 70       	andi	r24, 0x04	; 4
    38f6:	99 27       	eor	r25, r25
    38f8:	89 2b       	or	r24, r25
    38fa:	c1 f4       	brne	.+48     	; 0x392c <usart_set_baudrate+0xb0>
		max_rate /= 2;
    38fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    38fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3900:	a8 89       	ldd	r26, Y+16	; 0x10
    3902:	b9 89       	ldd	r27, Y+17	; 0x11
    3904:	b6 95       	lsr	r27
    3906:	a7 95       	ror	r26
    3908:	97 95       	ror	r25
    390a:	87 95       	ror	r24
    390c:	8e 87       	std	Y+14, r24	; 0x0e
    390e:	9f 87       	std	Y+15, r25	; 0x0f
    3910:	a8 8b       	std	Y+16, r26	; 0x10
    3912:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    3914:	8a 85       	ldd	r24, Y+10	; 0x0a
    3916:	9b 85       	ldd	r25, Y+11	; 0x0b
    3918:	ac 85       	ldd	r26, Y+12	; 0x0c
    391a:	bd 85       	ldd	r27, Y+13	; 0x0d
    391c:	b6 95       	lsr	r27
    391e:	a7 95       	ror	r26
    3920:	97 95       	ror	r25
    3922:	87 95       	ror	r24
    3924:	8a 87       	std	Y+10, r24	; 0x0a
    3926:	9b 87       	std	Y+11, r25	; 0x0b
    3928:	ac 87       	std	Y+12, r26	; 0x0c
    392a:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    392c:	28 8d       	ldd	r18, Y+24	; 0x18
    392e:	39 8d       	ldd	r19, Y+25	; 0x19
    3930:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3932:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3934:	8e 85       	ldd	r24, Y+14	; 0x0e
    3936:	9f 85       	ldd	r25, Y+15	; 0x0f
    3938:	a8 89       	ldd	r26, Y+16	; 0x10
    393a:	b9 89       	ldd	r27, Y+17	; 0x11
    393c:	82 17       	cp	r24, r18
    393e:	93 07       	cpc	r25, r19
    3940:	a4 07       	cpc	r26, r20
    3942:	b5 07       	cpc	r27, r21
    3944:	68 f0       	brcs	.+26     	; 0x3960 <usart_set_baudrate+0xe4>
    3946:	28 8d       	ldd	r18, Y+24	; 0x18
    3948:	39 8d       	ldd	r19, Y+25	; 0x19
    394a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    394c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    394e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3950:	9b 85       	ldd	r25, Y+11	; 0x0b
    3952:	ac 85       	ldd	r26, Y+12	; 0x0c
    3954:	bd 85       	ldd	r27, Y+13	; 0x0d
    3956:	28 17       	cp	r18, r24
    3958:	39 07       	cpc	r19, r25
    395a:	4a 07       	cpc	r20, r26
    395c:	5b 07       	cpc	r21, r27
    395e:	10 f4       	brcc	.+4      	; 0x3964 <usart_set_baudrate+0xe8>
		return false;
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	40 c1       	rjmp	.+640    	; 0x3be4 <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3964:	8e 89       	ldd	r24, Y+22	; 0x16
    3966:	9f 89       	ldd	r25, Y+23	; 0x17
    3968:	fc 01       	movw	r30, r24
    396a:	84 81       	ldd	r24, Z+4	; 0x04
    396c:	88 2f       	mov	r24, r24
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	84 70       	andi	r24, 0x04	; 4
    3972:	99 27       	eor	r25, r25
    3974:	89 2b       	or	r24, r25
    3976:	61 f4       	brne	.+24     	; 0x3990 <usart_set_baudrate+0x114>
		baud *= 2;
    3978:	88 8d       	ldd	r24, Y+24	; 0x18
    397a:	99 8d       	ldd	r25, Y+25	; 0x19
    397c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    397e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3980:	88 0f       	add	r24, r24
    3982:	99 1f       	adc	r25, r25
    3984:	aa 1f       	adc	r26, r26
    3986:	bb 1f       	adc	r27, r27
    3988:	88 8f       	std	Y+24, r24	; 0x18
    398a:	99 8f       	std	Y+25, r25	; 0x19
    398c:	aa 8f       	std	Y+26, r26	; 0x1a
    398e:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    3990:	8f ef       	ldi	r24, 0xFF	; 255
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	a0 e0       	ldi	r26, 0x00	; 0
    3996:	b0 e0       	ldi	r27, 0x00	; 0
    3998:	8e 83       	std	Y+6, r24	; 0x06
    399a:	9f 83       	std	Y+7, r25	; 0x07
    399c:	a8 87       	std	Y+8, r26	; 0x08
    399e:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    39a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39a4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    39a6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    39a8:	28 8d       	ldd	r18, Y+24	; 0x18
    39aa:	39 8d       	ldd	r19, Y+25	; 0x19
    39ac:	4a 8d       	ldd	r20, Y+26	; 0x1a
    39ae:	5b 8d       	ldd	r21, Y+27	; 0x1b
    39b0:	bc 01       	movw	r22, r24
    39b2:	cd 01       	movw	r24, r26
    39b4:	0e 94 0c 28 	call	0x5018	; 0x5018 <__udivmodsi4>
    39b8:	da 01       	movw	r26, r20
    39ba:	c9 01       	movw	r24, r18
    39bc:	8a 8b       	std	Y+18, r24	; 0x12
    39be:	9b 8b       	std	Y+19, r25	; 0x13
    39c0:	ac 8b       	std	Y+20, r26	; 0x14
    39c2:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    39c4:	89 ef       	ldi	r24, 0xF9	; 249
    39c6:	89 83       	std	Y+1, r24	; 0x01
    39c8:	28 c0       	rjmp	.+80     	; 0x3a1a <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    39ca:	2a 89       	ldd	r18, Y+18	; 0x12
    39cc:	3b 89       	ldd	r19, Y+19	; 0x13
    39ce:	4c 89       	ldd	r20, Y+20	; 0x14
    39d0:	5d 89       	ldd	r21, Y+21	; 0x15
    39d2:	8e 81       	ldd	r24, Y+6	; 0x06
    39d4:	9f 81       	ldd	r25, Y+7	; 0x07
    39d6:	a8 85       	ldd	r26, Y+8	; 0x08
    39d8:	b9 85       	ldd	r27, Y+9	; 0x09
    39da:	28 17       	cp	r18, r24
    39dc:	39 07       	cpc	r19, r25
    39de:	4a 07       	cpc	r20, r26
    39e0:	5b 07       	cpc	r21, r27
    39e2:	f8 f0       	brcs	.+62     	; 0x3a22 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    39e4:	8e 81       	ldd	r24, Y+6	; 0x06
    39e6:	9f 81       	ldd	r25, Y+7	; 0x07
    39e8:	a8 85       	ldd	r26, Y+8	; 0x08
    39ea:	b9 85       	ldd	r27, Y+9	; 0x09
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	aa 1f       	adc	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	8e 83       	std	Y+6, r24	; 0x06
    39f6:	9f 83       	std	Y+7, r25	; 0x07
    39f8:	a8 87       	std	Y+8, r26	; 0x08
    39fa:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	8d 3f       	cpi	r24, 0xFD	; 253
    3a00:	4c f4       	brge	.+18     	; 0x3a14 <usart_set_baudrate+0x198>
			limit |= 1;
    3a02:	8e 81       	ldd	r24, Y+6	; 0x06
    3a04:	9f 81       	ldd	r25, Y+7	; 0x07
    3a06:	a8 85       	ldd	r26, Y+8	; 0x08
    3a08:	b9 85       	ldd	r27, Y+9	; 0x09
    3a0a:	81 60       	ori	r24, 0x01	; 1
    3a0c:	8e 83       	std	Y+6, r24	; 0x06
    3a0e:	9f 83       	std	Y+7, r25	; 0x07
    3a10:	a8 87       	std	Y+8, r26	; 0x08
    3a12:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	8f 5f       	subi	r24, 0xFF	; 255
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	87 30       	cpi	r24, 0x07	; 7
    3a1e:	ac f2       	brlt	.-86     	; 0x39ca <usart_set_baudrate+0x14e>
    3a20:	01 c0       	rjmp	.+2      	; 0x3a24 <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    3a22:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	88 23       	and	r24, r24
    3a28:	0c f0       	brlt	.+2      	; 0x3a2c <usart_set_baudrate+0x1b0>
    3a2a:	8a c0       	rjmp	.+276    	; 0x3b40 <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3a2c:	88 8d       	ldd	r24, Y+24	; 0x18
    3a2e:	99 8d       	ldd	r25, Y+25	; 0x19
    3a30:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3a32:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3a34:	88 0f       	add	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	aa 1f       	adc	r26, r26
    3a3a:	bb 1f       	adc	r27, r27
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	aa 1f       	adc	r26, r26
    3a42:	bb 1f       	adc	r27, r27
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	aa 1f       	adc	r26, r26
    3a4a:	bb 1f       	adc	r27, r27
    3a4c:	9c 01       	movw	r18, r24
    3a4e:	ad 01       	movw	r20, r26
    3a50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a54:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3a56:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3a58:	82 1b       	sub	r24, r18
    3a5a:	93 0b       	sbc	r25, r19
    3a5c:	a4 0b       	sbc	r26, r20
    3a5e:	b5 0b       	sbc	r27, r21
    3a60:	8c 8f       	std	Y+28, r24	; 0x1c
    3a62:	9d 8f       	std	Y+29, r25	; 0x1d
    3a64:	ae 8f       	std	Y+30, r26	; 0x1e
    3a66:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	8e 3f       	cpi	r24, 0xFE	; 254
    3a6c:	94 f5       	brge	.+100    	; 0x3ad2 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	08 2e       	mov	r0, r24
    3a72:	00 0c       	add	r0, r0
    3a74:	99 0b       	sbc	r25, r25
    3a76:	2d ef       	ldi	r18, 0xFD	; 253
    3a78:	3f ef       	ldi	r19, 0xFF	; 255
    3a7a:	28 1b       	sub	r18, r24
    3a7c:	39 0b       	sbc	r19, r25
    3a7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a82:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3a84:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3a86:	7c 01       	movw	r14, r24
    3a88:	8d 01       	movw	r16, r26
    3a8a:	04 c0       	rjmp	.+8      	; 0x3a94 <usart_set_baudrate+0x218>
    3a8c:	ee 0c       	add	r14, r14
    3a8e:	ff 1c       	adc	r15, r15
    3a90:	00 1f       	adc	r16, r16
    3a92:	11 1f       	adc	r17, r17
    3a94:	2a 95       	dec	r18
    3a96:	d2 f7       	brpl	.-12     	; 0x3a8c <usart_set_baudrate+0x210>
    3a98:	a8 01       	movw	r20, r16
    3a9a:	97 01       	movw	r18, r14
    3a9c:	88 8d       	ldd	r24, Y+24	; 0x18
    3a9e:	99 8d       	ldd	r25, Y+25	; 0x19
    3aa0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3aa2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3aa4:	b6 95       	lsr	r27
    3aa6:	a7 95       	ror	r26
    3aa8:	97 95       	ror	r25
    3aaa:	87 95       	ror	r24
    3aac:	82 0f       	add	r24, r18
    3aae:	93 1f       	adc	r25, r19
    3ab0:	a4 1f       	adc	r26, r20
    3ab2:	b5 1f       	adc	r27, r21
    3ab4:	28 8d       	ldd	r18, Y+24	; 0x18
    3ab6:	39 8d       	ldd	r19, Y+25	; 0x19
    3ab8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3aba:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 0c 28 	call	0x5018	; 0x5018 <__udivmodsi4>
    3ac4:	da 01       	movw	r26, r20
    3ac6:	c9 01       	movw	r24, r18
    3ac8:	8a 83       	std	Y+2, r24	; 0x02
    3aca:	9b 83       	std	Y+3, r25	; 0x03
    3acc:	ac 83       	std	Y+4, r26	; 0x04
    3ace:	bd 83       	std	Y+5, r27	; 0x05
    3ad0:	70 c0       	rjmp	.+224    	; 0x3bb2 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	08 2e       	mov	r0, r24
    3ad6:	00 0c       	add	r0, r0
    3ad8:	99 0b       	sbc	r25, r25
    3ada:	9c 01       	movw	r18, r24
    3adc:	2d 5f       	subi	r18, 0xFD	; 253
    3ade:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae0:	88 8d       	ldd	r24, Y+24	; 0x18
    3ae2:	99 8d       	ldd	r25, Y+25	; 0x19
    3ae4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3ae6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3ae8:	04 c0       	rjmp	.+8      	; 0x3af2 <usart_set_baudrate+0x276>
    3aea:	88 0f       	add	r24, r24
    3aec:	99 1f       	adc	r25, r25
    3aee:	aa 1f       	adc	r26, r26
    3af0:	bb 1f       	adc	r27, r27
    3af2:	2a 95       	dec	r18
    3af4:	d2 f7       	brpl	.-12     	; 0x3aea <usart_set_baudrate+0x26e>
    3af6:	88 8f       	std	Y+24, r24	; 0x18
    3af8:	99 8f       	std	Y+25, r25	; 0x19
    3afa:	aa 8f       	std	Y+26, r26	; 0x1a
    3afc:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    3afe:	88 8d       	ldd	r24, Y+24	; 0x18
    3b00:	99 8d       	ldd	r25, Y+25	; 0x19
    3b02:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b04:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3b06:	9c 01       	movw	r18, r24
    3b08:	ad 01       	movw	r20, r26
    3b0a:	56 95       	lsr	r21
    3b0c:	47 95       	ror	r20
    3b0e:	37 95       	ror	r19
    3b10:	27 95       	ror	r18
    3b12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b16:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3b18:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3b1a:	82 0f       	add	r24, r18
    3b1c:	93 1f       	adc	r25, r19
    3b1e:	a4 1f       	adc	r26, r20
    3b20:	b5 1f       	adc	r27, r21
    3b22:	28 8d       	ldd	r18, Y+24	; 0x18
    3b24:	39 8d       	ldd	r19, Y+25	; 0x19
    3b26:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3b28:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3b2a:	bc 01       	movw	r22, r24
    3b2c:	cd 01       	movw	r24, r26
    3b2e:	0e 94 0c 28 	call	0x5018	; 0x5018 <__udivmodsi4>
    3b32:	da 01       	movw	r26, r20
    3b34:	c9 01       	movw	r24, r18
    3b36:	8a 83       	std	Y+2, r24	; 0x02
    3b38:	9b 83       	std	Y+3, r25	; 0x03
    3b3a:	ac 83       	std	Y+4, r26	; 0x04
    3b3c:	bd 83       	std	Y+5, r27	; 0x05
    3b3e:	39 c0       	rjmp	.+114    	; 0x3bb2 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	08 2e       	mov	r0, r24
    3b44:	00 0c       	add	r0, r0
    3b46:	99 0b       	sbc	r25, r25
    3b48:	9c 01       	movw	r18, r24
    3b4a:	2d 5f       	subi	r18, 0xFD	; 253
    3b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b4e:	88 8d       	ldd	r24, Y+24	; 0x18
    3b50:	99 8d       	ldd	r25, Y+25	; 0x19
    3b52:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b54:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3b56:	04 c0       	rjmp	.+8      	; 0x3b60 <usart_set_baudrate+0x2e4>
    3b58:	88 0f       	add	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	aa 1f       	adc	r26, r26
    3b5e:	bb 1f       	adc	r27, r27
    3b60:	2a 95       	dec	r18
    3b62:	d2 f7       	brpl	.-12     	; 0x3b58 <usart_set_baudrate+0x2dc>
    3b64:	88 8f       	std	Y+24, r24	; 0x18
    3b66:	99 8f       	std	Y+25, r25	; 0x19
    3b68:	aa 8f       	std	Y+26, r26	; 0x1a
    3b6a:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    3b6c:	88 8d       	ldd	r24, Y+24	; 0x18
    3b6e:	99 8d       	ldd	r25, Y+25	; 0x19
    3b70:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b72:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3b74:	9c 01       	movw	r18, r24
    3b76:	ad 01       	movw	r20, r26
    3b78:	56 95       	lsr	r21
    3b7a:	47 95       	ror	r20
    3b7c:	37 95       	ror	r19
    3b7e:	27 95       	ror	r18
    3b80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b82:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b84:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3b86:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3b88:	82 0f       	add	r24, r18
    3b8a:	93 1f       	adc	r25, r19
    3b8c:	a4 1f       	adc	r26, r20
    3b8e:	b5 1f       	adc	r27, r21
    3b90:	28 8d       	ldd	r18, Y+24	; 0x18
    3b92:	39 8d       	ldd	r19, Y+25	; 0x19
    3b94:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3b96:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 0c 28 	call	0x5018	; 0x5018 <__udivmodsi4>
    3ba0:	da 01       	movw	r26, r20
    3ba2:	c9 01       	movw	r24, r18
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	a1 09       	sbc	r26, r1
    3ba8:	b1 09       	sbc	r27, r1
    3baa:	8a 83       	std	Y+2, r24	; 0x02
    3bac:	9b 83       	std	Y+3, r25	; 0x03
    3bae:	ac 83       	std	Y+4, r26	; 0x04
    3bb0:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb6:	ac 81       	ldd	r26, Y+4	; 0x04
    3bb8:	bd 81       	ldd	r27, Y+5	; 0x05
    3bba:	89 2f       	mov	r24, r25
    3bbc:	9a 2f       	mov	r25, r26
    3bbe:	ab 2f       	mov	r26, r27
    3bc0:	bb 27       	eor	r27, r27
    3bc2:	98 2f       	mov	r25, r24
    3bc4:	9f 70       	andi	r25, 0x0F	; 15
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	82 95       	swap	r24
    3bca:	80 7f       	andi	r24, 0xF0	; 240
    3bcc:	29 2f       	mov	r18, r25
    3bce:	28 2b       	or	r18, r24
    3bd0:	8e 89       	ldd	r24, Y+22	; 0x16
    3bd2:	9f 89       	ldd	r25, Y+23	; 0x17
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    3bd8:	2a 81       	ldd	r18, Y+2	; 0x02
    3bda:	8e 89       	ldd	r24, Y+22	; 0x16
    3bdc:	9f 89       	ldd	r25, Y+23	; 0x17
    3bde:	fc 01       	movw	r30, r24
    3be0:	26 83       	std	Z+6, r18	; 0x06

	return true;
    3be2:	81 e0       	ldi	r24, 0x01	; 1
}
    3be4:	6f 96       	adiw	r28, 0x1f	; 31
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	de bf       	out	0x3e, r29	; 62
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	08 95       	ret

00003bf8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    3bf8:	cf 93       	push	r28
    3bfa:	df 93       	push	r29
    3bfc:	00 d0       	rcall	.+0      	; 0x3bfe <ioport_configure_port_pin+0x6>
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <ioport_configure_port_pin+0x8>
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	8a 83       	std	Y+2, r24	; 0x02
    3c06:	9b 83       	std	Y+3, r25	; 0x03
    3c08:	6c 83       	std	Y+4, r22	; 0x04
    3c0a:	4d 83       	std	Y+5, r20	; 0x05
    3c0c:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3c0e:	19 82       	std	Y+1, r1	; 0x01
    3c10:	20 c0       	rjmp	.+64     	; 0x3c52 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    3c12:	8c 81       	ldd	r24, Y+4	; 0x04
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	29 81       	ldd	r18, Y+1	; 0x01
    3c1a:	22 2f       	mov	r18, r18
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <ioport_configure_port_pin+0x2c>
    3c20:	95 95       	asr	r25
    3c22:	87 95       	ror	r24
    3c24:	2a 95       	dec	r18
    3c26:	e2 f7       	brpl	.-8      	; 0x3c20 <ioport_configure_port_pin+0x28>
    3c28:	81 70       	andi	r24, 0x01	; 1
    3c2a:	99 27       	eor	r25, r25
    3c2c:	89 2b       	or	r24, r25
    3c2e:	71 f0       	breq	.+28     	; 0x3c4c <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	88 2f       	mov	r24, r24
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	40 96       	adiw	r24, 0x10	; 16
    3c38:	2a 81       	ldd	r18, Y+2	; 0x02
    3c3a:	3b 81       	ldd	r19, Y+3	; 0x03
    3c3c:	82 0f       	add	r24, r18
    3c3e:	93 1f       	adc	r25, r19
    3c40:	2d 81       	ldd	r18, Y+5	; 0x05
    3c42:	3e 81       	ldd	r19, Y+6	; 0x06
    3c44:	23 2f       	mov	r18, r19
    3c46:	33 27       	eor	r19, r19
    3c48:	fc 01       	movw	r30, r24
    3c4a:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	8f 5f       	subi	r24, 0xFF	; 255
    3c50:	89 83       	std	Y+1, r24	; 0x01
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	88 30       	cpi	r24, 0x08	; 8
    3c56:	e8 f2       	brcs	.-70     	; 0x3c12 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3c58:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5c:	81 70       	andi	r24, 0x01	; 1
    3c5e:	99 27       	eor	r25, r25
    3c60:	89 2b       	or	r24, r25
    3c62:	d1 f0       	breq	.+52     	; 0x3c98 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    3c64:	8d 81       	ldd	r24, Y+5	; 0x05
    3c66:	9e 81       	ldd	r25, Y+6	; 0x06
    3c68:	82 70       	andi	r24, 0x02	; 2
    3c6a:	99 27       	eor	r25, r25
    3c6c:	89 2b       	or	r24, r25
    3c6e:	39 f0       	breq	.+14     	; 0x3c7e <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	9b 81       	ldd	r25, Y+3	; 0x03
    3c74:	05 96       	adiw	r24, 0x05	; 5
    3c76:	2c 81       	ldd	r18, Y+4	; 0x04
    3c78:	fc 01       	movw	r30, r24
    3c7a:	20 83       	st	Z, r18
    3c7c:	06 c0       	rjmp	.+12     	; 0x3c8a <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c80:	9b 81       	ldd	r25, Y+3	; 0x03
    3c82:	06 96       	adiw	r24, 0x06	; 6
    3c84:	2c 81       	ldd	r18, Y+4	; 0x04
    3c86:	fc 01       	movw	r30, r24
    3c88:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8e:	01 96       	adiw	r24, 0x01	; 1
    3c90:	2c 81       	ldd	r18, Y+4	; 0x04
    3c92:	fc 01       	movw	r30, r24
    3c94:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    3c96:	06 c0       	rjmp	.+12     	; 0x3ca4 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    3c98:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c9c:	02 96       	adiw	r24, 0x02	; 2
    3c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	20 83       	st	Z, r18
	}
}
    3ca4:	00 00       	nop
    3ca6:	26 96       	adiw	r28, 0x06	; 6
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	df 91       	pop	r29
    3cae:	cf 91       	pop	r28
    3cb0:	08 95       	ret

00003cb2 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	27 97       	sbiw	r28, 0x07	; 7
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	8d 83       	std	Y+5, r24	; 0x05
    3cc2:	6e 83       	std	Y+6, r22	; 0x06
    3cc4:	7f 83       	std	Y+7, r23	; 0x07
    3cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc8:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	88 2f       	mov	r24, r24
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	9c 01       	movw	r18, r24
    3cd2:	27 70       	andi	r18, 0x07	; 7
    3cd4:	33 27       	eor	r19, r19
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	02 c0       	rjmp	.+4      	; 0x3ce0 <ioport_configure_pin+0x2e>
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	2a 95       	dec	r18
    3ce2:	e2 f7       	brpl	.-8      	; 0x3cdc <ioport_configure_pin+0x2a>
    3ce4:	68 2f       	mov	r22, r24
    3ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce8:	8a 83       	std	Y+2, r24	; 0x02
    3cea:	8a 81       	ldd	r24, Y+2	; 0x02
    3cec:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    3cee:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf0:	86 95       	lsr	r24
    3cf2:	86 95       	lsr	r24
    3cf4:	86 95       	lsr	r24
    3cf6:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    3cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cfa:	88 2f       	mov	r24, r24
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	82 95       	swap	r24
    3d04:	92 95       	swap	r25
    3d06:	90 7f       	andi	r25, 0xF0	; 240
    3d08:	98 27       	eor	r25, r24
    3d0a:	80 7f       	andi	r24, 0xF0	; 240
    3d0c:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    3d0e:	9a 5f       	subi	r25, 0xFA	; 250
    3d10:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    3d12:	8e 81       	ldd	r24, Y+6	; 0x06
    3d14:	9f 81       	ldd	r25, Y+7	; 0x07
    3d16:	ac 01       	movw	r20, r24
    3d18:	c9 01       	movw	r24, r18
    3d1a:	6e df       	rcall	.-292    	; 0x3bf8 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    3d1c:	00 00       	nop
    3d1e:	27 96       	adiw	r28, 0x07	; 7
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	de bf       	out	0x3e, r29	; 62
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	08 95       	ret

00003d2a <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    3d32:	63 e0       	ldi	r22, 0x03	; 3
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	83 e7       	ldi	r24, 0x73	; 115
    3d38:	bc df       	rcall	.-136    	; 0x3cb2 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	78 e1       	ldi	r23, 0x18	; 24
    3d3e:	82 e7       	ldi	r24, 0x72	; 114
    3d40:	b8 df       	rcall	.-144    	; 0x3cb2 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    3d42:	00 00       	nop
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	08 95       	ret

00003d4a <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    3d4a:	cf 93       	push	r28
    3d4c:	df 93       	push	r29
    3d4e:	1f 92       	push	r1
    3d50:	1f 92       	push	r1
    3d52:	cd b7       	in	r28, 0x3d	; 61
    3d54:	de b7       	in	r29, 0x3e	; 62
    3d56:	89 83       	std	Y+1, r24	; 0x01
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5e:	89 2b       	or	r24, r25
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <sysclk_enable_peripheral_clock+0x1a>
    3d62:	85 c1       	rjmp	.+778    	; 0x406e <__stack+0x6f>
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	9a 81       	ldd	r25, Y+2	; 0x02
    3d68:	80 3c       	cpi	r24, 0xC0	; 192
    3d6a:	91 05       	cpc	r25, r1
    3d6c:	29 f4       	brne	.+10     	; 0x3d78 <sysclk_enable_peripheral_clock+0x2e>
    3d6e:	60 e1       	ldi	r22, 0x10	; 16
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3d76:	7b c1       	rjmp	.+758    	; 0x406e <__stack+0x6f>
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7c:	80 34       	cpi	r24, 0x40	; 64
    3d7e:	94 40       	sbci	r25, 0x04	; 4
    3d80:	29 f4       	brne	.+10     	; 0x3d8c <sysclk_enable_peripheral_clock+0x42>
    3d82:	68 e0       	ldi	r22, 0x08	; 8
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3d8a:	71 c1       	rjmp	.+738    	; 0x406e <__stack+0x6f>
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	81 15       	cp	r24, r1
    3d92:	94 40       	sbci	r25, 0x04	; 4
    3d94:	29 f4       	brne	.+10     	; 0x3da0 <sysclk_enable_peripheral_clock+0x56>
    3d96:	64 e0       	ldi	r22, 0x04	; 4
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3d9e:	67 c1       	rjmp	.+718    	; 0x406e <__stack+0x6f>
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	9a 81       	ldd	r25, Y+2	; 0x02
    3da4:	80 38       	cpi	r24, 0x80	; 128
    3da6:	91 40       	sbci	r25, 0x01	; 1
    3da8:	29 f4       	brne	.+10     	; 0x3db4 <sysclk_enable_peripheral_clock+0x6a>
    3daa:	62 e0       	ldi	r22, 0x02	; 2
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3db2:	5d c1       	rjmp	.+698    	; 0x406e <__stack+0x6f>
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	9a 81       	ldd	r25, Y+2	; 0x02
    3db8:	81 15       	cp	r24, r1
    3dba:	91 40       	sbci	r25, 0x01	; 1
    3dbc:	29 f4       	brne	.+10     	; 0x3dc8 <sysclk_enable_peripheral_clock+0x7e>
    3dbe:	61 e0       	ldi	r22, 0x01	; 1
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3dc6:	53 c1       	rjmp	.+678    	; 0x406e <__stack+0x6f>
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	9a 81       	ldd	r25, Y+2	; 0x02
    3dcc:	80 38       	cpi	r24, 0x80	; 128
    3dce:	93 40       	sbci	r25, 0x03	; 3
    3dd0:	29 f4       	brne	.+10     	; 0x3ddc <sysclk_enable_peripheral_clock+0x92>
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3dda:	49 c1       	rjmp	.+658    	; 0x406e <__stack+0x6f>
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	9a 81       	ldd	r25, Y+2	; 0x02
    3de0:	80 39       	cpi	r24, 0x90	; 144
    3de2:	93 40       	sbci	r25, 0x03	; 3
    3de4:	29 f4       	brne	.+10     	; 0x3df0 <sysclk_enable_peripheral_clock+0xa6>
    3de6:	61 e0       	ldi	r22, 0x01	; 1
    3de8:	82 e0       	ldi	r24, 0x02	; 2
    3dea:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3dee:	3f c1       	rjmp	.+638    	; 0x406e <__stack+0x6f>
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	81 15       	cp	r24, r1
    3df6:	92 40       	sbci	r25, 0x02	; 2
    3df8:	29 f4       	brne	.+10     	; 0x3e04 <sysclk_enable_peripheral_clock+0xba>
    3dfa:	62 e0       	ldi	r22, 0x02	; 2
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e02:	35 c1       	rjmp	.+618    	; 0x406e <__stack+0x6f>
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	9a 81       	ldd	r25, Y+2	; 0x02
    3e08:	80 34       	cpi	r24, 0x40	; 64
    3e0a:	92 40       	sbci	r25, 0x02	; 2
    3e0c:	29 f4       	brne	.+10     	; 0x3e18 <sysclk_enable_peripheral_clock+0xce>
    3e0e:	62 e0       	ldi	r22, 0x02	; 2
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e16:	2b c1       	rjmp	.+598    	; 0x406e <__stack+0x6f>
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1c:	81 15       	cp	r24, r1
    3e1e:	93 40       	sbci	r25, 0x03	; 3
    3e20:	29 f4       	brne	.+10     	; 0x3e2c <sysclk_enable_peripheral_clock+0xe2>
    3e22:	64 e0       	ldi	r22, 0x04	; 4
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e2a:	21 c1       	rjmp	.+578    	; 0x406e <__stack+0x6f>
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e30:	80 32       	cpi	r24, 0x20	; 32
    3e32:	93 40       	sbci	r25, 0x03	; 3
    3e34:	29 f4       	brne	.+10     	; 0x3e40 <sysclk_enable_peripheral_clock+0xf6>
    3e36:	64 e0       	ldi	r22, 0x04	; 4
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e3e:	17 c1       	rjmp	.+558    	; 0x406e <__stack+0x6f>
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	9a 81       	ldd	r25, Y+2	; 0x02
    3e44:	81 15       	cp	r24, r1
    3e46:	98 40       	sbci	r25, 0x08	; 8
    3e48:	29 f4       	brne	.+10     	; 0x3e54 <sysclk_enable_peripheral_clock+0x10a>
    3e4a:	61 e0       	ldi	r22, 0x01	; 1
    3e4c:	83 e0       	ldi	r24, 0x03	; 3
    3e4e:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e52:	0d c1       	rjmp	.+538    	; 0x406e <__stack+0x6f>
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	9a 81       	ldd	r25, Y+2	; 0x02
    3e58:	81 15       	cp	r24, r1
    3e5a:	99 40       	sbci	r25, 0x09	; 9
    3e5c:	29 f4       	brne	.+10     	; 0x3e68 <sysclk_enable_peripheral_clock+0x11e>
    3e5e:	61 e0       	ldi	r22, 0x01	; 1
    3e60:	84 e0       	ldi	r24, 0x04	; 4
    3e62:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e66:	03 c1       	rjmp	.+518    	; 0x406e <__stack+0x6f>
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6c:	81 15       	cp	r24, r1
    3e6e:	9a 40       	sbci	r25, 0x0A	; 10
    3e70:	29 f4       	brne	.+10     	; 0x3e7c <sysclk_enable_peripheral_clock+0x132>
    3e72:	61 e0       	ldi	r22, 0x01	; 1
    3e74:	85 e0       	ldi	r24, 0x05	; 5
    3e76:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e7a:	f9 c0       	rjmp	.+498    	; 0x406e <__stack+0x6f>
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e80:	81 15       	cp	r24, r1
    3e82:	9b 40       	sbci	r25, 0x0B	; 11
    3e84:	29 f4       	brne	.+10     	; 0x3e90 <sysclk_enable_peripheral_clock+0x146>
    3e86:	61 e0       	ldi	r22, 0x01	; 1
    3e88:	86 e0       	ldi	r24, 0x06	; 6
    3e8a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3e8e:	ef c0       	rjmp	.+478    	; 0x406e <__stack+0x6f>
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	9a 81       	ldd	r25, Y+2	; 0x02
    3e94:	80 34       	cpi	r24, 0x40	; 64
    3e96:	98 40       	sbci	r25, 0x08	; 8
    3e98:	29 f4       	brne	.+10     	; 0x3ea4 <sysclk_enable_peripheral_clock+0x15a>
    3e9a:	62 e0       	ldi	r22, 0x02	; 2
    3e9c:	83 e0       	ldi	r24, 0x03	; 3
    3e9e:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3ea2:	e5 c0       	rjmp	.+458    	; 0x406e <__stack+0x6f>
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	80 34       	cpi	r24, 0x40	; 64
    3eaa:	99 40       	sbci	r25, 0x09	; 9
    3eac:	29 f4       	brne	.+10     	; 0x3eb8 <sysclk_enable_peripheral_clock+0x16e>
    3eae:	62 e0       	ldi	r22, 0x02	; 2
    3eb0:	84 e0       	ldi	r24, 0x04	; 4
    3eb2:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3eb6:	db c0       	rjmp	.+438    	; 0x406e <__stack+0x6f>
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebc:	80 34       	cpi	r24, 0x40	; 64
    3ebe:	9a 40       	sbci	r25, 0x0A	; 10
    3ec0:	29 f4       	brne	.+10     	; 0x3ecc <sysclk_enable_peripheral_clock+0x182>
    3ec2:	62 e0       	ldi	r22, 0x02	; 2
    3ec4:	85 e0       	ldi	r24, 0x05	; 5
    3ec6:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3eca:	d1 c0       	rjmp	.+418    	; 0x406e <__stack+0x6f>
    3ecc:	89 81       	ldd	r24, Y+1	; 0x01
    3ece:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed0:	80 34       	cpi	r24, 0x40	; 64
    3ed2:	9b 40       	sbci	r25, 0x0B	; 11
    3ed4:	29 f4       	brne	.+10     	; 0x3ee0 <sysclk_enable_peripheral_clock+0x196>
    3ed6:	62 e0       	ldi	r22, 0x02	; 2
    3ed8:	86 e0       	ldi	r24, 0x06	; 6
    3eda:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3ede:	c7 c0       	rjmp	.+398    	; 0x406e <__stack+0x6f>
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee4:	80 39       	cpi	r24, 0x90	; 144
    3ee6:	98 40       	sbci	r25, 0x08	; 8
    3ee8:	29 f4       	brne	.+10     	; 0x3ef4 <sysclk_enable_peripheral_clock+0x1aa>
    3eea:	64 e0       	ldi	r22, 0x04	; 4
    3eec:	83 e0       	ldi	r24, 0x03	; 3
    3eee:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3ef2:	bd c0       	rjmp	.+378    	; 0x406e <__stack+0x6f>
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	80 39       	cpi	r24, 0x90	; 144
    3efa:	99 40       	sbci	r25, 0x09	; 9
    3efc:	29 f4       	brne	.+10     	; 0x3f08 <sysclk_enable_peripheral_clock+0x1be>
    3efe:	64 e0       	ldi	r22, 0x04	; 4
    3f00:	84 e0       	ldi	r24, 0x04	; 4
    3f02:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f06:	b3 c0       	rjmp	.+358    	; 0x406e <__stack+0x6f>
    3f08:	89 81       	ldd	r24, Y+1	; 0x01
    3f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0c:	80 39       	cpi	r24, 0x90	; 144
    3f0e:	9a 40       	sbci	r25, 0x0A	; 10
    3f10:	29 f4       	brne	.+10     	; 0x3f1c <sysclk_enable_peripheral_clock+0x1d2>
    3f12:	64 e0       	ldi	r22, 0x04	; 4
    3f14:	85 e0       	ldi	r24, 0x05	; 5
    3f16:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f1a:	a9 c0       	rjmp	.+338    	; 0x406e <__stack+0x6f>
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f20:	80 39       	cpi	r24, 0x90	; 144
    3f22:	9b 40       	sbci	r25, 0x0B	; 11
    3f24:	29 f4       	brne	.+10     	; 0x3f30 <sysclk_enable_peripheral_clock+0x1e6>
    3f26:	64 e0       	ldi	r22, 0x04	; 4
    3f28:	86 e0       	ldi	r24, 0x06	; 6
    3f2a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f2e:	9f c0       	rjmp	.+318    	; 0x406e <__stack+0x6f>
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	9a 81       	ldd	r25, Y+2	; 0x02
    3f34:	80 3c       	cpi	r24, 0xC0	; 192
    3f36:	98 40       	sbci	r25, 0x08	; 8
    3f38:	29 f4       	brne	.+10     	; 0x3f44 <sysclk_enable_peripheral_clock+0x1fa>
    3f3a:	68 e0       	ldi	r22, 0x08	; 8
    3f3c:	83 e0       	ldi	r24, 0x03	; 3
    3f3e:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f42:	95 c0       	rjmp	.+298    	; 0x406e <__stack+0x6f>
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	9a 81       	ldd	r25, Y+2	; 0x02
    3f48:	80 3c       	cpi	r24, 0xC0	; 192
    3f4a:	99 40       	sbci	r25, 0x09	; 9
    3f4c:	29 f4       	brne	.+10     	; 0x3f58 <sysclk_enable_peripheral_clock+0x20e>
    3f4e:	68 e0       	ldi	r22, 0x08	; 8
    3f50:	84 e0       	ldi	r24, 0x04	; 4
    3f52:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f56:	8b c0       	rjmp	.+278    	; 0x406e <__stack+0x6f>
    3f58:	89 81       	ldd	r24, Y+1	; 0x01
    3f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5c:	80 3c       	cpi	r24, 0xC0	; 192
    3f5e:	9a 40       	sbci	r25, 0x0A	; 10
    3f60:	29 f4       	brne	.+10     	; 0x3f6c <sysclk_enable_peripheral_clock+0x222>
    3f62:	68 e0       	ldi	r22, 0x08	; 8
    3f64:	85 e0       	ldi	r24, 0x05	; 5
    3f66:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f6a:	81 c0       	rjmp	.+258    	; 0x406e <__stack+0x6f>
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f70:	80 3c       	cpi	r24, 0xC0	; 192
    3f72:	9b 40       	sbci	r25, 0x0B	; 11
    3f74:	29 f4       	brne	.+10     	; 0x3f80 <sysclk_enable_peripheral_clock+0x236>
    3f76:	68 e0       	ldi	r22, 0x08	; 8
    3f78:	86 e0       	ldi	r24, 0x06	; 6
    3f7a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f7e:	77 c0       	rjmp	.+238    	; 0x406e <__stack+0x6f>
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	80 3a       	cpi	r24, 0xA0	; 160
    3f86:	98 40       	sbci	r25, 0x08	; 8
    3f88:	29 f4       	brne	.+10     	; 0x3f94 <sysclk_enable_peripheral_clock+0x24a>
    3f8a:	60 e1       	ldi	r22, 0x10	; 16
    3f8c:	83 e0       	ldi	r24, 0x03	; 3
    3f8e:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3f92:	6d c0       	rjmp	.+218    	; 0x406e <__stack+0x6f>
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	9a 81       	ldd	r25, Y+2	; 0x02
    3f98:	80 3a       	cpi	r24, 0xA0	; 160
    3f9a:	99 40       	sbci	r25, 0x09	; 9
    3f9c:	29 f4       	brne	.+10     	; 0x3fa8 <sysclk_enable_peripheral_clock+0x25e>
    3f9e:	60 e1       	ldi	r22, 0x10	; 16
    3fa0:	84 e0       	ldi	r24, 0x04	; 4
    3fa2:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3fa6:	63 c0       	rjmp	.+198    	; 0x406e <__stack+0x6f>
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	9a 81       	ldd	r25, Y+2	; 0x02
    3fac:	80 3a       	cpi	r24, 0xA0	; 160
    3fae:	9a 40       	sbci	r25, 0x0A	; 10
    3fb0:	29 f4       	brne	.+10     	; 0x3fbc <sysclk_enable_peripheral_clock+0x272>
    3fb2:	60 e1       	ldi	r22, 0x10	; 16
    3fb4:	85 e0       	ldi	r24, 0x05	; 5
    3fb6:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3fba:	59 c0       	rjmp	.+178    	; 0x406e <__stack+0x6f>
    3fbc:	89 81       	ldd	r24, Y+1	; 0x01
    3fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc0:	80 3a       	cpi	r24, 0xA0	; 160
    3fc2:	9b 40       	sbci	r25, 0x0B	; 11
    3fc4:	29 f4       	brne	.+10     	; 0x3fd0 <sysclk_enable_peripheral_clock+0x286>
    3fc6:	60 e1       	ldi	r22, 0x10	; 16
    3fc8:	86 e0       	ldi	r24, 0x06	; 6
    3fca:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3fce:	4f c0       	rjmp	.+158    	; 0x406e <__stack+0x6f>
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd4:	80 3b       	cpi	r24, 0xB0	; 176
    3fd6:	98 40       	sbci	r25, 0x08	; 8
    3fd8:	29 f4       	brne	.+10     	; 0x3fe4 <sysclk_enable_peripheral_clock+0x29a>
    3fda:	60 e2       	ldi	r22, 0x20	; 32
    3fdc:	83 e0       	ldi	r24, 0x03	; 3
    3fde:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3fe2:	45 c0       	rjmp	.+138    	; 0x406e <__stack+0x6f>
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe8:	80 3b       	cpi	r24, 0xB0	; 176
    3fea:	99 40       	sbci	r25, 0x09	; 9
    3fec:	29 f4       	brne	.+10     	; 0x3ff8 <sysclk_enable_peripheral_clock+0x2ae>
    3fee:	60 e2       	ldi	r22, 0x20	; 32
    3ff0:	84 e0       	ldi	r24, 0x04	; 4
    3ff2:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    3ff6:	3b c0       	rjmp	.+118    	; 0x406e <__stack+0x6f>
    3ff8:	89 81       	ldd	r24, Y+1	; 0x01
    3ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffc:	80 3b       	cpi	r24, 0xB0	; 176
    3ffe:	9a 40       	sbci	r25, 0x0A	; 10
    4000:	29 f4       	brne	.+10     	; 0x400c <__stack+0xd>
    4002:	60 e2       	ldi	r22, 0x20	; 32
    4004:	85 e0       	ldi	r24, 0x05	; 5
    4006:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    400a:	31 c0       	rjmp	.+98     	; 0x406e <__stack+0x6f>
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	9a 81       	ldd	r25, Y+2	; 0x02
    4010:	80 3b       	cpi	r24, 0xB0	; 176
    4012:	9b 40       	sbci	r25, 0x0B	; 11
    4014:	29 f4       	brne	.+10     	; 0x4020 <__stack+0x21>
    4016:	60 e2       	ldi	r22, 0x20	; 32
    4018:	86 e0       	ldi	r24, 0x06	; 6
    401a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    401e:	27 c0       	rjmp	.+78     	; 0x406e <__stack+0x6f>
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	9a 81       	ldd	r25, Y+2	; 0x02
    4024:	80 38       	cpi	r24, 0x80	; 128
    4026:	94 40       	sbci	r25, 0x04	; 4
    4028:	29 f4       	brne	.+10     	; 0x4034 <__stack+0x35>
    402a:	60 e4       	ldi	r22, 0x40	; 64
    402c:	83 e0       	ldi	r24, 0x03	; 3
    402e:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    4032:	1d c0       	rjmp	.+58     	; 0x406e <__stack+0x6f>
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	9a 81       	ldd	r25, Y+2	; 0x02
    4038:	80 39       	cpi	r24, 0x90	; 144
    403a:	94 40       	sbci	r25, 0x04	; 4
    403c:	29 f4       	brne	.+10     	; 0x4048 <__stack+0x49>
    403e:	60 e4       	ldi	r22, 0x40	; 64
    4040:	84 e0       	ldi	r24, 0x04	; 4
    4042:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    4046:	13 c0       	rjmp	.+38     	; 0x406e <__stack+0x6f>
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	80 3a       	cpi	r24, 0xA0	; 160
    404e:	94 40       	sbci	r25, 0x04	; 4
    4050:	29 f4       	brne	.+10     	; 0x405c <__stack+0x5d>
    4052:	60 e4       	ldi	r22, 0x40	; 64
    4054:	85 e0       	ldi	r24, 0x05	; 5
    4056:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    405a:	09 c0       	rjmp	.+18     	; 0x406e <__stack+0x6f>
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
    4060:	80 3b       	cpi	r24, 0xB0	; 176
    4062:	94 40       	sbci	r25, 0x04	; 4
    4064:	21 f4       	brne	.+8      	; 0x406e <__stack+0x6f>
    4066:	60 e4       	ldi	r22, 0x40	; 64
    4068:	86 e0       	ldi	r24, 0x06	; 6
    406a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    406e:	00 00       	nop
    4070:	0f 90       	pop	r0
    4072:	0f 90       	pop	r0
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	08 95       	ret

0000407a <usart_serial_init>:
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	2b 97       	sbiw	r28, 0x0b	; 11
    4084:	cd bf       	out	0x3d, r28	; 61
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	88 87       	std	Y+8, r24	; 0x08
    408a:	99 87       	std	Y+9, r25	; 0x09
    408c:	6a 87       	std	Y+10, r22	; 0x0a
    408e:	7b 87       	std	Y+11, r23	; 0x0b
    4090:	8a 85       	ldd	r24, Y+10	; 0x0a
    4092:	9b 85       	ldd	r25, Y+11	; 0x0b
    4094:	fc 01       	movw	r30, r24
    4096:	84 81       	ldd	r24, Z+4	; 0x04
    4098:	8d 83       	std	Y+5, r24	; 0x05
    409a:	8a 85       	ldd	r24, Y+10	; 0x0a
    409c:	9b 85       	ldd	r25, Y+11	; 0x0b
    409e:	fc 01       	movw	r30, r24
    40a0:	85 81       	ldd	r24, Z+5	; 0x05
    40a2:	8e 83       	std	Y+6, r24	; 0x06
    40a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    40a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    40a8:	fc 01       	movw	r30, r24
    40aa:	86 81       	ldd	r24, Z+6	; 0x06
    40ac:	8f 83       	std	Y+7, r24	; 0x07
    40ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    40b2:	fc 01       	movw	r30, r24
    40b4:	80 81       	ld	r24, Z
    40b6:	91 81       	ldd	r25, Z+1	; 0x01
    40b8:	a2 81       	ldd	r26, Z+2	; 0x02
    40ba:	b3 81       	ldd	r27, Z+3	; 0x03
    40bc:	89 83       	std	Y+1, r24	; 0x01
    40be:	9a 83       	std	Y+2, r25	; 0x02
    40c0:	ab 83       	std	Y+3, r26	; 0x03
    40c2:	bc 83       	std	Y+4, r27	; 0x04
    40c4:	88 85       	ldd	r24, Y+8	; 0x08
    40c6:	99 85       	ldd	r25, Y+9	; 0x09
    40c8:	80 3a       	cpi	r24, 0xA0	; 160
    40ca:	98 40       	sbci	r25, 0x08	; 8
    40cc:	21 f4       	brne	.+8      	; 0x40d6 <usart_serial_init+0x5c>
    40ce:	60 e1       	ldi	r22, 0x10	; 16
    40d0:	83 e0       	ldi	r24, 0x03	; 3
    40d2:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    40d6:	88 85       	ldd	r24, Y+8	; 0x08
    40d8:	99 85       	ldd	r25, Y+9	; 0x09
    40da:	80 3b       	cpi	r24, 0xB0	; 176
    40dc:	98 40       	sbci	r25, 0x08	; 8
    40de:	21 f4       	brne	.+8      	; 0x40e8 <usart_serial_init+0x6e>
    40e0:	60 e2       	ldi	r22, 0x20	; 32
    40e2:	83 e0       	ldi	r24, 0x03	; 3
    40e4:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    40e8:	88 85       	ldd	r24, Y+8	; 0x08
    40ea:	99 85       	ldd	r25, Y+9	; 0x09
    40ec:	80 3a       	cpi	r24, 0xA0	; 160
    40ee:	99 40       	sbci	r25, 0x09	; 9
    40f0:	21 f4       	brne	.+8      	; 0x40fa <usart_serial_init+0x80>
    40f2:	60 e1       	ldi	r22, 0x10	; 16
    40f4:	84 e0       	ldi	r24, 0x04	; 4
    40f6:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    40fa:	88 85       	ldd	r24, Y+8	; 0x08
    40fc:	99 85       	ldd	r25, Y+9	; 0x09
    40fe:	80 3b       	cpi	r24, 0xB0	; 176
    4100:	99 40       	sbci	r25, 0x09	; 9
    4102:	21 f4       	brne	.+8      	; 0x410c <usart_serial_init+0x92>
    4104:	60 e2       	ldi	r22, 0x20	; 32
    4106:	84 e0       	ldi	r24, 0x04	; 4
    4108:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    410c:	88 85       	ldd	r24, Y+8	; 0x08
    410e:	99 85       	ldd	r25, Y+9	; 0x09
    4110:	80 3a       	cpi	r24, 0xA0	; 160
    4112:	9a 40       	sbci	r25, 0x0A	; 10
    4114:	21 f4       	brne	.+8      	; 0x411e <usart_serial_init+0xa4>
    4116:	60 e1       	ldi	r22, 0x10	; 16
    4118:	85 e0       	ldi	r24, 0x05	; 5
    411a:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    411e:	88 85       	ldd	r24, Y+8	; 0x08
    4120:	99 85       	ldd	r25, Y+9	; 0x09
    4122:	80 3b       	cpi	r24, 0xB0	; 176
    4124:	9a 40       	sbci	r25, 0x0A	; 10
    4126:	21 f4       	brne	.+8      	; 0x4130 <usart_serial_init+0xb6>
    4128:	60 e2       	ldi	r22, 0x20	; 32
    412a:	85 e0       	ldi	r24, 0x05	; 5
    412c:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    4130:	88 85       	ldd	r24, Y+8	; 0x08
    4132:	99 85       	ldd	r25, Y+9	; 0x09
    4134:	80 3a       	cpi	r24, 0xA0	; 160
    4136:	9b 40       	sbci	r25, 0x0B	; 11
    4138:	21 f4       	brne	.+8      	; 0x4142 <usart_serial_init+0xc8>
    413a:	60 e1       	ldi	r22, 0x10	; 16
    413c:	86 e0       	ldi	r24, 0x06	; 6
    413e:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    4142:	88 85       	ldd	r24, Y+8	; 0x08
    4144:	99 85       	ldd	r25, Y+9	; 0x09
    4146:	80 3b       	cpi	r24, 0xB0	; 176
    4148:	9b 40       	sbci	r25, 0x0B	; 11
    414a:	21 f4       	brne	.+8      	; 0x4154 <usart_serial_init+0xda>
    414c:	60 e2       	ldi	r22, 0x20	; 32
    414e:	86 e0       	ldi	r24, 0x06	; 6
    4150:	0e 94 ed 07 	call	0xfda	; 0xfda <sysclk_enable_module>
    4154:	88 85       	ldd	r24, Y+8	; 0x08
    4156:	99 85       	ldd	r25, Y+9	; 0x09
    4158:	9e 01       	movw	r18, r28
    415a:	2f 5f       	subi	r18, 0xFF	; 255
    415c:	3f 4f       	sbci	r19, 0xFF	; 255
    415e:	b9 01       	movw	r22, r18
    4160:	0f db       	rcall	.-2530   	; 0x3780 <usart_init_rs232>
    4162:	88 23       	and	r24, r24
    4164:	11 f0       	breq	.+4      	; 0x416a <usart_serial_init+0xf0>
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	01 c0       	rjmp	.+2      	; 0x416c <usart_serial_init+0xf2>
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	2b 96       	adiw	r28, 0x0b	; 11
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	08 95       	ret

00004178 <usart_serial_putchar>:
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	00 d0       	rcall	.+0      	; 0x417e <usart_serial_putchar+0x6>
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    4182:	89 83       	std	Y+1, r24	; 0x01
    4184:	9a 83       	std	Y+2, r25	; 0x02
    4186:	6b 83       	std	Y+3, r22	; 0x03
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	9a 81       	ldd	r25, Y+2	; 0x02
    418c:	6b 81       	ldd	r22, Y+3	; 0x03
    418e:	3e db       	rcall	.-2436   	; 0x380c <usart_putchar>
    4190:	23 96       	adiw	r28, 0x03	; 3
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	08 95       	ret

0000419c <usart_serial_getchar>:
    419c:	cf 93       	push	r28
    419e:	df 93       	push	r29
    41a0:	00 d0       	rcall	.+0      	; 0x41a2 <usart_serial_getchar+0x6>
    41a2:	1f 92       	push	r1
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	89 83       	std	Y+1, r24	; 0x01
    41aa:	9a 83       	std	Y+2, r25	; 0x02
    41ac:	6b 83       	std	Y+3, r22	; 0x03
    41ae:	7c 83       	std	Y+4, r23	; 0x04
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	9a 81       	ldd	r25, Y+2	; 0x02
    41b4:	49 db       	rcall	.-2414   	; 0x3848 <usart_getchar>
    41b6:	28 2f       	mov	r18, r24
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	9c 81       	ldd	r25, Y+4	; 0x04
    41bc:	fc 01       	movw	r30, r24
    41be:	20 83       	st	Z, r18
    41c0:	00 00       	nop
    41c2:	24 96       	adiw	r28, 0x04	; 4
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	de bf       	out	0x3e, r29	; 62
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	08 95       	ret

000041ce <stdio_serial_init>:
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	00 d0       	rcall	.+0      	; 0x41d4 <stdio_serial_init+0x6>
    41d4:	1f 92       	push	r1
    41d6:	cd b7       	in	r28, 0x3d	; 61
    41d8:	de b7       	in	r29, 0x3e	; 62
    41da:	89 83       	std	Y+1, r24	; 0x01
    41dc:	9a 83       	std	Y+2, r25	; 0x02
    41de:	6b 83       	std	Y+3, r22	; 0x03
    41e0:	7c 83       	std	Y+4, r23	; 0x04
    41e2:	89 81       	ldd	r24, Y+1	; 0x01
    41e4:	9a 81       	ldd	r25, Y+2	; 0x02
    41e6:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <stdio_base>
    41ea:	90 93 9e 21 	sts	0x219E, r25	; 0x80219e <stdio_base+0x1>
    41ee:	8c eb       	ldi	r24, 0xBC	; 188
    41f0:	90 e2       	ldi	r25, 0x20	; 32
    41f2:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <ptr_put>
    41f6:	90 93 9c 21 	sts	0x219C, r25	; 0x80219c <ptr_put+0x1>
    41fa:	8e ec       	ldi	r24, 0xCE	; 206
    41fc:	90 e2       	ldi	r25, 0x20	; 32
    41fe:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <ptr_get>
    4202:	90 93 9a 21 	sts	0x219A, r25	; 0x80219a <ptr_get+0x1>
    4206:	2b 81       	ldd	r18, Y+3	; 0x03
    4208:	3c 81       	ldd	r19, Y+4	; 0x04
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	9a 81       	ldd	r25, Y+2	; 0x02
    420e:	b9 01       	movw	r22, r18
    4210:	34 df       	rcall	.-408    	; 0x407a <usart_serial_init>
    4212:	61 e1       	ldi	r22, 0x11	; 17
    4214:	78 e0       	ldi	r23, 0x08	; 8
    4216:	80 e3       	ldi	r24, 0x30	; 48
    4218:	98 e0       	ldi	r25, 0x08	; 8
    421a:	0e 94 c6 2a 	call	0x558c	; 0x558c <fdevopen>
    421e:	00 00       	nop
    4220:	24 96       	adiw	r28, 0x04	; 4
    4222:	cd bf       	out	0x3d, r28	; 61
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	08 95       	ret

0000422c <uart_init>:
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	1f 92       	push	r1
    4232:	1f 92       	push	r1
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	89 83       	std	Y+1, r24	; 0x01
    423a:	9a 83       	std	Y+2, r25	; 0x02
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	fc 01       	movw	r30, r24
    4242:	86 81       	ldd	r24, Z+6	; 0x06
    4244:	97 81       	ldd	r25, Z+7	; 0x07
    4246:	a0 85       	ldd	r26, Z+8	; 0x08
    4248:	b1 85       	ldd	r27, Z+9	; 0x09
    424a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <usart_options.6719>
    424e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <usart_options.6719+0x1>
    4252:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <usart_options.6719+0x2>
    4256:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <usart_options.6719+0x3>
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
    425e:	fc 01       	movw	r30, r24
    4260:	80 81       	ld	r24, Z
    4262:	91 81       	ldd	r25, Z+1	; 0x01
    4264:	29 81       	ldd	r18, Y+1	; 0x01
    4266:	3a 81       	ldd	r19, Y+2	; 0x02
    4268:	f9 01       	movw	r30, r18
    426a:	20 81       	ld	r18, Z
    426c:	31 81       	ldd	r19, Z+1	; 0x01
    426e:	f9 01       	movw	r30, r18
    4270:	40 81       	ld	r20, Z
    4272:	29 81       	ldd	r18, Y+1	; 0x01
    4274:	3a 81       	ldd	r19, Y+2	; 0x02
    4276:	f9 01       	movw	r30, r18
    4278:	25 81       	ldd	r18, Z+5	; 0x05
    427a:	24 2b       	or	r18, r20
    427c:	fc 01       	movw	r30, r24
    427e:	20 83       	st	Z, r18
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	9a 81       	ldd	r25, Y+2	; 0x02
    4284:	fc 01       	movw	r30, r24
    4286:	80 81       	ld	r24, Z
    4288:	91 81       	ldd	r25, Z+1	; 0x01
    428a:	29 81       	ldd	r18, Y+1	; 0x01
    428c:	3a 81       	ldd	r19, Y+2	; 0x02
    428e:	f9 01       	movw	r30, r18
    4290:	20 81       	ld	r18, Z
    4292:	31 81       	ldd	r19, Z+1	; 0x01
    4294:	f9 01       	movw	r30, r18
    4296:	44 81       	ldd	r20, Z+4	; 0x04
    4298:	29 81       	ldd	r18, Y+1	; 0x01
    429a:	3a 81       	ldd	r19, Y+2	; 0x02
    429c:	f9 01       	movw	r30, r18
    429e:	25 81       	ldd	r18, Z+5	; 0x05
    42a0:	24 2b       	or	r18, r20
    42a2:	fc 01       	movw	r30, r24
    42a4:	24 83       	std	Z+4, r18	; 0x04
    42a6:	89 81       	ldd	r24, Y+1	; 0x01
    42a8:	9a 81       	ldd	r25, Y+2	; 0x02
    42aa:	fc 01       	movw	r30, r24
    42ac:	80 81       	ld	r24, Z
    42ae:	91 81       	ldd	r25, Z+1	; 0x01
    42b0:	29 81       	ldd	r18, Y+1	; 0x01
    42b2:	3a 81       	ldd	r19, Y+2	; 0x02
    42b4:	f9 01       	movw	r30, r18
    42b6:	20 81       	ld	r18, Z
    42b8:	31 81       	ldd	r19, Z+1	; 0x01
    42ba:	f9 01       	movw	r30, r18
    42bc:	20 81       	ld	r18, Z
    42be:	42 2f       	mov	r20, r18
    42c0:	29 81       	ldd	r18, Y+1	; 0x01
    42c2:	3a 81       	ldd	r19, Y+2	; 0x02
    42c4:	f9 01       	movw	r30, r18
    42c6:	24 81       	ldd	r18, Z+4	; 0x04
    42c8:	20 95       	com	r18
    42ca:	24 23       	and	r18, r20
    42cc:	fc 01       	movw	r30, r24
    42ce:	20 83       	st	Z, r18
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	fc 01       	movw	r30, r24
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	37 dd       	rcall	.-1426   	; 0x3d4a <sysclk_enable_peripheral_clock>
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	9a 81       	ldd	r25, Y+2	; 0x02
    42e0:	fc 01       	movw	r30, r24
    42e2:	82 81       	ldd	r24, Z+2	; 0x02
    42e4:	93 81       	ldd	r25, Z+3	; 0x03
    42e6:	66 e0       	ldi	r22, 0x06	; 6
    42e8:	70 e2       	ldi	r23, 0x20	; 32
    42ea:	c7 de       	rcall	.-626    	; 0x407a <usart_serial_init>
    42ec:	00 00       	nop
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	df 91       	pop	r29
    42f4:	cf 91       	pop	r28
    42f6:	08 95       	ret

000042f8 <uart_terminal_init>:

void uart_terminal_init()
{
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    4300:	80 ea       	ldi	r24, 0xA0	; 160
    4302:	9a e0       	ldi	r25, 0x0A	; 10
    4304:	22 dd       	rcall	.-1468   	; 0x3d4a <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    4306:	80 e8       	ldi	r24, 0x80	; 128
    4308:	96 e0       	ldi	r25, 0x06	; 6
    430a:	20 e8       	ldi	r18, 0x80	; 128
    430c:	36 e0       	ldi	r19, 0x06	; 6
    430e:	f9 01       	movw	r30, r18
    4310:	20 81       	ld	r18, Z
    4312:	28 60       	ori	r18, 0x08	; 8
    4314:	fc 01       	movw	r30, r24
    4316:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    4318:	6d e0       	ldi	r22, 0x0D	; 13
    431a:	70 e2       	ldi	r23, 0x20	; 32
    431c:	80 ea       	ldi	r24, 0xA0	; 160
    431e:	9a e0       	ldi	r25, 0x0A	; 10
    4320:	56 df       	rcall	.-340    	; 0x41ce <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    4322:	84 e1       	ldi	r24, 0x14	; 20
    4324:	90 e2       	ldi	r25, 0x20	; 32
    4326:	0e 94 5f 2b 	call	0x56be	; 0x56be <puts>
		printf("UART Initialized\n");
    432a:	89 e3       	ldi	r24, 0x39	; 57
    432c:	90 e2       	ldi	r25, 0x20	; 32
    432e:	0e 94 5f 2b 	call	0x56be	; 0x56be <puts>
	}
}
    4332:	00 00       	nop
    4334:	df 91       	pop	r29
    4336:	cf 91       	pop	r28
    4338:	08 95       	ret

0000433a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	98 e4       	ldi	r25, 0x48	; 72
    4346:	a8 ee       	ldi	r26, 0xE8	; 232
    4348:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    434a:	bc 01       	movw	r22, r24
    434c:	cd 01       	movw	r24, r26
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	08 95       	ret

00004354 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	1f 92       	push	r1
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    435e:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    4360:	ec df       	rcall	.-40     	; 0x433a <sysclk_get_main_hz>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	29 81       	ldd	r18, Y+1	; 0x01
    4368:	22 2f       	mov	r18, r18
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	04 c0       	rjmp	.+8      	; 0x4376 <sysclk_get_per4_hz+0x22>
    436e:	b6 95       	lsr	r27
    4370:	a7 95       	ror	r26
    4372:	97 95       	ror	r25
    4374:	87 95       	ror	r24
    4376:	2a 95       	dec	r18
    4378:	d2 f7       	brpl	.-12     	; 0x436e <sysclk_get_per4_hz+0x1a>
}
    437a:	bc 01       	movw	r22, r24
    437c:	cd 01       	movw	r24, r26
    437e:	0f 90       	pop	r0
    4380:	df 91       	pop	r29
    4382:	cf 91       	pop	r28
    4384:	08 95       	ret

00004386 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    438e:	e2 df       	rcall	.-60     	; 0x4354 <sysclk_get_per4_hz>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    4394:	bc 01       	movw	r22, r24
    4396:	cd 01       	movw	r24, r26
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	08 95       	ret

0000439e <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    43a6:	ef df       	rcall	.-34     	; 0x4386 <sysclk_get_per2_hz>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
}
    43ac:	bc 01       	movw	r22, r24
    43ae:	cd 01       	movw	r24, r26
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	08 95       	ret

000043b6 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    43b6:	cf 93       	push	r28
    43b8:	df 93       	push	r29
    43ba:	cd b7       	in	r28, 0x3d	; 61
    43bc:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    43be:	ef df       	rcall	.-34     	; 0x439e <sysclk_get_per_hz>
    43c0:	dc 01       	movw	r26, r24
    43c2:	cb 01       	movw	r24, r22
}
    43c4:	bc 01       	movw	r22, r24
    43c6:	cd 01       	movw	r24, r26
    43c8:	df 91       	pop	r29
    43ca:	cf 91       	pop	r28
    43cc:	08 95       	ret

000043ce <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    43ce:	04 c0       	rjmp	.+8      	; 0x43d8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    43d0:	61 50       	subi	r22, 0x01	; 1
    43d2:	71 09       	sbc	r23, r1
    43d4:	81 09       	sbc	r24, r1
    43d6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    43d8:	61 15       	cp	r22, r1
    43da:	71 05       	cpc	r23, r1
    43dc:	81 05       	cpc	r24, r1
    43de:	91 05       	cpc	r25, r1
    43e0:	b9 f7       	brne	.-18     	; 0x43d0 <__portable_avr_delay_cycles+0x2>
    43e2:	08 95       	ret

000043e4 <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    43ec:	80 ea       	ldi	r24, 0xA0	; 160
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	27 e0       	ldi	r18, 0x07	; 7
    43f2:	fc 01       	movw	r30, r24
    43f4:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    43f6:	00 00       	nop
    43f8:	df 91       	pop	r29
    43fa:	cf 91       	pop	r28
    43fc:	08 95       	ret

000043fe <pmic_set_scheduling>:
 *
 * \note The low-priority vector, INTPRI, must be set to 0 when round-robin
 * scheduling is disabled to return to default interrupt priority order.
 */
static inline void pmic_set_scheduling(enum pmic_schedule schedule)
{
    43fe:	cf 93       	push	r28
    4400:	df 93       	push	r29
    4402:	1f 92       	push	r1
    4404:	cd b7       	in	r28, 0x3d	; 61
    4406:	de b7       	in	r29, 0x3e	; 62
    4408:	89 83       	std	Y+1, r24	; 0x01
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
    440a:	89 81       	ldd	r24, Y+1	; 0x01
    440c:	88 2f       	mov	r24, r24
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	00 97       	sbiw	r24, 0x00	; 0
    4412:	19 f0       	breq	.+6      	; 0x441a <pmic_set_scheduling+0x1c>
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	79 f0       	breq	.+30     	; 0x4436 <pmic_set_scheduling+0x38>
	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
		break;

	default:
		break;
    4418:	18 c0       	rjmp	.+48     	; 0x444a <pmic_set_scheduling+0x4c>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    441a:	80 ea       	ldi	r24, 0xA0	; 160
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	20 ea       	ldi	r18, 0xA0	; 160
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	f9 01       	movw	r30, r18
    4424:	22 81       	ldd	r18, Z+2	; 0x02
    4426:	2f 77       	andi	r18, 0x7F	; 127
    4428:	fc 01       	movw	r30, r24
    442a:	22 83       	std	Z+2, r18	; 0x02
		PMIC.INTPRI = 0;
    442c:	80 ea       	ldi	r24, 0xA0	; 160
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	fc 01       	movw	r30, r24
    4432:	11 82       	std	Z+1, r1	; 0x01
		break;
    4434:	0a c0       	rjmp	.+20     	; 0x444a <pmic_set_scheduling+0x4c>

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    4436:	80 ea       	ldi	r24, 0xA0	; 160
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	20 ea       	ldi	r18, 0xA0	; 160
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	f9 01       	movw	r30, r18
    4440:	22 81       	ldd	r18, Z+2	; 0x02
    4442:	20 68       	ori	r18, 0x80	; 128
    4444:	fc 01       	movw	r30, r24
    4446:	22 83       	std	Z+2, r18	; 0x02
		break;
    4448:	00 00       	nop

	default:
		break;
	};
}
    444a:	00 00       	nop
    444c:	0f 90       	pop	r0
    444e:	df 91       	pop	r29
    4450:	cf 91       	pop	r28
    4452:	08 95       	ret

00004454 <main>:


void print_calibration_data(void);

int main (void)
{
    4454:	2f 92       	push	r2
    4456:	3f 92       	push	r3
    4458:	4f 92       	push	r4
    445a:	5f 92       	push	r5
    445c:	6f 92       	push	r6
    445e:	7f 92       	push	r7
    4460:	8f 92       	push	r8
    4462:	9f 92       	push	r9
    4464:	af 92       	push	r10
    4466:	bf 92       	push	r11
    4468:	cf 92       	push	r12
    446a:	df 92       	push	r13
    446c:	ef 92       	push	r14
    446e:	ff 92       	push	r15
    4470:	0f 93       	push	r16
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    4478:	cd b7       	in	r28, 0x3d	; 61
    447a:	de b7       	in	r29, 0x3e	; 62
    447c:	28 97       	sbiw	r28, 0x08	; 8
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	de bf       	out	0x3e, r29	; 62
	board_init();
    4482:	53 dc       	rcall	.-1882   	; 0x3d2a <board_init>
	sysclk_init();
    4484:	0e 94 ba 07 	call	0xf74	; 0xf74 <sysclk_init>
		wdt_enable();
	}
	

	
	uart_terminal_init();
    4488:	37 df       	rcall	.-402    	; 0x42f8 <uart_terminal_init>
	//newOLogInit();

	printf("uart is working\n");
    448a:	8a e4       	ldi	r24, 0x4A	; 74
    448c:	90 e2       	ldi	r25, 0x20	; 32
    448e:	0e 94 5f 2b 	call	0x56be	; 0x56be <puts>
	

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    4492:	a8 df       	rcall	.-176    	; 0x43e4 <pmic_init>
    4494:	81 e0       	ldi	r24, 0x01	; 1
	cpu_irq_enable();
    4496:	b3 df       	rcall	.-154    	; 0x43fe <pmic_set_scheduling>
	gps_init();
    4498:	78 94       	sei
    449a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <gps_init>
		
		//write_telem_to_xbee();
		
		
		
		delay_ms(1000);
    449e:	8b df       	rcall	.-234    	; 0x43b6 <sysclk_get_cpu_hz>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	8c 01       	movw	r16, r24
    44a6:	9d 01       	movw	r18, r26
    44a8:	40 e0       	ldi	r20, 0x00	; 0
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	ba 01       	movw	r22, r20
    44ae:	09 83       	std	Y+1, r16	; 0x01
    44b0:	1a 83       	std	Y+2, r17	; 0x02
    44b2:	2b 83       	std	Y+3, r18	; 0x03
    44b4:	3c 83       	std	Y+4, r19	; 0x04
    44b6:	4d 83       	std	Y+5, r20	; 0x05
    44b8:	5e 83       	std	Y+6, r21	; 0x06
    44ba:	6f 83       	std	Y+7, r22	; 0x07
    44bc:	78 87       	std	Y+8, r23	; 0x08
    44be:	29 80       	ldd	r2, Y+1	; 0x01
    44c0:	3a 80       	ldd	r3, Y+2	; 0x02
    44c2:	4b 80       	ldd	r4, Y+3	; 0x03
    44c4:	5c 80       	ldd	r5, Y+4	; 0x04
    44c6:	6d 80       	ldd	r6, Y+5	; 0x05
    44c8:	7e 80       	ldd	r7, Y+6	; 0x06
    44ca:	8f 80       	ldd	r8, Y+7	; 0x07
    44cc:	98 84       	ldd	r9, Y+8	; 0x08
    44ce:	22 2d       	mov	r18, r2
    44d0:	33 2d       	mov	r19, r3
    44d2:	44 2d       	mov	r20, r4
    44d4:	55 2d       	mov	r21, r5
    44d6:	66 2d       	mov	r22, r6
    44d8:	77 2d       	mov	r23, r7
    44da:	88 2d       	mov	r24, r8
    44dc:	99 2d       	mov	r25, r9
    44de:	02 e0       	ldi	r16, 0x02	; 2
    44e0:	1b d6       	rcall	.+3126   	; 0x5118 <__ashldi3>
    44e2:	a2 2e       	mov	r10, r18
    44e4:	b3 2e       	mov	r11, r19
    44e6:	c4 2e       	mov	r12, r20
    44e8:	d5 2e       	mov	r13, r21
    44ea:	e6 2e       	mov	r14, r22
    44ec:	f7 2e       	mov	r15, r23
    44ee:	08 2f       	mov	r16, r24
    44f0:	19 2f       	mov	r17, r25
    44f2:	2a 2c       	mov	r2, r10
    44f4:	3b 2c       	mov	r3, r11
    44f6:	4c 2c       	mov	r4, r12
    44f8:	5d 2c       	mov	r5, r13
    44fa:	6e 2c       	mov	r6, r14
    44fc:	7f 2c       	mov	r7, r15
    44fe:	80 2e       	mov	r8, r16
    4500:	91 2e       	mov	r9, r17
    4502:	22 2d       	mov	r18, r2
    4504:	33 2d       	mov	r19, r3
    4506:	44 2d       	mov	r20, r4
    4508:	55 2d       	mov	r21, r5
    450a:	66 2d       	mov	r22, r6
    450c:	77 2d       	mov	r23, r7
    450e:	88 2d       	mov	r24, r8
    4510:	99 2d       	mov	r25, r9
    4512:	05 e0       	ldi	r16, 0x05	; 5
    4514:	01 d6       	rcall	.+3074   	; 0x5118 <__ashldi3>
    4516:	a2 2e       	mov	r10, r18
    4518:	b3 2e       	mov	r11, r19
    451a:	c4 2e       	mov	r12, r20
    451c:	d5 2e       	mov	r13, r21
    451e:	e6 2e       	mov	r14, r22
    4520:	f7 2e       	mov	r15, r23
    4522:	08 2f       	mov	r16, r24
    4524:	19 2f       	mov	r17, r25
    4526:	2a 2d       	mov	r18, r10
    4528:	3b 2d       	mov	r19, r11
    452a:	4c 2d       	mov	r20, r12
    452c:	5d 2d       	mov	r21, r13
    452e:	6e 2d       	mov	r22, r14
    4530:	7f 2d       	mov	r23, r15
    4532:	80 2f       	mov	r24, r16
    4534:	91 2f       	mov	r25, r17
    4536:	a2 2c       	mov	r10, r2
    4538:	b3 2c       	mov	r11, r3
    453a:	c4 2c       	mov	r12, r4
    453c:	d5 2c       	mov	r13, r5
    453e:	e6 2c       	mov	r14, r6
    4540:	f7 2c       	mov	r15, r7
    4542:	08 2d       	mov	r16, r8
    4544:	19 2d       	mov	r17, r9
    4546:	0a d6       	rcall	.+3092   	; 0x515c <__subdi3>
    4548:	a2 2e       	mov	r10, r18
    454a:	b3 2e       	mov	r11, r19
    454c:	c4 2e       	mov	r12, r20
    454e:	d5 2e       	mov	r13, r21
    4550:	e6 2e       	mov	r14, r22
    4552:	f7 2e       	mov	r15, r23
    4554:	08 2f       	mov	r16, r24
    4556:	19 2f       	mov	r17, r25
    4558:	2a 2d       	mov	r18, r10
    455a:	3b 2d       	mov	r19, r11
    455c:	4c 2d       	mov	r20, r12
    455e:	5d 2d       	mov	r21, r13
    4560:	6e 2d       	mov	r22, r14
    4562:	7f 2d       	mov	r23, r15
    4564:	80 2f       	mov	r24, r16
    4566:	91 2f       	mov	r25, r17
    4568:	a9 80       	ldd	r10, Y+1	; 0x01
    456a:	ba 80       	ldd	r11, Y+2	; 0x02
    456c:	cb 80       	ldd	r12, Y+3	; 0x03
    456e:	dc 80       	ldd	r13, Y+4	; 0x04
    4570:	ed 80       	ldd	r14, Y+5	; 0x05
    4572:	fe 80       	ldd	r15, Y+6	; 0x06
    4574:	0f 81       	ldd	r16, Y+7	; 0x07
    4576:	18 85       	ldd	r17, Y+8	; 0x08
    4578:	e8 d5       	rcall	.+3024   	; 0x514a <__adddi3>
    457a:	a2 2e       	mov	r10, r18
    457c:	b3 2e       	mov	r11, r19
    457e:	c4 2e       	mov	r12, r20
    4580:	d5 2e       	mov	r13, r21
    4582:	e6 2e       	mov	r14, r22
    4584:	f7 2e       	mov	r15, r23
    4586:	08 2f       	mov	r16, r24
    4588:	19 2f       	mov	r17, r25
    458a:	2a 2d       	mov	r18, r10
    458c:	3b 2d       	mov	r19, r11
    458e:	4c 2d       	mov	r20, r12
    4590:	5d 2d       	mov	r21, r13
    4592:	6e 2d       	mov	r22, r14
    4594:	7f 2d       	mov	r23, r15
    4596:	80 2f       	mov	r24, r16
    4598:	91 2f       	mov	r25, r17
    459a:	03 e0       	ldi	r16, 0x03	; 3
    459c:	bd d5       	rcall	.+2938   	; 0x5118 <__ashldi3>
    459e:	22 2e       	mov	r2, r18
    45a0:	33 2e       	mov	r3, r19
    45a2:	44 2e       	mov	r4, r20
    45a4:	55 2e       	mov	r5, r21
    45a6:	66 2e       	mov	r6, r22
    45a8:	77 2e       	mov	r7, r23
    45aa:	88 2e       	mov	r8, r24
    45ac:	99 2e       	mov	r9, r25
    45ae:	a2 2c       	mov	r10, r2
    45b0:	b3 2c       	mov	r11, r3
    45b2:	c4 2c       	mov	r12, r4
    45b4:	d5 2c       	mov	r13, r5
    45b6:	e6 2c       	mov	r14, r6
    45b8:	f7 2c       	mov	r15, r7
    45ba:	08 2d       	mov	r16, r8
    45bc:	19 2d       	mov	r17, r9
    45be:	2a 2c       	mov	r2, r10
    45c0:	3b 2c       	mov	r3, r11
    45c2:	4c 2c       	mov	r4, r12
    45c4:	5d 2c       	mov	r5, r13
    45c6:	6e 2c       	mov	r6, r14
    45c8:	7f 2c       	mov	r7, r15
    45ca:	80 2e       	mov	r8, r16
    45cc:	91 2e       	mov	r9, r17
    45ce:	0f 2e       	mov	r0, r31
    45d0:	f6 e0       	ldi	r31, 0x06	; 6
    45d2:	af 2e       	mov	r10, r31
    45d4:	f0 2d       	mov	r31, r0
    45d6:	b1 2c       	mov	r11, r1
    45d8:	c1 2c       	mov	r12, r1
    45da:	d1 2c       	mov	r13, r1
    45dc:	e1 2c       	mov	r14, r1
    45de:	f1 2c       	mov	r15, r1
    45e0:	00 e0       	ldi	r16, 0x00	; 0
    45e2:	10 e0       	ldi	r17, 0x00	; 0
    45e4:	22 2d       	mov	r18, r2
    45e6:	33 2d       	mov	r19, r3
    45e8:	44 2d       	mov	r20, r4
    45ea:	55 2d       	mov	r21, r5
    45ec:	66 2d       	mov	r22, r6
    45ee:	77 2d       	mov	r23, r7
    45f0:	88 2d       	mov	r24, r8
    45f2:	99 2d       	mov	r25, r9
    45f4:	35 d5       	rcall	.+2666   	; 0x5060 <__udivdi3>
    45f6:	22 2e       	mov	r2, r18
    45f8:	33 2e       	mov	r3, r19
    45fa:	44 2e       	mov	r4, r20
    45fc:	55 2e       	mov	r5, r21
    45fe:	66 2e       	mov	r6, r22
    4600:	77 2e       	mov	r7, r23
    4602:	88 2e       	mov	r8, r24
    4604:	99 2e       	mov	r9, r25
    4606:	a2 2c       	mov	r10, r2
    4608:	b3 2c       	mov	r11, r3
    460a:	c4 2c       	mov	r12, r4
    460c:	d5 2c       	mov	r13, r5
    460e:	e6 2c       	mov	r14, r6
    4610:	f7 2c       	mov	r15, r7
    4612:	08 2d       	mov	r16, r8
    4614:	19 2d       	mov	r17, r9
    4616:	2a 2d       	mov	r18, r10
    4618:	3b 2d       	mov	r19, r11
    461a:	4c 2d       	mov	r20, r12
    461c:	5d 2d       	mov	r21, r13
    461e:	6e 2d       	mov	r22, r14
    4620:	7f 2d       	mov	r23, r15
    4622:	80 2f       	mov	r24, r16
    4624:	91 2f       	mov	r25, r17
    4626:	29 51       	subi	r18, 0x19	; 25
    4628:	3c 4f       	sbci	r19, 0xFC	; 252
    462a:	4f 4f       	sbci	r20, 0xFF	; 255
    462c:	5f 4f       	sbci	r21, 0xFF	; 255
    462e:	6f 4f       	sbci	r22, 0xFF	; 255
    4630:	7f 4f       	sbci	r23, 0xFF	; 255
    4632:	8f 4f       	sbci	r24, 0xFF	; 255
    4634:	9f 4f       	sbci	r25, 0xFF	; 255
    4636:	a2 2e       	mov	r10, r18
    4638:	b3 2e       	mov	r11, r19
    463a:	c4 2e       	mov	r12, r20
    463c:	d5 2e       	mov	r13, r21
    463e:	e6 2e       	mov	r14, r22
    4640:	f7 2e       	mov	r15, r23
    4642:	08 2f       	mov	r16, r24
    4644:	19 2f       	mov	r17, r25
    4646:	2a 2d       	mov	r18, r10
    4648:	3b 2d       	mov	r19, r11
    464a:	4c 2d       	mov	r20, r12
    464c:	5d 2d       	mov	r21, r13
    464e:	6e 2d       	mov	r22, r14
    4650:	7f 2d       	mov	r23, r15
    4652:	80 2f       	mov	r24, r16
    4654:	91 2f       	mov	r25, r17
    4656:	be d0       	rcall	.+380    	; 0x47d4 <__floatundisf>
    4658:	dc 01       	movw	r26, r24
    465a:	cb 01       	movw	r24, r22
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	4a e7       	ldi	r20, 0x7A	; 122
    4662:	54 e4       	ldi	r21, 0x44	; 68
    4664:	bc 01       	movw	r22, r24
    4666:	cd 01       	movw	r24, r26
    4668:	13 d0       	rcall	.+38     	; 0x4690 <__divsf3>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	bc 01       	movw	r22, r24
    4670:	cd 01       	movw	r24, r26
    4672:	7b d0       	rcall	.+246    	; 0x476a <__fixunssfdi>
    4674:	a2 2e       	mov	r10, r18
    4676:	b3 2e       	mov	r11, r19
    4678:	c4 2e       	mov	r12, r20
    467a:	d5 2e       	mov	r13, r21
    467c:	e6 2e       	mov	r14, r22
    467e:	f7 2e       	mov	r15, r23
    4680:	08 2f       	mov	r16, r24
    4682:	19 2f       	mov	r17, r25
    4684:	d6 01       	movw	r26, r12
    4686:	c5 01       	movw	r24, r10
    4688:	bc 01       	movw	r22, r24
    468a:	cd 01       	movw	r24, r26
    468c:	a0 de       	rcall	.-704    	; 0x43ce <__portable_avr_delay_cycles>


		
	
							
	}
    468e:	07 cf       	rjmp	.-498    	; 0x449e <main+0x4a>

00004690 <__divsf3>:
    4690:	0c d0       	rcall	.+24     	; 0x46aa <__divsf3x>
    4692:	05 c1       	rjmp	.+522    	; 0x489e <__fp_round>
    4694:	fd d0       	rcall	.+506    	; 0x4890 <__fp_pscB>
    4696:	40 f0       	brcs	.+16     	; 0x46a8 <__divsf3+0x18>
    4698:	f4 d0       	rcall	.+488    	; 0x4882 <__fp_pscA>
    469a:	30 f0       	brcs	.+12     	; 0x46a8 <__divsf3+0x18>
    469c:	21 f4       	brne	.+8      	; 0x46a6 <__divsf3+0x16>
    469e:	5f 3f       	cpi	r21, 0xFF	; 255
    46a0:	19 f0       	breq	.+6      	; 0x46a8 <__divsf3+0x18>
    46a2:	d6 c0       	rjmp	.+428    	; 0x4850 <__fp_inf>
    46a4:	51 11       	cpse	r21, r1
    46a6:	2f c1       	rjmp	.+606    	; 0x4906 <__fp_szero>
    46a8:	d9 c0       	rjmp	.+434    	; 0x485c <__fp_nan>

000046aa <__divsf3x>:
    46aa:	0a d1       	rcall	.+532    	; 0x48c0 <__fp_split3>
    46ac:	98 f3       	brcs	.-26     	; 0x4694 <__divsf3+0x4>

000046ae <__divsf3_pse>:
    46ae:	99 23       	and	r25, r25
    46b0:	c9 f3       	breq	.-14     	; 0x46a4 <__divsf3+0x14>
    46b2:	55 23       	and	r21, r21
    46b4:	b1 f3       	breq	.-20     	; 0x46a2 <__divsf3+0x12>
    46b6:	95 1b       	sub	r25, r21
    46b8:	55 0b       	sbc	r21, r21
    46ba:	bb 27       	eor	r27, r27
    46bc:	aa 27       	eor	r26, r26
    46be:	62 17       	cp	r22, r18
    46c0:	73 07       	cpc	r23, r19
    46c2:	84 07       	cpc	r24, r20
    46c4:	38 f0       	brcs	.+14     	; 0x46d4 <__divsf3_pse+0x26>
    46c6:	9f 5f       	subi	r25, 0xFF	; 255
    46c8:	5f 4f       	sbci	r21, 0xFF	; 255
    46ca:	22 0f       	add	r18, r18
    46cc:	33 1f       	adc	r19, r19
    46ce:	44 1f       	adc	r20, r20
    46d0:	aa 1f       	adc	r26, r26
    46d2:	a9 f3       	breq	.-22     	; 0x46be <__divsf3_pse+0x10>
    46d4:	33 d0       	rcall	.+102    	; 0x473c <__divsf3_pse+0x8e>
    46d6:	0e 2e       	mov	r0, r30
    46d8:	3a f0       	brmi	.+14     	; 0x46e8 <__divsf3_pse+0x3a>
    46da:	e0 e8       	ldi	r30, 0x80	; 128
    46dc:	30 d0       	rcall	.+96     	; 0x473e <__divsf3_pse+0x90>
    46de:	91 50       	subi	r25, 0x01	; 1
    46e0:	50 40       	sbci	r21, 0x00	; 0
    46e2:	e6 95       	lsr	r30
    46e4:	00 1c       	adc	r0, r0
    46e6:	ca f7       	brpl	.-14     	; 0x46da <__divsf3_pse+0x2c>
    46e8:	29 d0       	rcall	.+82     	; 0x473c <__divsf3_pse+0x8e>
    46ea:	fe 2f       	mov	r31, r30
    46ec:	27 d0       	rcall	.+78     	; 0x473c <__divsf3_pse+0x8e>
    46ee:	66 0f       	add	r22, r22
    46f0:	77 1f       	adc	r23, r23
    46f2:	88 1f       	adc	r24, r24
    46f4:	bb 1f       	adc	r27, r27
    46f6:	26 17       	cp	r18, r22
    46f8:	37 07       	cpc	r19, r23
    46fa:	48 07       	cpc	r20, r24
    46fc:	ab 07       	cpc	r26, r27
    46fe:	b0 e8       	ldi	r27, 0x80	; 128
    4700:	09 f0       	breq	.+2      	; 0x4704 <__divsf3_pse+0x56>
    4702:	bb 0b       	sbc	r27, r27
    4704:	80 2d       	mov	r24, r0
    4706:	bf 01       	movw	r22, r30
    4708:	ff 27       	eor	r31, r31
    470a:	93 58       	subi	r25, 0x83	; 131
    470c:	5f 4f       	sbci	r21, 0xFF	; 255
    470e:	2a f0       	brmi	.+10     	; 0x471a <__divsf3_pse+0x6c>
    4710:	9e 3f       	cpi	r25, 0xFE	; 254
    4712:	51 05       	cpc	r21, r1
    4714:	68 f0       	brcs	.+26     	; 0x4730 <__divsf3_pse+0x82>
    4716:	9c c0       	rjmp	.+312    	; 0x4850 <__fp_inf>
    4718:	f6 c0       	rjmp	.+492    	; 0x4906 <__fp_szero>
    471a:	5f 3f       	cpi	r21, 0xFF	; 255
    471c:	ec f3       	brlt	.-6      	; 0x4718 <__divsf3_pse+0x6a>
    471e:	98 3e       	cpi	r25, 0xE8	; 232
    4720:	dc f3       	brlt	.-10     	; 0x4718 <__divsf3_pse+0x6a>
    4722:	86 95       	lsr	r24
    4724:	77 95       	ror	r23
    4726:	67 95       	ror	r22
    4728:	b7 95       	ror	r27
    472a:	f7 95       	ror	r31
    472c:	9f 5f       	subi	r25, 0xFF	; 255
    472e:	c9 f7       	brne	.-14     	; 0x4722 <__divsf3_pse+0x74>
    4730:	88 0f       	add	r24, r24
    4732:	91 1d       	adc	r25, r1
    4734:	96 95       	lsr	r25
    4736:	87 95       	ror	r24
    4738:	97 f9       	bld	r25, 7
    473a:	08 95       	ret
    473c:	e1 e0       	ldi	r30, 0x01	; 1
    473e:	66 0f       	add	r22, r22
    4740:	77 1f       	adc	r23, r23
    4742:	88 1f       	adc	r24, r24
    4744:	bb 1f       	adc	r27, r27
    4746:	62 17       	cp	r22, r18
    4748:	73 07       	cpc	r23, r19
    474a:	84 07       	cpc	r24, r20
    474c:	ba 07       	cpc	r27, r26
    474e:	20 f0       	brcs	.+8      	; 0x4758 <__divsf3_pse+0xaa>
    4750:	62 1b       	sub	r22, r18
    4752:	73 0b       	sbc	r23, r19
    4754:	84 0b       	sbc	r24, r20
    4756:	ba 0b       	sbc	r27, r26
    4758:	ee 1f       	adc	r30, r30
    475a:	88 f7       	brcc	.-30     	; 0x473e <__divsf3_pse+0x90>
    475c:	e0 95       	com	r30
    475e:	08 95       	ret

00004760 <__fixsfdi>:
    4760:	be e3       	ldi	r27, 0x3E	; 62
    4762:	04 d0       	rcall	.+8      	; 0x476c <__fixunssfdi+0x2>
    4764:	08 f4       	brcc	.+2      	; 0x4768 <__fixsfdi+0x8>
    4766:	90 e8       	ldi	r25, 0x80	; 128
    4768:	08 95       	ret

0000476a <__fixunssfdi>:
    476a:	bf e3       	ldi	r27, 0x3F	; 63
    476c:	22 27       	eor	r18, r18
    476e:	33 27       	eor	r19, r19
    4770:	a9 01       	movw	r20, r18
    4772:	ae d0       	rcall	.+348    	; 0x48d0 <__fp_splitA>
    4774:	58 f1       	brcs	.+86     	; 0x47cc <__fixunssfdi+0x62>
    4776:	9f 57       	subi	r25, 0x7F	; 127
    4778:	40 f1       	brcs	.+80     	; 0x47ca <__fixunssfdi+0x60>
    477a:	b9 17       	cp	r27, r25
    477c:	38 f1       	brcs	.+78     	; 0x47cc <__fixunssfdi+0x62>
    477e:	bf e3       	ldi	r27, 0x3F	; 63
    4780:	b9 1b       	sub	r27, r25
    4782:	99 27       	eor	r25, r25
    4784:	b8 50       	subi	r27, 0x08	; 8
    4786:	3a f4       	brpl	.+14     	; 0x4796 <__fixunssfdi+0x2c>
    4788:	66 0f       	add	r22, r22
    478a:	77 1f       	adc	r23, r23
    478c:	88 1f       	adc	r24, r24
    478e:	99 1f       	adc	r25, r25
    4790:	b3 95       	inc	r27
    4792:	d2 f3       	brmi	.-12     	; 0x4788 <__fixunssfdi+0x1e>
    4794:	16 c0       	rjmp	.+44     	; 0x47c2 <__fixunssfdi+0x58>
    4796:	b8 50       	subi	r27, 0x08	; 8
    4798:	4a f0       	brmi	.+18     	; 0x47ac <__fixunssfdi+0x42>
    479a:	23 2f       	mov	r18, r19
    479c:	34 2f       	mov	r19, r20
    479e:	45 2f       	mov	r20, r21
    47a0:	56 2f       	mov	r21, r22
    47a2:	67 2f       	mov	r22, r23
    47a4:	78 2f       	mov	r23, r24
    47a6:	88 27       	eor	r24, r24
    47a8:	b8 50       	subi	r27, 0x08	; 8
    47aa:	ba f7       	brpl	.-18     	; 0x479a <__fixunssfdi+0x30>
    47ac:	b8 5f       	subi	r27, 0xF8	; 248
    47ae:	49 f0       	breq	.+18     	; 0x47c2 <__fixunssfdi+0x58>
    47b0:	86 95       	lsr	r24
    47b2:	77 95       	ror	r23
    47b4:	67 95       	ror	r22
    47b6:	57 95       	ror	r21
    47b8:	47 95       	ror	r20
    47ba:	37 95       	ror	r19
    47bc:	27 95       	ror	r18
    47be:	ba 95       	dec	r27
    47c0:	b9 f7       	brne	.-18     	; 0x47b0 <__fixunssfdi+0x46>
    47c2:	0e f4       	brtc	.+2      	; 0x47c6 <__fixunssfdi+0x5c>
    47c4:	4e d0       	rcall	.+156    	; 0x4862 <__fp_negdi>
    47c6:	88 94       	clc
    47c8:	08 95       	ret
    47ca:	88 94       	clc
    47cc:	60 e0       	ldi	r22, 0x00	; 0
    47ce:	70 e0       	ldi	r23, 0x00	; 0
    47d0:	cb 01       	movw	r24, r22
    47d2:	08 95       	ret

000047d4 <__floatundisf>:
    47d4:	e8 94       	clt

000047d6 <__fp_di2sf>:
    47d6:	f9 2f       	mov	r31, r25
    47d8:	96 eb       	ldi	r25, 0xB6	; 182
    47da:	ff 23       	and	r31, r31
    47dc:	81 f0       	breq	.+32     	; 0x47fe <__fp_di2sf+0x28>
    47de:	12 16       	cp	r1, r18
    47e0:	13 06       	cpc	r1, r19
    47e2:	14 06       	cpc	r1, r20
    47e4:	44 0b       	sbc	r20, r20
    47e6:	93 95       	inc	r25
    47e8:	f6 95       	lsr	r31
    47ea:	87 95       	ror	r24
    47ec:	77 95       	ror	r23
    47ee:	67 95       	ror	r22
    47f0:	57 95       	ror	r21
    47f2:	40 40       	sbci	r20, 0x00	; 0
    47f4:	ff 23       	and	r31, r31
    47f6:	b9 f7       	brne	.-18     	; 0x47e6 <__fp_di2sf+0x10>
    47f8:	1b c0       	rjmp	.+54     	; 0x4830 <__fp_di2sf+0x5a>
    47fa:	99 27       	eor	r25, r25
    47fc:	08 95       	ret
    47fe:	88 23       	and	r24, r24
    4800:	51 f4       	brne	.+20     	; 0x4816 <__fp_di2sf+0x40>
    4802:	98 50       	subi	r25, 0x08	; 8
    4804:	d2 f7       	brpl	.-12     	; 0x47fa <__fp_di2sf+0x24>
    4806:	87 2b       	or	r24, r23
    4808:	76 2f       	mov	r23, r22
    480a:	65 2f       	mov	r22, r21
    480c:	54 2f       	mov	r21, r20
    480e:	43 2f       	mov	r20, r19
    4810:	32 2f       	mov	r19, r18
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	b1 f3       	breq	.-20     	; 0x4802 <__fp_di2sf+0x2c>
    4816:	12 16       	cp	r1, r18
    4818:	13 06       	cpc	r1, r19
    481a:	14 06       	cpc	r1, r20
    481c:	44 0b       	sbc	r20, r20
    481e:	88 23       	and	r24, r24
    4820:	3a f0       	brmi	.+14     	; 0x4830 <__fp_di2sf+0x5a>
    4822:	9a 95       	dec	r25
    4824:	44 0f       	add	r20, r20
    4826:	55 1f       	adc	r21, r21
    4828:	66 1f       	adc	r22, r22
    482a:	77 1f       	adc	r23, r23
    482c:	88 1f       	adc	r24, r24
    482e:	ca f7       	brpl	.-14     	; 0x4822 <__fp_di2sf+0x4c>
    4830:	55 23       	and	r21, r21
    4832:	4a f4       	brpl	.+18     	; 0x4846 <__fp_di2sf+0x70>
    4834:	44 0f       	add	r20, r20
    4836:	55 1f       	adc	r21, r21
    4838:	11 f4       	brne	.+4      	; 0x483e <__fp_di2sf+0x68>
    483a:	60 ff       	sbrs	r22, 0
    483c:	04 c0       	rjmp	.+8      	; 0x4846 <__fp_di2sf+0x70>
    483e:	6f 5f       	subi	r22, 0xFF	; 255
    4840:	7f 4f       	sbci	r23, 0xFF	; 255
    4842:	8f 4f       	sbci	r24, 0xFF	; 255
    4844:	9f 4f       	sbci	r25, 0xFF	; 255
    4846:	88 0f       	add	r24, r24
    4848:	96 95       	lsr	r25
    484a:	87 95       	ror	r24
    484c:	97 f9       	bld	r25, 7
    484e:	08 95       	ret

00004850 <__fp_inf>:
    4850:	97 f9       	bld	r25, 7
    4852:	9f 67       	ori	r25, 0x7F	; 127
    4854:	80 e8       	ldi	r24, 0x80	; 128
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	60 e0       	ldi	r22, 0x00	; 0
    485a:	08 95       	ret

0000485c <__fp_nan>:
    485c:	9f ef       	ldi	r25, 0xFF	; 255
    485e:	80 ec       	ldi	r24, 0xC0	; 192
    4860:	08 95       	ret

00004862 <__fp_negdi>:
    4862:	90 95       	com	r25
    4864:	80 95       	com	r24
    4866:	70 95       	com	r23
    4868:	60 95       	com	r22
    486a:	50 95       	com	r21
    486c:	40 95       	com	r20
    486e:	30 95       	com	r19
    4870:	21 95       	neg	r18
    4872:	3f 4f       	sbci	r19, 0xFF	; 255
    4874:	4f 4f       	sbci	r20, 0xFF	; 255
    4876:	5f 4f       	sbci	r21, 0xFF	; 255
    4878:	6f 4f       	sbci	r22, 0xFF	; 255
    487a:	7f 4f       	sbci	r23, 0xFF	; 255
    487c:	8f 4f       	sbci	r24, 0xFF	; 255
    487e:	9f 4f       	sbci	r25, 0xFF	; 255
    4880:	08 95       	ret

00004882 <__fp_pscA>:
    4882:	00 24       	eor	r0, r0
    4884:	0a 94       	dec	r0
    4886:	16 16       	cp	r1, r22
    4888:	17 06       	cpc	r1, r23
    488a:	18 06       	cpc	r1, r24
    488c:	09 06       	cpc	r0, r25
    488e:	08 95       	ret

00004890 <__fp_pscB>:
    4890:	00 24       	eor	r0, r0
    4892:	0a 94       	dec	r0
    4894:	12 16       	cp	r1, r18
    4896:	13 06       	cpc	r1, r19
    4898:	14 06       	cpc	r1, r20
    489a:	05 06       	cpc	r0, r21
    489c:	08 95       	ret

0000489e <__fp_round>:
    489e:	09 2e       	mov	r0, r25
    48a0:	03 94       	inc	r0
    48a2:	00 0c       	add	r0, r0
    48a4:	11 f4       	brne	.+4      	; 0x48aa <__fp_round+0xc>
    48a6:	88 23       	and	r24, r24
    48a8:	52 f0       	brmi	.+20     	; 0x48be <__fp_round+0x20>
    48aa:	bb 0f       	add	r27, r27
    48ac:	40 f4       	brcc	.+16     	; 0x48be <__fp_round+0x20>
    48ae:	bf 2b       	or	r27, r31
    48b0:	11 f4       	brne	.+4      	; 0x48b6 <__fp_round+0x18>
    48b2:	60 ff       	sbrs	r22, 0
    48b4:	04 c0       	rjmp	.+8      	; 0x48be <__fp_round+0x20>
    48b6:	6f 5f       	subi	r22, 0xFF	; 255
    48b8:	7f 4f       	sbci	r23, 0xFF	; 255
    48ba:	8f 4f       	sbci	r24, 0xFF	; 255
    48bc:	9f 4f       	sbci	r25, 0xFF	; 255
    48be:	08 95       	ret

000048c0 <__fp_split3>:
    48c0:	57 fd       	sbrc	r21, 7
    48c2:	90 58       	subi	r25, 0x80	; 128
    48c4:	44 0f       	add	r20, r20
    48c6:	55 1f       	adc	r21, r21
    48c8:	59 f0       	breq	.+22     	; 0x48e0 <__fp_splitA+0x10>
    48ca:	5f 3f       	cpi	r21, 0xFF	; 255
    48cc:	71 f0       	breq	.+28     	; 0x48ea <__fp_splitA+0x1a>
    48ce:	47 95       	ror	r20

000048d0 <__fp_splitA>:
    48d0:	88 0f       	add	r24, r24
    48d2:	97 fb       	bst	r25, 7
    48d4:	99 1f       	adc	r25, r25
    48d6:	61 f0       	breq	.+24     	; 0x48f0 <__fp_splitA+0x20>
    48d8:	9f 3f       	cpi	r25, 0xFF	; 255
    48da:	79 f0       	breq	.+30     	; 0x48fa <__fp_splitA+0x2a>
    48dc:	87 95       	ror	r24
    48de:	08 95       	ret
    48e0:	12 16       	cp	r1, r18
    48e2:	13 06       	cpc	r1, r19
    48e4:	14 06       	cpc	r1, r20
    48e6:	55 1f       	adc	r21, r21
    48e8:	f2 cf       	rjmp	.-28     	; 0x48ce <__fp_split3+0xe>
    48ea:	46 95       	lsr	r20
    48ec:	f1 df       	rcall	.-30     	; 0x48d0 <__fp_splitA>
    48ee:	08 c0       	rjmp	.+16     	; 0x4900 <__fp_splitA+0x30>
    48f0:	16 16       	cp	r1, r22
    48f2:	17 06       	cpc	r1, r23
    48f4:	18 06       	cpc	r1, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	f1 cf       	rjmp	.-30     	; 0x48dc <__fp_splitA+0xc>
    48fa:	86 95       	lsr	r24
    48fc:	71 05       	cpc	r23, r1
    48fe:	61 05       	cpc	r22, r1
    4900:	08 94       	sec
    4902:	08 95       	ret

00004904 <__fp_zero>:
    4904:	e8 94       	clt

00004906 <__fp_szero>:
    4906:	bb 27       	eor	r27, r27
    4908:	66 27       	eor	r22, r22
    490a:	77 27       	eor	r23, r23
    490c:	cb 01       	movw	r24, r22
    490e:	97 f9       	bld	r25, 7
    4910:	08 95       	ret

00004912 <vfprintf>:
    4912:	2f 92       	push	r2
    4914:	3f 92       	push	r3
    4916:	4f 92       	push	r4
    4918:	5f 92       	push	r5
    491a:	6f 92       	push	r6
    491c:	7f 92       	push	r7
    491e:	8f 92       	push	r8
    4920:	9f 92       	push	r9
    4922:	af 92       	push	r10
    4924:	bf 92       	push	r11
    4926:	cf 92       	push	r12
    4928:	df 92       	push	r13
    492a:	ef 92       	push	r14
    492c:	ff 92       	push	r15
    492e:	0f 93       	push	r16
    4930:	1f 93       	push	r17
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	cd b7       	in	r28, 0x3d	; 61
    4938:	de b7       	in	r29, 0x3e	; 62
    493a:	60 97       	sbiw	r28, 0x10	; 16
    493c:	cd bf       	out	0x3d, r28	; 61
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	7c 01       	movw	r14, r24
    4942:	1b 01       	movw	r2, r22
    4944:	6a 01       	movw	r12, r20
    4946:	fc 01       	movw	r30, r24
    4948:	16 82       	std	Z+6, r1	; 0x06
    494a:	17 82       	std	Z+7, r1	; 0x07
    494c:	83 81       	ldd	r24, Z+3	; 0x03
    494e:	81 ff       	sbrs	r24, 1
    4950:	2a c3       	rjmp	.+1620   	; 0x4fa6 <vfprintf+0x694>
    4952:	9e 01       	movw	r18, r28
    4954:	2f 5f       	subi	r18, 0xFF	; 255
    4956:	3f 4f       	sbci	r19, 0xFF	; 255
    4958:	39 01       	movw	r6, r18
    495a:	f7 01       	movw	r30, r14
    495c:	93 81       	ldd	r25, Z+3	; 0x03
    495e:	f1 01       	movw	r30, r2
    4960:	93 fd       	sbrc	r25, 3
    4962:	85 91       	lpm	r24, Z+
    4964:	93 ff       	sbrs	r25, 3
    4966:	81 91       	ld	r24, Z+
    4968:	1f 01       	movw	r2, r30
    496a:	88 23       	and	r24, r24
    496c:	09 f4       	brne	.+2      	; 0x4970 <vfprintf+0x5e>
    496e:	17 c3       	rjmp	.+1582   	; 0x4f9e <vfprintf+0x68c>
    4970:	85 32       	cpi	r24, 0x25	; 37
    4972:	39 f4       	brne	.+14     	; 0x4982 <vfprintf+0x70>
    4974:	93 fd       	sbrc	r25, 3
    4976:	85 91       	lpm	r24, Z+
    4978:	93 ff       	sbrs	r25, 3
    497a:	81 91       	ld	r24, Z+
    497c:	1f 01       	movw	r2, r30
    497e:	85 32       	cpi	r24, 0x25	; 37
    4980:	31 f4       	brne	.+12     	; 0x498e <vfprintf+0x7c>
    4982:	b7 01       	movw	r22, r14
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	4c d6       	rcall	.+3224   	; 0x5620 <fputc>
    4988:	56 01       	movw	r10, r12
    498a:	65 01       	movw	r12, r10
    498c:	e6 cf       	rjmp	.-52     	; 0x495a <vfprintf+0x48>
    498e:	10 e0       	ldi	r17, 0x00	; 0
    4990:	51 2c       	mov	r5, r1
    4992:	91 2c       	mov	r9, r1
    4994:	ff e1       	ldi	r31, 0x1F	; 31
    4996:	f9 15       	cp	r31, r9
    4998:	d8 f0       	brcs	.+54     	; 0x49d0 <vfprintf+0xbe>
    499a:	8b 32       	cpi	r24, 0x2B	; 43
    499c:	79 f0       	breq	.+30     	; 0x49bc <vfprintf+0xaa>
    499e:	38 f4       	brcc	.+14     	; 0x49ae <vfprintf+0x9c>
    49a0:	80 32       	cpi	r24, 0x20	; 32
    49a2:	79 f0       	breq	.+30     	; 0x49c2 <vfprintf+0xb0>
    49a4:	83 32       	cpi	r24, 0x23	; 35
    49a6:	a1 f4       	brne	.+40     	; 0x49d0 <vfprintf+0xbe>
    49a8:	f9 2d       	mov	r31, r9
    49aa:	f0 61       	ori	r31, 0x10	; 16
    49ac:	2e c0       	rjmp	.+92     	; 0x4a0a <vfprintf+0xf8>
    49ae:	8d 32       	cpi	r24, 0x2D	; 45
    49b0:	61 f0       	breq	.+24     	; 0x49ca <vfprintf+0xb8>
    49b2:	80 33       	cpi	r24, 0x30	; 48
    49b4:	69 f4       	brne	.+26     	; 0x49d0 <vfprintf+0xbe>
    49b6:	29 2d       	mov	r18, r9
    49b8:	21 60       	ori	r18, 0x01	; 1
    49ba:	2d c0       	rjmp	.+90     	; 0x4a16 <vfprintf+0x104>
    49bc:	39 2d       	mov	r19, r9
    49be:	32 60       	ori	r19, 0x02	; 2
    49c0:	93 2e       	mov	r9, r19
    49c2:	89 2d       	mov	r24, r9
    49c4:	84 60       	ori	r24, 0x04	; 4
    49c6:	98 2e       	mov	r9, r24
    49c8:	2a c0       	rjmp	.+84     	; 0x4a1e <vfprintf+0x10c>
    49ca:	e9 2d       	mov	r30, r9
    49cc:	e8 60       	ori	r30, 0x08	; 8
    49ce:	15 c0       	rjmp	.+42     	; 0x49fa <vfprintf+0xe8>
    49d0:	97 fc       	sbrc	r9, 7
    49d2:	2d c0       	rjmp	.+90     	; 0x4a2e <vfprintf+0x11c>
    49d4:	20 ed       	ldi	r18, 0xD0	; 208
    49d6:	28 0f       	add	r18, r24
    49d8:	2a 30       	cpi	r18, 0x0A	; 10
    49da:	88 f4       	brcc	.+34     	; 0x49fe <vfprintf+0xec>
    49dc:	96 fe       	sbrs	r9, 6
    49de:	06 c0       	rjmp	.+12     	; 0x49ec <vfprintf+0xda>
    49e0:	3a e0       	ldi	r19, 0x0A	; 10
    49e2:	13 9f       	mul	r17, r19
    49e4:	20 0d       	add	r18, r0
    49e6:	11 24       	eor	r1, r1
    49e8:	12 2f       	mov	r17, r18
    49ea:	19 c0       	rjmp	.+50     	; 0x4a1e <vfprintf+0x10c>
    49ec:	8a e0       	ldi	r24, 0x0A	; 10
    49ee:	58 9e       	mul	r5, r24
    49f0:	20 0d       	add	r18, r0
    49f2:	11 24       	eor	r1, r1
    49f4:	52 2e       	mov	r5, r18
    49f6:	e9 2d       	mov	r30, r9
    49f8:	e0 62       	ori	r30, 0x20	; 32
    49fa:	9e 2e       	mov	r9, r30
    49fc:	10 c0       	rjmp	.+32     	; 0x4a1e <vfprintf+0x10c>
    49fe:	8e 32       	cpi	r24, 0x2E	; 46
    4a00:	31 f4       	brne	.+12     	; 0x4a0e <vfprintf+0xfc>
    4a02:	96 fc       	sbrc	r9, 6
    4a04:	cc c2       	rjmp	.+1432   	; 0x4f9e <vfprintf+0x68c>
    4a06:	f9 2d       	mov	r31, r9
    4a08:	f0 64       	ori	r31, 0x40	; 64
    4a0a:	9f 2e       	mov	r9, r31
    4a0c:	08 c0       	rjmp	.+16     	; 0x4a1e <vfprintf+0x10c>
    4a0e:	8c 36       	cpi	r24, 0x6C	; 108
    4a10:	21 f4       	brne	.+8      	; 0x4a1a <vfprintf+0x108>
    4a12:	29 2d       	mov	r18, r9
    4a14:	20 68       	ori	r18, 0x80	; 128
    4a16:	92 2e       	mov	r9, r18
    4a18:	02 c0       	rjmp	.+4      	; 0x4a1e <vfprintf+0x10c>
    4a1a:	88 36       	cpi	r24, 0x68	; 104
    4a1c:	41 f4       	brne	.+16     	; 0x4a2e <vfprintf+0x11c>
    4a1e:	f1 01       	movw	r30, r2
    4a20:	93 fd       	sbrc	r25, 3
    4a22:	85 91       	lpm	r24, Z+
    4a24:	93 ff       	sbrs	r25, 3
    4a26:	81 91       	ld	r24, Z+
    4a28:	1f 01       	movw	r2, r30
    4a2a:	81 11       	cpse	r24, r1
    4a2c:	b3 cf       	rjmp	.-154    	; 0x4994 <vfprintf+0x82>
    4a2e:	9b eb       	ldi	r25, 0xBB	; 187
    4a30:	98 0f       	add	r25, r24
    4a32:	93 30       	cpi	r25, 0x03	; 3
    4a34:	20 f4       	brcc	.+8      	; 0x4a3e <vfprintf+0x12c>
    4a36:	99 2d       	mov	r25, r9
    4a38:	90 61       	ori	r25, 0x10	; 16
    4a3a:	80 5e       	subi	r24, 0xE0	; 224
    4a3c:	07 c0       	rjmp	.+14     	; 0x4a4c <vfprintf+0x13a>
    4a3e:	9b e9       	ldi	r25, 0x9B	; 155
    4a40:	98 0f       	add	r25, r24
    4a42:	93 30       	cpi	r25, 0x03	; 3
    4a44:	08 f0       	brcs	.+2      	; 0x4a48 <vfprintf+0x136>
    4a46:	59 c1       	rjmp	.+690    	; 0x4cfa <vfprintf+0x3e8>
    4a48:	99 2d       	mov	r25, r9
    4a4a:	9f 7e       	andi	r25, 0xEF	; 239
    4a4c:	96 ff       	sbrs	r25, 6
    4a4e:	16 e0       	ldi	r17, 0x06	; 6
    4a50:	9f 73       	andi	r25, 0x3F	; 63
    4a52:	99 2e       	mov	r9, r25
    4a54:	85 36       	cpi	r24, 0x65	; 101
    4a56:	19 f4       	brne	.+6      	; 0x4a5e <vfprintf+0x14c>
    4a58:	90 64       	ori	r25, 0x40	; 64
    4a5a:	99 2e       	mov	r9, r25
    4a5c:	08 c0       	rjmp	.+16     	; 0x4a6e <vfprintf+0x15c>
    4a5e:	86 36       	cpi	r24, 0x66	; 102
    4a60:	21 f4       	brne	.+8      	; 0x4a6a <vfprintf+0x158>
    4a62:	39 2f       	mov	r19, r25
    4a64:	30 68       	ori	r19, 0x80	; 128
    4a66:	93 2e       	mov	r9, r19
    4a68:	02 c0       	rjmp	.+4      	; 0x4a6e <vfprintf+0x15c>
    4a6a:	11 11       	cpse	r17, r1
    4a6c:	11 50       	subi	r17, 0x01	; 1
    4a6e:	97 fe       	sbrs	r9, 7
    4a70:	07 c0       	rjmp	.+14     	; 0x4a80 <vfprintf+0x16e>
    4a72:	1c 33       	cpi	r17, 0x3C	; 60
    4a74:	50 f4       	brcc	.+20     	; 0x4a8a <vfprintf+0x178>
    4a76:	44 24       	eor	r4, r4
    4a78:	43 94       	inc	r4
    4a7a:	41 0e       	add	r4, r17
    4a7c:	27 e0       	ldi	r18, 0x07	; 7
    4a7e:	0b c0       	rjmp	.+22     	; 0x4a96 <vfprintf+0x184>
    4a80:	18 30       	cpi	r17, 0x08	; 8
    4a82:	38 f0       	brcs	.+14     	; 0x4a92 <vfprintf+0x180>
    4a84:	27 e0       	ldi	r18, 0x07	; 7
    4a86:	17 e0       	ldi	r17, 0x07	; 7
    4a88:	05 c0       	rjmp	.+10     	; 0x4a94 <vfprintf+0x182>
    4a8a:	27 e0       	ldi	r18, 0x07	; 7
    4a8c:	9c e3       	ldi	r25, 0x3C	; 60
    4a8e:	49 2e       	mov	r4, r25
    4a90:	02 c0       	rjmp	.+4      	; 0x4a96 <vfprintf+0x184>
    4a92:	21 2f       	mov	r18, r17
    4a94:	41 2c       	mov	r4, r1
    4a96:	56 01       	movw	r10, r12
    4a98:	84 e0       	ldi	r24, 0x04	; 4
    4a9a:	a8 0e       	add	r10, r24
    4a9c:	b1 1c       	adc	r11, r1
    4a9e:	f6 01       	movw	r30, r12
    4aa0:	60 81       	ld	r22, Z
    4aa2:	71 81       	ldd	r23, Z+1	; 0x01
    4aa4:	82 81       	ldd	r24, Z+2	; 0x02
    4aa6:	93 81       	ldd	r25, Z+3	; 0x03
    4aa8:	04 2d       	mov	r16, r4
    4aaa:	a3 01       	movw	r20, r6
    4aac:	81 d4       	rcall	.+2306   	; 0x53b0 <__ftoa_engine>
    4aae:	6c 01       	movw	r12, r24
    4ab0:	f9 81       	ldd	r31, Y+1	; 0x01
    4ab2:	fc 87       	std	Y+12, r31	; 0x0c
    4ab4:	f0 ff       	sbrs	r31, 0
    4ab6:	02 c0       	rjmp	.+4      	; 0x4abc <vfprintf+0x1aa>
    4ab8:	f3 ff       	sbrs	r31, 3
    4aba:	06 c0       	rjmp	.+12     	; 0x4ac8 <vfprintf+0x1b6>
    4abc:	91 fc       	sbrc	r9, 1
    4abe:	06 c0       	rjmp	.+12     	; 0x4acc <vfprintf+0x1ba>
    4ac0:	92 fe       	sbrs	r9, 2
    4ac2:	06 c0       	rjmp	.+12     	; 0x4ad0 <vfprintf+0x1be>
    4ac4:	00 e2       	ldi	r16, 0x20	; 32
    4ac6:	05 c0       	rjmp	.+10     	; 0x4ad2 <vfprintf+0x1c0>
    4ac8:	0d e2       	ldi	r16, 0x2D	; 45
    4aca:	03 c0       	rjmp	.+6      	; 0x4ad2 <vfprintf+0x1c0>
    4acc:	0b e2       	ldi	r16, 0x2B	; 43
    4ace:	01 c0       	rjmp	.+2      	; 0x4ad2 <vfprintf+0x1c0>
    4ad0:	00 e0       	ldi	r16, 0x00	; 0
    4ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ad4:	8c 70       	andi	r24, 0x0C	; 12
    4ad6:	19 f0       	breq	.+6      	; 0x4ade <vfprintf+0x1cc>
    4ad8:	01 11       	cpse	r16, r1
    4ada:	43 c2       	rjmp	.+1158   	; 0x4f62 <vfprintf+0x650>
    4adc:	80 c2       	rjmp	.+1280   	; 0x4fde <vfprintf+0x6cc>
    4ade:	97 fe       	sbrs	r9, 7
    4ae0:	10 c0       	rjmp	.+32     	; 0x4b02 <vfprintf+0x1f0>
    4ae2:	4c 0c       	add	r4, r12
    4ae4:	fc 85       	ldd	r31, Y+12	; 0x0c
    4ae6:	f4 ff       	sbrs	r31, 4
    4ae8:	04 c0       	rjmp	.+8      	; 0x4af2 <vfprintf+0x1e0>
    4aea:	8a 81       	ldd	r24, Y+2	; 0x02
    4aec:	81 33       	cpi	r24, 0x31	; 49
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <vfprintf+0x1e0>
    4af0:	4a 94       	dec	r4
    4af2:	14 14       	cp	r1, r4
    4af4:	74 f5       	brge	.+92     	; 0x4b52 <vfprintf+0x240>
    4af6:	28 e0       	ldi	r18, 0x08	; 8
    4af8:	24 15       	cp	r18, r4
    4afa:	78 f5       	brcc	.+94     	; 0x4b5a <vfprintf+0x248>
    4afc:	88 e0       	ldi	r24, 0x08	; 8
    4afe:	48 2e       	mov	r4, r24
    4b00:	2c c0       	rjmp	.+88     	; 0x4b5a <vfprintf+0x248>
    4b02:	96 fc       	sbrc	r9, 6
    4b04:	2a c0       	rjmp	.+84     	; 0x4b5a <vfprintf+0x248>
    4b06:	81 2f       	mov	r24, r17
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	8c 15       	cp	r24, r12
    4b0c:	9d 05       	cpc	r25, r13
    4b0e:	9c f0       	brlt	.+38     	; 0x4b36 <vfprintf+0x224>
    4b10:	3c ef       	ldi	r19, 0xFC	; 252
    4b12:	c3 16       	cp	r12, r19
    4b14:	3f ef       	ldi	r19, 0xFF	; 255
    4b16:	d3 06       	cpc	r13, r19
    4b18:	74 f0       	brlt	.+28     	; 0x4b36 <vfprintf+0x224>
    4b1a:	89 2d       	mov	r24, r9
    4b1c:	80 68       	ori	r24, 0x80	; 128
    4b1e:	98 2e       	mov	r9, r24
    4b20:	0a c0       	rjmp	.+20     	; 0x4b36 <vfprintf+0x224>
    4b22:	e2 e0       	ldi	r30, 0x02	; 2
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	ec 0f       	add	r30, r28
    4b28:	fd 1f       	adc	r31, r29
    4b2a:	e1 0f       	add	r30, r17
    4b2c:	f1 1d       	adc	r31, r1
    4b2e:	80 81       	ld	r24, Z
    4b30:	80 33       	cpi	r24, 0x30	; 48
    4b32:	19 f4       	brne	.+6      	; 0x4b3a <vfprintf+0x228>
    4b34:	11 50       	subi	r17, 0x01	; 1
    4b36:	11 11       	cpse	r17, r1
    4b38:	f4 cf       	rjmp	.-24     	; 0x4b22 <vfprintf+0x210>
    4b3a:	97 fe       	sbrs	r9, 7
    4b3c:	0e c0       	rjmp	.+28     	; 0x4b5a <vfprintf+0x248>
    4b3e:	44 24       	eor	r4, r4
    4b40:	43 94       	inc	r4
    4b42:	41 0e       	add	r4, r17
    4b44:	81 2f       	mov	r24, r17
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	c8 16       	cp	r12, r24
    4b4a:	d9 06       	cpc	r13, r25
    4b4c:	2c f4       	brge	.+10     	; 0x4b58 <vfprintf+0x246>
    4b4e:	1c 19       	sub	r17, r12
    4b50:	04 c0       	rjmp	.+8      	; 0x4b5a <vfprintf+0x248>
    4b52:	44 24       	eor	r4, r4
    4b54:	43 94       	inc	r4
    4b56:	01 c0       	rjmp	.+2      	; 0x4b5a <vfprintf+0x248>
    4b58:	10 e0       	ldi	r17, 0x00	; 0
    4b5a:	97 fe       	sbrs	r9, 7
    4b5c:	06 c0       	rjmp	.+12     	; 0x4b6a <vfprintf+0x258>
    4b5e:	1c 14       	cp	r1, r12
    4b60:	1d 04       	cpc	r1, r13
    4b62:	34 f4       	brge	.+12     	; 0x4b70 <vfprintf+0x25e>
    4b64:	c6 01       	movw	r24, r12
    4b66:	01 96       	adiw	r24, 0x01	; 1
    4b68:	05 c0       	rjmp	.+10     	; 0x4b74 <vfprintf+0x262>
    4b6a:	85 e0       	ldi	r24, 0x05	; 5
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	02 c0       	rjmp	.+4      	; 0x4b74 <vfprintf+0x262>
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	01 11       	cpse	r16, r1
    4b76:	01 96       	adiw	r24, 0x01	; 1
    4b78:	11 23       	and	r17, r17
    4b7a:	31 f0       	breq	.+12     	; 0x4b88 <vfprintf+0x276>
    4b7c:	21 2f       	mov	r18, r17
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	2f 5f       	subi	r18, 0xFF	; 255
    4b82:	3f 4f       	sbci	r19, 0xFF	; 255
    4b84:	82 0f       	add	r24, r18
    4b86:	93 1f       	adc	r25, r19
    4b88:	25 2d       	mov	r18, r5
    4b8a:	30 e0       	ldi	r19, 0x00	; 0
    4b8c:	82 17       	cp	r24, r18
    4b8e:	93 07       	cpc	r25, r19
    4b90:	14 f4       	brge	.+4      	; 0x4b96 <vfprintf+0x284>
    4b92:	58 1a       	sub	r5, r24
    4b94:	01 c0       	rjmp	.+2      	; 0x4b98 <vfprintf+0x286>
    4b96:	51 2c       	mov	r5, r1
    4b98:	89 2d       	mov	r24, r9
    4b9a:	89 70       	andi	r24, 0x09	; 9
    4b9c:	41 f4       	brne	.+16     	; 0x4bae <vfprintf+0x29c>
    4b9e:	55 20       	and	r5, r5
    4ba0:	31 f0       	breq	.+12     	; 0x4bae <vfprintf+0x29c>
    4ba2:	b7 01       	movw	r22, r14
    4ba4:	80 e2       	ldi	r24, 0x20	; 32
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	3b d5       	rcall	.+2678   	; 0x5620 <fputc>
    4baa:	5a 94       	dec	r5
    4bac:	f8 cf       	rjmp	.-16     	; 0x4b9e <vfprintf+0x28c>
    4bae:	00 23       	and	r16, r16
    4bb0:	21 f0       	breq	.+8      	; 0x4bba <vfprintf+0x2a8>
    4bb2:	b7 01       	movw	r22, r14
    4bb4:	80 2f       	mov	r24, r16
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	33 d5       	rcall	.+2662   	; 0x5620 <fputc>
    4bba:	93 fc       	sbrc	r9, 3
    4bbc:	08 c0       	rjmp	.+16     	; 0x4bce <vfprintf+0x2bc>
    4bbe:	55 20       	and	r5, r5
    4bc0:	31 f0       	breq	.+12     	; 0x4bce <vfprintf+0x2bc>
    4bc2:	b7 01       	movw	r22, r14
    4bc4:	80 e3       	ldi	r24, 0x30	; 48
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	2b d5       	rcall	.+2646   	; 0x5620 <fputc>
    4bca:	5a 94       	dec	r5
    4bcc:	f8 cf       	rjmp	.-16     	; 0x4bbe <vfprintf+0x2ac>
    4bce:	97 fe       	sbrs	r9, 7
    4bd0:	4a c0       	rjmp	.+148    	; 0x4c66 <vfprintf+0x354>
    4bd2:	46 01       	movw	r8, r12
    4bd4:	d7 fe       	sbrs	r13, 7
    4bd6:	02 c0       	rjmp	.+4      	; 0x4bdc <vfprintf+0x2ca>
    4bd8:	81 2c       	mov	r8, r1
    4bda:	91 2c       	mov	r9, r1
    4bdc:	c6 01       	movw	r24, r12
    4bde:	88 19       	sub	r24, r8
    4be0:	99 09       	sbc	r25, r9
    4be2:	f3 01       	movw	r30, r6
    4be4:	e8 0f       	add	r30, r24
    4be6:	f9 1f       	adc	r31, r25
    4be8:	ed 87       	std	Y+13, r30	; 0x0d
    4bea:	fe 87       	std	Y+14, r31	; 0x0e
    4bec:	96 01       	movw	r18, r12
    4bee:	24 19       	sub	r18, r4
    4bf0:	31 09       	sbc	r19, r1
    4bf2:	2f 87       	std	Y+15, r18	; 0x0f
    4bf4:	38 8b       	std	Y+16, r19	; 0x10
    4bf6:	01 2f       	mov	r16, r17
    4bf8:	10 e0       	ldi	r17, 0x00	; 0
    4bfa:	11 95       	neg	r17
    4bfc:	01 95       	neg	r16
    4bfe:	11 09       	sbc	r17, r1
    4c00:	3f ef       	ldi	r19, 0xFF	; 255
    4c02:	83 16       	cp	r8, r19
    4c04:	93 06       	cpc	r9, r19
    4c06:	21 f4       	brne	.+8      	; 0x4c10 <vfprintf+0x2fe>
    4c08:	b7 01       	movw	r22, r14
    4c0a:	8e e2       	ldi	r24, 0x2E	; 46
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	08 d5       	rcall	.+2576   	; 0x5620 <fputc>
    4c10:	c8 14       	cp	r12, r8
    4c12:	d9 04       	cpc	r13, r9
    4c14:	4c f0       	brlt	.+18     	; 0x4c28 <vfprintf+0x316>
    4c16:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c18:	98 89       	ldd	r25, Y+16	; 0x10
    4c1a:	88 15       	cp	r24, r8
    4c1c:	99 05       	cpc	r25, r9
    4c1e:	24 f4       	brge	.+8      	; 0x4c28 <vfprintf+0x316>
    4c20:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c22:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c24:	81 81       	ldd	r24, Z+1	; 0x01
    4c26:	01 c0       	rjmp	.+2      	; 0x4c2a <vfprintf+0x318>
    4c28:	80 e3       	ldi	r24, 0x30	; 48
    4c2a:	f1 e0       	ldi	r31, 0x01	; 1
    4c2c:	8f 1a       	sub	r8, r31
    4c2e:	91 08       	sbc	r9, r1
    4c30:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c32:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c34:	2f 5f       	subi	r18, 0xFF	; 255
    4c36:	3f 4f       	sbci	r19, 0xFF	; 255
    4c38:	2d 87       	std	Y+13, r18	; 0x0d
    4c3a:	3e 87       	std	Y+14, r19	; 0x0e
    4c3c:	80 16       	cp	r8, r16
    4c3e:	91 06       	cpc	r9, r17
    4c40:	24 f0       	brlt	.+8      	; 0x4c4a <vfprintf+0x338>
    4c42:	b7 01       	movw	r22, r14
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	ec d4       	rcall	.+2520   	; 0x5620 <fputc>
    4c48:	db cf       	rjmp	.-74     	; 0x4c00 <vfprintf+0x2ee>
    4c4a:	c8 14       	cp	r12, r8
    4c4c:	d9 04       	cpc	r13, r9
    4c4e:	41 f4       	brne	.+16     	; 0x4c60 <vfprintf+0x34e>
    4c50:	9a 81       	ldd	r25, Y+2	; 0x02
    4c52:	96 33       	cpi	r25, 0x36	; 54
    4c54:	20 f4       	brcc	.+8      	; 0x4c5e <vfprintf+0x34c>
    4c56:	95 33       	cpi	r25, 0x35	; 53
    4c58:	19 f4       	brne	.+6      	; 0x4c60 <vfprintf+0x34e>
    4c5a:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c5c:	34 ff       	sbrs	r19, 4
    4c5e:	81 e3       	ldi	r24, 0x31	; 49
    4c60:	b7 01       	movw	r22, r14
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	48 c0       	rjmp	.+144    	; 0x4cf6 <vfprintf+0x3e4>
    4c66:	8a 81       	ldd	r24, Y+2	; 0x02
    4c68:	81 33       	cpi	r24, 0x31	; 49
    4c6a:	19 f0       	breq	.+6      	; 0x4c72 <vfprintf+0x360>
    4c6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c6e:	9f 7e       	andi	r25, 0xEF	; 239
    4c70:	9c 87       	std	Y+12, r25	; 0x0c
    4c72:	b7 01       	movw	r22, r14
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	d4 d4       	rcall	.+2472   	; 0x5620 <fputc>
    4c78:	11 11       	cpse	r17, r1
    4c7a:	05 c0       	rjmp	.+10     	; 0x4c86 <vfprintf+0x374>
    4c7c:	94 fc       	sbrc	r9, 4
    4c7e:	16 c0       	rjmp	.+44     	; 0x4cac <vfprintf+0x39a>
    4c80:	85 e6       	ldi	r24, 0x65	; 101
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	15 c0       	rjmp	.+42     	; 0x4cb0 <vfprintf+0x39e>
    4c86:	b7 01       	movw	r22, r14
    4c88:	8e e2       	ldi	r24, 0x2E	; 46
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	c9 d4       	rcall	.+2450   	; 0x5620 <fputc>
    4c8e:	1e 5f       	subi	r17, 0xFE	; 254
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	01 e0       	ldi	r16, 0x01	; 1
    4c94:	08 0f       	add	r16, r24
    4c96:	f3 01       	movw	r30, r6
    4c98:	e8 0f       	add	r30, r24
    4c9a:	f1 1d       	adc	r31, r1
    4c9c:	80 81       	ld	r24, Z
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	be d4       	rcall	.+2428   	; 0x5620 <fputc>
    4ca4:	80 2f       	mov	r24, r16
    4ca6:	01 13       	cpse	r16, r17
    4ca8:	f4 cf       	rjmp	.-24     	; 0x4c92 <vfprintf+0x380>
    4caa:	e8 cf       	rjmp	.-48     	; 0x4c7c <vfprintf+0x36a>
    4cac:	85 e4       	ldi	r24, 0x45	; 69
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	b7 01       	movw	r22, r14
    4cb2:	b6 d4       	rcall	.+2412   	; 0x5620 <fputc>
    4cb4:	d7 fc       	sbrc	r13, 7
    4cb6:	06 c0       	rjmp	.+12     	; 0x4cc4 <vfprintf+0x3b2>
    4cb8:	c1 14       	cp	r12, r1
    4cba:	d1 04       	cpc	r13, r1
    4cbc:	41 f4       	brne	.+16     	; 0x4cce <vfprintf+0x3bc>
    4cbe:	ec 85       	ldd	r30, Y+12	; 0x0c
    4cc0:	e4 ff       	sbrs	r30, 4
    4cc2:	05 c0       	rjmp	.+10     	; 0x4cce <vfprintf+0x3bc>
    4cc4:	d1 94       	neg	r13
    4cc6:	c1 94       	neg	r12
    4cc8:	d1 08       	sbc	r13, r1
    4cca:	8d e2       	ldi	r24, 0x2D	; 45
    4ccc:	01 c0       	rjmp	.+2      	; 0x4cd0 <vfprintf+0x3be>
    4cce:	8b e2       	ldi	r24, 0x2B	; 43
    4cd0:	b7 01       	movw	r22, r14
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	a5 d4       	rcall	.+2378   	; 0x5620 <fputc>
    4cd6:	80 e3       	ldi	r24, 0x30	; 48
    4cd8:	2a e0       	ldi	r18, 0x0A	; 10
    4cda:	c2 16       	cp	r12, r18
    4cdc:	d1 04       	cpc	r13, r1
    4cde:	2c f0       	brlt	.+10     	; 0x4cea <vfprintf+0x3d8>
    4ce0:	8f 5f       	subi	r24, 0xFF	; 255
    4ce2:	fa e0       	ldi	r31, 0x0A	; 10
    4ce4:	cf 1a       	sub	r12, r31
    4ce6:	d1 08       	sbc	r13, r1
    4ce8:	f7 cf       	rjmp	.-18     	; 0x4cd8 <vfprintf+0x3c6>
    4cea:	b7 01       	movw	r22, r14
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	98 d4       	rcall	.+2352   	; 0x5620 <fputc>
    4cf0:	b7 01       	movw	r22, r14
    4cf2:	c6 01       	movw	r24, r12
    4cf4:	c0 96       	adiw	r24, 0x30	; 48
    4cf6:	94 d4       	rcall	.+2344   	; 0x5620 <fputc>
    4cf8:	49 c1       	rjmp	.+658    	; 0x4f8c <vfprintf+0x67a>
    4cfa:	83 36       	cpi	r24, 0x63	; 99
    4cfc:	31 f0       	breq	.+12     	; 0x4d0a <vfprintf+0x3f8>
    4cfe:	83 37       	cpi	r24, 0x73	; 115
    4d00:	79 f0       	breq	.+30     	; 0x4d20 <vfprintf+0x40e>
    4d02:	83 35       	cpi	r24, 0x53	; 83
    4d04:	09 f0       	breq	.+2      	; 0x4d08 <vfprintf+0x3f6>
    4d06:	52 c0       	rjmp	.+164    	; 0x4dac <vfprintf+0x49a>
    4d08:	1f c0       	rjmp	.+62     	; 0x4d48 <vfprintf+0x436>
    4d0a:	56 01       	movw	r10, r12
    4d0c:	32 e0       	ldi	r19, 0x02	; 2
    4d0e:	a3 0e       	add	r10, r19
    4d10:	b1 1c       	adc	r11, r1
    4d12:	f6 01       	movw	r30, r12
    4d14:	80 81       	ld	r24, Z
    4d16:	89 83       	std	Y+1, r24	; 0x01
    4d18:	01 e0       	ldi	r16, 0x01	; 1
    4d1a:	10 e0       	ldi	r17, 0x00	; 0
    4d1c:	63 01       	movw	r12, r6
    4d1e:	11 c0       	rjmp	.+34     	; 0x4d42 <vfprintf+0x430>
    4d20:	56 01       	movw	r10, r12
    4d22:	f2 e0       	ldi	r31, 0x02	; 2
    4d24:	af 0e       	add	r10, r31
    4d26:	b1 1c       	adc	r11, r1
    4d28:	f6 01       	movw	r30, r12
    4d2a:	c0 80       	ld	r12, Z
    4d2c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d2e:	96 fe       	sbrs	r9, 6
    4d30:	03 c0       	rjmp	.+6      	; 0x4d38 <vfprintf+0x426>
    4d32:	61 2f       	mov	r22, r17
    4d34:	70 e0       	ldi	r23, 0x00	; 0
    4d36:	02 c0       	rjmp	.+4      	; 0x4d3c <vfprintf+0x42a>
    4d38:	6f ef       	ldi	r22, 0xFF	; 255
    4d3a:	7f ef       	ldi	r23, 0xFF	; 255
    4d3c:	c6 01       	movw	r24, r12
    4d3e:	1b d4       	rcall	.+2102   	; 0x5576 <strnlen>
    4d40:	8c 01       	movw	r16, r24
    4d42:	f9 2d       	mov	r31, r9
    4d44:	ff 77       	andi	r31, 0x7F	; 127
    4d46:	13 c0       	rjmp	.+38     	; 0x4d6e <vfprintf+0x45c>
    4d48:	56 01       	movw	r10, r12
    4d4a:	22 e0       	ldi	r18, 0x02	; 2
    4d4c:	a2 0e       	add	r10, r18
    4d4e:	b1 1c       	adc	r11, r1
    4d50:	f6 01       	movw	r30, r12
    4d52:	c0 80       	ld	r12, Z
    4d54:	d1 80       	ldd	r13, Z+1	; 0x01
    4d56:	96 fe       	sbrs	r9, 6
    4d58:	03 c0       	rjmp	.+6      	; 0x4d60 <vfprintf+0x44e>
    4d5a:	61 2f       	mov	r22, r17
    4d5c:	70 e0       	ldi	r23, 0x00	; 0
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <vfprintf+0x452>
    4d60:	6f ef       	ldi	r22, 0xFF	; 255
    4d62:	7f ef       	ldi	r23, 0xFF	; 255
    4d64:	c6 01       	movw	r24, r12
    4d66:	fc d3       	rcall	.+2040   	; 0x5560 <strnlen_P>
    4d68:	8c 01       	movw	r16, r24
    4d6a:	f9 2d       	mov	r31, r9
    4d6c:	f0 68       	ori	r31, 0x80	; 128
    4d6e:	9f 2e       	mov	r9, r31
    4d70:	f3 fd       	sbrc	r31, 3
    4d72:	18 c0       	rjmp	.+48     	; 0x4da4 <vfprintf+0x492>
    4d74:	85 2d       	mov	r24, r5
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	08 17       	cp	r16, r24
    4d7a:	19 07       	cpc	r17, r25
    4d7c:	98 f4       	brcc	.+38     	; 0x4da4 <vfprintf+0x492>
    4d7e:	b7 01       	movw	r22, r14
    4d80:	80 e2       	ldi	r24, 0x20	; 32
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	4d d4       	rcall	.+2202   	; 0x5620 <fputc>
    4d86:	5a 94       	dec	r5
    4d88:	f5 cf       	rjmp	.-22     	; 0x4d74 <vfprintf+0x462>
    4d8a:	f6 01       	movw	r30, r12
    4d8c:	97 fc       	sbrc	r9, 7
    4d8e:	85 91       	lpm	r24, Z+
    4d90:	97 fe       	sbrs	r9, 7
    4d92:	81 91       	ld	r24, Z+
    4d94:	6f 01       	movw	r12, r30
    4d96:	b7 01       	movw	r22, r14
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	42 d4       	rcall	.+2180   	; 0x5620 <fputc>
    4d9c:	51 10       	cpse	r5, r1
    4d9e:	5a 94       	dec	r5
    4da0:	01 50       	subi	r16, 0x01	; 1
    4da2:	11 09       	sbc	r17, r1
    4da4:	01 15       	cp	r16, r1
    4da6:	11 05       	cpc	r17, r1
    4da8:	81 f7       	brne	.-32     	; 0x4d8a <vfprintf+0x478>
    4daa:	f0 c0       	rjmp	.+480    	; 0x4f8c <vfprintf+0x67a>
    4dac:	84 36       	cpi	r24, 0x64	; 100
    4dae:	11 f0       	breq	.+4      	; 0x4db4 <vfprintf+0x4a2>
    4db0:	89 36       	cpi	r24, 0x69	; 105
    4db2:	59 f5       	brne	.+86     	; 0x4e0a <vfprintf+0x4f8>
    4db4:	56 01       	movw	r10, r12
    4db6:	97 fe       	sbrs	r9, 7
    4db8:	09 c0       	rjmp	.+18     	; 0x4dcc <vfprintf+0x4ba>
    4dba:	24 e0       	ldi	r18, 0x04	; 4
    4dbc:	a2 0e       	add	r10, r18
    4dbe:	b1 1c       	adc	r11, r1
    4dc0:	f6 01       	movw	r30, r12
    4dc2:	60 81       	ld	r22, Z
    4dc4:	71 81       	ldd	r23, Z+1	; 0x01
    4dc6:	82 81       	ldd	r24, Z+2	; 0x02
    4dc8:	93 81       	ldd	r25, Z+3	; 0x03
    4dca:	0a c0       	rjmp	.+20     	; 0x4de0 <vfprintf+0x4ce>
    4dcc:	f2 e0       	ldi	r31, 0x02	; 2
    4dce:	af 0e       	add	r10, r31
    4dd0:	b1 1c       	adc	r11, r1
    4dd2:	f6 01       	movw	r30, r12
    4dd4:	60 81       	ld	r22, Z
    4dd6:	71 81       	ldd	r23, Z+1	; 0x01
    4dd8:	07 2e       	mov	r0, r23
    4dda:	00 0c       	add	r0, r0
    4ddc:	88 0b       	sbc	r24, r24
    4dde:	99 0b       	sbc	r25, r25
    4de0:	f9 2d       	mov	r31, r9
    4de2:	ff 76       	andi	r31, 0x6F	; 111
    4de4:	9f 2e       	mov	r9, r31
    4de6:	97 ff       	sbrs	r25, 7
    4de8:	09 c0       	rjmp	.+18     	; 0x4dfc <vfprintf+0x4ea>
    4dea:	90 95       	com	r25
    4dec:	80 95       	com	r24
    4dee:	70 95       	com	r23
    4df0:	61 95       	neg	r22
    4df2:	7f 4f       	sbci	r23, 0xFF	; 255
    4df4:	8f 4f       	sbci	r24, 0xFF	; 255
    4df6:	9f 4f       	sbci	r25, 0xFF	; 255
    4df8:	f0 68       	ori	r31, 0x80	; 128
    4dfa:	9f 2e       	mov	r9, r31
    4dfc:	2a e0       	ldi	r18, 0x0A	; 10
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	a3 01       	movw	r20, r6
    4e02:	8d d4       	rcall	.+2330   	; 0x571e <__ultoa_invert>
    4e04:	c8 2e       	mov	r12, r24
    4e06:	c6 18       	sub	r12, r6
    4e08:	3e c0       	rjmp	.+124    	; 0x4e86 <vfprintf+0x574>
    4e0a:	09 2d       	mov	r16, r9
    4e0c:	85 37       	cpi	r24, 0x75	; 117
    4e0e:	21 f4       	brne	.+8      	; 0x4e18 <vfprintf+0x506>
    4e10:	0f 7e       	andi	r16, 0xEF	; 239
    4e12:	2a e0       	ldi	r18, 0x0A	; 10
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	1d c0       	rjmp	.+58     	; 0x4e52 <vfprintf+0x540>
    4e18:	09 7f       	andi	r16, 0xF9	; 249
    4e1a:	8f 36       	cpi	r24, 0x6F	; 111
    4e1c:	91 f0       	breq	.+36     	; 0x4e42 <vfprintf+0x530>
    4e1e:	18 f4       	brcc	.+6      	; 0x4e26 <vfprintf+0x514>
    4e20:	88 35       	cpi	r24, 0x58	; 88
    4e22:	59 f0       	breq	.+22     	; 0x4e3a <vfprintf+0x528>
    4e24:	bc c0       	rjmp	.+376    	; 0x4f9e <vfprintf+0x68c>
    4e26:	80 37       	cpi	r24, 0x70	; 112
    4e28:	19 f0       	breq	.+6      	; 0x4e30 <vfprintf+0x51e>
    4e2a:	88 37       	cpi	r24, 0x78	; 120
    4e2c:	11 f0       	breq	.+4      	; 0x4e32 <vfprintf+0x520>
    4e2e:	b7 c0       	rjmp	.+366    	; 0x4f9e <vfprintf+0x68c>
    4e30:	00 61       	ori	r16, 0x10	; 16
    4e32:	04 ff       	sbrs	r16, 4
    4e34:	09 c0       	rjmp	.+18     	; 0x4e48 <vfprintf+0x536>
    4e36:	04 60       	ori	r16, 0x04	; 4
    4e38:	07 c0       	rjmp	.+14     	; 0x4e48 <vfprintf+0x536>
    4e3a:	94 fe       	sbrs	r9, 4
    4e3c:	08 c0       	rjmp	.+16     	; 0x4e4e <vfprintf+0x53c>
    4e3e:	06 60       	ori	r16, 0x06	; 6
    4e40:	06 c0       	rjmp	.+12     	; 0x4e4e <vfprintf+0x53c>
    4e42:	28 e0       	ldi	r18, 0x08	; 8
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	05 c0       	rjmp	.+10     	; 0x4e52 <vfprintf+0x540>
    4e48:	20 e1       	ldi	r18, 0x10	; 16
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <vfprintf+0x540>
    4e4e:	20 e1       	ldi	r18, 0x10	; 16
    4e50:	32 e0       	ldi	r19, 0x02	; 2
    4e52:	56 01       	movw	r10, r12
    4e54:	07 ff       	sbrs	r16, 7
    4e56:	09 c0       	rjmp	.+18     	; 0x4e6a <vfprintf+0x558>
    4e58:	84 e0       	ldi	r24, 0x04	; 4
    4e5a:	a8 0e       	add	r10, r24
    4e5c:	b1 1c       	adc	r11, r1
    4e5e:	f6 01       	movw	r30, r12
    4e60:	60 81       	ld	r22, Z
    4e62:	71 81       	ldd	r23, Z+1	; 0x01
    4e64:	82 81       	ldd	r24, Z+2	; 0x02
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	08 c0       	rjmp	.+16     	; 0x4e7a <vfprintf+0x568>
    4e6a:	f2 e0       	ldi	r31, 0x02	; 2
    4e6c:	af 0e       	add	r10, r31
    4e6e:	b1 1c       	adc	r11, r1
    4e70:	f6 01       	movw	r30, r12
    4e72:	60 81       	ld	r22, Z
    4e74:	71 81       	ldd	r23, Z+1	; 0x01
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	a3 01       	movw	r20, r6
    4e7c:	50 d4       	rcall	.+2208   	; 0x571e <__ultoa_invert>
    4e7e:	c8 2e       	mov	r12, r24
    4e80:	c6 18       	sub	r12, r6
    4e82:	0f 77       	andi	r16, 0x7F	; 127
    4e84:	90 2e       	mov	r9, r16
    4e86:	96 fe       	sbrs	r9, 6
    4e88:	0b c0       	rjmp	.+22     	; 0x4ea0 <vfprintf+0x58e>
    4e8a:	09 2d       	mov	r16, r9
    4e8c:	0e 7f       	andi	r16, 0xFE	; 254
    4e8e:	c1 16       	cp	r12, r17
    4e90:	50 f4       	brcc	.+20     	; 0x4ea6 <vfprintf+0x594>
    4e92:	94 fe       	sbrs	r9, 4
    4e94:	0a c0       	rjmp	.+20     	; 0x4eaa <vfprintf+0x598>
    4e96:	92 fc       	sbrc	r9, 2
    4e98:	08 c0       	rjmp	.+16     	; 0x4eaa <vfprintf+0x598>
    4e9a:	09 2d       	mov	r16, r9
    4e9c:	0e 7e       	andi	r16, 0xEE	; 238
    4e9e:	05 c0       	rjmp	.+10     	; 0x4eaa <vfprintf+0x598>
    4ea0:	dc 2c       	mov	r13, r12
    4ea2:	09 2d       	mov	r16, r9
    4ea4:	03 c0       	rjmp	.+6      	; 0x4eac <vfprintf+0x59a>
    4ea6:	dc 2c       	mov	r13, r12
    4ea8:	01 c0       	rjmp	.+2      	; 0x4eac <vfprintf+0x59a>
    4eaa:	d1 2e       	mov	r13, r17
    4eac:	04 ff       	sbrs	r16, 4
    4eae:	0d c0       	rjmp	.+26     	; 0x4eca <vfprintf+0x5b8>
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	ec 0d       	add	r30, r12
    4eb4:	f1 1d       	adc	r31, r1
    4eb6:	80 81       	ld	r24, Z
    4eb8:	80 33       	cpi	r24, 0x30	; 48
    4eba:	11 f4       	brne	.+4      	; 0x4ec0 <vfprintf+0x5ae>
    4ebc:	09 7e       	andi	r16, 0xE9	; 233
    4ebe:	09 c0       	rjmp	.+18     	; 0x4ed2 <vfprintf+0x5c0>
    4ec0:	02 ff       	sbrs	r16, 2
    4ec2:	06 c0       	rjmp	.+12     	; 0x4ed0 <vfprintf+0x5be>
    4ec4:	d3 94       	inc	r13
    4ec6:	d3 94       	inc	r13
    4ec8:	04 c0       	rjmp	.+8      	; 0x4ed2 <vfprintf+0x5c0>
    4eca:	80 2f       	mov	r24, r16
    4ecc:	86 78       	andi	r24, 0x86	; 134
    4ece:	09 f0       	breq	.+2      	; 0x4ed2 <vfprintf+0x5c0>
    4ed0:	d3 94       	inc	r13
    4ed2:	03 fd       	sbrc	r16, 3
    4ed4:	10 c0       	rjmp	.+32     	; 0x4ef6 <vfprintf+0x5e4>
    4ed6:	00 ff       	sbrs	r16, 0
    4ed8:	06 c0       	rjmp	.+12     	; 0x4ee6 <vfprintf+0x5d4>
    4eda:	1c 2d       	mov	r17, r12
    4edc:	d5 14       	cp	r13, r5
    4ede:	78 f4       	brcc	.+30     	; 0x4efe <vfprintf+0x5ec>
    4ee0:	15 0d       	add	r17, r5
    4ee2:	1d 19       	sub	r17, r13
    4ee4:	0c c0       	rjmp	.+24     	; 0x4efe <vfprintf+0x5ec>
    4ee6:	d5 14       	cp	r13, r5
    4ee8:	50 f4       	brcc	.+20     	; 0x4efe <vfprintf+0x5ec>
    4eea:	b7 01       	movw	r22, r14
    4eec:	80 e2       	ldi	r24, 0x20	; 32
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	97 d3       	rcall	.+1838   	; 0x5620 <fputc>
    4ef2:	d3 94       	inc	r13
    4ef4:	f8 cf       	rjmp	.-16     	; 0x4ee6 <vfprintf+0x5d4>
    4ef6:	d5 14       	cp	r13, r5
    4ef8:	10 f4       	brcc	.+4      	; 0x4efe <vfprintf+0x5ec>
    4efa:	5d 18       	sub	r5, r13
    4efc:	01 c0       	rjmp	.+2      	; 0x4f00 <vfprintf+0x5ee>
    4efe:	51 2c       	mov	r5, r1
    4f00:	04 ff       	sbrs	r16, 4
    4f02:	0f c0       	rjmp	.+30     	; 0x4f22 <vfprintf+0x610>
    4f04:	b7 01       	movw	r22, r14
    4f06:	80 e3       	ldi	r24, 0x30	; 48
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	8a d3       	rcall	.+1812   	; 0x5620 <fputc>
    4f0c:	02 ff       	sbrs	r16, 2
    4f0e:	16 c0       	rjmp	.+44     	; 0x4f3c <vfprintf+0x62a>
    4f10:	01 fd       	sbrc	r16, 1
    4f12:	03 c0       	rjmp	.+6      	; 0x4f1a <vfprintf+0x608>
    4f14:	88 e7       	ldi	r24, 0x78	; 120
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	02 c0       	rjmp	.+4      	; 0x4f1e <vfprintf+0x60c>
    4f1a:	88 e5       	ldi	r24, 0x58	; 88
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	b7 01       	movw	r22, r14
    4f20:	0c c0       	rjmp	.+24     	; 0x4f3a <vfprintf+0x628>
    4f22:	80 2f       	mov	r24, r16
    4f24:	86 78       	andi	r24, 0x86	; 134
    4f26:	51 f0       	breq	.+20     	; 0x4f3c <vfprintf+0x62a>
    4f28:	01 ff       	sbrs	r16, 1
    4f2a:	02 c0       	rjmp	.+4      	; 0x4f30 <vfprintf+0x61e>
    4f2c:	8b e2       	ldi	r24, 0x2B	; 43
    4f2e:	01 c0       	rjmp	.+2      	; 0x4f32 <vfprintf+0x620>
    4f30:	80 e2       	ldi	r24, 0x20	; 32
    4f32:	07 fd       	sbrc	r16, 7
    4f34:	8d e2       	ldi	r24, 0x2D	; 45
    4f36:	b7 01       	movw	r22, r14
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	72 d3       	rcall	.+1764   	; 0x5620 <fputc>
    4f3c:	c1 16       	cp	r12, r17
    4f3e:	30 f4       	brcc	.+12     	; 0x4f4c <vfprintf+0x63a>
    4f40:	b7 01       	movw	r22, r14
    4f42:	80 e3       	ldi	r24, 0x30	; 48
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	6c d3       	rcall	.+1752   	; 0x5620 <fputc>
    4f48:	11 50       	subi	r17, 0x01	; 1
    4f4a:	f8 cf       	rjmp	.-16     	; 0x4f3c <vfprintf+0x62a>
    4f4c:	ca 94       	dec	r12
    4f4e:	f3 01       	movw	r30, r6
    4f50:	ec 0d       	add	r30, r12
    4f52:	f1 1d       	adc	r31, r1
    4f54:	80 81       	ld	r24, Z
    4f56:	b7 01       	movw	r22, r14
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	62 d3       	rcall	.+1732   	; 0x5620 <fputc>
    4f5c:	c1 10       	cpse	r12, r1
    4f5e:	f6 cf       	rjmp	.-20     	; 0x4f4c <vfprintf+0x63a>
    4f60:	15 c0       	rjmp	.+42     	; 0x4f8c <vfprintf+0x67a>
    4f62:	f4 e0       	ldi	r31, 0x04	; 4
    4f64:	f5 15       	cp	r31, r5
    4f66:	50 f5       	brcc	.+84     	; 0x4fbc <vfprintf+0x6aa>
    4f68:	84 e0       	ldi	r24, 0x04	; 4
    4f6a:	58 1a       	sub	r5, r24
    4f6c:	93 fe       	sbrs	r9, 3
    4f6e:	1e c0       	rjmp	.+60     	; 0x4fac <vfprintf+0x69a>
    4f70:	01 11       	cpse	r16, r1
    4f72:	25 c0       	rjmp	.+74     	; 0x4fbe <vfprintf+0x6ac>
    4f74:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f76:	23 ff       	sbrs	r18, 3
    4f78:	27 c0       	rjmp	.+78     	; 0x4fc8 <vfprintf+0x6b6>
    4f7a:	0c ef       	ldi	r16, 0xFC	; 252
    4f7c:	11 e0       	ldi	r17, 0x01	; 1
    4f7e:	39 2d       	mov	r19, r9
    4f80:	30 71       	andi	r19, 0x10	; 16
    4f82:	93 2e       	mov	r9, r19
    4f84:	f8 01       	movw	r30, r16
    4f86:	84 91       	lpm	r24, Z
    4f88:	81 11       	cpse	r24, r1
    4f8a:	21 c0       	rjmp	.+66     	; 0x4fce <vfprintf+0x6bc>
    4f8c:	55 20       	and	r5, r5
    4f8e:	09 f4       	brne	.+2      	; 0x4f92 <vfprintf+0x680>
    4f90:	fc cc       	rjmp	.-1544   	; 0x498a <vfprintf+0x78>
    4f92:	b7 01       	movw	r22, r14
    4f94:	80 e2       	ldi	r24, 0x20	; 32
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	43 d3       	rcall	.+1670   	; 0x5620 <fputc>
    4f9a:	5a 94       	dec	r5
    4f9c:	f7 cf       	rjmp	.-18     	; 0x4f8c <vfprintf+0x67a>
    4f9e:	f7 01       	movw	r30, r14
    4fa0:	86 81       	ldd	r24, Z+6	; 0x06
    4fa2:	97 81       	ldd	r25, Z+7	; 0x07
    4fa4:	23 c0       	rjmp	.+70     	; 0x4fec <vfprintf+0x6da>
    4fa6:	8f ef       	ldi	r24, 0xFF	; 255
    4fa8:	9f ef       	ldi	r25, 0xFF	; 255
    4faa:	20 c0       	rjmp	.+64     	; 0x4fec <vfprintf+0x6da>
    4fac:	b7 01       	movw	r22, r14
    4fae:	80 e2       	ldi	r24, 0x20	; 32
    4fb0:	90 e0       	ldi	r25, 0x00	; 0
    4fb2:	36 d3       	rcall	.+1644   	; 0x5620 <fputc>
    4fb4:	5a 94       	dec	r5
    4fb6:	51 10       	cpse	r5, r1
    4fb8:	f9 cf       	rjmp	.-14     	; 0x4fac <vfprintf+0x69a>
    4fba:	da cf       	rjmp	.-76     	; 0x4f70 <vfprintf+0x65e>
    4fbc:	51 2c       	mov	r5, r1
    4fbe:	b7 01       	movw	r22, r14
    4fc0:	80 2f       	mov	r24, r16
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	2d d3       	rcall	.+1626   	; 0x5620 <fputc>
    4fc6:	d6 cf       	rjmp	.-84     	; 0x4f74 <vfprintf+0x662>
    4fc8:	00 e0       	ldi	r16, 0x00	; 0
    4fca:	12 e0       	ldi	r17, 0x02	; 2
    4fcc:	d8 cf       	rjmp	.-80     	; 0x4f7e <vfprintf+0x66c>
    4fce:	91 10       	cpse	r9, r1
    4fd0:	80 52       	subi	r24, 0x20	; 32
    4fd2:	b7 01       	movw	r22, r14
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	24 d3       	rcall	.+1608   	; 0x5620 <fputc>
    4fd8:	0f 5f       	subi	r16, 0xFF	; 255
    4fda:	1f 4f       	sbci	r17, 0xFF	; 255
    4fdc:	d3 cf       	rjmp	.-90     	; 0x4f84 <vfprintf+0x672>
    4fde:	23 e0       	ldi	r18, 0x03	; 3
    4fe0:	25 15       	cp	r18, r5
    4fe2:	10 f4       	brcc	.+4      	; 0x4fe8 <vfprintf+0x6d6>
    4fe4:	83 e0       	ldi	r24, 0x03	; 3
    4fe6:	c1 cf       	rjmp	.-126    	; 0x4f6a <vfprintf+0x658>
    4fe8:	51 2c       	mov	r5, r1
    4fea:	c4 cf       	rjmp	.-120    	; 0x4f74 <vfprintf+0x662>
    4fec:	60 96       	adiw	r28, 0x10	; 16
    4fee:	cd bf       	out	0x3d, r28	; 61
    4ff0:	de bf       	out	0x3e, r29	; 62
    4ff2:	df 91       	pop	r29
    4ff4:	cf 91       	pop	r28
    4ff6:	1f 91       	pop	r17
    4ff8:	0f 91       	pop	r16
    4ffa:	ff 90       	pop	r15
    4ffc:	ef 90       	pop	r14
    4ffe:	df 90       	pop	r13
    5000:	cf 90       	pop	r12
    5002:	bf 90       	pop	r11
    5004:	af 90       	pop	r10
    5006:	9f 90       	pop	r9
    5008:	8f 90       	pop	r8
    500a:	7f 90       	pop	r7
    500c:	6f 90       	pop	r6
    500e:	5f 90       	pop	r5
    5010:	4f 90       	pop	r4
    5012:	3f 90       	pop	r3
    5014:	2f 90       	pop	r2
    5016:	08 95       	ret

00005018 <__udivmodsi4>:
    5018:	a1 e2       	ldi	r26, 0x21	; 33
    501a:	1a 2e       	mov	r1, r26
    501c:	aa 1b       	sub	r26, r26
    501e:	bb 1b       	sub	r27, r27
    5020:	fd 01       	movw	r30, r26
    5022:	0d c0       	rjmp	.+26     	; 0x503e <__udivmodsi4_ep>

00005024 <__udivmodsi4_loop>:
    5024:	aa 1f       	adc	r26, r26
    5026:	bb 1f       	adc	r27, r27
    5028:	ee 1f       	adc	r30, r30
    502a:	ff 1f       	adc	r31, r31
    502c:	a2 17       	cp	r26, r18
    502e:	b3 07       	cpc	r27, r19
    5030:	e4 07       	cpc	r30, r20
    5032:	f5 07       	cpc	r31, r21
    5034:	20 f0       	brcs	.+8      	; 0x503e <__udivmodsi4_ep>
    5036:	a2 1b       	sub	r26, r18
    5038:	b3 0b       	sbc	r27, r19
    503a:	e4 0b       	sbc	r30, r20
    503c:	f5 0b       	sbc	r31, r21

0000503e <__udivmodsi4_ep>:
    503e:	66 1f       	adc	r22, r22
    5040:	77 1f       	adc	r23, r23
    5042:	88 1f       	adc	r24, r24
    5044:	99 1f       	adc	r25, r25
    5046:	1a 94       	dec	r1
    5048:	69 f7       	brne	.-38     	; 0x5024 <__udivmodsi4_loop>
    504a:	60 95       	com	r22
    504c:	70 95       	com	r23
    504e:	80 95       	com	r24
    5050:	90 95       	com	r25
    5052:	9b 01       	movw	r18, r22
    5054:	ac 01       	movw	r20, r24
    5056:	bd 01       	movw	r22, r26
    5058:	cf 01       	movw	r24, r30
    505a:	08 95       	ret

0000505c <__umoddi3>:
    505c:	68 94       	set
    505e:	01 c0       	rjmp	.+2      	; 0x5062 <__udivdi3_umoddi3>

00005060 <__udivdi3>:
    5060:	e8 94       	clt

00005062 <__udivdi3_umoddi3>:
    5062:	8f 92       	push	r8
    5064:	9f 92       	push	r9
    5066:	cf 93       	push	r28
    5068:	df 93       	push	r29
    506a:	05 d0       	rcall	.+10     	; 0x5076 <__udivmod64>
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	9f 90       	pop	r9
    5072:	8f 90       	pop	r8
    5074:	08 95       	ret

00005076 <__udivmod64>:
    5076:	88 24       	eor	r8, r8
    5078:	99 24       	eor	r9, r9
    507a:	f4 01       	movw	r30, r8
    507c:	e4 01       	movw	r28, r8
    507e:	b0 e4       	ldi	r27, 0x40	; 64
    5080:	9f 93       	push	r25
    5082:	aa 27       	eor	r26, r26
    5084:	9a 15       	cp	r25, r10
    5086:	8b 04       	cpc	r8, r11
    5088:	9c 04       	cpc	r9, r12
    508a:	ed 05       	cpc	r30, r13
    508c:	fe 05       	cpc	r31, r14
    508e:	cf 05       	cpc	r28, r15
    5090:	d0 07       	cpc	r29, r16
    5092:	a1 07       	cpc	r26, r17
    5094:	98 f4       	brcc	.+38     	; 0x50bc <__udivmod64+0x46>
    5096:	ad 2f       	mov	r26, r29
    5098:	dc 2f       	mov	r29, r28
    509a:	cf 2f       	mov	r28, r31
    509c:	fe 2f       	mov	r31, r30
    509e:	e9 2d       	mov	r30, r9
    50a0:	98 2c       	mov	r9, r8
    50a2:	89 2e       	mov	r8, r25
    50a4:	98 2f       	mov	r25, r24
    50a6:	87 2f       	mov	r24, r23
    50a8:	76 2f       	mov	r23, r22
    50aa:	65 2f       	mov	r22, r21
    50ac:	54 2f       	mov	r21, r20
    50ae:	43 2f       	mov	r20, r19
    50b0:	32 2f       	mov	r19, r18
    50b2:	22 27       	eor	r18, r18
    50b4:	b8 50       	subi	r27, 0x08	; 8
    50b6:	31 f7       	brne	.-52     	; 0x5084 <__udivmod64+0xe>
    50b8:	bf 91       	pop	r27
    50ba:	27 c0       	rjmp	.+78     	; 0x510a <__udivmod64+0x94>
    50bc:	1b 2e       	mov	r1, r27
    50be:	bf 91       	pop	r27
    50c0:	bb 27       	eor	r27, r27
    50c2:	22 0f       	add	r18, r18
    50c4:	33 1f       	adc	r19, r19
    50c6:	44 1f       	adc	r20, r20
    50c8:	55 1f       	adc	r21, r21
    50ca:	66 1f       	adc	r22, r22
    50cc:	77 1f       	adc	r23, r23
    50ce:	88 1f       	adc	r24, r24
    50d0:	99 1f       	adc	r25, r25
    50d2:	88 1c       	adc	r8, r8
    50d4:	99 1c       	adc	r9, r9
    50d6:	ee 1f       	adc	r30, r30
    50d8:	ff 1f       	adc	r31, r31
    50da:	cc 1f       	adc	r28, r28
    50dc:	dd 1f       	adc	r29, r29
    50de:	aa 1f       	adc	r26, r26
    50e0:	bb 1f       	adc	r27, r27
    50e2:	8a 14       	cp	r8, r10
    50e4:	9b 04       	cpc	r9, r11
    50e6:	ec 05       	cpc	r30, r12
    50e8:	fd 05       	cpc	r31, r13
    50ea:	ce 05       	cpc	r28, r14
    50ec:	df 05       	cpc	r29, r15
    50ee:	a0 07       	cpc	r26, r16
    50f0:	b1 07       	cpc	r27, r17
    50f2:	48 f0       	brcs	.+18     	; 0x5106 <__udivmod64+0x90>
    50f4:	8a 18       	sub	r8, r10
    50f6:	9b 08       	sbc	r9, r11
    50f8:	ec 09       	sbc	r30, r12
    50fa:	fd 09       	sbc	r31, r13
    50fc:	ce 09       	sbc	r28, r14
    50fe:	df 09       	sbc	r29, r15
    5100:	a0 0b       	sbc	r26, r16
    5102:	b1 0b       	sbc	r27, r17
    5104:	21 60       	ori	r18, 0x01	; 1
    5106:	1a 94       	dec	r1
    5108:	e1 f6       	brne	.-72     	; 0x50c2 <__udivmod64+0x4c>
    510a:	2e f4       	brtc	.+10     	; 0x5116 <__udivmod64+0xa0>
    510c:	94 01       	movw	r18, r8
    510e:	af 01       	movw	r20, r30
    5110:	be 01       	movw	r22, r28
    5112:	cd 01       	movw	r24, r26
    5114:	00 0c       	add	r0, r0
    5116:	08 95       	ret

00005118 <__ashldi3>:
    5118:	0f 93       	push	r16
    511a:	08 30       	cpi	r16, 0x08	; 8
    511c:	90 f0       	brcs	.+36     	; 0x5142 <__ashldi3+0x2a>
    511e:	98 2f       	mov	r25, r24
    5120:	87 2f       	mov	r24, r23
    5122:	76 2f       	mov	r23, r22
    5124:	65 2f       	mov	r22, r21
    5126:	54 2f       	mov	r21, r20
    5128:	43 2f       	mov	r20, r19
    512a:	32 2f       	mov	r19, r18
    512c:	22 27       	eor	r18, r18
    512e:	08 50       	subi	r16, 0x08	; 8
    5130:	f4 cf       	rjmp	.-24     	; 0x511a <__ashldi3+0x2>
    5132:	22 0f       	add	r18, r18
    5134:	33 1f       	adc	r19, r19
    5136:	44 1f       	adc	r20, r20
    5138:	55 1f       	adc	r21, r21
    513a:	66 1f       	adc	r22, r22
    513c:	77 1f       	adc	r23, r23
    513e:	88 1f       	adc	r24, r24
    5140:	99 1f       	adc	r25, r25
    5142:	0a 95       	dec	r16
    5144:	b2 f7       	brpl	.-20     	; 0x5132 <__ashldi3+0x1a>
    5146:	0f 91       	pop	r16
    5148:	08 95       	ret

0000514a <__adddi3>:
    514a:	2a 0d       	add	r18, r10
    514c:	3b 1d       	adc	r19, r11
    514e:	4c 1d       	adc	r20, r12
    5150:	5d 1d       	adc	r21, r13
    5152:	6e 1d       	adc	r22, r14
    5154:	7f 1d       	adc	r23, r15
    5156:	80 1f       	adc	r24, r16
    5158:	91 1f       	adc	r25, r17
    515a:	08 95       	ret

0000515c <__subdi3>:
    515c:	2a 19       	sub	r18, r10
    515e:	3b 09       	sbc	r19, r11
    5160:	4c 09       	sbc	r20, r12
    5162:	5d 09       	sbc	r21, r13
    5164:	6e 09       	sbc	r22, r14
    5166:	7f 09       	sbc	r23, r15
    5168:	80 0b       	sbc	r24, r16
    516a:	91 0b       	sbc	r25, r17
    516c:	08 95       	ret

0000516e <malloc>:
    516e:	0f 93       	push	r16
    5170:	1f 93       	push	r17
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	82 30       	cpi	r24, 0x02	; 2
    5178:	91 05       	cpc	r25, r1
    517a:	10 f4       	brcc	.+4      	; 0x5180 <malloc+0x12>
    517c:	82 e0       	ldi	r24, 0x02	; 2
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	e0 91 a9 21 	lds	r30, 0x21A9	; 0x8021a9 <__flp>
    5184:	f0 91 aa 21 	lds	r31, 0x21AA	; 0x8021aa <__flp+0x1>
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	a0 e0       	ldi	r26, 0x00	; 0
    518e:	b0 e0       	ldi	r27, 0x00	; 0
    5190:	30 97       	sbiw	r30, 0x00	; 0
    5192:	19 f1       	breq	.+70     	; 0x51da <malloc+0x6c>
    5194:	40 81       	ld	r20, Z
    5196:	51 81       	ldd	r21, Z+1	; 0x01
    5198:	02 81       	ldd	r16, Z+2	; 0x02
    519a:	13 81       	ldd	r17, Z+3	; 0x03
    519c:	48 17       	cp	r20, r24
    519e:	59 07       	cpc	r21, r25
    51a0:	c8 f0       	brcs	.+50     	; 0x51d4 <malloc+0x66>
    51a2:	84 17       	cp	r24, r20
    51a4:	95 07       	cpc	r25, r21
    51a6:	69 f4       	brne	.+26     	; 0x51c2 <malloc+0x54>
    51a8:	10 97       	sbiw	r26, 0x00	; 0
    51aa:	31 f0       	breq	.+12     	; 0x51b8 <malloc+0x4a>
    51ac:	12 96       	adiw	r26, 0x02	; 2
    51ae:	0c 93       	st	X, r16
    51b0:	12 97       	sbiw	r26, 0x02	; 2
    51b2:	13 96       	adiw	r26, 0x03	; 3
    51b4:	1c 93       	st	X, r17
    51b6:	27 c0       	rjmp	.+78     	; 0x5206 <malloc+0x98>
    51b8:	00 93 a9 21 	sts	0x21A9, r16	; 0x8021a9 <__flp>
    51bc:	10 93 aa 21 	sts	0x21AA, r17	; 0x8021aa <__flp+0x1>
    51c0:	22 c0       	rjmp	.+68     	; 0x5206 <malloc+0x98>
    51c2:	21 15       	cp	r18, r1
    51c4:	31 05       	cpc	r19, r1
    51c6:	19 f0       	breq	.+6      	; 0x51ce <malloc+0x60>
    51c8:	42 17       	cp	r20, r18
    51ca:	53 07       	cpc	r21, r19
    51cc:	18 f4       	brcc	.+6      	; 0x51d4 <malloc+0x66>
    51ce:	9a 01       	movw	r18, r20
    51d0:	bd 01       	movw	r22, r26
    51d2:	ef 01       	movw	r28, r30
    51d4:	df 01       	movw	r26, r30
    51d6:	f8 01       	movw	r30, r16
    51d8:	db cf       	rjmp	.-74     	; 0x5190 <malloc+0x22>
    51da:	21 15       	cp	r18, r1
    51dc:	31 05       	cpc	r19, r1
    51de:	f9 f0       	breq	.+62     	; 0x521e <malloc+0xb0>
    51e0:	28 1b       	sub	r18, r24
    51e2:	39 0b       	sbc	r19, r25
    51e4:	24 30       	cpi	r18, 0x04	; 4
    51e6:	31 05       	cpc	r19, r1
    51e8:	80 f4       	brcc	.+32     	; 0x520a <malloc+0x9c>
    51ea:	8a 81       	ldd	r24, Y+2	; 0x02
    51ec:	9b 81       	ldd	r25, Y+3	; 0x03
    51ee:	61 15       	cp	r22, r1
    51f0:	71 05       	cpc	r23, r1
    51f2:	21 f0       	breq	.+8      	; 0x51fc <malloc+0x8e>
    51f4:	fb 01       	movw	r30, r22
    51f6:	82 83       	std	Z+2, r24	; 0x02
    51f8:	93 83       	std	Z+3, r25	; 0x03
    51fa:	04 c0       	rjmp	.+8      	; 0x5204 <malloc+0x96>
    51fc:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <__flp>
    5200:	90 93 aa 21 	sts	0x21AA, r25	; 0x8021aa <__flp+0x1>
    5204:	fe 01       	movw	r30, r28
    5206:	32 96       	adiw	r30, 0x02	; 2
    5208:	44 c0       	rjmp	.+136    	; 0x5292 <malloc+0x124>
    520a:	fe 01       	movw	r30, r28
    520c:	e2 0f       	add	r30, r18
    520e:	f3 1f       	adc	r31, r19
    5210:	81 93       	st	Z+, r24
    5212:	91 93       	st	Z+, r25
    5214:	22 50       	subi	r18, 0x02	; 2
    5216:	31 09       	sbc	r19, r1
    5218:	28 83       	st	Y, r18
    521a:	39 83       	std	Y+1, r19	; 0x01
    521c:	3a c0       	rjmp	.+116    	; 0x5292 <malloc+0x124>
    521e:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <__brkval>
    5222:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <__brkval+0x1>
    5226:	23 2b       	or	r18, r19
    5228:	41 f4       	brne	.+16     	; 0x523a <malloc+0xcc>
    522a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    522e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5232:	20 93 a7 21 	sts	0x21A7, r18	; 0x8021a7 <__brkval>
    5236:	30 93 a8 21 	sts	0x21A8, r19	; 0x8021a8 <__brkval+0x1>
    523a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    523e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    5242:	21 15       	cp	r18, r1
    5244:	31 05       	cpc	r19, r1
    5246:	41 f4       	brne	.+16     	; 0x5258 <malloc+0xea>
    5248:	2d b7       	in	r18, 0x3d	; 61
    524a:	3e b7       	in	r19, 0x3e	; 62
    524c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5250:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5254:	24 1b       	sub	r18, r20
    5256:	35 0b       	sbc	r19, r21
    5258:	e0 91 a7 21 	lds	r30, 0x21A7	; 0x8021a7 <__brkval>
    525c:	f0 91 a8 21 	lds	r31, 0x21A8	; 0x8021a8 <__brkval+0x1>
    5260:	e2 17       	cp	r30, r18
    5262:	f3 07       	cpc	r31, r19
    5264:	a0 f4       	brcc	.+40     	; 0x528e <malloc+0x120>
    5266:	2e 1b       	sub	r18, r30
    5268:	3f 0b       	sbc	r19, r31
    526a:	28 17       	cp	r18, r24
    526c:	39 07       	cpc	r19, r25
    526e:	78 f0       	brcs	.+30     	; 0x528e <malloc+0x120>
    5270:	ac 01       	movw	r20, r24
    5272:	4e 5f       	subi	r20, 0xFE	; 254
    5274:	5f 4f       	sbci	r21, 0xFF	; 255
    5276:	24 17       	cp	r18, r20
    5278:	35 07       	cpc	r19, r21
    527a:	48 f0       	brcs	.+18     	; 0x528e <malloc+0x120>
    527c:	4e 0f       	add	r20, r30
    527e:	5f 1f       	adc	r21, r31
    5280:	40 93 a7 21 	sts	0x21A7, r20	; 0x8021a7 <__brkval>
    5284:	50 93 a8 21 	sts	0x21A8, r21	; 0x8021a8 <__brkval+0x1>
    5288:	81 93       	st	Z+, r24
    528a:	91 93       	st	Z+, r25
    528c:	02 c0       	rjmp	.+4      	; 0x5292 <malloc+0x124>
    528e:	e0 e0       	ldi	r30, 0x00	; 0
    5290:	f0 e0       	ldi	r31, 0x00	; 0
    5292:	cf 01       	movw	r24, r30
    5294:	df 91       	pop	r29
    5296:	cf 91       	pop	r28
    5298:	1f 91       	pop	r17
    529a:	0f 91       	pop	r16
    529c:	08 95       	ret

0000529e <free>:
    529e:	cf 93       	push	r28
    52a0:	df 93       	push	r29
    52a2:	00 97       	sbiw	r24, 0x00	; 0
    52a4:	09 f4       	brne	.+2      	; 0x52a8 <free+0xa>
    52a6:	81 c0       	rjmp	.+258    	; 0x53aa <free+0x10c>
    52a8:	fc 01       	movw	r30, r24
    52aa:	32 97       	sbiw	r30, 0x02	; 2
    52ac:	12 82       	std	Z+2, r1	; 0x02
    52ae:	13 82       	std	Z+3, r1	; 0x03
    52b0:	a0 91 a9 21 	lds	r26, 0x21A9	; 0x8021a9 <__flp>
    52b4:	b0 91 aa 21 	lds	r27, 0x21AA	; 0x8021aa <__flp+0x1>
    52b8:	10 97       	sbiw	r26, 0x00	; 0
    52ba:	81 f4       	brne	.+32     	; 0x52dc <free+0x3e>
    52bc:	20 81       	ld	r18, Z
    52be:	31 81       	ldd	r19, Z+1	; 0x01
    52c0:	82 0f       	add	r24, r18
    52c2:	93 1f       	adc	r25, r19
    52c4:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <__brkval>
    52c8:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <__brkval+0x1>
    52cc:	28 17       	cp	r18, r24
    52ce:	39 07       	cpc	r19, r25
    52d0:	51 f5       	brne	.+84     	; 0x5326 <free+0x88>
    52d2:	e0 93 a7 21 	sts	0x21A7, r30	; 0x8021a7 <__brkval>
    52d6:	f0 93 a8 21 	sts	0x21A8, r31	; 0x8021a8 <__brkval+0x1>
    52da:	67 c0       	rjmp	.+206    	; 0x53aa <free+0x10c>
    52dc:	ed 01       	movw	r28, r26
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	ce 17       	cp	r28, r30
    52e4:	df 07       	cpc	r29, r31
    52e6:	40 f4       	brcc	.+16     	; 0x52f8 <free+0x5a>
    52e8:	4a 81       	ldd	r20, Y+2	; 0x02
    52ea:	5b 81       	ldd	r21, Y+3	; 0x03
    52ec:	9e 01       	movw	r18, r28
    52ee:	41 15       	cp	r20, r1
    52f0:	51 05       	cpc	r21, r1
    52f2:	f1 f0       	breq	.+60     	; 0x5330 <free+0x92>
    52f4:	ea 01       	movw	r28, r20
    52f6:	f5 cf       	rjmp	.-22     	; 0x52e2 <free+0x44>
    52f8:	c2 83       	std	Z+2, r28	; 0x02
    52fa:	d3 83       	std	Z+3, r29	; 0x03
    52fc:	40 81       	ld	r20, Z
    52fe:	51 81       	ldd	r21, Z+1	; 0x01
    5300:	84 0f       	add	r24, r20
    5302:	95 1f       	adc	r25, r21
    5304:	c8 17       	cp	r28, r24
    5306:	d9 07       	cpc	r29, r25
    5308:	59 f4       	brne	.+22     	; 0x5320 <free+0x82>
    530a:	88 81       	ld	r24, Y
    530c:	99 81       	ldd	r25, Y+1	; 0x01
    530e:	84 0f       	add	r24, r20
    5310:	95 1f       	adc	r25, r21
    5312:	02 96       	adiw	r24, 0x02	; 2
    5314:	80 83       	st	Z, r24
    5316:	91 83       	std	Z+1, r25	; 0x01
    5318:	8a 81       	ldd	r24, Y+2	; 0x02
    531a:	9b 81       	ldd	r25, Y+3	; 0x03
    531c:	82 83       	std	Z+2, r24	; 0x02
    531e:	93 83       	std	Z+3, r25	; 0x03
    5320:	21 15       	cp	r18, r1
    5322:	31 05       	cpc	r19, r1
    5324:	29 f4       	brne	.+10     	; 0x5330 <free+0x92>
    5326:	e0 93 a9 21 	sts	0x21A9, r30	; 0x8021a9 <__flp>
    532a:	f0 93 aa 21 	sts	0x21AA, r31	; 0x8021aa <__flp+0x1>
    532e:	3d c0       	rjmp	.+122    	; 0x53aa <free+0x10c>
    5330:	e9 01       	movw	r28, r18
    5332:	ea 83       	std	Y+2, r30	; 0x02
    5334:	fb 83       	std	Y+3, r31	; 0x03
    5336:	49 91       	ld	r20, Y+
    5338:	59 91       	ld	r21, Y+
    533a:	c4 0f       	add	r28, r20
    533c:	d5 1f       	adc	r29, r21
    533e:	ec 17       	cp	r30, r28
    5340:	fd 07       	cpc	r31, r29
    5342:	61 f4       	brne	.+24     	; 0x535c <free+0xbe>
    5344:	80 81       	ld	r24, Z
    5346:	91 81       	ldd	r25, Z+1	; 0x01
    5348:	84 0f       	add	r24, r20
    534a:	95 1f       	adc	r25, r21
    534c:	02 96       	adiw	r24, 0x02	; 2
    534e:	e9 01       	movw	r28, r18
    5350:	88 83       	st	Y, r24
    5352:	99 83       	std	Y+1, r25	; 0x01
    5354:	82 81       	ldd	r24, Z+2	; 0x02
    5356:	93 81       	ldd	r25, Z+3	; 0x03
    5358:	8a 83       	std	Y+2, r24	; 0x02
    535a:	9b 83       	std	Y+3, r25	; 0x03
    535c:	e0 e0       	ldi	r30, 0x00	; 0
    535e:	f0 e0       	ldi	r31, 0x00	; 0
    5360:	12 96       	adiw	r26, 0x02	; 2
    5362:	8d 91       	ld	r24, X+
    5364:	9c 91       	ld	r25, X
    5366:	13 97       	sbiw	r26, 0x03	; 3
    5368:	00 97       	sbiw	r24, 0x00	; 0
    536a:	19 f0       	breq	.+6      	; 0x5372 <free+0xd4>
    536c:	fd 01       	movw	r30, r26
    536e:	dc 01       	movw	r26, r24
    5370:	f7 cf       	rjmp	.-18     	; 0x5360 <free+0xc2>
    5372:	8d 91       	ld	r24, X+
    5374:	9c 91       	ld	r25, X
    5376:	11 97       	sbiw	r26, 0x01	; 1
    5378:	9d 01       	movw	r18, r26
    537a:	2e 5f       	subi	r18, 0xFE	; 254
    537c:	3f 4f       	sbci	r19, 0xFF	; 255
    537e:	82 0f       	add	r24, r18
    5380:	93 1f       	adc	r25, r19
    5382:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <__brkval>
    5386:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <__brkval+0x1>
    538a:	28 17       	cp	r18, r24
    538c:	39 07       	cpc	r19, r25
    538e:	69 f4       	brne	.+26     	; 0x53aa <free+0x10c>
    5390:	30 97       	sbiw	r30, 0x00	; 0
    5392:	29 f4       	brne	.+10     	; 0x539e <free+0x100>
    5394:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <__flp>
    5398:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <__flp+0x1>
    539c:	02 c0       	rjmp	.+4      	; 0x53a2 <free+0x104>
    539e:	12 82       	std	Z+2, r1	; 0x02
    53a0:	13 82       	std	Z+3, r1	; 0x03
    53a2:	a0 93 a7 21 	sts	0x21A7, r26	; 0x8021a7 <__brkval>
    53a6:	b0 93 a8 21 	sts	0x21A8, r27	; 0x8021a8 <__brkval+0x1>
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	08 95       	ret

000053b0 <__ftoa_engine>:
    53b0:	28 30       	cpi	r18, 0x08	; 8
    53b2:	08 f0       	brcs	.+2      	; 0x53b6 <__ftoa_engine+0x6>
    53b4:	27 e0       	ldi	r18, 0x07	; 7
    53b6:	33 27       	eor	r19, r19
    53b8:	da 01       	movw	r26, r20
    53ba:	99 0f       	add	r25, r25
    53bc:	31 1d       	adc	r19, r1
    53be:	87 fd       	sbrc	r24, 7
    53c0:	91 60       	ori	r25, 0x01	; 1
    53c2:	00 96       	adiw	r24, 0x00	; 0
    53c4:	61 05       	cpc	r22, r1
    53c6:	71 05       	cpc	r23, r1
    53c8:	39 f4       	brne	.+14     	; 0x53d8 <__ftoa_engine+0x28>
    53ca:	32 60       	ori	r19, 0x02	; 2
    53cc:	2e 5f       	subi	r18, 0xFE	; 254
    53ce:	3d 93       	st	X+, r19
    53d0:	30 e3       	ldi	r19, 0x30	; 48
    53d2:	2a 95       	dec	r18
    53d4:	e1 f7       	brne	.-8      	; 0x53ce <__ftoa_engine+0x1e>
    53d6:	08 95       	ret
    53d8:	9f 3f       	cpi	r25, 0xFF	; 255
    53da:	30 f0       	brcs	.+12     	; 0x53e8 <__ftoa_engine+0x38>
    53dc:	80 38       	cpi	r24, 0x80	; 128
    53de:	71 05       	cpc	r23, r1
    53e0:	61 05       	cpc	r22, r1
    53e2:	09 f0       	breq	.+2      	; 0x53e6 <__ftoa_engine+0x36>
    53e4:	3c 5f       	subi	r19, 0xFC	; 252
    53e6:	3c 5f       	subi	r19, 0xFC	; 252
    53e8:	3d 93       	st	X+, r19
    53ea:	91 30       	cpi	r25, 0x01	; 1
    53ec:	08 f0       	brcs	.+2      	; 0x53f0 <__ftoa_engine+0x40>
    53ee:	80 68       	ori	r24, 0x80	; 128
    53f0:	91 1d       	adc	r25, r1
    53f2:	df 93       	push	r29
    53f4:	cf 93       	push	r28
    53f6:	1f 93       	push	r17
    53f8:	0f 93       	push	r16
    53fa:	ff 92       	push	r15
    53fc:	ef 92       	push	r14
    53fe:	19 2f       	mov	r17, r25
    5400:	98 7f       	andi	r25, 0xF8	; 248
    5402:	96 95       	lsr	r25
    5404:	e9 2f       	mov	r30, r25
    5406:	96 95       	lsr	r25
    5408:	96 95       	lsr	r25
    540a:	e9 0f       	add	r30, r25
    540c:	ff 27       	eor	r31, r31
    540e:	e2 5a       	subi	r30, 0xA2	; 162
    5410:	fd 4f       	sbci	r31, 0xFD	; 253
    5412:	99 27       	eor	r25, r25
    5414:	33 27       	eor	r19, r19
    5416:	ee 24       	eor	r14, r14
    5418:	ff 24       	eor	r15, r15
    541a:	a7 01       	movw	r20, r14
    541c:	e7 01       	movw	r28, r14
    541e:	05 90       	lpm	r0, Z+
    5420:	08 94       	sec
    5422:	07 94       	ror	r0
    5424:	28 f4       	brcc	.+10     	; 0x5430 <__ftoa_engine+0x80>
    5426:	36 0f       	add	r19, r22
    5428:	e7 1e       	adc	r14, r23
    542a:	f8 1e       	adc	r15, r24
    542c:	49 1f       	adc	r20, r25
    542e:	51 1d       	adc	r21, r1
    5430:	66 0f       	add	r22, r22
    5432:	77 1f       	adc	r23, r23
    5434:	88 1f       	adc	r24, r24
    5436:	99 1f       	adc	r25, r25
    5438:	06 94       	lsr	r0
    543a:	a1 f7       	brne	.-24     	; 0x5424 <__ftoa_engine+0x74>
    543c:	05 90       	lpm	r0, Z+
    543e:	07 94       	ror	r0
    5440:	28 f4       	brcc	.+10     	; 0x544c <__ftoa_engine+0x9c>
    5442:	e7 0e       	add	r14, r23
    5444:	f8 1e       	adc	r15, r24
    5446:	49 1f       	adc	r20, r25
    5448:	56 1f       	adc	r21, r22
    544a:	c1 1d       	adc	r28, r1
    544c:	77 0f       	add	r23, r23
    544e:	88 1f       	adc	r24, r24
    5450:	99 1f       	adc	r25, r25
    5452:	66 1f       	adc	r22, r22
    5454:	06 94       	lsr	r0
    5456:	a1 f7       	brne	.-24     	; 0x5440 <__ftoa_engine+0x90>
    5458:	05 90       	lpm	r0, Z+
    545a:	07 94       	ror	r0
    545c:	28 f4       	brcc	.+10     	; 0x5468 <__ftoa_engine+0xb8>
    545e:	f8 0e       	add	r15, r24
    5460:	49 1f       	adc	r20, r25
    5462:	56 1f       	adc	r21, r22
    5464:	c7 1f       	adc	r28, r23
    5466:	d1 1d       	adc	r29, r1
    5468:	88 0f       	add	r24, r24
    546a:	99 1f       	adc	r25, r25
    546c:	66 1f       	adc	r22, r22
    546e:	77 1f       	adc	r23, r23
    5470:	06 94       	lsr	r0
    5472:	a1 f7       	brne	.-24     	; 0x545c <__ftoa_engine+0xac>
    5474:	05 90       	lpm	r0, Z+
    5476:	07 94       	ror	r0
    5478:	20 f4       	brcc	.+8      	; 0x5482 <__ftoa_engine+0xd2>
    547a:	49 0f       	add	r20, r25
    547c:	56 1f       	adc	r21, r22
    547e:	c7 1f       	adc	r28, r23
    5480:	d8 1f       	adc	r29, r24
    5482:	99 0f       	add	r25, r25
    5484:	66 1f       	adc	r22, r22
    5486:	77 1f       	adc	r23, r23
    5488:	88 1f       	adc	r24, r24
    548a:	06 94       	lsr	r0
    548c:	a9 f7       	brne	.-22     	; 0x5478 <__ftoa_engine+0xc8>
    548e:	84 91       	lpm	r24, Z
    5490:	10 95       	com	r17
    5492:	17 70       	andi	r17, 0x07	; 7
    5494:	41 f0       	breq	.+16     	; 0x54a6 <__ftoa_engine+0xf6>
    5496:	d6 95       	lsr	r29
    5498:	c7 95       	ror	r28
    549a:	57 95       	ror	r21
    549c:	47 95       	ror	r20
    549e:	f7 94       	ror	r15
    54a0:	e7 94       	ror	r14
    54a2:	1a 95       	dec	r17
    54a4:	c1 f7       	brne	.-16     	; 0x5496 <__ftoa_engine+0xe6>
    54a6:	e4 e0       	ldi	r30, 0x04	; 4
    54a8:	f2 e0       	ldi	r31, 0x02	; 2
    54aa:	68 94       	set
    54ac:	15 90       	lpm	r1, Z+
    54ae:	15 91       	lpm	r17, Z+
    54b0:	35 91       	lpm	r19, Z+
    54b2:	65 91       	lpm	r22, Z+
    54b4:	95 91       	lpm	r25, Z+
    54b6:	05 90       	lpm	r0, Z+
    54b8:	7f e2       	ldi	r23, 0x2F	; 47
    54ba:	73 95       	inc	r23
    54bc:	e1 18       	sub	r14, r1
    54be:	f1 0a       	sbc	r15, r17
    54c0:	43 0b       	sbc	r20, r19
    54c2:	56 0b       	sbc	r21, r22
    54c4:	c9 0b       	sbc	r28, r25
    54c6:	d0 09       	sbc	r29, r0
    54c8:	c0 f7       	brcc	.-16     	; 0x54ba <__ftoa_engine+0x10a>
    54ca:	e1 0c       	add	r14, r1
    54cc:	f1 1e       	adc	r15, r17
    54ce:	43 1f       	adc	r20, r19
    54d0:	56 1f       	adc	r21, r22
    54d2:	c9 1f       	adc	r28, r25
    54d4:	d0 1d       	adc	r29, r0
    54d6:	7e f4       	brtc	.+30     	; 0x54f6 <__ftoa_engine+0x146>
    54d8:	70 33       	cpi	r23, 0x30	; 48
    54da:	11 f4       	brne	.+4      	; 0x54e0 <__ftoa_engine+0x130>
    54dc:	8a 95       	dec	r24
    54de:	e6 cf       	rjmp	.-52     	; 0x54ac <__ftoa_engine+0xfc>
    54e0:	e8 94       	clt
    54e2:	01 50       	subi	r16, 0x01	; 1
    54e4:	30 f0       	brcs	.+12     	; 0x54f2 <__ftoa_engine+0x142>
    54e6:	08 0f       	add	r16, r24
    54e8:	0a f4       	brpl	.+2      	; 0x54ec <__ftoa_engine+0x13c>
    54ea:	00 27       	eor	r16, r16
    54ec:	02 17       	cp	r16, r18
    54ee:	08 f4       	brcc	.+2      	; 0x54f2 <__ftoa_engine+0x142>
    54f0:	20 2f       	mov	r18, r16
    54f2:	23 95       	inc	r18
    54f4:	02 2f       	mov	r16, r18
    54f6:	7a 33       	cpi	r23, 0x3A	; 58
    54f8:	28 f0       	brcs	.+10     	; 0x5504 <__ftoa_engine+0x154>
    54fa:	79 e3       	ldi	r23, 0x39	; 57
    54fc:	7d 93       	st	X+, r23
    54fe:	2a 95       	dec	r18
    5500:	e9 f7       	brne	.-6      	; 0x54fc <__ftoa_engine+0x14c>
    5502:	10 c0       	rjmp	.+32     	; 0x5524 <__ftoa_engine+0x174>
    5504:	7d 93       	st	X+, r23
    5506:	2a 95       	dec	r18
    5508:	89 f6       	brne	.-94     	; 0x54ac <__ftoa_engine+0xfc>
    550a:	06 94       	lsr	r0
    550c:	97 95       	ror	r25
    550e:	67 95       	ror	r22
    5510:	37 95       	ror	r19
    5512:	17 95       	ror	r17
    5514:	17 94       	ror	r1
    5516:	e1 18       	sub	r14, r1
    5518:	f1 0a       	sbc	r15, r17
    551a:	43 0b       	sbc	r20, r19
    551c:	56 0b       	sbc	r21, r22
    551e:	c9 0b       	sbc	r28, r25
    5520:	d0 09       	sbc	r29, r0
    5522:	98 f0       	brcs	.+38     	; 0x554a <__ftoa_engine+0x19a>
    5524:	23 95       	inc	r18
    5526:	7e 91       	ld	r23, -X
    5528:	73 95       	inc	r23
    552a:	7a 33       	cpi	r23, 0x3A	; 58
    552c:	08 f0       	brcs	.+2      	; 0x5530 <__ftoa_engine+0x180>
    552e:	70 e3       	ldi	r23, 0x30	; 48
    5530:	7c 93       	st	X, r23
    5532:	20 13       	cpse	r18, r16
    5534:	b8 f7       	brcc	.-18     	; 0x5524 <__ftoa_engine+0x174>
    5536:	7e 91       	ld	r23, -X
    5538:	70 61       	ori	r23, 0x10	; 16
    553a:	7d 93       	st	X+, r23
    553c:	30 f0       	brcs	.+12     	; 0x554a <__ftoa_engine+0x19a>
    553e:	83 95       	inc	r24
    5540:	71 e3       	ldi	r23, 0x31	; 49
    5542:	7d 93       	st	X+, r23
    5544:	70 e3       	ldi	r23, 0x30	; 48
    5546:	2a 95       	dec	r18
    5548:	e1 f7       	brne	.-8      	; 0x5542 <__ftoa_engine+0x192>
    554a:	11 24       	eor	r1, r1
    554c:	ef 90       	pop	r14
    554e:	ff 90       	pop	r15
    5550:	0f 91       	pop	r16
    5552:	1f 91       	pop	r17
    5554:	cf 91       	pop	r28
    5556:	df 91       	pop	r29
    5558:	99 27       	eor	r25, r25
    555a:	87 fd       	sbrc	r24, 7
    555c:	90 95       	com	r25
    555e:	08 95       	ret

00005560 <strnlen_P>:
    5560:	fc 01       	movw	r30, r24
    5562:	05 90       	lpm	r0, Z+
    5564:	61 50       	subi	r22, 0x01	; 1
    5566:	70 40       	sbci	r23, 0x00	; 0
    5568:	01 10       	cpse	r0, r1
    556a:	d8 f7       	brcc	.-10     	; 0x5562 <strnlen_P+0x2>
    556c:	80 95       	com	r24
    556e:	90 95       	com	r25
    5570:	8e 0f       	add	r24, r30
    5572:	9f 1f       	adc	r25, r31
    5574:	08 95       	ret

00005576 <strnlen>:
    5576:	fc 01       	movw	r30, r24
    5578:	61 50       	subi	r22, 0x01	; 1
    557a:	70 40       	sbci	r23, 0x00	; 0
    557c:	01 90       	ld	r0, Z+
    557e:	01 10       	cpse	r0, r1
    5580:	d8 f7       	brcc	.-10     	; 0x5578 <strnlen+0x2>
    5582:	80 95       	com	r24
    5584:	90 95       	com	r25
    5586:	8e 0f       	add	r24, r30
    5588:	9f 1f       	adc	r25, r31
    558a:	08 95       	ret

0000558c <fdevopen>:
    558c:	0f 93       	push	r16
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	00 97       	sbiw	r24, 0x00	; 0
    5596:	31 f4       	brne	.+12     	; 0x55a4 <fdevopen+0x18>
    5598:	61 15       	cp	r22, r1
    559a:	71 05       	cpc	r23, r1
    559c:	19 f4       	brne	.+6      	; 0x55a4 <fdevopen+0x18>
    559e:	80 e0       	ldi	r24, 0x00	; 0
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	39 c0       	rjmp	.+114    	; 0x5616 <fdevopen+0x8a>
    55a4:	8b 01       	movw	r16, r22
    55a6:	ec 01       	movw	r28, r24
    55a8:	6e e0       	ldi	r22, 0x0E	; 14
    55aa:	70 e0       	ldi	r23, 0x00	; 0
    55ac:	81 e0       	ldi	r24, 0x01	; 1
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	14 d1       	rcall	.+552    	; 0x57da <calloc>
    55b2:	fc 01       	movw	r30, r24
    55b4:	89 2b       	or	r24, r25
    55b6:	99 f3       	breq	.-26     	; 0x559e <fdevopen+0x12>
    55b8:	80 e8       	ldi	r24, 0x80	; 128
    55ba:	83 83       	std	Z+3, r24	; 0x03
    55bc:	01 15       	cp	r16, r1
    55be:	11 05       	cpc	r17, r1
    55c0:	71 f0       	breq	.+28     	; 0x55de <fdevopen+0x52>
    55c2:	02 87       	std	Z+10, r16	; 0x0a
    55c4:	13 87       	std	Z+11, r17	; 0x0b
    55c6:	81 e8       	ldi	r24, 0x81	; 129
    55c8:	83 83       	std	Z+3, r24	; 0x03
    55ca:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <__iob>
    55ce:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <__iob+0x1>
    55d2:	89 2b       	or	r24, r25
    55d4:	21 f4       	brne	.+8      	; 0x55de <fdevopen+0x52>
    55d6:	e0 93 ab 21 	sts	0x21AB, r30	; 0x8021ab <__iob>
    55da:	f0 93 ac 21 	sts	0x21AC, r31	; 0x8021ac <__iob+0x1>
    55de:	20 97       	sbiw	r28, 0x00	; 0
    55e0:	c9 f0       	breq	.+50     	; 0x5614 <fdevopen+0x88>
    55e2:	c0 87       	std	Z+8, r28	; 0x08
    55e4:	d1 87       	std	Z+9, r29	; 0x09
    55e6:	83 81       	ldd	r24, Z+3	; 0x03
    55e8:	82 60       	ori	r24, 0x02	; 2
    55ea:	83 83       	std	Z+3, r24	; 0x03
    55ec:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <__iob+0x2>
    55f0:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <__iob+0x3>
    55f4:	89 2b       	or	r24, r25
    55f6:	71 f4       	brne	.+28     	; 0x5614 <fdevopen+0x88>
    55f8:	e0 93 ad 21 	sts	0x21AD, r30	; 0x8021ad <__iob+0x2>
    55fc:	f0 93 ae 21 	sts	0x21AE, r31	; 0x8021ae <__iob+0x3>
    5600:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <__iob+0x4>
    5604:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <__iob+0x5>
    5608:	89 2b       	or	r24, r25
    560a:	21 f4       	brne	.+8      	; 0x5614 <fdevopen+0x88>
    560c:	e0 93 af 21 	sts	0x21AF, r30	; 0x8021af <__iob+0x4>
    5610:	f0 93 b0 21 	sts	0x21B0, r31	; 0x8021b0 <__iob+0x5>
    5614:	cf 01       	movw	r24, r30
    5616:	df 91       	pop	r29
    5618:	cf 91       	pop	r28
    561a:	1f 91       	pop	r17
    561c:	0f 91       	pop	r16
    561e:	08 95       	ret

00005620 <fputc>:
    5620:	0f 93       	push	r16
    5622:	1f 93       	push	r17
    5624:	cf 93       	push	r28
    5626:	df 93       	push	r29
    5628:	fb 01       	movw	r30, r22
    562a:	23 81       	ldd	r18, Z+3	; 0x03
    562c:	21 fd       	sbrc	r18, 1
    562e:	03 c0       	rjmp	.+6      	; 0x5636 <fputc+0x16>
    5630:	8f ef       	ldi	r24, 0xFF	; 255
    5632:	9f ef       	ldi	r25, 0xFF	; 255
    5634:	2c c0       	rjmp	.+88     	; 0x568e <fputc+0x6e>
    5636:	22 ff       	sbrs	r18, 2
    5638:	16 c0       	rjmp	.+44     	; 0x5666 <fputc+0x46>
    563a:	46 81       	ldd	r20, Z+6	; 0x06
    563c:	57 81       	ldd	r21, Z+7	; 0x07
    563e:	24 81       	ldd	r18, Z+4	; 0x04
    5640:	35 81       	ldd	r19, Z+5	; 0x05
    5642:	42 17       	cp	r20, r18
    5644:	53 07       	cpc	r21, r19
    5646:	44 f4       	brge	.+16     	; 0x5658 <fputc+0x38>
    5648:	a0 81       	ld	r26, Z
    564a:	b1 81       	ldd	r27, Z+1	; 0x01
    564c:	9d 01       	movw	r18, r26
    564e:	2f 5f       	subi	r18, 0xFF	; 255
    5650:	3f 4f       	sbci	r19, 0xFF	; 255
    5652:	20 83       	st	Z, r18
    5654:	31 83       	std	Z+1, r19	; 0x01
    5656:	8c 93       	st	X, r24
    5658:	26 81       	ldd	r18, Z+6	; 0x06
    565a:	37 81       	ldd	r19, Z+7	; 0x07
    565c:	2f 5f       	subi	r18, 0xFF	; 255
    565e:	3f 4f       	sbci	r19, 0xFF	; 255
    5660:	26 83       	std	Z+6, r18	; 0x06
    5662:	37 83       	std	Z+7, r19	; 0x07
    5664:	14 c0       	rjmp	.+40     	; 0x568e <fputc+0x6e>
    5666:	8b 01       	movw	r16, r22
    5668:	ec 01       	movw	r28, r24
    566a:	fb 01       	movw	r30, r22
    566c:	00 84       	ldd	r0, Z+8	; 0x08
    566e:	f1 85       	ldd	r31, Z+9	; 0x09
    5670:	e0 2d       	mov	r30, r0
    5672:	19 95       	eicall
    5674:	89 2b       	or	r24, r25
    5676:	e1 f6       	brne	.-72     	; 0x5630 <fputc+0x10>
    5678:	d8 01       	movw	r26, r16
    567a:	16 96       	adiw	r26, 0x06	; 6
    567c:	8d 91       	ld	r24, X+
    567e:	9c 91       	ld	r25, X
    5680:	17 97       	sbiw	r26, 0x07	; 7
    5682:	01 96       	adiw	r24, 0x01	; 1
    5684:	16 96       	adiw	r26, 0x06	; 6
    5686:	8d 93       	st	X+, r24
    5688:	9c 93       	st	X, r25
    568a:	17 97       	sbiw	r26, 0x07	; 7
    568c:	ce 01       	movw	r24, r28
    568e:	df 91       	pop	r29
    5690:	cf 91       	pop	r28
    5692:	1f 91       	pop	r17
    5694:	0f 91       	pop	r16
    5696:	08 95       	ret

00005698 <printf>:
    5698:	cf 93       	push	r28
    569a:	df 93       	push	r29
    569c:	cd b7       	in	r28, 0x3d	; 61
    569e:	de b7       	in	r29, 0x3e	; 62
    56a0:	ae 01       	movw	r20, r28
    56a2:	4a 5f       	subi	r20, 0xFA	; 250
    56a4:	5f 4f       	sbci	r21, 0xFF	; 255
    56a6:	fa 01       	movw	r30, r20
    56a8:	61 91       	ld	r22, Z+
    56aa:	71 91       	ld	r23, Z+
    56ac:	af 01       	movw	r20, r30
    56ae:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <__iob+0x2>
    56b2:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <__iob+0x3>
    56b6:	2d d9       	rcall	.-3494   	; 0x4912 <vfprintf>
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	08 95       	ret

000056be <puts>:
    56be:	0f 93       	push	r16
    56c0:	1f 93       	push	r17
    56c2:	cf 93       	push	r28
    56c4:	df 93       	push	r29
    56c6:	e0 91 ad 21 	lds	r30, 0x21AD	; 0x8021ad <__iob+0x2>
    56ca:	f0 91 ae 21 	lds	r31, 0x21AE	; 0x8021ae <__iob+0x3>
    56ce:	23 81       	ldd	r18, Z+3	; 0x03
    56d0:	21 ff       	sbrs	r18, 1
    56d2:	1b c0       	rjmp	.+54     	; 0x570a <puts+0x4c>
    56d4:	8c 01       	movw	r16, r24
    56d6:	d0 e0       	ldi	r29, 0x00	; 0
    56d8:	c0 e0       	ldi	r28, 0x00	; 0
    56da:	f8 01       	movw	r30, r16
    56dc:	81 91       	ld	r24, Z+
    56de:	8f 01       	movw	r16, r30
    56e0:	60 91 ad 21 	lds	r22, 0x21AD	; 0x8021ad <__iob+0x2>
    56e4:	70 91 ae 21 	lds	r23, 0x21AE	; 0x8021ae <__iob+0x3>
    56e8:	db 01       	movw	r26, r22
    56ea:	18 96       	adiw	r26, 0x08	; 8
    56ec:	ed 91       	ld	r30, X+
    56ee:	fc 91       	ld	r31, X
    56f0:	19 97       	sbiw	r26, 0x09	; 9
    56f2:	88 23       	and	r24, r24
    56f4:	31 f0       	breq	.+12     	; 0x5702 <puts+0x44>
    56f6:	19 95       	eicall
    56f8:	89 2b       	or	r24, r25
    56fa:	79 f3       	breq	.-34     	; 0x56da <puts+0x1c>
    56fc:	df ef       	ldi	r29, 0xFF	; 255
    56fe:	cf ef       	ldi	r28, 0xFF	; 255
    5700:	ec cf       	rjmp	.-40     	; 0x56da <puts+0x1c>
    5702:	8a e0       	ldi	r24, 0x0A	; 10
    5704:	19 95       	eicall
    5706:	89 2b       	or	r24, r25
    5708:	19 f0       	breq	.+6      	; 0x5710 <puts+0x52>
    570a:	8f ef       	ldi	r24, 0xFF	; 255
    570c:	9f ef       	ldi	r25, 0xFF	; 255
    570e:	02 c0       	rjmp	.+4      	; 0x5714 <puts+0x56>
    5710:	8d 2f       	mov	r24, r29
    5712:	9c 2f       	mov	r25, r28
    5714:	df 91       	pop	r29
    5716:	cf 91       	pop	r28
    5718:	1f 91       	pop	r17
    571a:	0f 91       	pop	r16
    571c:	08 95       	ret

0000571e <__ultoa_invert>:
    571e:	fa 01       	movw	r30, r20
    5720:	aa 27       	eor	r26, r26
    5722:	28 30       	cpi	r18, 0x08	; 8
    5724:	51 f1       	breq	.+84     	; 0x577a <__ultoa_invert+0x5c>
    5726:	20 31       	cpi	r18, 0x10	; 16
    5728:	81 f1       	breq	.+96     	; 0x578a <__ultoa_invert+0x6c>
    572a:	e8 94       	clt
    572c:	6f 93       	push	r22
    572e:	6e 7f       	andi	r22, 0xFE	; 254
    5730:	6e 5f       	subi	r22, 0xFE	; 254
    5732:	7f 4f       	sbci	r23, 0xFF	; 255
    5734:	8f 4f       	sbci	r24, 0xFF	; 255
    5736:	9f 4f       	sbci	r25, 0xFF	; 255
    5738:	af 4f       	sbci	r26, 0xFF	; 255
    573a:	b1 e0       	ldi	r27, 0x01	; 1
    573c:	3e d0       	rcall	.+124    	; 0x57ba <__ultoa_invert+0x9c>
    573e:	b4 e0       	ldi	r27, 0x04	; 4
    5740:	3c d0       	rcall	.+120    	; 0x57ba <__ultoa_invert+0x9c>
    5742:	67 0f       	add	r22, r23
    5744:	78 1f       	adc	r23, r24
    5746:	89 1f       	adc	r24, r25
    5748:	9a 1f       	adc	r25, r26
    574a:	a1 1d       	adc	r26, r1
    574c:	68 0f       	add	r22, r24
    574e:	79 1f       	adc	r23, r25
    5750:	8a 1f       	adc	r24, r26
    5752:	91 1d       	adc	r25, r1
    5754:	a1 1d       	adc	r26, r1
    5756:	6a 0f       	add	r22, r26
    5758:	71 1d       	adc	r23, r1
    575a:	81 1d       	adc	r24, r1
    575c:	91 1d       	adc	r25, r1
    575e:	a1 1d       	adc	r26, r1
    5760:	20 d0       	rcall	.+64     	; 0x57a2 <__ultoa_invert+0x84>
    5762:	09 f4       	brne	.+2      	; 0x5766 <__ultoa_invert+0x48>
    5764:	68 94       	set
    5766:	3f 91       	pop	r19
    5768:	2a e0       	ldi	r18, 0x0A	; 10
    576a:	26 9f       	mul	r18, r22
    576c:	11 24       	eor	r1, r1
    576e:	30 19       	sub	r19, r0
    5770:	30 5d       	subi	r19, 0xD0	; 208
    5772:	31 93       	st	Z+, r19
    5774:	de f6       	brtc	.-74     	; 0x572c <__ultoa_invert+0xe>
    5776:	cf 01       	movw	r24, r30
    5778:	08 95       	ret
    577a:	46 2f       	mov	r20, r22
    577c:	47 70       	andi	r20, 0x07	; 7
    577e:	40 5d       	subi	r20, 0xD0	; 208
    5780:	41 93       	st	Z+, r20
    5782:	b3 e0       	ldi	r27, 0x03	; 3
    5784:	0f d0       	rcall	.+30     	; 0x57a4 <__ultoa_invert+0x86>
    5786:	c9 f7       	brne	.-14     	; 0x577a <__ultoa_invert+0x5c>
    5788:	f6 cf       	rjmp	.-20     	; 0x5776 <__ultoa_invert+0x58>
    578a:	46 2f       	mov	r20, r22
    578c:	4f 70       	andi	r20, 0x0F	; 15
    578e:	40 5d       	subi	r20, 0xD0	; 208
    5790:	4a 33       	cpi	r20, 0x3A	; 58
    5792:	18 f0       	brcs	.+6      	; 0x579a <__ultoa_invert+0x7c>
    5794:	49 5d       	subi	r20, 0xD9	; 217
    5796:	31 fd       	sbrc	r19, 1
    5798:	40 52       	subi	r20, 0x20	; 32
    579a:	41 93       	st	Z+, r20
    579c:	02 d0       	rcall	.+4      	; 0x57a2 <__ultoa_invert+0x84>
    579e:	a9 f7       	brne	.-22     	; 0x578a <__ultoa_invert+0x6c>
    57a0:	ea cf       	rjmp	.-44     	; 0x5776 <__ultoa_invert+0x58>
    57a2:	b4 e0       	ldi	r27, 0x04	; 4
    57a4:	a6 95       	lsr	r26
    57a6:	97 95       	ror	r25
    57a8:	87 95       	ror	r24
    57aa:	77 95       	ror	r23
    57ac:	67 95       	ror	r22
    57ae:	ba 95       	dec	r27
    57b0:	c9 f7       	brne	.-14     	; 0x57a4 <__ultoa_invert+0x86>
    57b2:	00 97       	sbiw	r24, 0x00	; 0
    57b4:	61 05       	cpc	r22, r1
    57b6:	71 05       	cpc	r23, r1
    57b8:	08 95       	ret
    57ba:	9b 01       	movw	r18, r22
    57bc:	ac 01       	movw	r20, r24
    57be:	0a 2e       	mov	r0, r26
    57c0:	06 94       	lsr	r0
    57c2:	57 95       	ror	r21
    57c4:	47 95       	ror	r20
    57c6:	37 95       	ror	r19
    57c8:	27 95       	ror	r18
    57ca:	ba 95       	dec	r27
    57cc:	c9 f7       	brne	.-14     	; 0x57c0 <__ultoa_invert+0xa2>
    57ce:	62 0f       	add	r22, r18
    57d0:	73 1f       	adc	r23, r19
    57d2:	84 1f       	adc	r24, r20
    57d4:	95 1f       	adc	r25, r21
    57d6:	a0 1d       	adc	r26, r0
    57d8:	08 95       	ret

000057da <calloc>:
    57da:	0f 93       	push	r16
    57dc:	1f 93       	push	r17
    57de:	cf 93       	push	r28
    57e0:	df 93       	push	r29
    57e2:	86 9f       	mul	r24, r22
    57e4:	80 01       	movw	r16, r0
    57e6:	87 9f       	mul	r24, r23
    57e8:	10 0d       	add	r17, r0
    57ea:	96 9f       	mul	r25, r22
    57ec:	10 0d       	add	r17, r0
    57ee:	11 24       	eor	r1, r1
    57f0:	c8 01       	movw	r24, r16
    57f2:	bd dc       	rcall	.-1670   	; 0x516e <malloc>
    57f4:	ec 01       	movw	r28, r24
    57f6:	00 97       	sbiw	r24, 0x00	; 0
    57f8:	21 f0       	breq	.+8      	; 0x5802 <calloc+0x28>
    57fa:	a8 01       	movw	r20, r16
    57fc:	60 e0       	ldi	r22, 0x00	; 0
    57fe:	70 e0       	ldi	r23, 0x00	; 0
    5800:	06 d0       	rcall	.+12     	; 0x580e <memset>
    5802:	ce 01       	movw	r24, r28
    5804:	df 91       	pop	r29
    5806:	cf 91       	pop	r28
    5808:	1f 91       	pop	r17
    580a:	0f 91       	pop	r16
    580c:	08 95       	ret

0000580e <memset>:
    580e:	dc 01       	movw	r26, r24
    5810:	01 c0       	rjmp	.+2      	; 0x5814 <memset+0x6>
    5812:	6d 93       	st	X+, r22
    5814:	41 50       	subi	r20, 0x01	; 1
    5816:	50 40       	sbci	r21, 0x00	; 0
    5818:	e0 f7       	brcc	.-8      	; 0x5812 <memset+0x4>
    581a:	08 95       	ret

0000581c <_exit>:
    581c:	f8 94       	cli

0000581e <__stop_program>:
    581e:	ff cf       	rjmp	.-2      	; 0x581e <__stop_program>
