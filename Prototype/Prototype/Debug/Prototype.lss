
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00802000  000054c2  00005556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  00802060  00802060  000055b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000055b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00005658  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f191  00000000  00000000  00005d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005535  00000000  00000000  00014ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009333  00000000  00000000  0001a40e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024e4  00000000  00000000  00023744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003586d  00000000  00000000  00025c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005242  00000000  00000000  0005b495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  000606d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003d0f  00000000  00000000  00060d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c3       	rjmp	.+1582   	; 0x658 <__vector_10>
      2a:	00 00       	nop
      2c:	45 c3       	rjmp	.+1674   	; 0x6b8 <__vector_11>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__vector_13>
      38:	ff c3       	rjmp	.+2046   	; 0x838 <__vector_14>
      3a:	00 00       	nop
      3c:	54 c4       	rjmp	.+2216   	; 0x8e6 <__vector_15>
      3e:	00 00       	nop
      40:	a9 c4       	rjmp	.+2386   	; 0x994 <__vector_16>
      42:	00 00       	nop
      44:	fe c4       	rjmp	.+2556   	; 0xa42 <__vector_17>
      46:	00 00       	nop
      48:	53 c5       	rjmp	.+2726   	; 0xaf0 <__vector_18>
      4a:	00 00       	nop
      4c:	a8 c5       	rjmp	.+2896   	; 0xb9e <__vector_19>
      4e:	00 00       	nop
      50:	fd c5       	rjmp	.+3066   	; 0xc4c <__vector_20>
      52:	00 00       	nop
      54:	52 c6       	rjmp	.+3236   	; 0xcfa <__vector_21>
      56:	00 00       	nop
      58:	a7 c6       	rjmp	.+3406   	; 0xda8 <__vector_22>
      5a:	00 00       	nop
      5c:	fc c6       	rjmp	.+3576   	; 0xe56 <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__vector_46>
      bc:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__vector_47>
      c0:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_48>
      c4:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_49>
      c8:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_50>
      cc:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__vector_51>
      d0:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_52>
      d4:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__vector_53>
      d8:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__vector_54>
      dc:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_55>
      e0:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__vector_76>
     134:	e7 c6       	rjmp	.+3534   	; 0xf04 <__vector_77>
     136:	00 00       	nop
     138:	3c c7       	rjmp	.+3704   	; 0xfb2 <__vector_78>
     13a:	00 00       	nop
     13c:	91 c7       	rjmp	.+3874   	; 0x1060 <__vector_79>
     13e:	00 00       	nop
     140:	e6 c7       	rjmp	.+4044   	; 0x110e <__vector_80>
     142:	00 00       	nop
     144:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_81>
     148:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_82>
     14c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_83>
     150:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_84>
     154:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__vector_85>
     158:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_86>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__vector_107>
     1b0:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_108>
     1b4:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_109>
     1b8:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__vector_110>
     1bc:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__vector_111>
     1c0:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__vector_112>
     1c4:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__vector_113>
     1c8:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_114>
     1cc:	0c 94 af 10 	jmp	0x215e	; 0x215e <__vector_115>
     1d0:	0c 94 06 11 	jmp	0x220c	; 0x220c <__vector_116>
     1d4:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b8 c0       	rjmp	.+368    	; 0x34e <__vector_119>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e2 ec       	ldi	r30, 0xC2	; 194
     21c:	f4 e5       	ldi	r31, 0x54	; 84
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 36       	cpi	r26, 0x60	; 96
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a0 e6       	ldi	r26, 0x60	; 96
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	af 3d       	cpi	r26, 0xDF	; 223
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 ff 20 	call	0x41fe	; 0x41fe <main>
     244:	0c 94 5f 2a 	jmp	0x54be	; 0x54be <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <BNO_Write>:
	//delay_ms(30);
	//
	//data=0X0C;
	//twi_write(&data,BN0_ADDR,0X3D);
	//delay_ms(10);
}
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	00 d0       	rcall	.+0      	; 0x250 <BNO_Write+0x6>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	9a 83       	std	Y+2, r25	; 0x02
     258:	6b 83       	std	Y+3, r22	; 0x03
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
     25e:	4b 81       	ldd	r20, Y+3	; 0x03
     260:	69 e2       	ldi	r22, 0x29	; 41
     262:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <twi_write>
     266:	00 00       	nop
     268:	23 96       	adiw	r28, 0x03	; 3
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <BNO_Read>:
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	00 d0       	rcall	.+0      	; 0x27a <BNO_Read+0x6>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	9a 83       	std	Y+2, r25	; 0x02
     282:	6b 83       	std	Y+3, r22	; 0x03
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	4b 81       	ldd	r20, Y+3	; 0x03
     28a:	69 e2       	ldi	r22, 0x29	; 41
     28c:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <twi_read>
     290:	00 00       	nop
     292:	23 96       	adiw	r28, 0x03	; 3
     294:	cd bf       	out	0x3d, r28	; 61
     296:	de bf       	out	0x3e, r29	; 62
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <get_acceleration_x>:
//return data;
//}

//store a three long array containing the x, y and z acceleration in that order units of cm/s^2
uint16_t get_acceleration_x()
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <get_acceleration_x+0x6>
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
	uint16_t acelx;
	uint8_t data;
	BNO_Read(&data,BNO055_ACCEL_DATA_X_MSB_ADDR);
     2a8:	ce 01       	movw	r24, r28
     2aa:	03 96       	adiw	r24, 0x03	; 3
     2ac:	69 e0       	ldi	r22, 0x09	; 9
     2ae:	e2 df       	rcall	.-60     	; 0x274 <BNO_Read>
	acelx=(int16_t)data;
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	88 2f       	mov	r24, r24
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	9a 83       	std	Y+2, r25	; 0x02
	acelx=acelx<<8;
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	9a 81       	ldd	r25, Y+2	; 0x02
     2be:	98 2f       	mov	r25, r24
     2c0:	88 27       	eor	r24, r24
     2c2:	89 83       	std	Y+1, r24	; 0x01
     2c4:	9a 83       	std	Y+2, r25	; 0x02
	BNO_Read(&data,BNO055_ACCEL_DATA_X_LSB_ADDR);
     2c6:	ce 01       	movw	r24, r28
     2c8:	03 96       	adiw	r24, 0x03	; 3
     2ca:	68 e0       	ldi	r22, 0x08	; 8
     2cc:	d3 df       	rcall	.-90     	; 0x274 <BNO_Read>
	acelx+=data;
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	29 81       	ldd	r18, Y+1	; 0x01
     2d6:	3a 81       	ldd	r19, Y+2	; 0x02
     2d8:	82 0f       	add	r24, r18
     2da:	93 1f       	adc	r25, r19
     2dc:	89 83       	std	Y+1, r24	; 0x01
     2de:	9a 83       	std	Y+2, r25	; 0x02
	return acelx;
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     2e4:	23 96       	adiw	r28, 0x03	; 3
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <xbee_init>:
}

void xbeeWrite(uint8_t data)
{
	usart_putchar(P_XBEEUART,data);
}
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	92 ec       	ldi	r25, 0xC2	; 194
     2fc:	a1 e0       	ldi	r26, 0x01	; 1
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <__data_end+0x6>
     304:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <__data_end+0x7>
     308:	a0 93 68 20 	sts	0x2068, r26	; 0x802068 <__data_end+0x8>
     30c:	b0 93 69 20 	sts	0x2069, r27	; 0x802069 <__data_end+0x9>
     310:	80 ea       	ldi	r24, 0xA0	; 160
     312:	96 e0       	ldi	r25, 0x06	; 6
     314:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <__data_end>
     318:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <__data_end+0x1>
     31c:	80 ea       	ldi	r24, 0xA0	; 160
     31e:	9b e0       	ldi	r25, 0x0B	; 11
     320:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <__data_end+0x2>
     324:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <__data_end+0x3>
     328:	88 e0       	ldi	r24, 0x08	; 8
     32a:	80 93 65 20 	sts	0x2065, r24	; 0x802065 <__data_end+0x5>
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	80 93 64 20 	sts	0x2064, r24	; 0x802064 <__data_end+0x4>
     334:	80 e6       	ldi	r24, 0x60	; 96
     336:	90 e2       	ldi	r25, 0x20	; 32
     338:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <uart_init>
     33c:	80 ea       	ldi	r24, 0xA0	; 160
     33e:	9b e0       	ldi	r25, 0x0B	; 11
     340:	24 e1       	ldi	r18, 0x14	; 20
     342:	fc 01       	movw	r30, r24
     344:	23 83       	std	Z+3, r18	; 0x03
     346:	00 00       	nop
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <__vector_119>:

ISR(READ_INTURUPT)
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     35e:	0f 92       	push	r0
     360:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     364:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     368:	0f 92       	push	r0
     36a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     36e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     372:	0f 92       	push	r0
     374:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     378:	8f 93       	push	r24
     37a:	9f 93       	push	r25
     37c:	ef 93       	push	r30
     37e:	ff 93       	push	r31
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
     388:	80 ea       	ldi	r24, 0xA0	; 160
     38a:	9b e0       	ldi	r25, 0x0B	; 11
     38c:	fc 01       	movw	r30, r24
     38e:	80 81       	ld	r24, Z
     390:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <XbeeRx>
     394:	00 00       	nop
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	0f 90       	pop	r0
     3a4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     3a8:	0f 90       	pop	r0
     3aa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     3ae:	0f 90       	pop	r0
     3b0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     3b4:	0f 90       	pop	r0
     3b6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	1f 92       	push	r1
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     3ca:	8f e3       	ldi	r24, 0x3F	; 63
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	fc 01       	movw	r30, r24
     3d0:	80 81       	ld	r24, Z
     3d2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3d4:	f8 94       	cli
	return flags;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	1f 92       	push	r1
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     3ec:	8f e3       	ldi	r24, 0x3F	; 63
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	29 81       	ldd	r18, Y+1	; 0x01
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
}
     3f6:	00 00       	nop
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	1f 92       	push	r1
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     40e:	d8 df       	rcall	.-80     	; 0x3c0 <cpu_irq_save>
     410:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     412:	80 e5       	ldi	r24, 0x50	; 80
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	20 e5       	ldi	r18, 0x50	; 80
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	f9 01       	movw	r30, r18
     41c:	30 81       	ld	r19, Z
     41e:	2a 81       	ldd	r18, Y+2	; 0x02
     420:	23 2b       	or	r18, r19
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	db df       	rcall	.-74     	; 0x3e0 <cpu_irq_restore>
}
     42a:	00 00       	nop
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	1f 92       	push	r1
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     444:	80 e5       	ldi	r24, 0x50	; 80
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	22 e0       	ldi	r18, 0x02	; 2
     44a:	fc 01       	movw	r30, r24
     44c:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
     44e:	b8 df       	rcall	.-144    	; 0x3c0 <cpu_irq_save>
     450:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
     452:	80 e5       	ldi	r24, 0x50	; 80
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	20 e5       	ldi	r18, 0x50	; 80
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	f9 01       	movw	r30, r18
     45c:	30 81       	ld	r19, Z
     45e:	2a 81       	ldd	r18, Y+2	; 0x02
     460:	23 2b       	or	r18, r19
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	bb df       	rcall	.-138    	; 0x3e0 <cpu_irq_restore>
}
     46a:	00 00       	nop
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	1f 92       	push	r1
     47c:	1f 92       	push	r1
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
     484:	9d df       	rcall	.-198    	; 0x3c0 <cpu_irq_save>
     486:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
     488:	80 e5       	ldi	r24, 0x50	; 80
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	20 e5       	ldi	r18, 0x50	; 80
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	f9 01       	movw	r30, r18
     492:	20 81       	ld	r18, Z
     494:	32 2f       	mov	r19, r18
     496:	2a 81       	ldd	r18, Y+2	; 0x02
     498:	20 95       	com	r18
     49a:	23 23       	and	r18, r19
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9e df       	rcall	.-196    	; 0x3e0 <cpu_irq_restore>
}
     4a4:	00 00       	nop
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	1f 92       	push	r1
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	19 f0       	breq	.+6      	; 0x4c8 <osc_enable+0x18>
		osc_enable_internal(id);
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9d df       	rcall	.-198    	; 0x400 <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	b5 df       	rcall	.-150    	; 0x436 <osc_enable_external>
	}
}
     4cc:	00 00       	nop
     4ce:	0f 90       	pop	r0
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	1f 92       	push	r1
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     4e2:	80 e5       	ldi	r24, 0x50	; 80
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	fc 01       	movw	r30, r24
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	98 23       	and	r25, r24
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	99 23       	and	r25, r25
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <osc_is_ready+0x20>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
}
     4f6:	0f 90       	pop	r0
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	1f 92       	push	r1
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
     50a:	00 00       	nop
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	e3 df       	rcall	.-58     	; 0x4d6 <osc_is_ready>
     510:	98 2f       	mov	r25, r24
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	89 27       	eor	r24, r25
     516:	88 23       	and	r24, r24
     518:	c9 f7       	brne	.-14     	; 0x50c <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
     51a:	00 00       	nop
     51c:	0f 90       	pop	r0
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	00 d0       	rcall	.+0      	; 0x52a <sysclk_init+0x6>
     52a:	1f 92       	push	r1
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
     530:	80 e7       	ldi	r24, 0x70	; 112
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
     538:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     53a:	1b 82       	std	Y+3, r1	; 0x03
     53c:	0d c0       	rjmp	.+26     	; 0x558 <sysclk_init+0x34>
		*(reg++) = 0xff;
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	9c 01       	movw	r18, r24
     544:	2f 5f       	subi	r18, 0xFF	; 255
     546:	3f 4f       	sbci	r19, 0xFF	; 255
     548:	29 83       	std	Y+1, r18	; 0x01
     54a:	3a 83       	std	Y+2, r19	; 0x02
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	8b 83       	std	Y+3, r24	; 0x03
     558:	8b 81       	ldd	r24, Y+3	; 0x03
     55a:	87 30       	cpi	r24, 0x07	; 7
     55c:	80 f3       	brcs	.-32     	; 0x53e <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	a7 df       	rcall	.-178    	; 0x4b0 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	cc df       	rcall	.-104    	; 0x4fe <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
     566:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	80 e4       	ldi	r24, 0x40	; 64
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	6e d0       	rcall	.+220    	; 0x64c <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
     570:	8c 81       	ldd	r24, Y+4	; 0x04
     572:	88 23       	and	r24, r24
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
     574:	11 f4       	brne	.+4      	; 0x57a <sysclk_init+0x56>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	7e df       	rcall	.-260    	; 0x476 <osc_disable>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     57a:	24 96       	adiw	r28, 0x04	; 4
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	de bf       	out	0x3e, r29	; 62
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	00 d0       	rcall	.+0      	; 0x58c <sysclk_enable_module+0x6>
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	8a 83       	std	Y+2, r24	; 0x02
     592:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
     594:	15 df       	rcall	.-470    	; 0x3c0 <cpu_irq_save>
     596:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	88 2f       	mov	r24, r24
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	80 59       	subi	r24, 0x90	; 144
     5a0:	9f 4f       	sbci	r25, 0xFF	; 255
     5a2:	2a 81       	ldd	r18, Y+2	; 0x02
     5a4:	22 2f       	mov	r18, r18
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	20 59       	subi	r18, 0x90	; 144
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	f9 01       	movw	r30, r18
     5ae:	20 81       	ld	r18, Z
     5b0:	32 2f       	mov	r19, r18
     5b2:	2b 81       	ldd	r18, Y+3	; 0x03
     5b4:	20 95       	com	r18
     5b6:	23 23       	and	r18, r19
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	10 df       	rcall	.-480    	; 0x3e0 <cpu_irq_restore>
}
     5c0:	00 00       	nop
     5c2:	23 96       	adiw	r28, 0x03	; 3
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <_read+0x6>
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	8a 83       	std	Y+2, r24	; 0x02
     5da:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
     5dc:	20 91 c6 20 	lds	r18, 0x20C6	; 0x8020c6 <ptr_get>
     5e0:	30 91 c7 20 	lds	r19, 0x20C7	; 0x8020c7 <ptr_get+0x1>
     5e4:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <stdio_base>
     5e8:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <stdio_base+0x1>
     5ec:	ae 01       	movw	r20, r28
     5ee:	4f 5f       	subi	r20, 0xFF	; 255
     5f0:	5f 4f       	sbci	r21, 0xFF	; 255
     5f2:	ba 01       	movw	r22, r20
     5f4:	f9 01       	movw	r30, r18
     5f6:	19 95       	eicall
	return c;
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	08 2e       	mov	r0, r24
     5fc:	00 0c       	add	r0, r0
     5fe:	99 0b       	sbc	r25, r25
}
     600:	23 96       	adiw	r28, 0x03	; 3
     602:	cd bf       	out	0x3d, r28	; 61
     604:	de bf       	out	0x3e, r29	; 62
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	00 d0       	rcall	.+0      	; 0x612 <_write+0x6>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	6a 83       	std	Y+2, r22	; 0x02
     61a:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
     61c:	20 91 c8 20 	lds	r18, 0x20C8	; 0x8020c8 <ptr_put>
     620:	30 91 c9 20 	lds	r19, 0x20C9	; 0x8020c9 <ptr_put+0x1>
     624:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <stdio_base>
     628:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <stdio_base+0x1>
     62c:	69 81       	ldd	r22, Y+1	; 0x01
     62e:	f9 01       	movw	r30, r18
     630:	19 95       	eicall
     632:	99 23       	and	r25, r25
     634:	1c f4       	brge	.+6      	; 0x63c <_write+0x30>
		return -1;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	9f ef       	ldi	r25, 0xFF	; 255
     63a:	02 c0       	rjmp	.+4      	; 0x640 <_write+0x34>
	}
	return 1;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
}
     640:	23 96       	adiw	r28, 0x03	; 3
     642:	cd bf       	out	0x3d, r28	; 61
     644:	de bf       	out	0x3e, r29	; 62
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     64c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     64e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     650:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     652:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     654:	60 83       	st	Z, r22
	ret                             // Return to caller
     656:	08 95       	ret

00000658 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     668:	0f 92       	push	r0
     66a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     66e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     672:	0f 92       	push	r0
     674:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
     684:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <rtc_data>
     688:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <rtc_data+0x1>
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <rtc_data>
     692:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <rtc_data+0x1>
}
     696:	00 00       	nop
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	9f 91       	pop	r25
     69e:	8f 91       	pop	r24
     6a0:	0f 90       	pop	r0
     6a2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     6a6:	0f 90       	pop	r0
     6a8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     6ac:	0f 90       	pop	r0
     6ae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6b2:	0f 90       	pop	r0
     6b4:	1f 90       	pop	r1
     6b6:	18 95       	reti

000006b8 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     6b8:	1f 92       	push	r1
     6ba:	0f 92       	push	r0
     6bc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     6c8:	0f 92       	push	r0
     6ca:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     6ce:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     6d2:	0f 92       	push	r0
     6d4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     6d8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     6dc:	0f 92       	push	r0
     6de:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     6e2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6e6:	0f 92       	push	r0
     6e8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6ec:	2f 93       	push	r18
     6ee:	3f 93       	push	r19
     6f0:	4f 93       	push	r20
     6f2:	5f 93       	push	r21
     6f4:	6f 93       	push	r22
     6f6:	7f 93       	push	r23
     6f8:	8f 93       	push	r24
     6fa:	9f 93       	push	r25
     6fc:	af 93       	push	r26
     6fe:	bf 93       	push	r27
     700:	ef 93       	push	r30
     702:	ff 93       	push	r31
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	28 97       	sbiw	r28, 0x08	; 8
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     712:	20 91 cc 20 	lds	r18, 0x20CC	; 0x8020cc <rtc_data>
     716:	30 91 cd 20 	lds	r19, 0x20CD	; 0x8020cd <rtc_data+0x1>
     71a:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <rtc_data+0x2>
     71e:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <rtc_data+0x3>
     722:	28 17       	cp	r18, r24
     724:	39 07       	cpc	r19, r25
     726:	08 f4       	brcc	.+2      	; 0x72a <__vector_11+0x72>
     728:	63 c0       	rjmp	.+198    	; 0x7f0 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	94 e0       	ldi	r25, 0x04	; 4
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	fc 01       	movw	r30, r24
     732:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
     734:	80 91 d2 20 	lds	r24, 0x20D2	; 0x8020d2 <rtc_data+0x6>
     738:	90 91 d3 20 	lds	r25, 0x20D3	; 0x8020d3 <rtc_data+0x7>
     73c:	89 2b       	or	r24, r25
     73e:	09 f4       	brne	.+2      	; 0x742 <__vector_11+0x8a>
     740:	57 c0       	rjmp	.+174    	; 0x7f0 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     742:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <rtc_data>
     746:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <rtc_data+0x1>
     74a:	cc 01       	movw	r24, r24
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	ac 01       	movw	r20, r24
     752:	33 27       	eor	r19, r19
     754:	22 27       	eor	r18, r18
					| RTC.CNT;
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	94 e0       	ldi	r25, 0x04	; 4
     75a:	fc 01       	movw	r30, r24
     75c:	80 85       	ldd	r24, Z+8	; 0x08
     75e:	91 85       	ldd	r25, Z+9	; 0x09
     760:	cc 01       	movw	r24, r24
     762:	a0 e0       	ldi	r26, 0x00	; 0
     764:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     766:	82 2b       	or	r24, r18
     768:	93 2b       	or	r25, r19
     76a:	a4 2b       	or	r26, r20
     76c:	b5 2b       	or	r27, r21
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	ab 83       	std	Y+3, r26	; 0x03
     774:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     776:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <rtc_data+0x2>
     77a:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <rtc_data+0x3>
     77e:	cc 01       	movw	r24, r24
     780:	a0 e0       	ldi	r26, 0x00	; 0
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	ac 01       	movw	r20, r24
     786:	33 27       	eor	r19, r19
     788:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
     78a:	80 91 d0 20 	lds	r24, 0x20D0	; 0x8020d0 <rtc_data+0x4>
     78e:	90 91 d1 20 	lds	r25, 0x20D1	; 0x8020d1 <rtc_data+0x5>
     792:	cc 01       	movw	r24, r24
     794:	a0 e0       	ldi	r26, 0x00	; 0
     796:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     798:	82 2b       	or	r24, r18
     79a:	93 2b       	or	r25, r19
     79c:	a4 2b       	or	r26, r20
     79e:	b5 2b       	or	r27, r21
     7a0:	8d 83       	std	Y+5, r24	; 0x05
     7a2:	9e 83       	std	Y+6, r25	; 0x06
     7a4:	af 83       	std	Y+7, r26	; 0x07
     7a6:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     7a8:	2d 81       	ldd	r18, Y+5	; 0x05
     7aa:	3e 81       	ldd	r19, Y+6	; 0x06
     7ac:	4f 81       	ldd	r20, Y+7	; 0x07
     7ae:	58 85       	ldd	r21, Y+8	; 0x08
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	9a 81       	ldd	r25, Y+2	; 0x02
     7b4:	ab 81       	ldd	r26, Y+3	; 0x03
     7b6:	bc 81       	ldd	r27, Y+4	; 0x04
     7b8:	28 17       	cp	r18, r24
     7ba:	39 07       	cpc	r19, r25
     7bc:	4a 07       	cpc	r20, r26
     7be:	5b 07       	cpc	r21, r27
     7c0:	58 f0       	brcs	.+22     	; 0x7d8 <__vector_11+0x120>
				count = alarm + 1;
     7c2:	8d 81       	ldd	r24, Y+5	; 0x05
     7c4:	9e 81       	ldd	r25, Y+6	; 0x06
     7c6:	af 81       	ldd	r26, Y+7	; 0x07
     7c8:	b8 85       	ldd	r27, Y+8	; 0x08
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	a1 1d       	adc	r26, r1
     7ce:	b1 1d       	adc	r27, r1
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	ab 83       	std	Y+3, r26	; 0x03
     7d6:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
     7d8:	20 91 d2 20 	lds	r18, 0x20D2	; 0x8020d2 <rtc_data+0x6>
     7dc:	30 91 d3 20 	lds	r19, 0x20D3	; 0x8020d3 <rtc_data+0x7>
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	ab 81       	ldd	r26, Y+3	; 0x03
     7e6:	bc 81       	ldd	r27, Y+4	; 0x04
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	f9 01       	movw	r30, r18
     7ee:	19 95       	eicall
		}
	}
}
     7f0:	00 00       	nop
     7f2:	28 96       	adiw	r28, 0x08	; 8
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     81a:	0f 90       	pop	r0
     81c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     820:	0f 90       	pop	r0
     822:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     826:	0f 90       	pop	r0
     828:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     82c:	0f 90       	pop	r0
     82e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     848:	0f 92       	push	r0
     84a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     84e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     852:	0f 92       	push	r0
     854:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     858:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     85c:	0f 92       	push	r0
     85e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     862:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     866:	0f 92       	push	r0
     868:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
     88c:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <tc_tcc0_ovf_callback>
     890:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <tc_tcc0_ovf_callback+0x1>
     894:	89 2b       	or	r24, r25
     896:	31 f0       	breq	.+12     	; 0x8a4 <__vector_14+0x6c>
		tc_tcc0_ovf_callback();
     898:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <tc_tcc0_ovf_callback>
     89c:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <tc_tcc0_ovf_callback+0x1>
     8a0:	fc 01       	movw	r30, r24
     8a2:	19 95       	eicall
	}
}
     8a4:	00 00       	nop
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     8c8:	0f 90       	pop	r0
     8ca:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     8ce:	0f 90       	pop	r0
     8d0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     8d4:	0f 90       	pop	r0
     8d6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8da:	0f 90       	pop	r0
     8dc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8e0:	0f 90       	pop	r0
     8e2:	1f 90       	pop	r1
     8e4:	18 95       	reti

000008e6 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8f6:	0f 92       	push	r0
     8f8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     8fc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     900:	0f 92       	push	r0
     902:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     906:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     90a:	0f 92       	push	r0
     90c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     910:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     914:	0f 92       	push	r0
     916:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
     93a:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <tc_tcc0_err_callback>
     93e:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <tc_tcc0_err_callback+0x1>
     942:	89 2b       	or	r24, r25
     944:	31 f0       	breq	.+12     	; 0x952 <__vector_15+0x6c>
		tc_tcc0_err_callback();
     946:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <tc_tcc0_err_callback>
     94a:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <tc_tcc0_err_callback+0x1>
     94e:	fc 01       	movw	r30, r24
     950:	19 95       	eicall
	}
}
     952:	00 00       	nop
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     976:	0f 90       	pop	r0
     978:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     97c:	0f 90       	pop	r0
     97e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     982:	0f 90       	pop	r0
     984:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     988:	0f 90       	pop	r0
     98a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9a4:	0f 92       	push	r0
     9a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     9aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9ae:	0f 92       	push	r0
     9b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     9b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9b8:	0f 92       	push	r0
     9ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     9be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9c2:	0f 92       	push	r0
     9c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
     9e8:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <tc_tcc0_cca_callback>
     9ec:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <tc_tcc0_cca_callback+0x1>
     9f0:	89 2b       	or	r24, r25
     9f2:	31 f0       	breq	.+12     	; 0xa00 <__vector_16+0x6c>
		tc_tcc0_cca_callback();
     9f4:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <tc_tcc0_cca_callback>
     9f8:	90 91 6f 20 	lds	r25, 0x206F	; 0x80206f <tc_tcc0_cca_callback+0x1>
     9fc:	fc 01       	movw	r30, r24
     9fe:	19 95       	eicall
	}
}
     a00:	00 00       	nop
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a24:	0f 90       	pop	r0
     a26:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a2a:	0f 90       	pop	r0
     a2c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a30:	0f 90       	pop	r0
     a32:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a36:	0f 90       	pop	r0
     a38:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a52:	0f 92       	push	r0
     a54:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     a58:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a5c:	0f 92       	push	r0
     a5e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     a62:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a66:	0f 92       	push	r0
     a68:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     a6c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a70:	0f 92       	push	r0
     a72:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
     a96:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <tc_tcc0_ccb_callback>
     a9a:	90 91 71 20 	lds	r25, 0x2071	; 0x802071 <tc_tcc0_ccb_callback+0x1>
     a9e:	89 2b       	or	r24, r25
     aa0:	31 f0       	breq	.+12     	; 0xaae <__vector_17+0x6c>
		tc_tcc0_ccb_callback();
     aa2:	80 91 70 20 	lds	r24, 0x2070	; 0x802070 <tc_tcc0_ccb_callback>
     aa6:	90 91 71 20 	lds	r25, 0x2071	; 0x802071 <tc_tcc0_ccb_callback+0x1>
     aaa:	fc 01       	movw	r30, r24
     aac:	19 95       	eicall
	}
}
     aae:	00 00       	nop
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	0f 90       	pop	r0
     ace:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad2:	0f 90       	pop	r0
     ad4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ad8:	0f 90       	pop	r0
     ada:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ade:	0f 90       	pop	r0
     ae0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ae4:	0f 90       	pop	r0
     ae6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     aea:	0f 90       	pop	r0
     aec:	1f 90       	pop	r1
     aee:	18 95       	reti

00000af0 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b00:	0f 92       	push	r0
     b02:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b06:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b0a:	0f 92       	push	r0
     b0c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b10:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b14:	0f 92       	push	r0
     b16:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b1a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b1e:	0f 92       	push	r0
     b20:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
     b44:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <tc_tcc0_ccc_callback>
     b48:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <tc_tcc0_ccc_callback+0x1>
     b4c:	89 2b       	or	r24, r25
     b4e:	31 f0       	breq	.+12     	; 0xb5c <__vector_18+0x6c>
		tc_tcc0_ccc_callback();
     b50:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <tc_tcc0_ccc_callback>
     b54:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <tc_tcc0_ccc_callback+0x1>
     b58:	fc 01       	movw	r30, r24
     b5a:	19 95       	eicall
	}
}
     b5c:	00 00       	nop
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b80:	0f 90       	pop	r0
     b82:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     b86:	0f 90       	pop	r0
     b88:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     b8c:	0f 90       	pop	r0
     b8e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     b92:	0f 90       	pop	r0
     b94:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bae:	0f 92       	push	r0
     bb0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     bb4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bb8:	0f 92       	push	r0
     bba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     bbe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bc2:	0f 92       	push	r0
     bc4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     bc8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bcc:	0f 92       	push	r0
     bce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
     bf2:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <tc_tcc0_ccd_callback>
     bf6:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <tc_tcc0_ccd_callback+0x1>
     bfa:	89 2b       	or	r24, r25
     bfc:	31 f0       	breq	.+12     	; 0xc0a <__vector_19+0x6c>
		tc_tcc0_ccd_callback();
     bfe:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <tc_tcc0_ccd_callback>
     c02:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <tc_tcc0_ccd_callback+0x1>
     c06:	fc 01       	movw	r30, r24
     c08:	19 95       	eicall
	}
}
     c0a:	00 00       	nop
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c2e:	0f 90       	pop	r0
     c30:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c34:	0f 90       	pop	r0
     c36:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c3a:	0f 90       	pop	r0
     c3c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c40:	0f 90       	pop	r0
     c42:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c5c:	0f 92       	push	r0
     c5e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c62:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c66:	0f 92       	push	r0
     c68:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c6c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c70:	0f 92       	push	r0
     c72:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c76:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c7a:	0f 92       	push	r0
     c7c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
     ca0:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcc1_ovf_callback>
     ca4:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcc1_ovf_callback+0x1>
     ca8:	89 2b       	or	r24, r25
     caa:	31 f0       	breq	.+12     	; 0xcb8 <__vector_20+0x6c>
		tc_tcc1_ovf_callback();
     cac:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <tc_tcc1_ovf_callback>
     cb0:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <tc_tcc1_ovf_callback+0x1>
     cb4:	fc 01       	movw	r30, r24
     cb6:	19 95       	eicall
	}
}
     cb8:	00 00       	nop
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	bf 91       	pop	r27
     cc4:	af 91       	pop	r26
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	7f 91       	pop	r23
     ccc:	6f 91       	pop	r22
     cce:	5f 91       	pop	r21
     cd0:	4f 91       	pop	r20
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	0f 90       	pop	r0
     cd8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     cdc:	0f 90       	pop	r0
     cde:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     ce2:	0f 90       	pop	r0
     ce4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ce8:	0f 90       	pop	r0
     cea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     cee:	0f 90       	pop	r0
     cf0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d0a:	0f 92       	push	r0
     d0c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d10:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d14:	0f 92       	push	r0
     d16:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d1a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d1e:	0f 92       	push	r0
     d20:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d24:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d28:	0f 92       	push	r0
     d2a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
     d4e:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcc1_err_callback>
     d52:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcc1_err_callback+0x1>
     d56:	89 2b       	or	r24, r25
     d58:	31 f0       	breq	.+12     	; 0xd66 <__vector_21+0x6c>
		tc_tcc1_err_callback();
     d5a:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <tc_tcc1_err_callback>
     d5e:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <tc_tcc1_err_callback+0x1>
     d62:	fc 01       	movw	r30, r24
     d64:	19 95       	eicall
	}
}
     d66:	00 00       	nop
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d8a:	0f 90       	pop	r0
     d8c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d90:	0f 90       	pop	r0
     d92:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d96:	0f 90       	pop	r0
     d98:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d9c:	0f 90       	pop	r0
     d9e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     db8:	0f 92       	push	r0
     dba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     dbe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dc2:	0f 92       	push	r0
     dc4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     dc8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dcc:	0f 92       	push	r0
     dce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     dd2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     dd6:	0f 92       	push	r0
     dd8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
     dfc:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcc1_cca_callback>
     e00:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcc1_cca_callback+0x1>
     e04:	89 2b       	or	r24, r25
     e06:	31 f0       	breq	.+12     	; 0xe14 <__vector_22+0x6c>
		tc_tcc1_cca_callback();
     e08:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <tc_tcc1_cca_callback>
     e0c:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <tc_tcc1_cca_callback+0x1>
     e10:	fc 01       	movw	r30, r24
     e12:	19 95       	eicall
	}
}
     e14:	00 00       	nop
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e38:	0f 90       	pop	r0
     e3a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e3e:	0f 90       	pop	r0
     e40:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e44:	0f 90       	pop	r0
     e46:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e4a:	0f 90       	pop	r0
     e4c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e66:	0f 92       	push	r0
     e68:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e6c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e70:	0f 92       	push	r0
     e72:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e76:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e7a:	0f 92       	push	r0
     e7c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e80:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e84:	0f 92       	push	r0
     e86:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
     eaa:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcc1_ccb_callback>
     eae:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcc1_ccb_callback+0x1>
     eb2:	89 2b       	or	r24, r25
     eb4:	31 f0       	breq	.+12     	; 0xec2 <__vector_23+0x6c>
		tc_tcc1_ccb_callback();
     eb6:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <tc_tcc1_ccb_callback>
     eba:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <tc_tcc1_ccb_callback+0x1>
     ebe:	fc 01       	movw	r30, r24
     ec0:	19 95       	eicall
	}
}
     ec2:	00 00       	nop
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ee6:	0f 90       	pop	r0
     ee8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     eec:	0f 90       	pop	r0
     eee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     ef2:	0f 90       	pop	r0
     ef4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     ef8:	0f 90       	pop	r0
     efa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f14:	0f 92       	push	r0
     f16:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f1a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f1e:	0f 92       	push	r0
     f20:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f24:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f28:	0f 92       	push	r0
     f2a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f32:	0f 92       	push	r0
     f34:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
     f58:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcd0_ovf_callback>
     f5c:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcd0_ovf_callback+0x1>
     f60:	89 2b       	or	r24, r25
     f62:	31 f0       	breq	.+12     	; 0xf70 <__vector_77+0x6c>
		tc_tcd0_ovf_callback();
     f64:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <tc_tcd0_ovf_callback>
     f68:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <tc_tcd0_ovf_callback+0x1>
     f6c:	fc 01       	movw	r30, r24
     f6e:	19 95       	eicall
	}
}
     f70:	00 00       	nop
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	ff 91       	pop	r31
     f78:	ef 91       	pop	r30
     f7a:	bf 91       	pop	r27
     f7c:	af 91       	pop	r26
     f7e:	9f 91       	pop	r25
     f80:	8f 91       	pop	r24
     f82:	7f 91       	pop	r23
     f84:	6f 91       	pop	r22
     f86:	5f 91       	pop	r21
     f88:	4f 91       	pop	r20
     f8a:	3f 91       	pop	r19
     f8c:	2f 91       	pop	r18
     f8e:	0f 90       	pop	r0
     f90:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f94:	0f 90       	pop	r0
     f96:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f9a:	0f 90       	pop	r0
     f9c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fa0:	0f 90       	pop	r0
     fa2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fa6:	0f 90       	pop	r0
     fa8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fc2:	0f 92       	push	r0
     fc4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     fc8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fcc:	0f 92       	push	r0
     fce:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     fd2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fd6:	0f 92       	push	r0
     fd8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     fdc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     fe0:	0f 92       	push	r0
     fe2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     fe6:	2f 93       	push	r18
     fe8:	3f 93       	push	r19
     fea:	4f 93       	push	r20
     fec:	5f 93       	push	r21
     fee:	6f 93       	push	r22
     ff0:	7f 93       	push	r23
     ff2:	8f 93       	push	r24
     ff4:	9f 93       	push	r25
     ff6:	af 93       	push	r26
     ff8:	bf 93       	push	r27
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    1006:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcd0_err_callback>
    100a:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcd0_err_callback+0x1>
    100e:	89 2b       	or	r24, r25
    1010:	31 f0       	breq	.+12     	; 0x101e <__vector_78+0x6c>
		tc_tcd0_err_callback();
    1012:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <tc_tcd0_err_callback>
    1016:	90 91 81 20 	lds	r25, 0x2081	; 0x802081 <tc_tcd0_err_callback+0x1>
    101a:	fc 01       	movw	r30, r24
    101c:	19 95       	eicall
	}
}
    101e:	00 00       	nop
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1042:	0f 90       	pop	r0
    1044:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1048:	0f 90       	pop	r0
    104a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    104e:	0f 90       	pop	r0
    1050:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1054:	0f 90       	pop	r0
    1056:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1070:	0f 92       	push	r0
    1072:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1076:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    107a:	0f 92       	push	r0
    107c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1080:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1084:	0f 92       	push	r0
    1086:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    108a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    108e:	0f 92       	push	r0
    1090:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    10b4:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcd0_cca_callback>
    10b8:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcd0_cca_callback+0x1>
    10bc:	89 2b       	or	r24, r25
    10be:	31 f0       	breq	.+12     	; 0x10cc <__vector_79+0x6c>
		tc_tcd0_cca_callback();
    10c0:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <tc_tcd0_cca_callback>
    10c4:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <tc_tcd0_cca_callback+0x1>
    10c8:	fc 01       	movw	r30, r24
    10ca:	19 95       	eicall
	}
}
    10cc:	00 00       	nop
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10f0:	0f 90       	pop	r0
    10f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10f6:	0f 90       	pop	r0
    10f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    10fc:	0f 90       	pop	r0
    10fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1102:	0f 90       	pop	r0
    1104:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    111e:	0f 92       	push	r0
    1120:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1124:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1128:	0f 92       	push	r0
    112a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    112e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1132:	0f 92       	push	r0
    1134:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1138:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    113c:	0f 92       	push	r0
    113e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    1162:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcd0_ccb_callback>
    1166:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcd0_ccb_callback+0x1>
    116a:	89 2b       	or	r24, r25
    116c:	31 f0       	breq	.+12     	; 0x117a <__vector_80+0x6c>
		tc_tcd0_ccb_callback();
    116e:	80 91 84 20 	lds	r24, 0x2084	; 0x802084 <tc_tcd0_ccb_callback>
    1172:	90 91 85 20 	lds	r25, 0x2085	; 0x802085 <tc_tcd0_ccb_callback+0x1>
    1176:	fc 01       	movw	r30, r24
    1178:	19 95       	eicall
	}
}
    117a:	00 00       	nop
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    119e:	0f 90       	pop	r0
    11a0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11a4:	0f 90       	pop	r0
    11a6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11aa:	0f 90       	pop	r0
    11ac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11b0:	0f 90       	pop	r0
    11b2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11cc:	0f 92       	push	r0
    11ce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11d2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11d6:	0f 92       	push	r0
    11d8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11dc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11e0:	0f 92       	push	r0
    11e2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11e6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11ea:	0f 92       	push	r0
    11ec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    1210:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcd0_ccc_callback>
    1214:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcd0_ccc_callback+0x1>
    1218:	89 2b       	or	r24, r25
    121a:	31 f0       	breq	.+12     	; 0x1228 <__vector_81+0x6c>
		tc_tcd0_ccc_callback();
    121c:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <tc_tcd0_ccc_callback>
    1220:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <tc_tcd0_ccc_callback+0x1>
    1224:	fc 01       	movw	r30, r24
    1226:	19 95       	eicall
	}
}
    1228:	00 00       	nop
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    124c:	0f 90       	pop	r0
    124e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1252:	0f 90       	pop	r0
    1254:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1258:	0f 90       	pop	r0
    125a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    125e:	0f 90       	pop	r0
    1260:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    127a:	0f 92       	push	r0
    127c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1280:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1284:	0f 92       	push	r0
    1286:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    128a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    128e:	0f 92       	push	r0
    1290:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1294:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1298:	0f 92       	push	r0
    129a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    12be:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcd0_ccd_callback>
    12c2:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcd0_ccd_callback+0x1>
    12c6:	89 2b       	or	r24, r25
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <__vector_82+0x6c>
		tc_tcd0_ccd_callback();
    12ca:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <tc_tcd0_ccd_callback>
    12ce:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <tc_tcd0_ccd_callback+0x1>
    12d2:	fc 01       	movw	r30, r24
    12d4:	19 95       	eicall
	}
}
    12d6:	00 00       	nop
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	ff 91       	pop	r31
    12de:	ef 91       	pop	r30
    12e0:	bf 91       	pop	r27
    12e2:	af 91       	pop	r26
    12e4:	9f 91       	pop	r25
    12e6:	8f 91       	pop	r24
    12e8:	7f 91       	pop	r23
    12ea:	6f 91       	pop	r22
    12ec:	5f 91       	pop	r21
    12ee:	4f 91       	pop	r20
    12f0:	3f 91       	pop	r19
    12f2:	2f 91       	pop	r18
    12f4:	0f 90       	pop	r0
    12f6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12fa:	0f 90       	pop	r0
    12fc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1300:	0f 90       	pop	r0
    1302:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1306:	0f 90       	pop	r0
    1308:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    130c:	0f 90       	pop	r0
    130e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1328:	0f 92       	push	r0
    132a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    132e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1332:	0f 92       	push	r0
    1334:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1338:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    133c:	0f 92       	push	r0
    133e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1342:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1346:	0f 92       	push	r0
    1348:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    134c:	2f 93       	push	r18
    134e:	3f 93       	push	r19
    1350:	4f 93       	push	r20
    1352:	5f 93       	push	r21
    1354:	6f 93       	push	r22
    1356:	7f 93       	push	r23
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	af 93       	push	r26
    135e:	bf 93       	push	r27
    1360:	ef 93       	push	r30
    1362:	ff 93       	push	r31
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
    136c:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcd1_ovf_callback>
    1370:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcd1_ovf_callback+0x1>
    1374:	89 2b       	or	r24, r25
    1376:	31 f0       	breq	.+12     	; 0x1384 <__vector_83+0x6c>
		tc_tcd1_ovf_callback();
    1378:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <tc_tcd1_ovf_callback>
    137c:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <tc_tcd1_ovf_callback+0x1>
    1380:	fc 01       	movw	r30, r24
    1382:	19 95       	eicall
	}
}
    1384:	00 00       	nop
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13a8:	0f 90       	pop	r0
    13aa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13ae:	0f 90       	pop	r0
    13b0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13b4:	0f 90       	pop	r0
    13b6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13ba:	0f 90       	pop	r0
    13bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13d6:	0f 92       	push	r0
    13d8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13dc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13e0:	0f 92       	push	r0
    13e2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13e6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13ea:	0f 92       	push	r0
    13ec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13f0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13f4:	0f 92       	push	r0
    13f6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13fa:	2f 93       	push	r18
    13fc:	3f 93       	push	r19
    13fe:	4f 93       	push	r20
    1400:	5f 93       	push	r21
    1402:	6f 93       	push	r22
    1404:	7f 93       	push	r23
    1406:	8f 93       	push	r24
    1408:	9f 93       	push	r25
    140a:	af 93       	push	r26
    140c:	bf 93       	push	r27
    140e:	ef 93       	push	r30
    1410:	ff 93       	push	r31
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
    141a:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcd1_err_callback>
    141e:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcd1_err_callback+0x1>
    1422:	89 2b       	or	r24, r25
    1424:	31 f0       	breq	.+12     	; 0x1432 <__vector_84+0x6c>
		tc_tcd1_err_callback();
    1426:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <tc_tcd1_err_callback>
    142a:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <tc_tcd1_err_callback+0x1>
    142e:	fc 01       	movw	r30, r24
    1430:	19 95       	eicall
	}
}
    1432:	00 00       	nop
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1456:	0f 90       	pop	r0
    1458:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    145c:	0f 90       	pop	r0
    145e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1462:	0f 90       	pop	r0
    1464:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1468:	0f 90       	pop	r0
    146a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    146e:	0f 90       	pop	r0
    1470:	1f 90       	pop	r1
    1472:	18 95       	reti

00001474 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1474:	1f 92       	push	r1
    1476:	0f 92       	push	r0
    1478:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    147c:	0f 92       	push	r0
    147e:	11 24       	eor	r1, r1
    1480:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1484:	0f 92       	push	r0
    1486:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    148a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    148e:	0f 92       	push	r0
    1490:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1494:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1498:	0f 92       	push	r0
    149a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    149e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14a2:	0f 92       	push	r0
    14a4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
    14c8:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcd1_cca_callback>
    14cc:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcd1_cca_callback+0x1>
    14d0:	89 2b       	or	r24, r25
    14d2:	31 f0       	breq	.+12     	; 0x14e0 <__vector_85+0x6c>
		tc_tcd1_cca_callback();
    14d4:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <tc_tcd1_cca_callback>
    14d8:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <tc_tcd1_cca_callback+0x1>
    14dc:	fc 01       	movw	r30, r24
    14de:	19 95       	eicall
	}
}
    14e0:	00 00       	nop
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	ff 91       	pop	r31
    14e8:	ef 91       	pop	r30
    14ea:	bf 91       	pop	r27
    14ec:	af 91       	pop	r26
    14ee:	9f 91       	pop	r25
    14f0:	8f 91       	pop	r24
    14f2:	7f 91       	pop	r23
    14f4:	6f 91       	pop	r22
    14f6:	5f 91       	pop	r21
    14f8:	4f 91       	pop	r20
    14fa:	3f 91       	pop	r19
    14fc:	2f 91       	pop	r18
    14fe:	0f 90       	pop	r0
    1500:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1504:	0f 90       	pop	r0
    1506:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    150a:	0f 90       	pop	r0
    150c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1510:	0f 90       	pop	r0
    1512:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1516:	0f 90       	pop	r0
    1518:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1532:	0f 92       	push	r0
    1534:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1538:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    153c:	0f 92       	push	r0
    153e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1542:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1546:	0f 92       	push	r0
    1548:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    154c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1550:	0f 92       	push	r0
    1552:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
    1576:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcd1_ccb_callback>
    157a:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcd1_ccb_callback+0x1>
    157e:	89 2b       	or	r24, r25
    1580:	31 f0       	breq	.+12     	; 0x158e <__vector_86+0x6c>
		tc_tcd1_ccb_callback();
    1582:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <tc_tcd1_ccb_callback>
    1586:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <tc_tcd1_ccb_callback+0x1>
    158a:	fc 01       	movw	r30, r24
    158c:	19 95       	eicall
	}
}
    158e:	00 00       	nop
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15b2:	0f 90       	pop	r0
    15b4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15b8:	0f 90       	pop	r0
    15ba:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15be:	0f 90       	pop	r0
    15c0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15c4:	0f 90       	pop	r0
    15c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15ca:	0f 90       	pop	r0
    15cc:	1f 90       	pop	r1
    15ce:	18 95       	reti

000015d0 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    15d0:	1f 92       	push	r1
    15d2:	0f 92       	push	r0
    15d4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15e0:	0f 92       	push	r0
    15e2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    15e6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15ea:	0f 92       	push	r0
    15ec:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    15f0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15f4:	0f 92       	push	r0
    15f6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    15fa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    15fe:	0f 92       	push	r0
    1600:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    1624:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tce0_ovf_callback>
    1628:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tce0_ovf_callback+0x1>
    162c:	89 2b       	or	r24, r25
    162e:	31 f0       	breq	.+12     	; 0x163c <__vector_47+0x6c>
		tc_tce0_ovf_callback();
    1630:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <tc_tce0_ovf_callback>
    1634:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <tc_tce0_ovf_callback+0x1>
    1638:	fc 01       	movw	r30, r24
    163a:	19 95       	eicall
	}
}
    163c:	00 00       	nop
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1660:	0f 90       	pop	r0
    1662:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1666:	0f 90       	pop	r0
    1668:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    166c:	0f 90       	pop	r0
    166e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1672:	0f 90       	pop	r0
    1674:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1678:	0f 90       	pop	r0
    167a:	1f 90       	pop	r1
    167c:	18 95       	reti

0000167e <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1686:	0f 92       	push	r0
    1688:	11 24       	eor	r1, r1
    168a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    168e:	0f 92       	push	r0
    1690:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1694:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1698:	0f 92       	push	r0
    169a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    169e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    16a2:	0f 92       	push	r0
    16a4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    16a8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    16ac:	0f 92       	push	r0
    16ae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    16d2:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tce0_err_callback>
    16d6:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tce0_err_callback+0x1>
    16da:	89 2b       	or	r24, r25
    16dc:	31 f0       	breq	.+12     	; 0x16ea <__vector_48+0x6c>
		tc_tce0_err_callback();
    16de:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <tc_tce0_err_callback>
    16e2:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <tc_tce0_err_callback+0x1>
    16e6:	fc 01       	movw	r30, r24
    16e8:	19 95       	eicall
	}
}
    16ea:	00 00       	nop
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    170e:	0f 90       	pop	r0
    1710:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1714:	0f 90       	pop	r0
    1716:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    171a:	0f 90       	pop	r0
    171c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1720:	0f 90       	pop	r0
    1722:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1726:	0f 90       	pop	r0
    1728:	1f 90       	pop	r1
    172a:	18 95       	reti

0000172c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    173c:	0f 92       	push	r0
    173e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1742:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1746:	0f 92       	push	r0
    1748:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    174c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1750:	0f 92       	push	r0
    1752:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1756:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    175a:	0f 92       	push	r0
    175c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    1780:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tce0_cca_callback>
    1784:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tce0_cca_callback+0x1>
    1788:	89 2b       	or	r24, r25
    178a:	31 f0       	breq	.+12     	; 0x1798 <__vector_49+0x6c>
		tc_tce0_cca_callback();
    178c:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <tc_tce0_cca_callback>
    1790:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <tc_tce0_cca_callback+0x1>
    1794:	fc 01       	movw	r30, r24
    1796:	19 95       	eicall
	}
}
    1798:	00 00       	nop
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	ff 91       	pop	r31
    17a0:	ef 91       	pop	r30
    17a2:	bf 91       	pop	r27
    17a4:	af 91       	pop	r26
    17a6:	9f 91       	pop	r25
    17a8:	8f 91       	pop	r24
    17aa:	7f 91       	pop	r23
    17ac:	6f 91       	pop	r22
    17ae:	5f 91       	pop	r21
    17b0:	4f 91       	pop	r20
    17b2:	3f 91       	pop	r19
    17b4:	2f 91       	pop	r18
    17b6:	0f 90       	pop	r0
    17b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    17bc:	0f 90       	pop	r0
    17be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    17c2:	0f 90       	pop	r0
    17c4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17c8:	0f 90       	pop	r0
    17ca:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17ce:	0f 90       	pop	r0
    17d0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti

000017da <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17ea:	0f 92       	push	r0
    17ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    17f0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17f4:	0f 92       	push	r0
    17f6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    17fa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    17fe:	0f 92       	push	r0
    1800:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1804:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1808:	0f 92       	push	r0
    180a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    180e:	2f 93       	push	r18
    1810:	3f 93       	push	r19
    1812:	4f 93       	push	r20
    1814:	5f 93       	push	r21
    1816:	6f 93       	push	r22
    1818:	7f 93       	push	r23
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	af 93       	push	r26
    1820:	bf 93       	push	r27
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    182e:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tce0_ccb_callback>
    1832:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tce0_ccb_callback+0x1>
    1836:	89 2b       	or	r24, r25
    1838:	31 f0       	breq	.+12     	; 0x1846 <__vector_50+0x6c>
		tc_tce0_ccb_callback();
    183a:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <tc_tce0_ccb_callback>
    183e:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <tc_tce0_ccb_callback+0x1>
    1842:	fc 01       	movw	r30, r24
    1844:	19 95       	eicall
	}
}
    1846:	00 00       	nop
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    186a:	0f 90       	pop	r0
    186c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1870:	0f 90       	pop	r0
    1872:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1876:	0f 90       	pop	r0
    1878:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    187c:	0f 90       	pop	r0
    187e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1888:	1f 92       	push	r1
    188a:	0f 92       	push	r0
    188c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1898:	0f 92       	push	r0
    189a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    189e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18a2:	0f 92       	push	r0
    18a4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    18a8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18ac:	0f 92       	push	r0
    18ae:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    18b2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18b6:	0f 92       	push	r0
    18b8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	5f 93       	push	r21
    18c4:	6f 93       	push	r22
    18c6:	7f 93       	push	r23
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	af 93       	push	r26
    18ce:	bf 93       	push	r27
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    18dc:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tce0_ccc_callback>
    18e0:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tce0_ccc_callback+0x1>
    18e4:	89 2b       	or	r24, r25
    18e6:	31 f0       	breq	.+12     	; 0x18f4 <__vector_51+0x6c>
		tc_tce0_ccc_callback();
    18e8:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <tc_tce0_ccc_callback>
    18ec:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <tc_tce0_ccc_callback+0x1>
    18f0:	fc 01       	movw	r30, r24
    18f2:	19 95       	eicall
	}
}
    18f4:	00 00       	nop
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1918:	0f 90       	pop	r0
    191a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    191e:	0f 90       	pop	r0
    1920:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1924:	0f 90       	pop	r0
    1926:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    192a:	0f 90       	pop	r0
    192c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1946:	0f 92       	push	r0
    1948:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    194c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1950:	0f 92       	push	r0
    1952:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1956:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    195a:	0f 92       	push	r0
    195c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1960:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1964:	0f 92       	push	r0
    1966:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    196a:	2f 93       	push	r18
    196c:	3f 93       	push	r19
    196e:	4f 93       	push	r20
    1970:	5f 93       	push	r21
    1972:	6f 93       	push	r22
    1974:	7f 93       	push	r23
    1976:	8f 93       	push	r24
    1978:	9f 93       	push	r25
    197a:	af 93       	push	r26
    197c:	bf 93       	push	r27
    197e:	ef 93       	push	r30
    1980:	ff 93       	push	r31
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    198a:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tce0_ccd_callback>
    198e:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tce0_ccd_callback+0x1>
    1992:	89 2b       	or	r24, r25
    1994:	31 f0       	breq	.+12     	; 0x19a2 <__vector_52+0x6c>
		tc_tce0_ccd_callback();
    1996:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <tc_tce0_ccd_callback>
    199a:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <tc_tce0_ccd_callback+0x1>
    199e:	fc 01       	movw	r30, r24
    19a0:	19 95       	eicall
	}
}
    19a2:	00 00       	nop
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	ff 91       	pop	r31
    19aa:	ef 91       	pop	r30
    19ac:	bf 91       	pop	r27
    19ae:	af 91       	pop	r26
    19b0:	9f 91       	pop	r25
    19b2:	8f 91       	pop	r24
    19b4:	7f 91       	pop	r23
    19b6:	6f 91       	pop	r22
    19b8:	5f 91       	pop	r21
    19ba:	4f 91       	pop	r20
    19bc:	3f 91       	pop	r19
    19be:	2f 91       	pop	r18
    19c0:	0f 90       	pop	r0
    19c2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    19c6:	0f 90       	pop	r0
    19c8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    19cc:	0f 90       	pop	r0
    19ce:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19d2:	0f 90       	pop	r0
    19d4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19d8:	0f 90       	pop	r0
    19da:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    19de:	0f 90       	pop	r0
    19e0:	1f 90       	pop	r1
    19e2:	18 95       	reti

000019e4 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    19e4:	1f 92       	push	r1
    19e6:	0f 92       	push	r0
    19e8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    19ec:	0f 92       	push	r0
    19ee:	11 24       	eor	r1, r1
    19f0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19f4:	0f 92       	push	r0
    19f6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    19fa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    19fe:	0f 92       	push	r0
    1a00:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a04:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a08:	0f 92       	push	r0
    1a0a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a0e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a12:	0f 92       	push	r0
    1a14:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    1a38:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tce1_ovf_callback>
    1a3c:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tce1_ovf_callback+0x1>
    1a40:	89 2b       	or	r24, r25
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <__vector_53+0x6c>
		tc_tce1_ovf_callback();
    1a44:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <tc_tce1_ovf_callback>
    1a48:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <tc_tce1_ovf_callback+0x1>
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	19 95       	eicall
	}
}
    1a50:	00 00       	nop
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1a74:	0f 90       	pop	r0
    1a76:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1a7a:	0f 90       	pop	r0
    1a7c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1a80:	0f 90       	pop	r0
    1a82:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1a86:	0f 90       	pop	r0
    1a88:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a8c:	0f 90       	pop	r0
    1a8e:	1f 90       	pop	r1
    1a90:	18 95       	reti

00001a92 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1a92:	1f 92       	push	r1
    1a94:	0f 92       	push	r0
    1a96:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1aa2:	0f 92       	push	r0
    1aa4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1aa8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1aac:	0f 92       	push	r0
    1aae:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ab2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ab6:	0f 92       	push	r0
    1ab8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1abc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ac0:	0f 92       	push	r0
    1ac2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	ef 93       	push	r30
    1adc:	ff 93       	push	r31
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    1ae6:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tce1_err_callback>
    1aea:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tce1_err_callback+0x1>
    1aee:	89 2b       	or	r24, r25
    1af0:	31 f0       	breq	.+12     	; 0x1afe <__vector_54+0x6c>
		tc_tce1_err_callback();
    1af2:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <tc_tce1_err_callback>
    1af6:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <tc_tce1_err_callback+0x1>
    1afa:	fc 01       	movw	r30, r24
    1afc:	19 95       	eicall
	}
}
    1afe:	00 00       	nop
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	ff 91       	pop	r31
    1b06:	ef 91       	pop	r30
    1b08:	bf 91       	pop	r27
    1b0a:	af 91       	pop	r26
    1b0c:	9f 91       	pop	r25
    1b0e:	8f 91       	pop	r24
    1b10:	7f 91       	pop	r23
    1b12:	6f 91       	pop	r22
    1b14:	5f 91       	pop	r21
    1b16:	4f 91       	pop	r20
    1b18:	3f 91       	pop	r19
    1b1a:	2f 91       	pop	r18
    1b1c:	0f 90       	pop	r0
    1b1e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b22:	0f 90       	pop	r0
    1b24:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b28:	0f 90       	pop	r0
    1b2a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b2e:	0f 90       	pop	r0
    1b30:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b34:	0f 90       	pop	r0
    1b36:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b50:	0f 92       	push	r0
    1b52:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1b56:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b5a:	0f 92       	push	r0
    1b5c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1b60:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b64:	0f 92       	push	r0
    1b66:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1b6a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b6e:	0f 92       	push	r0
    1b70:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1b74:	2f 93       	push	r18
    1b76:	3f 93       	push	r19
    1b78:	4f 93       	push	r20
    1b7a:	5f 93       	push	r21
    1b7c:	6f 93       	push	r22
    1b7e:	7f 93       	push	r23
    1b80:	8f 93       	push	r24
    1b82:	9f 93       	push	r25
    1b84:	af 93       	push	r26
    1b86:	bf 93       	push	r27
    1b88:	ef 93       	push	r30
    1b8a:	ff 93       	push	r31
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    1b94:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tce1_cca_callback>
    1b98:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tce1_cca_callback+0x1>
    1b9c:	89 2b       	or	r24, r25
    1b9e:	31 f0       	breq	.+12     	; 0x1bac <__vector_55+0x6c>
		tc_tce1_cca_callback();
    1ba0:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <tc_tce1_cca_callback>
    1ba4:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <tc_tce1_cca_callback+0x1>
    1ba8:	fc 01       	movw	r30, r24
    1baa:	19 95       	eicall
	}
}
    1bac:	00 00       	nop
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	ff 91       	pop	r31
    1bb4:	ef 91       	pop	r30
    1bb6:	bf 91       	pop	r27
    1bb8:	af 91       	pop	r26
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	7f 91       	pop	r23
    1bc0:	6f 91       	pop	r22
    1bc2:	5f 91       	pop	r21
    1bc4:	4f 91       	pop	r20
    1bc6:	3f 91       	pop	r19
    1bc8:	2f 91       	pop	r18
    1bca:	0f 90       	pop	r0
    1bcc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1bd0:	0f 90       	pop	r0
    1bd2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1bd6:	0f 90       	pop	r0
    1bd8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1bdc:	0f 90       	pop	r0
    1bde:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1be2:	0f 90       	pop	r0
    1be4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1bee:	1f 92       	push	r1
    1bf0:	0f 92       	push	r0
    1bf2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1bf6:	0f 92       	push	r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1bfe:	0f 92       	push	r0
    1c00:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c04:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c08:	0f 92       	push	r0
    1c0a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c0e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c12:	0f 92       	push	r0
    1c14:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c18:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c1c:	0f 92       	push	r0
    1c1e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c22:	2f 93       	push	r18
    1c24:	3f 93       	push	r19
    1c26:	4f 93       	push	r20
    1c28:	5f 93       	push	r21
    1c2a:	6f 93       	push	r22
    1c2c:	7f 93       	push	r23
    1c2e:	8f 93       	push	r24
    1c30:	9f 93       	push	r25
    1c32:	af 93       	push	r26
    1c34:	bf 93       	push	r27
    1c36:	ef 93       	push	r30
    1c38:	ff 93       	push	r31
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    1c42:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tce1_ccb_callback>
    1c46:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tce1_ccb_callback+0x1>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	31 f0       	breq	.+12     	; 0x1c5a <__vector_56+0x6c>
		tc_tce1_ccb_callback();
    1c4e:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <tc_tce1_ccb_callback>
    1c52:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <tc_tce1_ccb_callback+0x1>
    1c56:	fc 01       	movw	r30, r24
    1c58:	19 95       	eicall
	}
}
    1c5a:	00 00       	nop
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	ff 91       	pop	r31
    1c62:	ef 91       	pop	r30
    1c64:	bf 91       	pop	r27
    1c66:	af 91       	pop	r26
    1c68:	9f 91       	pop	r25
    1c6a:	8f 91       	pop	r24
    1c6c:	7f 91       	pop	r23
    1c6e:	6f 91       	pop	r22
    1c70:	5f 91       	pop	r21
    1c72:	4f 91       	pop	r20
    1c74:	3f 91       	pop	r19
    1c76:	2f 91       	pop	r18
    1c78:	0f 90       	pop	r0
    1c7a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1c7e:	0f 90       	pop	r0
    1c80:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1c84:	0f 90       	pop	r0
    1c86:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1c8a:	0f 90       	pop	r0
    1c8c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1c90:	0f 90       	pop	r0
    1c92:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c96:	0f 90       	pop	r0
    1c98:	1f 90       	pop	r1
    1c9a:	18 95       	reti

00001c9c <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cac:	0f 92       	push	r0
    1cae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1cb2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cb6:	0f 92       	push	r0
    1cb8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1cbc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1cc0:	0f 92       	push	r0
    1cc2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1cc6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1cca:	0f 92       	push	r0
    1ccc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1cd0:	2f 93       	push	r18
    1cd2:	3f 93       	push	r19
    1cd4:	4f 93       	push	r20
    1cd6:	5f 93       	push	r21
    1cd8:	6f 93       	push	r22
    1cda:	7f 93       	push	r23
    1cdc:	8f 93       	push	r24
    1cde:	9f 93       	push	r25
    1ce0:	af 93       	push	r26
    1ce2:	bf 93       	push	r27
    1ce4:	ef 93       	push	r30
    1ce6:	ff 93       	push	r31
    1ce8:	cf 93       	push	r28
    1cea:	df 93       	push	r29
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    1cf0:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcf0_ovf_callback>
    1cf4:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcf0_ovf_callback+0x1>
    1cf8:	89 2b       	or	r24, r25
    1cfa:	31 f0       	breq	.+12     	; 0x1d08 <__vector_108+0x6c>
		tc_tcf0_ovf_callback();
    1cfc:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <tc_tcf0_ovf_callback>
    1d00:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <tc_tcf0_ovf_callback+0x1>
    1d04:	fc 01       	movw	r30, r24
    1d06:	19 95       	eicall
	}
}
    1d08:	00 00       	nop
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	0f 90       	pop	r0
    1d28:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d2c:	0f 90       	pop	r0
    1d2e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d32:	0f 90       	pop	r0
    1d34:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d38:	0f 90       	pop	r0
    1d3a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d3e:	0f 90       	pop	r0
    1d40:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d44:	0f 90       	pop	r0
    1d46:	1f 90       	pop	r1
    1d48:	18 95       	reti

00001d4a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d52:	0f 92       	push	r0
    1d54:	11 24       	eor	r1, r1
    1d56:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d5a:	0f 92       	push	r0
    1d5c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1d60:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d64:	0f 92       	push	r0
    1d66:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1d6a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d6e:	0f 92       	push	r0
    1d70:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1d74:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d78:	0f 92       	push	r0
    1d7a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1d7e:	2f 93       	push	r18
    1d80:	3f 93       	push	r19
    1d82:	4f 93       	push	r20
    1d84:	5f 93       	push	r21
    1d86:	6f 93       	push	r22
    1d88:	7f 93       	push	r23
    1d8a:	8f 93       	push	r24
    1d8c:	9f 93       	push	r25
    1d8e:	af 93       	push	r26
    1d90:	bf 93       	push	r27
    1d92:	ef 93       	push	r30
    1d94:	ff 93       	push	r31
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    1d9e:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcf0_err_callback>
    1da2:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcf0_err_callback+0x1>
    1da6:	89 2b       	or	r24, r25
    1da8:	31 f0       	breq	.+12     	; 0x1db6 <__vector_109+0x6c>
		tc_tcf0_err_callback();
    1daa:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <tc_tcf0_err_callback>
    1dae:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <tc_tcf0_err_callback+0x1>
    1db2:	fc 01       	movw	r30, r24
    1db4:	19 95       	eicall
	}
}
    1db6:	00 00       	nop
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	ff 91       	pop	r31
    1dbe:	ef 91       	pop	r30
    1dc0:	bf 91       	pop	r27
    1dc2:	af 91       	pop	r26
    1dc4:	9f 91       	pop	r25
    1dc6:	8f 91       	pop	r24
    1dc8:	7f 91       	pop	r23
    1dca:	6f 91       	pop	r22
    1dcc:	5f 91       	pop	r21
    1dce:	4f 91       	pop	r20
    1dd0:	3f 91       	pop	r19
    1dd2:	2f 91       	pop	r18
    1dd4:	0f 90       	pop	r0
    1dd6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1dda:	0f 90       	pop	r0
    1ddc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1de0:	0f 90       	pop	r0
    1de2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1de6:	0f 90       	pop	r0
    1de8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1dec:	0f 90       	pop	r0
    1dee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1df2:	0f 90       	pop	r0
    1df4:	1f 90       	pop	r1
    1df6:	18 95       	reti

00001df8 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1df8:	1f 92       	push	r1
    1dfa:	0f 92       	push	r0
    1dfc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e00:	0f 92       	push	r0
    1e02:	11 24       	eor	r1, r1
    1e04:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e08:	0f 92       	push	r0
    1e0a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e0e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e12:	0f 92       	push	r0
    1e14:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e18:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e1c:	0f 92       	push	r0
    1e1e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e22:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e26:	0f 92       	push	r0
    1e28:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e2c:	2f 93       	push	r18
    1e2e:	3f 93       	push	r19
    1e30:	4f 93       	push	r20
    1e32:	5f 93       	push	r21
    1e34:	6f 93       	push	r22
    1e36:	7f 93       	push	r23
    1e38:	8f 93       	push	r24
    1e3a:	9f 93       	push	r25
    1e3c:	af 93       	push	r26
    1e3e:	bf 93       	push	r27
    1e40:	ef 93       	push	r30
    1e42:	ff 93       	push	r31
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    1e4c:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcf0_cca_callback>
    1e50:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcf0_cca_callback+0x1>
    1e54:	89 2b       	or	r24, r25
    1e56:	31 f0       	breq	.+12     	; 0x1e64 <__vector_110+0x6c>
		tc_tcf0_cca_callback();
    1e58:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <tc_tcf0_cca_callback>
    1e5c:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <tc_tcf0_cca_callback+0x1>
    1e60:	fc 01       	movw	r30, r24
    1e62:	19 95       	eicall
	}
}
    1e64:	00 00       	nop
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1e88:	0f 90       	pop	r0
    1e8a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1e8e:	0f 90       	pop	r0
    1e90:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1e94:	0f 90       	pop	r0
    1e96:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1e9a:	0f 90       	pop	r0
    1e9c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ea0:	0f 90       	pop	r0
    1ea2:	1f 90       	pop	r1
    1ea4:	18 95       	reti

00001ea6 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1ea6:	1f 92       	push	r1
    1ea8:	0f 92       	push	r0
    1eaa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1eb6:	0f 92       	push	r0
    1eb8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ebc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ec0:	0f 92       	push	r0
    1ec2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ec6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1eca:	0f 92       	push	r0
    1ecc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1ed0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1ed4:	0f 92       	push	r0
    1ed6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1eda:	2f 93       	push	r18
    1edc:	3f 93       	push	r19
    1ede:	4f 93       	push	r20
    1ee0:	5f 93       	push	r21
    1ee2:	6f 93       	push	r22
    1ee4:	7f 93       	push	r23
    1ee6:	8f 93       	push	r24
    1ee8:	9f 93       	push	r25
    1eea:	af 93       	push	r26
    1eec:	bf 93       	push	r27
    1eee:	ef 93       	push	r30
    1ef0:	ff 93       	push	r31
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    1efa:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tcf0_ccb_callback>
    1efe:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tcf0_ccb_callback+0x1>
    1f02:	89 2b       	or	r24, r25
    1f04:	31 f0       	breq	.+12     	; 0x1f12 <__vector_111+0x6c>
		tc_tcf0_ccb_callback();
    1f06:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <tc_tcf0_ccb_callback>
    1f0a:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <tc_tcf0_ccb_callback+0x1>
    1f0e:	fc 01       	movw	r30, r24
    1f10:	19 95       	eicall
	}
}
    1f12:	00 00       	nop
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	ff 91       	pop	r31
    1f1a:	ef 91       	pop	r30
    1f1c:	bf 91       	pop	r27
    1f1e:	af 91       	pop	r26
    1f20:	9f 91       	pop	r25
    1f22:	8f 91       	pop	r24
    1f24:	7f 91       	pop	r23
    1f26:	6f 91       	pop	r22
    1f28:	5f 91       	pop	r21
    1f2a:	4f 91       	pop	r20
    1f2c:	3f 91       	pop	r19
    1f2e:	2f 91       	pop	r18
    1f30:	0f 90       	pop	r0
    1f32:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f36:	0f 90       	pop	r0
    1f38:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f3c:	0f 90       	pop	r0
    1f3e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f42:	0f 90       	pop	r0
    1f44:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f48:	0f 90       	pop	r0
    1f4a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1f54:	1f 92       	push	r1
    1f56:	0f 92       	push	r0
    1f58:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f5c:	0f 92       	push	r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f64:	0f 92       	push	r0
    1f66:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1f6a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f6e:	0f 92       	push	r0
    1f70:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1f74:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f78:	0f 92       	push	r0
    1f7a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1f7e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f82:	0f 92       	push	r0
    1f84:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    1fa8:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tcf0_ccc_callback>
    1fac:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tcf0_ccc_callback+0x1>
    1fb0:	89 2b       	or	r24, r25
    1fb2:	31 f0       	breq	.+12     	; 0x1fc0 <__vector_112+0x6c>
		tc_tcf0_ccc_callback();
    1fb4:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <tc_tcf0_ccc_callback>
    1fb8:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <tc_tcf0_ccc_callback+0x1>
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	19 95       	eicall
	}
}
    1fc0:	00 00       	nop
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	ff 91       	pop	r31
    1fc8:	ef 91       	pop	r30
    1fca:	bf 91       	pop	r27
    1fcc:	af 91       	pop	r26
    1fce:	9f 91       	pop	r25
    1fd0:	8f 91       	pop	r24
    1fd2:	7f 91       	pop	r23
    1fd4:	6f 91       	pop	r22
    1fd6:	5f 91       	pop	r21
    1fd8:	4f 91       	pop	r20
    1fda:	3f 91       	pop	r19
    1fdc:	2f 91       	pop	r18
    1fde:	0f 90       	pop	r0
    1fe0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1fe4:	0f 90       	pop	r0
    1fe6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1fea:	0f 90       	pop	r0
    1fec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1ff0:	0f 90       	pop	r0
    1ff2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1ff6:	0f 90       	pop	r0
    1ff8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1ffc:	0f 90       	pop	r0
    1ffe:	1f 90       	pop	r1
    2000:	18 95       	reti

00002002 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    2002:	1f 92       	push	r1
    2004:	0f 92       	push	r0
    2006:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    200a:	0f 92       	push	r0
    200c:	11 24       	eor	r1, r1
    200e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2012:	0f 92       	push	r0
    2014:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2018:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    201c:	0f 92       	push	r0
    201e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2022:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2026:	0f 92       	push	r0
    2028:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    202c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2030:	0f 92       	push	r0
    2032:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2036:	2f 93       	push	r18
    2038:	3f 93       	push	r19
    203a:	4f 93       	push	r20
    203c:	5f 93       	push	r21
    203e:	6f 93       	push	r22
    2040:	7f 93       	push	r23
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	ef 93       	push	r30
    204c:	ff 93       	push	r31
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    2056:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcf0_ccd_callback>
    205a:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcf0_ccd_callback+0x1>
    205e:	89 2b       	or	r24, r25
    2060:	31 f0       	breq	.+12     	; 0x206e <__vector_113+0x6c>
		tc_tcf0_ccd_callback();
    2062:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <tc_tcf0_ccd_callback>
    2066:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <tc_tcf0_ccd_callback+0x1>
    206a:	fc 01       	movw	r30, r24
    206c:	19 95       	eicall
	}
}
    206e:	00 00       	nop
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	ff 91       	pop	r31
    2076:	ef 91       	pop	r30
    2078:	bf 91       	pop	r27
    207a:	af 91       	pop	r26
    207c:	9f 91       	pop	r25
    207e:	8f 91       	pop	r24
    2080:	7f 91       	pop	r23
    2082:	6f 91       	pop	r22
    2084:	5f 91       	pop	r21
    2086:	4f 91       	pop	r20
    2088:	3f 91       	pop	r19
    208a:	2f 91       	pop	r18
    208c:	0f 90       	pop	r0
    208e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2092:	0f 90       	pop	r0
    2094:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2098:	0f 90       	pop	r0
    209a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    209e:	0f 90       	pop	r0
    20a0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20a4:	0f 90       	pop	r0
    20a6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20b8:	0f 92       	push	r0
    20ba:	11 24       	eor	r1, r1
    20bc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20c0:	0f 92       	push	r0
    20c2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    20c6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20ca:	0f 92       	push	r0
    20cc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    20d0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20d4:	0f 92       	push	r0
    20d6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    20da:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20de:	0f 92       	push	r0
    20e0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    20e4:	2f 93       	push	r18
    20e6:	3f 93       	push	r19
    20e8:	4f 93       	push	r20
    20ea:	5f 93       	push	r21
    20ec:	6f 93       	push	r22
    20ee:	7f 93       	push	r23
    20f0:	8f 93       	push	r24
    20f2:	9f 93       	push	r25
    20f4:	af 93       	push	r26
    20f6:	bf 93       	push	r27
    20f8:	ef 93       	push	r30
    20fa:	ff 93       	push	r31
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ovf_callback) {
    2104:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcf1_ovf_callback>
    2108:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcf1_ovf_callback+0x1>
    210c:	89 2b       	or	r24, r25
    210e:	31 f0       	breq	.+12     	; 0x211c <__vector_114+0x6c>
		tc_tcf1_ovf_callback();
    2110:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <tc_tcf1_ovf_callback>
    2114:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <tc_tcf1_ovf_callback+0x1>
    2118:	fc 01       	movw	r30, r24
    211a:	19 95       	eicall
	}
}
    211c:	00 00       	nop
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	ff 91       	pop	r31
    2124:	ef 91       	pop	r30
    2126:	bf 91       	pop	r27
    2128:	af 91       	pop	r26
    212a:	9f 91       	pop	r25
    212c:	8f 91       	pop	r24
    212e:	7f 91       	pop	r23
    2130:	6f 91       	pop	r22
    2132:	5f 91       	pop	r21
    2134:	4f 91       	pop	r20
    2136:	3f 91       	pop	r19
    2138:	2f 91       	pop	r18
    213a:	0f 90       	pop	r0
    213c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2140:	0f 90       	pop	r0
    2142:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2146:	0f 90       	pop	r0
    2148:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    214c:	0f 90       	pop	r0
    214e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2152:	0f 90       	pop	r0
    2154:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    215e:	1f 92       	push	r1
    2160:	0f 92       	push	r0
    2162:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2166:	0f 92       	push	r0
    2168:	11 24       	eor	r1, r1
    216a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    216e:	0f 92       	push	r0
    2170:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2174:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2178:	0f 92       	push	r0
    217a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    217e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2182:	0f 92       	push	r0
    2184:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2188:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    218c:	0f 92       	push	r0
    218e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2192:	2f 93       	push	r18
    2194:	3f 93       	push	r19
    2196:	4f 93       	push	r20
    2198:	5f 93       	push	r21
    219a:	6f 93       	push	r22
    219c:	7f 93       	push	r23
    219e:	8f 93       	push	r24
    21a0:	9f 93       	push	r25
    21a2:	af 93       	push	r26
    21a4:	bf 93       	push	r27
    21a6:	ef 93       	push	r30
    21a8:	ff 93       	push	r31
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_err_callback) {
    21b2:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcf1_err_callback>
    21b6:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcf1_err_callback+0x1>
    21ba:	89 2b       	or	r24, r25
    21bc:	31 f0       	breq	.+12     	; 0x21ca <__vector_115+0x6c>
		tc_tcf1_err_callback();
    21be:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tc_tcf1_err_callback>
    21c2:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <tc_tcf1_err_callback+0x1>
    21c6:	fc 01       	movw	r30, r24
    21c8:	19 95       	eicall
	}
}
    21ca:	00 00       	nop
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	ff 91       	pop	r31
    21d2:	ef 91       	pop	r30
    21d4:	bf 91       	pop	r27
    21d6:	af 91       	pop	r26
    21d8:	9f 91       	pop	r25
    21da:	8f 91       	pop	r24
    21dc:	7f 91       	pop	r23
    21de:	6f 91       	pop	r22
    21e0:	5f 91       	pop	r21
    21e2:	4f 91       	pop	r20
    21e4:	3f 91       	pop	r19
    21e6:	2f 91       	pop	r18
    21e8:	0f 90       	pop	r0
    21ea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    21ee:	0f 90       	pop	r0
    21f0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    21f4:	0f 90       	pop	r0
    21f6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    21fa:	0f 90       	pop	r0
    21fc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2200:	0f 90       	pop	r0
    2202:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2206:	0f 90       	pop	r0
    2208:	1f 90       	pop	r1
    220a:	18 95       	reti

0000220c <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    220c:	1f 92       	push	r1
    220e:	0f 92       	push	r0
    2210:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2214:	0f 92       	push	r0
    2216:	11 24       	eor	r1, r1
    2218:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    221c:	0f 92       	push	r0
    221e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2222:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2226:	0f 92       	push	r0
    2228:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    222c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2230:	0f 92       	push	r0
    2232:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2236:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    223a:	0f 92       	push	r0
    223c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2240:	2f 93       	push	r18
    2242:	3f 93       	push	r19
    2244:	4f 93       	push	r20
    2246:	5f 93       	push	r21
    2248:	6f 93       	push	r22
    224a:	7f 93       	push	r23
    224c:	8f 93       	push	r24
    224e:	9f 93       	push	r25
    2250:	af 93       	push	r26
    2252:	bf 93       	push	r27
    2254:	ef 93       	push	r30
    2256:	ff 93       	push	r31
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_cca_callback) {
    2260:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcf1_cca_callback>
    2264:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcf1_cca_callback+0x1>
    2268:	89 2b       	or	r24, r25
    226a:	31 f0       	breq	.+12     	; 0x2278 <__vector_116+0x6c>
		tc_tcf1_cca_callback();
    226c:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tc_tcf1_cca_callback>
    2270:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <tc_tcf1_cca_callback+0x1>
    2274:	fc 01       	movw	r30, r24
    2276:	19 95       	eicall
	}
}
    2278:	00 00       	nop
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	ff 91       	pop	r31
    2280:	ef 91       	pop	r30
    2282:	bf 91       	pop	r27
    2284:	af 91       	pop	r26
    2286:	9f 91       	pop	r25
    2288:	8f 91       	pop	r24
    228a:	7f 91       	pop	r23
    228c:	6f 91       	pop	r22
    228e:	5f 91       	pop	r21
    2290:	4f 91       	pop	r20
    2292:	3f 91       	pop	r19
    2294:	2f 91       	pop	r18
    2296:	0f 90       	pop	r0
    2298:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    229c:	0f 90       	pop	r0
    229e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22a2:	0f 90       	pop	r0
    22a4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22a8:	0f 90       	pop	r0
    22aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22ae:	0f 90       	pop	r0
    22b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	18 95       	reti

000022ba <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    22ba:	1f 92       	push	r1
    22bc:	0f 92       	push	r0
    22be:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22c2:	0f 92       	push	r0
    22c4:	11 24       	eor	r1, r1
    22c6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22ca:	0f 92       	push	r0
    22cc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    22d0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22d4:	0f 92       	push	r0
    22d6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    22da:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22de:	0f 92       	push	r0
    22e0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    22e4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22e8:	0f 92       	push	r0
    22ea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	6f 93       	push	r22
    22f8:	7f 93       	push	r23
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	af 93       	push	r26
    2300:	bf 93       	push	r27
    2302:	ef 93       	push	r30
    2304:	ff 93       	push	r31
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf1_ccb_callback) {
    230e:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcf1_ccb_callback>
    2312:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcf1_ccb_callback+0x1>
    2316:	89 2b       	or	r24, r25
    2318:	31 f0       	breq	.+12     	; 0x2326 <__vector_117+0x6c>
		tc_tcf1_ccb_callback();
    231a:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <tc_tcf1_ccb_callback>
    231e:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <tc_tcf1_ccb_callback+0x1>
    2322:	fc 01       	movw	r30, r24
    2324:	19 95       	eicall
	}
}
    2326:	00 00       	nop
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	ff 91       	pop	r31
    232e:	ef 91       	pop	r30
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    234a:	0f 90       	pop	r0
    234c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2350:	0f 90       	pop	r0
    2352:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2356:	0f 90       	pop	r0
    2358:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    235c:	0f 90       	pop	r0
    235e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2362:	0f 90       	pop	r0
    2364:	1f 90       	pop	r1
    2366:	18 95       	reti

00002368 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	1f 92       	push	r1
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    2372:	8f e3       	ldi	r24, 0x3F	; 63
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	fc 01       	movw	r30, r24
    2378:	80 81       	ld	r24, Z
    237a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    237c:	f8 94       	cli
	return flags;
    237e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2380:	0f 90       	pop	r0
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret

00002388 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	1f 92       	push	r1
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    2394:	8f e3       	ldi	r24, 0x3F	; 63
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	29 81       	ldd	r18, Y+1	; 0x01
    239a:	fc 01       	movw	r30, r24
    239c:	20 83       	st	Z, r18
}
    239e:	00 00       	nop
    23a0:	0f 90       	pop	r0
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    23a8:	1f 92       	push	r1
    23aa:	0f 92       	push	r0
    23ac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    23b0:	0f 92       	push	r0
    23b2:	11 24       	eor	r1, r1
    23b4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    23b8:	0f 92       	push	r0
    23ba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    23be:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    23c2:	0f 92       	push	r0
    23c4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    23c8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23cc:	0f 92       	push	r0
    23ce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    23d2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23d6:	0f 92       	push	r0
    23d8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    23dc:	2f 93       	push	r18
    23de:	3f 93       	push	r19
    23e0:	4f 93       	push	r20
    23e2:	5f 93       	push	r21
    23e4:	6f 93       	push	r22
    23e6:	7f 93       	push	r23
    23e8:	8f 93       	push	r24
    23ea:	9f 93       	push	r25
    23ec:	af 93       	push	r26
    23ee:	bf 93       	push	r27
    23f0:	ef 93       	push	r30
    23f2:	ff 93       	push	r31
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	43 d2       	rcall	.+1158   	; 0x2884 <twim_interrupt_handler>
    23fe:	00 00       	nop
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	ff 91       	pop	r31
    2406:	ef 91       	pop	r30
    2408:	bf 91       	pop	r27
    240a:	af 91       	pop	r26
    240c:	9f 91       	pop	r25
    240e:	8f 91       	pop	r24
    2410:	7f 91       	pop	r23
    2412:	6f 91       	pop	r22
    2414:	5f 91       	pop	r21
    2416:	4f 91       	pop	r20
    2418:	3f 91       	pop	r19
    241a:	2f 91       	pop	r18
    241c:	0f 90       	pop	r0
    241e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2422:	0f 90       	pop	r0
    2424:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2428:	0f 90       	pop	r0
    242a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    242e:	0f 90       	pop	r0
    2430:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2434:	0f 90       	pop	r0
    2436:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    243a:	0f 90       	pop	r0
    243c:	1f 90       	pop	r1
    243e:	18 95       	reti

00002440 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    2440:	1f 92       	push	r1
    2442:	0f 92       	push	r0
    2444:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2448:	0f 92       	push	r0
    244a:	11 24       	eor	r1, r1
    244c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2450:	0f 92       	push	r0
    2452:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2456:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    245a:	0f 92       	push	r0
    245c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2460:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2464:	0f 92       	push	r0
    2466:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    246a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    246e:	0f 92       	push	r0
    2470:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2474:	2f 93       	push	r18
    2476:	3f 93       	push	r19
    2478:	4f 93       	push	r20
    247a:	5f 93       	push	r21
    247c:	6f 93       	push	r22
    247e:	7f 93       	push	r23
    2480:	8f 93       	push	r24
    2482:	9f 93       	push	r25
    2484:	af 93       	push	r26
    2486:	bf 93       	push	r27
    2488:	ef 93       	push	r30
    248a:	ff 93       	push	r31
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	f7 d1       	rcall	.+1006   	; 0x2884 <twim_interrupt_handler>
    2496:	00 00       	nop
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	ff 91       	pop	r31
    249e:	ef 91       	pop	r30
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	0f 90       	pop	r0
    24b6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    24ba:	0f 90       	pop	r0
    24bc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24c0:	0f 90       	pop	r0
    24c2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24c6:	0f 90       	pop	r0
    24c8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24cc:	0f 90       	pop	r0
    24ce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24d2:	0f 90       	pop	r0
    24d4:	1f 90       	pop	r1
    24d6:	18 95       	reti

000024d8 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    24d8:	1f 92       	push	r1
    24da:	0f 92       	push	r0
    24dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24e0:	0f 92       	push	r0
    24e2:	11 24       	eor	r1, r1
    24e4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24e8:	0f 92       	push	r0
    24ea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    24ee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24f2:	0f 92       	push	r0
    24f4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    24f8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    24fc:	0f 92       	push	r0
    24fe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2502:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2506:	0f 92       	push	r0
    2508:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    250c:	2f 93       	push	r18
    250e:	3f 93       	push	r19
    2510:	4f 93       	push	r20
    2512:	5f 93       	push	r21
    2514:	6f 93       	push	r22
    2516:	7f 93       	push	r23
    2518:	8f 93       	push	r24
    251a:	9f 93       	push	r25
    251c:	af 93       	push	r26
    251e:	bf 93       	push	r27
    2520:	ef 93       	push	r30
    2522:	ff 93       	push	r31
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	ab d1       	rcall	.+854    	; 0x2884 <twim_interrupt_handler>
    252e:	00 00       	nop
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	ff 91       	pop	r31
    2536:	ef 91       	pop	r30
    2538:	bf 91       	pop	r27
    253a:	af 91       	pop	r26
    253c:	9f 91       	pop	r25
    253e:	8f 91       	pop	r24
    2540:	7f 91       	pop	r23
    2542:	6f 91       	pop	r22
    2544:	5f 91       	pop	r21
    2546:	4f 91       	pop	r20
    2548:	3f 91       	pop	r19
    254a:	2f 91       	pop	r18
    254c:	0f 90       	pop	r0
    254e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2552:	0f 90       	pop	r0
    2554:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2558:	0f 90       	pop	r0
    255a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    255e:	0f 90       	pop	r0
    2560:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2564:	0f 90       	pop	r0
    2566:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    256a:	0f 90       	pop	r0
    256c:	1f 90       	pop	r1
    256e:	18 95       	reti

00002570 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    2570:	1f 92       	push	r1
    2572:	0f 92       	push	r0
    2574:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2578:	0f 92       	push	r0
    257a:	11 24       	eor	r1, r1
    257c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2580:	0f 92       	push	r0
    2582:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2586:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    258a:	0f 92       	push	r0
    258c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2590:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2594:	0f 92       	push	r0
    2596:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    259a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    259e:	0f 92       	push	r0
    25a0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25a4:	2f 93       	push	r18
    25a6:	3f 93       	push	r19
    25a8:	4f 93       	push	r20
    25aa:	5f 93       	push	r21
    25ac:	6f 93       	push	r22
    25ae:	7f 93       	push	r23
    25b0:	8f 93       	push	r24
    25b2:	9f 93       	push	r25
    25b4:	af 93       	push	r26
    25b6:	bf 93       	push	r27
    25b8:	ef 93       	push	r30
    25ba:	ff 93       	push	r31
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	5f d1       	rcall	.+702    	; 0x2884 <twim_interrupt_handler>
    25c6:	00 00       	nop
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	ff 91       	pop	r31
    25ce:	ef 91       	pop	r30
    25d0:	bf 91       	pop	r27
    25d2:	af 91       	pop	r26
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	7f 91       	pop	r23
    25da:	6f 91       	pop	r22
    25dc:	5f 91       	pop	r21
    25de:	4f 91       	pop	r20
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    25ea:	0f 90       	pop	r0
    25ec:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    25f0:	0f 90       	pop	r0
    25f2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    25f6:	0f 90       	pop	r0
    25f8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    25fc:	0f 90       	pop	r0
    25fe:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <twim_idle>:
 *
 * \retval  true    The bus is currently idle.
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	1f 92       	push	r1
    260e:	1f 92       	push	r1
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	9a 83       	std	Y+2, r25	; 0x02

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	fc 01       	movw	r30, r24
    261e:	84 81       	ldd	r24, Z+4	; 0x04
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	83 70       	andi	r24, 0x03	; 3
    2626:	99 27       	eor	r25, r25
    2628:	21 e0       	ldi	r18, 0x01	; 1
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	09 f0       	breq	.+2      	; 0x2630 <twim_idle+0x28>
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	82 2f       	mov	r24, r18
			== TWI_MASTER_BUSSTATE_IDLE_gc);
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	08 95       	ret

0000263c <twim_acquire>:
 * \param no_wait  Set \c true to return instead of doing busy-wait (spin-lock).
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	1f 92       	push	r1
    2642:	1f 92       	push	r1
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	8a 83       	std	Y+2, r24	; 0x02
	while (transfer.locked) {
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <twim_acquire+0x1a>

		if (no_wait) { return ERR_BUSY; }
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	88 23       	and	r24, r24
    2650:	11 f0       	breq	.+4      	; 0x2656 <twim_acquire+0x1a>
    2652:	86 ef       	ldi	r24, 0xF6	; 246
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <twim_acquire+0x38>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    2656:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <transfer+0x9>
    265a:	88 23       	and	r24, r24
    265c:	b9 f7       	brne	.-18     	; 0x264c <twim_acquire+0x10>

		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();
    265e:	84 de       	rcall	.-760    	; 0x2368 <cpu_irq_save>
    2660:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = true;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
    2668:	80 e8       	ldi	r24, 0x80	; 128
    266a:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>

	cpu_irq_restore (flags);
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	8b de       	rcall	.-746    	; 0x2388 <cpu_irq_restore>

	return STATUS_OK;
    2672:	80 e0       	ldi	r24, 0x00	; 0
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <twim_release>:
 *      - ERR_IO_ERROR to indicate a bus transaction error
 *      - ERR_NO_MEMORY to indicate buffer errors
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 */
static inline status_code_t twim_release(void)
{
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	1f 92       	push	r1
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    2688:	00 00       	nop
    268a:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer+0xa>
    268e:	80 38       	cpi	r24, 0x80	; 128
    2690:	e1 f3       	breq	.-8      	; 0x268a <twim_release+0xc>

	while (! twim_idle(transfer.bus)) { barrier(); }
    2692:	00 c0       	rjmp	.+0      	; 0x2694 <twim_release+0x16>
    2694:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    2698:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    269c:	b5 df       	rcall	.-150    	; 0x2608 <twim_idle>
    269e:	98 2f       	mov	r25, r24
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	89 27       	eor	r24, r25
    26a4:	88 23       	and	r24, r24
    26a6:	b1 f7       	brne	.-20     	; 0x2694 <twim_release+0x16>

	status_code_t const status = transfer.status;
    26a8:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <transfer+0xa>
    26ac:	89 83       	std	Y+1, r24	; 0x01

	transfer.locked = false;
    26ae:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <transfer+0x9>

	return status;
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b4:	0f 90       	pop	r0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	28 97       	sbiw	r28, 0x08	; 8
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    26ca:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    26ce:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    26d6:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <transfer+0x2>
    26da:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <transfer+0x3>
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    26e2:	20 91 be 20 	lds	r18, 0x20BE	; 0x8020be <transfer+0x4>
    26e6:	30 91 bf 20 	lds	r19, 0x20BF	; 0x8020bf <transfer+0x5>
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	fc 01       	movw	r30, r24
    26f0:	84 81       	ldd	r24, Z+4	; 0x04
    26f2:	95 81       	ldd	r25, Z+5	; 0x05
    26f4:	28 17       	cp	r18, r24
    26f6:	39 07       	cpc	r19, r25
    26f8:	e4 f4       	brge	.+56     	; 0x2732 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    2704:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <transfer+0x4>
    2708:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <transfer+0x5>
    270c:	9c 01       	movw	r18, r24
    270e:	2f 5f       	subi	r18, 0xFF	; 255
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	20 93 be 20 	sts	0x20BE, r18	; 0x8020be <transfer+0x4>
    2716:	30 93 bf 20 	sts	0x20BF, r19	; 0x8020bf <transfer+0x5>
    271a:	9c 01       	movw	r18, r24
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	82 0f       	add	r24, r18
    2722:	93 1f       	adc	r25, r19
    2724:	fc 01       	movw	r30, r24
    2726:	20 81       	ld	r18, Z
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	fc 01       	movw	r30, r24
    272e:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    2730:	3f c0       	rjmp	.+126    	; 0x27b0 <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    2732:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <transfer+0x6>
    2736:	30 91 c1 20 	lds	r19, 0x20C1	; 0x8020c1 <transfer+0x7>
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	fc 01       	movw	r30, r24
    2740:	80 85       	ldd	r24, Z+8	; 0x08
    2742:	91 85       	ldd	r25, Z+9	; 0x09
    2744:	28 17       	cp	r18, r24
    2746:	39 07       	cpc	r19, r25
    2748:	60 f5       	brcc	.+88     	; 0x27a2 <twim_write_handler+0xe6>

		if (transfer.read) {
    274a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <transfer+0x8>
    274e:	88 23       	and	r24, r24
    2750:	59 f0       	breq	.+22     	; 0x2768 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	fc 01       	movw	r30, r24
    2758:	86 81       	ldd	r24, Z+6	; 0x06
    275a:	28 2f       	mov	r18, r24
    275c:	21 60       	ori	r18, 0x01	; 1
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	fc 01       	movw	r30, r24
    2764:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    2766:	24 c0       	rjmp	.+72     	; 0x27b0 <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	fc 01       	movw	r30, r24
    276e:	86 81       	ldd	r24, Z+6	; 0x06
    2770:	97 81       	ldd	r25, Z+7	; 0x07
    2772:	8f 83       	std	Y+7, r24	; 0x07
    2774:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    2776:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <transfer+0x6>
    277a:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <transfer+0x7>
    277e:	9c 01       	movw	r18, r24
    2780:	2f 5f       	subi	r18, 0xFF	; 255
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	20 93 c0 20 	sts	0x20C0, r18	; 0x8020c0 <transfer+0x6>
    2788:	30 93 c1 20 	sts	0x20C1, r19	; 0x8020c1 <transfer+0x7>
    278c:	2f 81       	ldd	r18, Y+7	; 0x07
    278e:	38 85       	ldd	r19, Y+8	; 0x08
    2790:	82 0f       	add	r24, r18
    2792:	93 1f       	adc	r25, r19
    2794:	fc 01       	movw	r30, r24
    2796:	20 81       	ld	r18, Z
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	fc 01       	movw	r30, r24
    279e:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    27a0:	07 c0       	rjmp	.+14     	; 0x27b0 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	23 e0       	ldi	r18, 0x03	; 3
    27a8:	fc 01       	movw	r30, r24
    27aa:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    27ac:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <transfer+0xa>
	}
}
    27b0:	00 00       	nop
    27b2:	28 96       	adiw	r28, 0x08	; 8
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <twim_read_handler+0x6>
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <twim_read_handler+0x8>
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    27ca:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    27ce:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    27d6:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <transfer+0x2>
    27da:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <transfer+0x3>
    27de:	8b 83       	std	Y+3, r24	; 0x03
    27e0:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    27e2:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <transfer+0x6>
    27e6:	30 91 c1 20 	lds	r19, 0x20C1	; 0x8020c1 <transfer+0x7>
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	fc 01       	movw	r30, r24
    27f0:	80 85       	ldd	r24, Z+8	; 0x08
    27f2:	91 85       	ldd	r25, Z+9	; 0x09
    27f4:	28 17       	cp	r18, r24
    27f6:	39 07       	cpc	r19, r25
    27f8:	b0 f5       	brcc	.+108    	; 0x2866 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	fc 01       	movw	r30, r24
    2800:	86 81       	ldd	r24, Z+6	; 0x06
    2802:	97 81       	ldd	r25, Z+7	; 0x07
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    2808:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <transfer+0x6>
    280c:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <transfer+0x7>
    2810:	9c 01       	movw	r18, r24
    2812:	2f 5f       	subi	r18, 0xFF	; 255
    2814:	3f 4f       	sbci	r19, 0xFF	; 255
    2816:	20 93 c0 20 	sts	0x20C0, r18	; 0x8020c0 <transfer+0x6>
    281a:	30 93 c1 20 	sts	0x20C1, r19	; 0x8020c1 <transfer+0x7>
    281e:	2d 81       	ldd	r18, Y+5	; 0x05
    2820:	3e 81       	ldd	r19, Y+6	; 0x06
    2822:	82 0f       	add	r24, r18
    2824:	93 1f       	adc	r25, r19
    2826:	29 81       	ldd	r18, Y+1	; 0x01
    2828:	3a 81       	ldd	r19, Y+2	; 0x02
    282a:	f9 01       	movw	r30, r18
    282c:	27 81       	ldd	r18, Z+7	; 0x07
    282e:	fc 01       	movw	r30, r24
    2830:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    2832:	20 91 c0 20 	lds	r18, 0x20C0	; 0x8020c0 <transfer+0x6>
    2836:	30 91 c1 20 	lds	r19, 0x20C1	; 0x8020c1 <transfer+0x7>
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	fc 01       	movw	r30, r24
    2840:	80 85       	ldd	r24, Z+8	; 0x08
    2842:	91 85       	ldd	r25, Z+9	; 0x09
    2844:	28 17       	cp	r18, r24
    2846:	39 07       	cpc	r19, r25
    2848:	30 f4       	brcc	.+12     	; 0x2856 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	22 e0       	ldi	r18, 0x02	; 2
    2850:	fc 01       	movw	r30, r24
    2852:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    2854:	10 c0       	rjmp	.+32     	; 0x2876 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	27 e0       	ldi	r18, 0x07	; 7
    285c:	fc 01       	movw	r30, r24
    285e:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    2860:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    2864:	08 c0       	rjmp	.+16     	; 0x2876 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	23 e0       	ldi	r18, 0x03	; 3
    286c:	fc 01       	movw	r30, r24
    286e:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    2870:	89 ef       	ldi	r24, 0xF9	; 249
    2872:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>
	}
}
    2876:	00 00       	nop
    2878:	26 96       	adiw	r28, 0x06	; 6
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	08 95       	ret

00002884 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	1f 92       	push	r1
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    288e:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    2892:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    2896:	fc 01       	movw	r30, r24
    2898:	84 81       	ldd	r24, Z+4	; 0x04
    289a:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	88 70       	andi	r24, 0x08	; 8
    28a4:	99 27       	eor	r25, r25
    28a6:	89 2b       	or	r24, r25
    28a8:	99 f0       	breq	.+38     	; 0x28d0 <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    28aa:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    28ae:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    28b2:	29 81       	ldd	r18, Y+1	; 0x01
    28b4:	28 60       	ori	r18, 0x08	; 8
    28b6:	fc 01       	movw	r30, r24
    28b8:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    28ba:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    28be:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    28c2:	23 e0       	ldi	r18, 0x03	; 3
    28c4:	fc 01       	movw	r30, r24
    28c6:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    28c8:	86 ef       	ldi	r24, 0xF6	; 246
    28ca:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    28ce:	2a c0       	rjmp	.+84     	; 0x2924 <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	84 70       	andi	r24, 0x04	; 4
    28d8:	99 27       	eor	r25, r25
    28da:	89 2b       	or	r24, r25
    28dc:	39 f4       	brne	.+14     	; 0x28ec <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	80 71       	andi	r24, 0x10	; 16
    28e6:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    28e8:	89 2b       	or	r24, r25
    28ea:	59 f0       	breq	.+22     	; 0x2902 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    28ec:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    28f0:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    28f4:	23 e0       	ldi	r18, 0x03	; 3
    28f6:	fc 01       	movw	r30, r24
    28f8:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    28fa:	8f ef       	ldi	r24, 0xFF	; 255
    28fc:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    2900:	11 c0       	rjmp	.+34     	; 0x2924 <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	80 74       	andi	r24, 0x40	; 64
    290a:	99 27       	eor	r25, r25
    290c:	89 2b       	or	r24, r25
    290e:	11 f0       	breq	.+4      	; 0x2914 <twim_interrupt_handler+0x90>

		twim_write_handler();
    2910:	d5 de       	rcall	.-598    	; 0x26bc <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	88 23       	and	r24, r24

		twim_read_handler();
    2918:	14 f4       	brge	.+4      	; 0x291e <twim_interrupt_handler+0x9a>
    291a:	51 df       	rcall	.-350    	; 0x27be <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    291e:	8b ef       	ldi	r24, 0xFB	; 251
    2920:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <transfer+0xa>
	}
}
    2924:	00 00       	nop
    2926:	0f 90       	pop	r0
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	08 95       	ret

0000292e <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	25 97       	sbiw	r28, 0x05	; 5
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	8a 83       	std	Y+2, r24	; 0x02
    293e:	9b 83       	std	Y+3, r25	; 0x03
    2940:	6c 83       	std	Y+4, r22	; 0x04
    2942:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    2944:	88 eb       	ldi	r24, 0xB8	; 184
    2946:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    2948:	8c 81       	ldd	r24, Y+4	; 0x04
    294a:	9d 81       	ldd	r25, Y+5	; 0x05
    294c:	fc 01       	movw	r30, r24
    294e:	84 81       	ldd	r24, Z+4	; 0x04
    2950:	95 81       	ldd	r25, Z+5	; 0x05
    2952:	a6 81       	ldd	r26, Z+6	; 0x06
    2954:	b7 81       	ldd	r27, Z+7	; 0x07
    2956:	28 2f       	mov	r18, r24
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	9b 81       	ldd	r25, Y+3	; 0x03
    295c:	fc 01       	movw	r30, r24
    295e:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	29 81       	ldd	r18, Y+1	; 0x01
    2966:	fc 01       	movw	r30, r24
    2968:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	9b 81       	ldd	r25, Y+3	; 0x03
    296e:	21 e0       	ldi	r18, 0x01	; 1
    2970:	fc 01       	movw	r30, r24
    2972:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    2974:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <transfer+0x9>
	transfer.status    = STATUS_OK;
    2978:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <transfer+0xa>

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    297c:	80 ea       	ldi	r24, 0xA0	; 160
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	20 ea       	ldi	r18, 0xA0	; 160
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	f9 01       	movw	r30, r18
    2986:	22 81       	ldd	r18, Z+2	; 0x02
    2988:	22 60       	ori	r18, 0x02	; 2
    298a:	fc 01       	movw	r30, r24
    298c:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    298e:	78 94       	sei

	return STATUS_OK;
    2990:	80 e0       	ldi	r24, 0x00	; 0
}
    2992:	25 96       	adiw	r28, 0x05	; 5
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	08 95       	ret

0000299e <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	27 97       	sbiw	r28, 0x07	; 7
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	8b 83       	std	Y+3, r24	; 0x03
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	6d 83       	std	Y+5, r22	; 0x05
    29b2:	7e 83       	std	Y+6, r23	; 0x06
    29b4:	4f 83       	std	Y+7, r20	; 0x07
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	89 2b       	or	r24, r25
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <twi_master_transfer+0x28>
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	89 2b       	or	r24, r25
    29c4:	11 f4       	brne	.+4      	; 0x29ca <twi_master_transfer+0x2c>
		return ERR_INVALID_ARG;
    29c6:	88 ef       	ldi	r24, 0xF8	; 248
    29c8:	49 c0       	rjmp	.+146    	; 0x2a5c <twi_master_transfer+0xbe>
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	fc 01       	movw	r30, r24
    29d0:	82 85       	ldd	r24, Z+10	; 0x0a
    29d2:	34 de       	rcall	.-920    	; 0x263c <twim_acquire>
    29d4:	89 83       	std	Y+1, r24	; 0x01

	if (STATUS_OK == status) {
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	88 23       	and	r24, r24
    29da:	09 f0       	breq	.+2      	; 0x29de <twi_master_transfer+0x40>
    29dc:	3e c0       	rjmp	.+124    	; 0x2a5a <twi_master_transfer+0xbc>
		transfer.bus         = (TWI_t *) twi;
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <transfer>
    29e6:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <transfer+0x2>
    29f2:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <transfer+0x3>
		transfer.addr_count  = 0;
    29f6:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <transfer+0x4>
    29fa:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <transfer+0x5>
		transfer.data_count  = 0;
    29fe:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <transfer+0x6>
    2a02:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <transfer+0x7>
		transfer.read        = read;
    2a06:	8f 81       	ldd	r24, Y+7	; 0x07
    2a08:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	fc 01       	movw	r30, r24
    2a12:	80 81       	ld	r24, Z
    2a14:	88 0f       	add	r24, r24
    2a16:	8a 83       	std	Y+2, r24	; 0x02

		if (package->addr_length || (false == read)) {
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	84 81       	ldd	r24, Z+4	; 0x04
    2a20:	95 81       	ldd	r25, Z+5	; 0x05
    2a22:	89 2b       	or	r24, r25
    2a24:	29 f4       	brne	.+10     	; 0x2a30 <twi_master_transfer+0x92>
    2a26:	9f 81       	ldd	r25, Y+7	; 0x07
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	89 27       	eor	r24, r25
    2a2c:	88 23       	and	r24, r24
    2a2e:	41 f0       	breq	.+16     	; 0x2a40 <twi_master_transfer+0xa2>
			transfer.bus->MASTER.ADDR = chip;
    2a30:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    2a34:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    2a38:	2a 81       	ldd	r18, Y+2	; 0x02
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	26 83       	std	Z+6, r18	; 0x06
    2a3e:	0b c0       	rjmp	.+22     	; 0x2a56 <twi_master_transfer+0xb8>
		} else if (read) {
    2a40:	8f 81       	ldd	r24, Y+7	; 0x07
    2a42:	88 23       	and	r24, r24
    2a44:	41 f0       	breq	.+16     	; 0x2a56 <twi_master_transfer+0xb8>
			transfer.bus->MASTER.ADDR = chip | 0x01;
    2a46:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <transfer>
    2a4a:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <transfer+0x1>
    2a4e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a50:	21 60       	ori	r18, 0x01	; 1
    2a52:	fc 01       	movw	r30, r24
		}

		status = twim_release();
    2a54:	26 83       	std	Z+6, r18	; 0x06
    2a56:	13 de       	rcall	.-986    	; 0x267e <twim_release>
    2a58:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a5c:	27 96       	adiw	r28, 0x07	; 7
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	1f 92       	push	r1
    2a6e:	1f 92       	push	r1
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	89 83       	std	Y+1, r24	; 0x01
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	84 81       	ldd	r24, Z+4	; 0x04
    2a80:	28 2f       	mov	r18, r24
    2a82:	20 61       	ori	r18, 0x10	; 16
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	fc 01       	movw	r30, r24
    2a8a:	24 83       	std	Z+4, r18	; 0x04
    2a8c:	00 00       	nop
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	08 95       	ret

00002a98 <usart_format_set>:
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	25 97       	sbiw	r28, 0x05	; 5
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	9a 83       	std	Y+2, r25	; 0x02
    2aaa:	6b 83       	std	Y+3, r22	; 0x03
    2aac:	4c 83       	std	Y+4, r20	; 0x04
    2aae:	2d 83       	std	Y+5, r18	; 0x05
    2ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	89 2b       	or	r24, r25
    2ab6:	98 2f       	mov	r25, r24
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	88 23       	and	r24, r24
    2abc:	11 f0       	breq	.+4      	; 0x2ac2 <usart_format_set+0x2a>
    2abe:	88 e0       	ldi	r24, 0x08	; 8
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <usart_format_set+0x2c>
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	89 2b       	or	r24, r25
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	fc 01       	movw	r30, r24
    2ace:	25 83       	std	Z+5, r18	; 0x05
    2ad0:	00 00       	nop
    2ad2:	25 96       	adiw	r28, 0x05	; 5
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	08 95       	ret

00002ade <usart_tx_enable>:
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	1f 92       	push	r1
    2ae4:	1f 92       	push	r1
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
    2af2:	fc 01       	movw	r30, r24
    2af4:	84 81       	ldd	r24, Z+4	; 0x04
    2af6:	28 2f       	mov	r18, r24
    2af8:	28 60       	ori	r18, 0x08	; 8
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	9a 81       	ldd	r25, Y+2	; 0x02
    2afe:	fc 01       	movw	r30, r24
    2b00:	24 83       	std	Z+4, r18	; 0x04
    2b02:	00 00       	nop
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	08 95       	ret

00002b0e <usart_set_mode>:
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <usart_set_mode+0x6>
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	6b 83       	std	Y+3, r22	; 0x03
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	fc 01       	movw	r30, r24
    2b24:	85 81       	ldd	r24, Z+5	; 0x05
    2b26:	98 2f       	mov	r25, r24
    2b28:	9f 73       	andi	r25, 0x3F	; 63
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	89 2b       	or	r24, r25
    2b2e:	28 2f       	mov	r18, r24
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	fc 01       	movw	r30, r24
    2b36:	25 83       	std	Z+5, r18	; 0x05
    2b38:	00 00       	nop
    2b3a:	23 96       	adiw	r28, 0x03	; 3
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	08 95       	ret

00002b46 <usart_data_register_is_empty>:
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	1f 92       	push	r1
    2b4c:	1f 92       	push	r1
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	89 83       	std	Y+1, r24	; 0x01
    2b54:	9a 83       	std	Y+2, r25	; 0x02
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	81 81       	ldd	r24, Z+1	; 0x01
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	80 72       	andi	r24, 0x20	; 32
    2b64:	99 27       	eor	r25, r25
    2b66:	21 e0       	ldi	r18, 0x01	; 1
    2b68:	89 2b       	or	r24, r25
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <usart_data_register_is_empty+0x28>
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	82 2f       	mov	r24, r18
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <usart_rx_is_complete>:
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	1f 92       	push	r1
    2b80:	1f 92       	push	r1
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	9a 83       	std	Y+2, r25	; 0x02
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8e:	fc 01       	movw	r30, r24
    2b90:	81 81       	ldd	r24, Z+1	; 0x01
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	80 78       	andi	r24, 0x80	; 128
    2b98:	99 27       	eor	r25, r25
    2b9a:	21 e0       	ldi	r18, 0x01	; 1
    2b9c:	89 2b       	or	r24, r25
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <usart_rx_is_complete+0x28>
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	82 2f       	mov	r24, r18
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	08 95       	ret

00002bae <sysclk_get_main_hz>:
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	98 e4       	ldi	r25, 0x48	; 72
    2bba:	a8 ee       	ldi	r26, 0xE8	; 232
    2bbc:	b1 e0       	ldi	r27, 0x01	; 1
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <sysclk_get_per4_hz>:
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	1f 92       	push	r1
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	19 82       	std	Y+1, r1	; 0x01
    2bd4:	ec df       	rcall	.-40     	; 0x2bae <sysclk_get_main_hz>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	29 81       	ldd	r18, Y+1	; 0x01
    2bdc:	22 2f       	mov	r18, r18
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	04 c0       	rjmp	.+8      	; 0x2bea <sysclk_get_per4_hz+0x22>
    2be2:	b6 95       	lsr	r27
    2be4:	a7 95       	ror	r26
    2be6:	97 95       	ror	r25
    2be8:	87 95       	ror	r24
    2bea:	2a 95       	dec	r18
    2bec:	d2 f7       	brpl	.-12     	; 0x2be2 <sysclk_get_per4_hz+0x1a>
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0f 90       	pop	r0
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	08 95       	ret

00002bfa <sysclk_get_per2_hz>:
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	e2 df       	rcall	.-60     	; 0x2bc8 <sysclk_get_per4_hz>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	08 95       	ret

00002c12 <sysclk_get_per_hz>:
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	ef df       	rcall	.-34     	; 0x2bfa <sysclk_get_per2_hz>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	bc 01       	movw	r22, r24
    2c22:	cd 01       	movw	r24, r26
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	08 95       	ret

00002c2a <sysclk_enable_peripheral_clock>:
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	1f 92       	push	r1
    2c30:	1f 92       	push	r1
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	89 2b       	or	r24, r25
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <sysclk_enable_peripheral_clock+0x1a>
    2c42:	85 c1       	rjmp	.+778    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	80 3c       	cpi	r24, 0xC0	; 192
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	29 f4       	brne	.+10     	; 0x2c58 <sysclk_enable_peripheral_clock+0x2e>
    2c4e:	60 e1       	ldi	r22, 0x10	; 16
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2c56:	7b c1       	rjmp	.+758    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	80 34       	cpi	r24, 0x40	; 64
    2c5e:	94 40       	sbci	r25, 0x04	; 4
    2c60:	29 f4       	brne	.+10     	; 0x2c6c <sysclk_enable_peripheral_clock+0x42>
    2c62:	68 e0       	ldi	r22, 0x08	; 8
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2c6a:	71 c1       	rjmp	.+738    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c70:	81 15       	cp	r24, r1
    2c72:	94 40       	sbci	r25, 0x04	; 4
    2c74:	29 f4       	brne	.+10     	; 0x2c80 <sysclk_enable_peripheral_clock+0x56>
    2c76:	64 e0       	ldi	r22, 0x04	; 4
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2c7e:	67 c1       	rjmp	.+718    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	80 38       	cpi	r24, 0x80	; 128
    2c86:	91 40       	sbci	r25, 0x01	; 1
    2c88:	29 f4       	brne	.+10     	; 0x2c94 <sysclk_enable_peripheral_clock+0x6a>
    2c8a:	62 e0       	ldi	r22, 0x02	; 2
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2c92:	5d c1       	rjmp	.+698    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	81 15       	cp	r24, r1
    2c9a:	91 40       	sbci	r25, 0x01	; 1
    2c9c:	29 f4       	brne	.+10     	; 0x2ca8 <sysclk_enable_peripheral_clock+0x7e>
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2ca6:	53 c1       	rjmp	.+678    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	80 38       	cpi	r24, 0x80	; 128
    2cae:	93 40       	sbci	r25, 0x03	; 3
    2cb0:	29 f4       	brne	.+10     	; 0x2cbc <sysclk_enable_peripheral_clock+0x92>
    2cb2:	61 e0       	ldi	r22, 0x01	; 1
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2cba:	49 c1       	rjmp	.+658    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	80 39       	cpi	r24, 0x90	; 144
    2cc2:	93 40       	sbci	r25, 0x03	; 3
    2cc4:	29 f4       	brne	.+10     	; 0x2cd0 <sysclk_enable_peripheral_clock+0xa6>
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2cce:	3f c1       	rjmp	.+638    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	81 15       	cp	r24, r1
    2cd6:	92 40       	sbci	r25, 0x02	; 2
    2cd8:	29 f4       	brne	.+10     	; 0x2ce4 <sysclk_enable_peripheral_clock+0xba>
    2cda:	62 e0       	ldi	r22, 0x02	; 2
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2ce2:	35 c1       	rjmp	.+618    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	80 34       	cpi	r24, 0x40	; 64
    2cea:	92 40       	sbci	r25, 0x02	; 2
    2cec:	29 f4       	brne	.+10     	; 0x2cf8 <sysclk_enable_peripheral_clock+0xce>
    2cee:	62 e0       	ldi	r22, 0x02	; 2
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2cf6:	2b c1       	rjmp	.+598    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfc:	81 15       	cp	r24, r1
    2cfe:	93 40       	sbci	r25, 0x03	; 3
    2d00:	29 f4       	brne	.+10     	; 0x2d0c <sysclk_enable_peripheral_clock+0xe2>
    2d02:	64 e0       	ldi	r22, 0x04	; 4
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d0a:	21 c1       	rjmp	.+578    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	80 32       	cpi	r24, 0x20	; 32
    2d12:	93 40       	sbci	r25, 0x03	; 3
    2d14:	29 f4       	brne	.+10     	; 0x2d20 <sysclk_enable_peripheral_clock+0xf6>
    2d16:	64 e0       	ldi	r22, 0x04	; 4
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d1e:	17 c1       	rjmp	.+558    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	81 15       	cp	r24, r1
    2d26:	98 40       	sbci	r25, 0x08	; 8
    2d28:	29 f4       	brne	.+10     	; 0x2d34 <sysclk_enable_peripheral_clock+0x10a>
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d32:	0d c1       	rjmp	.+538    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	81 15       	cp	r24, r1
    2d3a:	99 40       	sbci	r25, 0x09	; 9
    2d3c:	29 f4       	brne	.+10     	; 0x2d48 <sysclk_enable_peripheral_clock+0x11e>
    2d3e:	61 e0       	ldi	r22, 0x01	; 1
    2d40:	84 e0       	ldi	r24, 0x04	; 4
    2d42:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d46:	03 c1       	rjmp	.+518    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	81 15       	cp	r24, r1
    2d4e:	9a 40       	sbci	r25, 0x0A	; 10
    2d50:	29 f4       	brne	.+10     	; 0x2d5c <sysclk_enable_peripheral_clock+0x132>
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	85 e0       	ldi	r24, 0x05	; 5
    2d56:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d5a:	f9 c0       	rjmp	.+498    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	81 15       	cp	r24, r1
    2d62:	9b 40       	sbci	r25, 0x0B	; 11
    2d64:	29 f4       	brne	.+10     	; 0x2d70 <sysclk_enable_peripheral_clock+0x146>
    2d66:	61 e0       	ldi	r22, 0x01	; 1
    2d68:	86 e0       	ldi	r24, 0x06	; 6
    2d6a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d6e:	ef c0       	rjmp	.+478    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	80 34       	cpi	r24, 0x40	; 64
    2d76:	98 40       	sbci	r25, 0x08	; 8
    2d78:	29 f4       	brne	.+10     	; 0x2d84 <sysclk_enable_peripheral_clock+0x15a>
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d82:	e5 c0       	rjmp	.+458    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	9a 81       	ldd	r25, Y+2	; 0x02
    2d88:	80 34       	cpi	r24, 0x40	; 64
    2d8a:	99 40       	sbci	r25, 0x09	; 9
    2d8c:	29 f4       	brne	.+10     	; 0x2d98 <sysclk_enable_peripheral_clock+0x16e>
    2d8e:	62 e0       	ldi	r22, 0x02	; 2
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2d96:	db c0       	rjmp	.+438    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9c:	80 34       	cpi	r24, 0x40	; 64
    2d9e:	9a 40       	sbci	r25, 0x0A	; 10
    2da0:	29 f4       	brne	.+10     	; 0x2dac <sysclk_enable_peripheral_clock+0x182>
    2da2:	62 e0       	ldi	r22, 0x02	; 2
    2da4:	85 e0       	ldi	r24, 0x05	; 5
    2da6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2daa:	d1 c0       	rjmp	.+418    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	80 34       	cpi	r24, 0x40	; 64
    2db2:	9b 40       	sbci	r25, 0x0B	; 11
    2db4:	29 f4       	brne	.+10     	; 0x2dc0 <sysclk_enable_peripheral_clock+0x196>
    2db6:	62 e0       	ldi	r22, 0x02	; 2
    2db8:	86 e0       	ldi	r24, 0x06	; 6
    2dba:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2dbe:	c7 c0       	rjmp	.+398    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	80 39       	cpi	r24, 0x90	; 144
    2dc6:	98 40       	sbci	r25, 0x08	; 8
    2dc8:	29 f4       	brne	.+10     	; 0x2dd4 <sysclk_enable_peripheral_clock+0x1aa>
    2dca:	64 e0       	ldi	r22, 0x04	; 4
    2dcc:	83 e0       	ldi	r24, 0x03	; 3
    2dce:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2dd2:	bd c0       	rjmp	.+378    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	80 39       	cpi	r24, 0x90	; 144
    2dda:	99 40       	sbci	r25, 0x09	; 9
    2ddc:	29 f4       	brne	.+10     	; 0x2de8 <sysclk_enable_peripheral_clock+0x1be>
    2dde:	64 e0       	ldi	r22, 0x04	; 4
    2de0:	84 e0       	ldi	r24, 0x04	; 4
    2de2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2de6:	b3 c0       	rjmp	.+358    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	80 39       	cpi	r24, 0x90	; 144
    2dee:	9a 40       	sbci	r25, 0x0A	; 10
    2df0:	29 f4       	brne	.+10     	; 0x2dfc <sysclk_enable_peripheral_clock+0x1d2>
    2df2:	64 e0       	ldi	r22, 0x04	; 4
    2df4:	85 e0       	ldi	r24, 0x05	; 5
    2df6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2dfa:	a9 c0       	rjmp	.+338    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	80 39       	cpi	r24, 0x90	; 144
    2e02:	9b 40       	sbci	r25, 0x0B	; 11
    2e04:	29 f4       	brne	.+10     	; 0x2e10 <sysclk_enable_peripheral_clock+0x1e6>
    2e06:	64 e0       	ldi	r22, 0x04	; 4
    2e08:	86 e0       	ldi	r24, 0x06	; 6
    2e0a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e0e:	9f c0       	rjmp	.+318    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	9a 81       	ldd	r25, Y+2	; 0x02
    2e14:	80 3c       	cpi	r24, 0xC0	; 192
    2e16:	98 40       	sbci	r25, 0x08	; 8
    2e18:	29 f4       	brne	.+10     	; 0x2e24 <sysclk_enable_peripheral_clock+0x1fa>
    2e1a:	68 e0       	ldi	r22, 0x08	; 8
    2e1c:	83 e0       	ldi	r24, 0x03	; 3
    2e1e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e22:	95 c0       	rjmp	.+298    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	80 3c       	cpi	r24, 0xC0	; 192
    2e2a:	99 40       	sbci	r25, 0x09	; 9
    2e2c:	29 f4       	brne	.+10     	; 0x2e38 <sysclk_enable_peripheral_clock+0x20e>
    2e2e:	68 e0       	ldi	r22, 0x08	; 8
    2e30:	84 e0       	ldi	r24, 0x04	; 4
    2e32:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e36:	8b c0       	rjmp	.+278    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3c:	80 3c       	cpi	r24, 0xC0	; 192
    2e3e:	9a 40       	sbci	r25, 0x0A	; 10
    2e40:	29 f4       	brne	.+10     	; 0x2e4c <sysclk_enable_peripheral_clock+0x222>
    2e42:	68 e0       	ldi	r22, 0x08	; 8
    2e44:	85 e0       	ldi	r24, 0x05	; 5
    2e46:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e4a:	81 c0       	rjmp	.+258    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e50:	80 3c       	cpi	r24, 0xC0	; 192
    2e52:	9b 40       	sbci	r25, 0x0B	; 11
    2e54:	29 f4       	brne	.+10     	; 0x2e60 <sysclk_enable_peripheral_clock+0x236>
    2e56:	68 e0       	ldi	r22, 0x08	; 8
    2e58:	86 e0       	ldi	r24, 0x06	; 6
    2e5a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e5e:	77 c0       	rjmp	.+238    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	80 3a       	cpi	r24, 0xA0	; 160
    2e66:	98 40       	sbci	r25, 0x08	; 8
    2e68:	29 f4       	brne	.+10     	; 0x2e74 <sysclk_enable_peripheral_clock+0x24a>
    2e6a:	60 e1       	ldi	r22, 0x10	; 16
    2e6c:	83 e0       	ldi	r24, 0x03	; 3
    2e6e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e72:	6d c0       	rjmp	.+218    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	80 3a       	cpi	r24, 0xA0	; 160
    2e7a:	99 40       	sbci	r25, 0x09	; 9
    2e7c:	29 f4       	brne	.+10     	; 0x2e88 <sysclk_enable_peripheral_clock+0x25e>
    2e7e:	60 e1       	ldi	r22, 0x10	; 16
    2e80:	84 e0       	ldi	r24, 0x04	; 4
    2e82:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e86:	63 c0       	rjmp	.+198    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8c:	80 3a       	cpi	r24, 0xA0	; 160
    2e8e:	9a 40       	sbci	r25, 0x0A	; 10
    2e90:	29 f4       	brne	.+10     	; 0x2e9c <sysclk_enable_peripheral_clock+0x272>
    2e92:	60 e1       	ldi	r22, 0x10	; 16
    2e94:	85 e0       	ldi	r24, 0x05	; 5
    2e96:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2e9a:	59 c0       	rjmp	.+178    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	80 3a       	cpi	r24, 0xA0	; 160
    2ea2:	9b 40       	sbci	r25, 0x0B	; 11
    2ea4:	29 f4       	brne	.+10     	; 0x2eb0 <sysclk_enable_peripheral_clock+0x286>
    2ea6:	60 e1       	ldi	r22, 0x10	; 16
    2ea8:	86 e0       	ldi	r24, 0x06	; 6
    2eaa:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2eae:	4f c0       	rjmp	.+158    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb4:	80 3b       	cpi	r24, 0xB0	; 176
    2eb6:	98 40       	sbci	r25, 0x08	; 8
    2eb8:	29 f4       	brne	.+10     	; 0x2ec4 <sysclk_enable_peripheral_clock+0x29a>
    2eba:	60 e2       	ldi	r22, 0x20	; 32
    2ebc:	83 e0       	ldi	r24, 0x03	; 3
    2ebe:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2ec2:	45 c0       	rjmp	.+138    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	80 3b       	cpi	r24, 0xB0	; 176
    2eca:	99 40       	sbci	r25, 0x09	; 9
    2ecc:	29 f4       	brne	.+10     	; 0x2ed8 <sysclk_enable_peripheral_clock+0x2ae>
    2ece:	60 e2       	ldi	r22, 0x20	; 32
    2ed0:	84 e0       	ldi	r24, 0x04	; 4
    2ed2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2ed6:	3b c0       	rjmp	.+118    	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	80 3b       	cpi	r24, 0xB0	; 176
    2ede:	9a 40       	sbci	r25, 0x0A	; 10
    2ee0:	29 f4       	brne	.+10     	; 0x2eec <sysclk_enable_peripheral_clock+0x2c2>
    2ee2:	60 e2       	ldi	r22, 0x20	; 32
    2ee4:	85 e0       	ldi	r24, 0x05	; 5
    2ee6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2eea:	31 c0       	rjmp	.+98     	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef0:	80 3b       	cpi	r24, 0xB0	; 176
    2ef2:	9b 40       	sbci	r25, 0x0B	; 11
    2ef4:	29 f4       	brne	.+10     	; 0x2f00 <sysclk_enable_peripheral_clock+0x2d6>
    2ef6:	60 e2       	ldi	r22, 0x20	; 32
    2ef8:	86 e0       	ldi	r24, 0x06	; 6
    2efa:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2efe:	27 c0       	rjmp	.+78     	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	80 38       	cpi	r24, 0x80	; 128
    2f06:	94 40       	sbci	r25, 0x04	; 4
    2f08:	29 f4       	brne	.+10     	; 0x2f14 <sysclk_enable_peripheral_clock+0x2ea>
    2f0a:	60 e4       	ldi	r22, 0x40	; 64
    2f0c:	83 e0       	ldi	r24, 0x03	; 3
    2f0e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2f12:	1d c0       	rjmp	.+58     	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	80 39       	cpi	r24, 0x90	; 144
    2f1a:	94 40       	sbci	r25, 0x04	; 4
    2f1c:	29 f4       	brne	.+10     	; 0x2f28 <sysclk_enable_peripheral_clock+0x2fe>
    2f1e:	60 e4       	ldi	r22, 0x40	; 64
    2f20:	84 e0       	ldi	r24, 0x04	; 4
    2f22:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2f26:	13 c0       	rjmp	.+38     	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	80 3a       	cpi	r24, 0xA0	; 160
    2f2e:	94 40       	sbci	r25, 0x04	; 4
    2f30:	29 f4       	brne	.+10     	; 0x2f3c <sysclk_enable_peripheral_clock+0x312>
    2f32:	60 e4       	ldi	r22, 0x40	; 64
    2f34:	85 e0       	ldi	r24, 0x05	; 5
    2f36:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2f3a:	09 c0       	rjmp	.+18     	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	80 3b       	cpi	r24, 0xB0	; 176
    2f42:	94 40       	sbci	r25, 0x04	; 4
    2f44:	21 f4       	brne	.+8      	; 0x2f4e <sysclk_enable_peripheral_clock+0x324>
    2f46:	60 e4       	ldi	r22, 0x40	; 64
    2f48:	86 e0       	ldi	r24, 0x06	; 6
    2f4a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    2f4e:	00 00       	nop
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	08 95       	ret

00002f5a <usart_init_rs232>:
    2f5a:	0f 93       	push	r16
    2f5c:	1f 93       	push	r17
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	25 97       	sbiw	r28, 0x05	; 5
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	8a 83       	std	Y+2, r24	; 0x02
    2f6e:	9b 83       	std	Y+3, r25	; 0x03
    2f70:	6c 83       	std	Y+4, r22	; 0x04
    2f72:	7d 83       	std	Y+5, r23	; 0x05
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	58 de       	rcall	.-848    	; 0x2c2a <sysclk_enable_peripheral_clock>
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	c6 dd       	rcall	.-1140   	; 0x2b0e <usart_set_mode>
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	9d 81       	ldd	r25, Y+5	; 0x05
    2f86:	fc 01       	movw	r30, r24
    2f88:	26 81       	ldd	r18, Z+6	; 0x06
    2f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8e:	fc 01       	movw	r30, r24
    2f90:	45 81       	ldd	r20, Z+5	; 0x05
    2f92:	8c 81       	ldd	r24, Y+4	; 0x04
    2f94:	9d 81       	ldd	r25, Y+5	; 0x05
    2f96:	fc 01       	movw	r30, r24
    2f98:	34 81       	ldd	r19, Z+4	; 0x04
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	63 2f       	mov	r22, r19
    2fa0:	7b dd       	rcall	.-1290   	; 0x2a98 <usart_format_set>
    2fa2:	37 de       	rcall	.-914    	; 0x2c12 <sysclk_get_per_hz>
    2fa4:	9b 01       	movw	r18, r22
    2fa6:	ac 01       	movw	r20, r24
    2fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2faa:	9d 81       	ldd	r25, Y+5	; 0x05
    2fac:	fc 01       	movw	r30, r24
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	a2 81       	ldd	r26, Z+2	; 0x02
    2fb4:	b3 81       	ldd	r27, Z+3	; 0x03
    2fb6:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb8:	fb 81       	ldd	r31, Y+3	; 0x03
    2fba:	89 01       	movw	r16, r18
    2fbc:	9a 01       	movw	r18, r20
    2fbe:	ac 01       	movw	r20, r24
    2fc0:	bd 01       	movw	r22, r26
    2fc2:	cf 01       	movw	r24, r30
    2fc4:	48 d0       	rcall	.+144    	; 0x3056 <usart_set_baudrate>
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	9b 81       	ldd	r25, Y+3	; 0x03
    2fcc:	88 dd       	rcall	.-1264   	; 0x2ade <usart_tx_enable>
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd2:	4a dd       	rcall	.-1388   	; 0x2a68 <usart_rx_enable>
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	25 96       	adiw	r28, 0x05	; 5
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	1f 91       	pop	r17
    2fe2:	0f 91       	pop	r16
    2fe4:	08 95       	ret

00002fe6 <usart_putchar>:
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <usart_putchar+0x6>
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	6b 83       	std	Y+3, r22	; 0x03
    2ff6:	00 00       	nop
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	a4 dd       	rcall	.-1208   	; 0x2b46 <usart_data_register_is_empty>
    2ffe:	98 2f       	mov	r25, r24
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	89 27       	eor	r24, r25
    3004:	88 23       	and	r24, r24
    3006:	c1 f7       	brne	.-16     	; 0x2ff8 <usart_putchar+0x12>
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	2b 81       	ldd	r18, Y+3	; 0x03
    300e:	fc 01       	movw	r30, r24
    3010:	20 83       	st	Z, r18
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	23 96       	adiw	r28, 0x03	; 3
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <usart_getchar>:
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	1f 92       	push	r1
    3028:	1f 92       	push	r1
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	00 00       	nop
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	a0 dd       	rcall	.-1216   	; 0x2b7a <usart_rx_is_complete>
    303a:	98 2f       	mov	r25, r24
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	89 27       	eor	r24, r25
    3040:	88 23       	and	r24, r24
    3042:	c1 f7       	brne	.-16     	; 0x3034 <usart_getchar+0x12>
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	fc 01       	movw	r30, r24
    304a:	80 81       	ld	r24, Z
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	08 95       	ret

00003056 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	6f 97       	sbiw	r28, 0x1f	; 31
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	8e 8b       	std	Y+22, r24	; 0x16
    306e:	9f 8b       	std	Y+23, r25	; 0x17
    3070:	48 8f       	std	Y+24, r20	; 0x18
    3072:	59 8f       	std	Y+25, r21	; 0x19
    3074:	6a 8f       	std	Y+26, r22	; 0x1a
    3076:	7b 8f       	std	Y+27, r23	; 0x1b
    3078:	0c 8f       	std	Y+28, r16	; 0x1c
    307a:	1d 8f       	std	Y+29, r17	; 0x1d
    307c:	2e 8f       	std	Y+30, r18	; 0x1e
    307e:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3080:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3082:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3084:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3086:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3088:	68 94       	set
    308a:	12 f8       	bld	r1, 2
    308c:	b6 95       	lsr	r27
    308e:	a7 95       	ror	r26
    3090:	97 95       	ror	r25
    3092:	87 95       	ror	r24
    3094:	16 94       	lsr	r1
    3096:	d1 f7       	brne	.-12     	; 0x308c <usart_set_baudrate+0x36>
    3098:	8e 87       	std	Y+14, r24	; 0x0e
    309a:	9f 87       	std	Y+15, r25	; 0x0f
    309c:	a8 8b       	std	Y+16, r26	; 0x10
    309e:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    30a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30a4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    30a6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    30a8:	07 2e       	mov	r0, r23
    30aa:	76 e1       	ldi	r23, 0x16	; 22
    30ac:	b6 95       	lsr	r27
    30ae:	a7 95       	ror	r26
    30b0:	97 95       	ror	r25
    30b2:	87 95       	ror	r24
    30b4:	7a 95       	dec	r23
    30b6:	d1 f7       	brne	.-12     	; 0x30ac <usart_set_baudrate+0x56>
    30b8:	70 2d       	mov	r23, r0
    30ba:	8a 87       	std	Y+10, r24	; 0x0a
    30bc:	9b 87       	std	Y+11, r25	; 0x0b
    30be:	ac 87       	std	Y+12, r26	; 0x0c
    30c0:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    30c2:	8e 89       	ldd	r24, Y+22	; 0x16
    30c4:	9f 89       	ldd	r25, Y+23	; 0x17
    30c6:	fc 01       	movw	r30, r24
    30c8:	84 81       	ldd	r24, Z+4	; 0x04
    30ca:	88 2f       	mov	r24, r24
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	84 70       	andi	r24, 0x04	; 4
    30d0:	99 27       	eor	r25, r25
    30d2:	89 2b       	or	r24, r25
    30d4:	c1 f4       	brne	.+48     	; 0x3106 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    30d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    30d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    30da:	a8 89       	ldd	r26, Y+16	; 0x10
    30dc:	b9 89       	ldd	r27, Y+17	; 0x11
    30de:	b6 95       	lsr	r27
    30e0:	a7 95       	ror	r26
    30e2:	97 95       	ror	r25
    30e4:	87 95       	ror	r24
    30e6:	8e 87       	std	Y+14, r24	; 0x0e
    30e8:	9f 87       	std	Y+15, r25	; 0x0f
    30ea:	a8 8b       	std	Y+16, r26	; 0x10
    30ec:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    30ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    30f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    30f2:	ac 85       	ldd	r26, Y+12	; 0x0c
    30f4:	bd 85       	ldd	r27, Y+13	; 0x0d
    30f6:	b6 95       	lsr	r27
    30f8:	a7 95       	ror	r26
    30fa:	97 95       	ror	r25
    30fc:	87 95       	ror	r24
    30fe:	8a 87       	std	Y+10, r24	; 0x0a
    3100:	9b 87       	std	Y+11, r25	; 0x0b
    3102:	ac 87       	std	Y+12, r26	; 0x0c
    3104:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3106:	28 8d       	ldd	r18, Y+24	; 0x18
    3108:	39 8d       	ldd	r19, Y+25	; 0x19
    310a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    310c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    310e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3110:	9f 85       	ldd	r25, Y+15	; 0x0f
    3112:	a8 89       	ldd	r26, Y+16	; 0x10
    3114:	b9 89       	ldd	r27, Y+17	; 0x11
    3116:	82 17       	cp	r24, r18
    3118:	93 07       	cpc	r25, r19
    311a:	a4 07       	cpc	r26, r20
    311c:	b5 07       	cpc	r27, r21
    311e:	68 f0       	brcs	.+26     	; 0x313a <usart_set_baudrate+0xe4>
    3120:	28 8d       	ldd	r18, Y+24	; 0x18
    3122:	39 8d       	ldd	r19, Y+25	; 0x19
    3124:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3126:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3128:	8a 85       	ldd	r24, Y+10	; 0x0a
    312a:	9b 85       	ldd	r25, Y+11	; 0x0b
    312c:	ac 85       	ldd	r26, Y+12	; 0x0c
    312e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3130:	28 17       	cp	r18, r24
    3132:	39 07       	cpc	r19, r25
    3134:	4a 07       	cpc	r20, r26
    3136:	5b 07       	cpc	r21, r27
    3138:	10 f4       	brcc	.+4      	; 0x313e <usart_set_baudrate+0xe8>
		return false;
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	40 c1       	rjmp	.+640    	; 0x33be <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    313e:	8e 89       	ldd	r24, Y+22	; 0x16
    3140:	9f 89       	ldd	r25, Y+23	; 0x17
    3142:	fc 01       	movw	r30, r24
    3144:	84 81       	ldd	r24, Z+4	; 0x04
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	84 70       	andi	r24, 0x04	; 4
    314c:	99 27       	eor	r25, r25
    314e:	89 2b       	or	r24, r25
    3150:	61 f4       	brne	.+24     	; 0x316a <usart_set_baudrate+0x114>
		baud *= 2;
    3152:	88 8d       	ldd	r24, Y+24	; 0x18
    3154:	99 8d       	ldd	r25, Y+25	; 0x19
    3156:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3158:	bb 8d       	ldd	r27, Y+27	; 0x1b
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	aa 1f       	adc	r26, r26
    3160:	bb 1f       	adc	r27, r27
    3162:	88 8f       	std	Y+24, r24	; 0x18
    3164:	99 8f       	std	Y+25, r25	; 0x19
    3166:	aa 8f       	std	Y+26, r26	; 0x1a
    3168:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    316a:	8f ef       	ldi	r24, 0xFF	; 255
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a0 e0       	ldi	r26, 0x00	; 0
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	8e 83       	std	Y+6, r24	; 0x06
    3174:	9f 83       	std	Y+7, r25	; 0x07
    3176:	a8 87       	std	Y+8, r26	; 0x08
    3178:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    317a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    317c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    317e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3180:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3182:	28 8d       	ldd	r18, Y+24	; 0x18
    3184:	39 8d       	ldd	r19, Y+25	; 0x19
    3186:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3188:	5b 8d       	ldd	r21, Y+27	; 0x1b
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    3192:	da 01       	movw	r26, r20
    3194:	c9 01       	movw	r24, r18
    3196:	8a 8b       	std	Y+18, r24	; 0x12
    3198:	9b 8b       	std	Y+19, r25	; 0x13
    319a:	ac 8b       	std	Y+20, r26	; 0x14
    319c:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    319e:	89 ef       	ldi	r24, 0xF9	; 249
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	28 c0       	rjmp	.+80     	; 0x31f4 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    31a4:	2a 89       	ldd	r18, Y+18	; 0x12
    31a6:	3b 89       	ldd	r19, Y+19	; 0x13
    31a8:	4c 89       	ldd	r20, Y+20	; 0x14
    31aa:	5d 89       	ldd	r21, Y+21	; 0x15
    31ac:	8e 81       	ldd	r24, Y+6	; 0x06
    31ae:	9f 81       	ldd	r25, Y+7	; 0x07
    31b0:	a8 85       	ldd	r26, Y+8	; 0x08
    31b2:	b9 85       	ldd	r27, Y+9	; 0x09
    31b4:	28 17       	cp	r18, r24
    31b6:	39 07       	cpc	r19, r25
    31b8:	4a 07       	cpc	r20, r26
    31ba:	5b 07       	cpc	r21, r27
    31bc:	f8 f0       	brcs	.+62     	; 0x31fc <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    31be:	8e 81       	ldd	r24, Y+6	; 0x06
    31c0:	9f 81       	ldd	r25, Y+7	; 0x07
    31c2:	a8 85       	ldd	r26, Y+8	; 0x08
    31c4:	b9 85       	ldd	r27, Y+9	; 0x09
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	aa 1f       	adc	r26, r26
    31cc:	bb 1f       	adc	r27, r27
    31ce:	8e 83       	std	Y+6, r24	; 0x06
    31d0:	9f 83       	std	Y+7, r25	; 0x07
    31d2:	a8 87       	std	Y+8, r26	; 0x08
    31d4:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	8d 3f       	cpi	r24, 0xFD	; 253
    31da:	4c f4       	brge	.+18     	; 0x31ee <usart_set_baudrate+0x198>
			limit |= 1;
    31dc:	8e 81       	ldd	r24, Y+6	; 0x06
    31de:	9f 81       	ldd	r25, Y+7	; 0x07
    31e0:	a8 85       	ldd	r26, Y+8	; 0x08
    31e2:	b9 85       	ldd	r27, Y+9	; 0x09
    31e4:	81 60       	ori	r24, 0x01	; 1
    31e6:	8e 83       	std	Y+6, r24	; 0x06
    31e8:	9f 83       	std	Y+7, r25	; 0x07
    31ea:	a8 87       	std	Y+8, r26	; 0x08
    31ec:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	8f 5f       	subi	r24, 0xFF	; 255
    31f2:	89 83       	std	Y+1, r24	; 0x01
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	87 30       	cpi	r24, 0x07	; 7
    31f8:	ac f2       	brlt	.-86     	; 0x31a4 <usart_set_baudrate+0x14e>
    31fa:	01 c0       	rjmp	.+2      	; 0x31fe <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    31fc:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	88 23       	and	r24, r24
    3202:	0c f0       	brlt	.+2      	; 0x3206 <usart_set_baudrate+0x1b0>
    3204:	8a c0       	rjmp	.+276    	; 0x331a <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3206:	88 8d       	ldd	r24, Y+24	; 0x18
    3208:	99 8d       	ldd	r25, Y+25	; 0x19
    320a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    320c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	aa 1f       	adc	r26, r26
    3214:	bb 1f       	adc	r27, r27
    3216:	88 0f       	add	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	aa 1f       	adc	r26, r26
    321c:	bb 1f       	adc	r27, r27
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	aa 1f       	adc	r26, r26
    3224:	bb 1f       	adc	r27, r27
    3226:	9c 01       	movw	r18, r24
    3228:	ad 01       	movw	r20, r26
    322a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    322c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    322e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3230:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3232:	82 1b       	sub	r24, r18
    3234:	93 0b       	sbc	r25, r19
    3236:	a4 0b       	sbc	r26, r20
    3238:	b5 0b       	sbc	r27, r21
    323a:	8c 8f       	std	Y+28, r24	; 0x1c
    323c:	9d 8f       	std	Y+29, r25	; 0x1d
    323e:	ae 8f       	std	Y+30, r26	; 0x1e
    3240:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	8e 3f       	cpi	r24, 0xFE	; 254
    3246:	94 f5       	brge	.+100    	; 0x32ac <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	08 2e       	mov	r0, r24
    324c:	00 0c       	add	r0, r0
    324e:	99 0b       	sbc	r25, r25
    3250:	2d ef       	ldi	r18, 0xFD	; 253
    3252:	3f ef       	ldi	r19, 0xFF	; 255
    3254:	28 1b       	sub	r18, r24
    3256:	39 0b       	sbc	r19, r25
    3258:	8c 8d       	ldd	r24, Y+28	; 0x1c
    325a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    325c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    325e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3260:	7c 01       	movw	r14, r24
    3262:	8d 01       	movw	r16, r26
    3264:	04 c0       	rjmp	.+8      	; 0x326e <usart_set_baudrate+0x218>
    3266:	ee 0c       	add	r14, r14
    3268:	ff 1c       	adc	r15, r15
    326a:	00 1f       	adc	r16, r16
    326c:	11 1f       	adc	r17, r17
    326e:	2a 95       	dec	r18
    3270:	d2 f7       	brpl	.-12     	; 0x3266 <usart_set_baudrate+0x210>
    3272:	a8 01       	movw	r20, r16
    3274:	97 01       	movw	r18, r14
    3276:	88 8d       	ldd	r24, Y+24	; 0x18
    3278:	99 8d       	ldd	r25, Y+25	; 0x19
    327a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    327c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    327e:	b6 95       	lsr	r27
    3280:	a7 95       	ror	r26
    3282:	97 95       	ror	r25
    3284:	87 95       	ror	r24
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	a4 1f       	adc	r26, r20
    328c:	b5 1f       	adc	r27, r21
    328e:	28 8d       	ldd	r18, Y+24	; 0x18
    3290:	39 8d       	ldd	r19, Y+25	; 0x19
    3292:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3294:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3296:	bc 01       	movw	r22, r24
    3298:	cd 01       	movw	r24, r26
    329a:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    329e:	da 01       	movw	r26, r20
    32a0:	c9 01       	movw	r24, r18
    32a2:	8a 83       	std	Y+2, r24	; 0x02
    32a4:	9b 83       	std	Y+3, r25	; 0x03
    32a6:	ac 83       	std	Y+4, r26	; 0x04
    32a8:	bd 83       	std	Y+5, r27	; 0x05
    32aa:	70 c0       	rjmp	.+224    	; 0x338c <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	08 2e       	mov	r0, r24
    32b0:	00 0c       	add	r0, r0
    32b2:	99 0b       	sbc	r25, r25
    32b4:	9c 01       	movw	r18, r24
    32b6:	2d 5f       	subi	r18, 0xFD	; 253
    32b8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ba:	88 8d       	ldd	r24, Y+24	; 0x18
    32bc:	99 8d       	ldd	r25, Y+25	; 0x19
    32be:	aa 8d       	ldd	r26, Y+26	; 0x1a
    32c0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    32c2:	04 c0       	rjmp	.+8      	; 0x32cc <usart_set_baudrate+0x276>
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	aa 1f       	adc	r26, r26
    32ca:	bb 1f       	adc	r27, r27
    32cc:	2a 95       	dec	r18
    32ce:	d2 f7       	brpl	.-12     	; 0x32c4 <usart_set_baudrate+0x26e>
    32d0:	88 8f       	std	Y+24, r24	; 0x18
    32d2:	99 8f       	std	Y+25, r25	; 0x19
    32d4:	aa 8f       	std	Y+26, r26	; 0x1a
    32d6:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    32d8:	88 8d       	ldd	r24, Y+24	; 0x18
    32da:	99 8d       	ldd	r25, Y+25	; 0x19
    32dc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    32de:	bb 8d       	ldd	r27, Y+27	; 0x1b
    32e0:	9c 01       	movw	r18, r24
    32e2:	ad 01       	movw	r20, r26
    32e4:	56 95       	lsr	r21
    32e6:	47 95       	ror	r20
    32e8:	37 95       	ror	r19
    32ea:	27 95       	ror	r18
    32ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32f0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    32f2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    32f4:	82 0f       	add	r24, r18
    32f6:	93 1f       	adc	r25, r19
    32f8:	a4 1f       	adc	r26, r20
    32fa:	b5 1f       	adc	r27, r21
    32fc:	28 8d       	ldd	r18, Y+24	; 0x18
    32fe:	39 8d       	ldd	r19, Y+25	; 0x19
    3300:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3302:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3304:	bc 01       	movw	r22, r24
    3306:	cd 01       	movw	r24, r26
    3308:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    330c:	da 01       	movw	r26, r20
    330e:	c9 01       	movw	r24, r18
    3310:	8a 83       	std	Y+2, r24	; 0x02
    3312:	9b 83       	std	Y+3, r25	; 0x03
    3314:	ac 83       	std	Y+4, r26	; 0x04
    3316:	bd 83       	std	Y+5, r27	; 0x05
    3318:	39 c0       	rjmp	.+114    	; 0x338c <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	08 2e       	mov	r0, r24
    331e:	00 0c       	add	r0, r0
    3320:	99 0b       	sbc	r25, r25
    3322:	9c 01       	movw	r18, r24
    3324:	2d 5f       	subi	r18, 0xFD	; 253
    3326:	3f 4f       	sbci	r19, 0xFF	; 255
    3328:	88 8d       	ldd	r24, Y+24	; 0x18
    332a:	99 8d       	ldd	r25, Y+25	; 0x19
    332c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    332e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3330:	04 c0       	rjmp	.+8      	; 0x333a <usart_set_baudrate+0x2e4>
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	aa 1f       	adc	r26, r26
    3338:	bb 1f       	adc	r27, r27
    333a:	2a 95       	dec	r18
    333c:	d2 f7       	brpl	.-12     	; 0x3332 <usart_set_baudrate+0x2dc>
    333e:	88 8f       	std	Y+24, r24	; 0x18
    3340:	99 8f       	std	Y+25, r25	; 0x19
    3342:	aa 8f       	std	Y+26, r26	; 0x1a
    3344:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    3346:	88 8d       	ldd	r24, Y+24	; 0x18
    3348:	99 8d       	ldd	r25, Y+25	; 0x19
    334a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    334c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    334e:	9c 01       	movw	r18, r24
    3350:	ad 01       	movw	r20, r26
    3352:	56 95       	lsr	r21
    3354:	47 95       	ror	r20
    3356:	37 95       	ror	r19
    3358:	27 95       	ror	r18
    335a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    335c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    335e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3360:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3362:	82 0f       	add	r24, r18
    3364:	93 1f       	adc	r25, r19
    3366:	a4 1f       	adc	r26, r20
    3368:	b5 1f       	adc	r27, r21
    336a:	28 8d       	ldd	r18, Y+24	; 0x18
    336c:	39 8d       	ldd	r19, Y+25	; 0x19
    336e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3370:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3372:	bc 01       	movw	r22, r24
    3374:	cd 01       	movw	r24, r26
    3376:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    337a:	da 01       	movw	r26, r20
    337c:	c9 01       	movw	r24, r18
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	a1 09       	sbc	r26, r1
    3382:	b1 09       	sbc	r27, r1
    3384:	8a 83       	std	Y+2, r24	; 0x02
    3386:	9b 83       	std	Y+3, r25	; 0x03
    3388:	ac 83       	std	Y+4, r26	; 0x04
    338a:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	ac 81       	ldd	r26, Y+4	; 0x04
    3392:	bd 81       	ldd	r27, Y+5	; 0x05
    3394:	89 2f       	mov	r24, r25
    3396:	9a 2f       	mov	r25, r26
    3398:	ab 2f       	mov	r26, r27
    339a:	bb 27       	eor	r27, r27
    339c:	98 2f       	mov	r25, r24
    339e:	9f 70       	andi	r25, 0x0F	; 15
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	82 95       	swap	r24
    33a4:	80 7f       	andi	r24, 0xF0	; 240
    33a6:	29 2f       	mov	r18, r25
    33a8:	28 2b       	or	r18, r24
    33aa:	8e 89       	ldd	r24, Y+22	; 0x16
    33ac:	9f 89       	ldd	r25, Y+23	; 0x17
    33ae:	fc 01       	movw	r30, r24
    33b0:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    33b2:	2a 81       	ldd	r18, Y+2	; 0x02
    33b4:	8e 89       	ldd	r24, Y+22	; 0x16
    33b6:	9f 89       	ldd	r25, Y+23	; 0x17
    33b8:	fc 01       	movw	r30, r24
    33ba:	26 83       	std	Z+6, r18	; 0x06

	return true;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
}
    33be:	6f 96       	adiw	r28, 0x1f	; 31
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	08 95       	ret

000033d2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <ioport_configure_port_pin+0x6>
    33d8:	00 d0       	rcall	.+0      	; 0x33da <ioport_configure_port_pin+0x8>
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	8a 83       	std	Y+2, r24	; 0x02
    33e0:	9b 83       	std	Y+3, r25	; 0x03
    33e2:	6c 83       	std	Y+4, r22	; 0x04
    33e4:	4d 83       	std	Y+5, r20	; 0x05
    33e6:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    33e8:	19 82       	std	Y+1, r1	; 0x01
    33ea:	20 c0       	rjmp	.+64     	; 0x342c <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    33ec:	8c 81       	ldd	r24, Y+4	; 0x04
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	29 81       	ldd	r18, Y+1	; 0x01
    33f4:	22 2f       	mov	r18, r18
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <ioport_configure_port_pin+0x2c>
    33fa:	95 95       	asr	r25
    33fc:	87 95       	ror	r24
    33fe:	2a 95       	dec	r18
    3400:	e2 f7       	brpl	.-8      	; 0x33fa <ioport_configure_port_pin+0x28>
    3402:	81 70       	andi	r24, 0x01	; 1
    3404:	99 27       	eor	r25, r25
    3406:	89 2b       	or	r24, r25
    3408:	71 f0       	breq	.+28     	; 0x3426 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	40 96       	adiw	r24, 0x10	; 16
    3412:	2a 81       	ldd	r18, Y+2	; 0x02
    3414:	3b 81       	ldd	r19, Y+3	; 0x03
    3416:	82 0f       	add	r24, r18
    3418:	93 1f       	adc	r25, r19
    341a:	2d 81       	ldd	r18, Y+5	; 0x05
    341c:	3e 81       	ldd	r19, Y+6	; 0x06
    341e:	23 2f       	mov	r18, r19
    3420:	33 27       	eor	r19, r19
    3422:	fc 01       	movw	r30, r24
    3424:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	89 83       	std	Y+1, r24	; 0x01
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	88 30       	cpi	r24, 0x08	; 8
    3430:	e8 f2       	brcs	.-70     	; 0x33ec <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	81 70       	andi	r24, 0x01	; 1
    3438:	99 27       	eor	r25, r25
    343a:	89 2b       	or	r24, r25
    343c:	d1 f0       	breq	.+52     	; 0x3472 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    343e:	8d 81       	ldd	r24, Y+5	; 0x05
    3440:	9e 81       	ldd	r25, Y+6	; 0x06
    3442:	82 70       	andi	r24, 0x02	; 2
    3444:	99 27       	eor	r25, r25
    3446:	89 2b       	or	r24, r25
    3448:	39 f0       	breq	.+14     	; 0x3458 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	9b 81       	ldd	r25, Y+3	; 0x03
    344e:	05 96       	adiw	r24, 0x05	; 5
    3450:	2c 81       	ldd	r18, Y+4	; 0x04
    3452:	fc 01       	movw	r30, r24
    3454:	20 83       	st	Z, r18
    3456:	06 c0       	rjmp	.+12     	; 0x3464 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	9b 81       	ldd	r25, Y+3	; 0x03
    345c:	06 96       	adiw	r24, 0x06	; 6
    345e:	2c 81       	ldd	r18, Y+4	; 0x04
    3460:	fc 01       	movw	r30, r24
    3462:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	9b 81       	ldd	r25, Y+3	; 0x03
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	2c 81       	ldd	r18, Y+4	; 0x04
    346c:	fc 01       	movw	r30, r24
    346e:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    3470:	06 c0       	rjmp	.+12     	; 0x347e <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	02 96       	adiw	r24, 0x02	; 2
    3478:	2c 81       	ldd	r18, Y+4	; 0x04
    347a:	fc 01       	movw	r30, r24
    347c:	20 83       	st	Z, r18
	}
}
    347e:	00 00       	nop
    3480:	26 96       	adiw	r28, 0x06	; 6
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	df 91       	pop	r29
    3488:	cf 91       	pop	r28
    348a:	08 95       	ret

0000348c <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	27 97       	sbiw	r28, 0x07	; 7
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	8d 83       	std	Y+5, r24	; 0x05
    349c:	6e 83       	std	Y+6, r22	; 0x06
    349e:	7f 83       	std	Y+7, r23	; 0x07
    34a0:	8d 81       	ldd	r24, Y+5	; 0x05
    34a2:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9c 01       	movw	r18, r24
    34ac:	27 70       	andi	r18, 0x07	; 7
    34ae:	33 27       	eor	r19, r19
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <ioport_configure_pin+0x2e>
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	2a 95       	dec	r18
    34bc:	e2 f7       	brpl	.-8      	; 0x34b6 <ioport_configure_pin+0x2a>
    34be:	68 2f       	mov	r22, r24
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	8a 83       	std	Y+2, r24	; 0x02
    34c4:	8a 81       	ldd	r24, Y+2	; 0x02
    34c6:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	86 95       	lsr	r24
    34cc:	86 95       	lsr	r24
    34ce:	86 95       	lsr	r24
    34d0:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    34d2:	8c 81       	ldd	r24, Y+4	; 0x04
    34d4:	88 2f       	mov	r24, r24
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	82 95       	swap	r24
    34de:	92 95       	swap	r25
    34e0:	90 7f       	andi	r25, 0xF0	; 240
    34e2:	98 27       	eor	r25, r24
    34e4:	80 7f       	andi	r24, 0xF0	; 240
    34e6:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    34e8:	9a 5f       	subi	r25, 0xFA	; 250
    34ea:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    34ec:	8e 81       	ldd	r24, Y+6	; 0x06
    34ee:	9f 81       	ldd	r25, Y+7	; 0x07
    34f0:	ac 01       	movw	r20, r24
    34f2:	c9 01       	movw	r24, r18
    34f4:	6e df       	rcall	.-292    	; 0x33d2 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    34f6:	00 00       	nop
    34f8:	27 96       	adiw	r28, 0x07	; 7
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	08 95       	ret

00003504 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    350c:	63 e0       	ldi	r22, 0x03	; 3
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	83 e7       	ldi	r24, 0x73	; 115
    3512:	bc df       	rcall	.-136    	; 0x348c <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	78 e1       	ldi	r23, 0x18	; 24
    3518:	82 e7       	ldi	r24, 0x72	; 114
    351a:	b8 df       	rcall	.-144    	; 0x348c <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    351c:	00 00       	nop
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	08 95       	ret

00003524 <sysclk_get_main_hz>:
	twi_master_setup(&MYI2C,&opt);//sets up master
}
uint8_t readBusad()
{
	return busAddress;
}
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	98 e4       	ldi	r25, 0x48	; 72
    3530:	a8 ee       	ldi	r26, 0xE8	; 232
    3532:	b1 e0       	ldi	r27, 0x01	; 1
    3534:	bc 01       	movw	r22, r24
    3536:	cd 01       	movw	r24, r26
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	08 95       	ret

0000353e <sysclk_get_per4_hz>:
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	1f 92       	push	r1
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	19 82       	std	Y+1, r1	; 0x01
    354a:	ec df       	rcall	.-40     	; 0x3524 <sysclk_get_main_hz>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	29 81       	ldd	r18, Y+1	; 0x01
    3552:	22 2f       	mov	r18, r18
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	04 c0       	rjmp	.+8      	; 0x3560 <sysclk_get_per4_hz+0x22>
    3558:	b6 95       	lsr	r27
    355a:	a7 95       	ror	r26
    355c:	97 95       	ror	r25
    355e:	87 95       	ror	r24
    3560:	2a 95       	dec	r18
    3562:	d2 f7       	brpl	.-12     	; 0x3558 <sysclk_get_per4_hz+0x1a>
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0f 90       	pop	r0
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	08 95       	ret

00003570 <sysclk_get_per2_hz>:
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	e2 df       	rcall	.-60     	; 0x353e <sysclk_get_per4_hz>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	08 95       	ret

00003588 <sysclk_get_per_hz>:
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	ef df       	rcall	.-34     	; 0x3570 <sysclk_get_per2_hz>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	df 91       	pop	r29
    359c:	cf 91       	pop	r28
    359e:	08 95       	ret

000035a0 <sysclk_get_cpu_hz>:
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	cd b7       	in	r28, 0x3d	; 61
    35a6:	de b7       	in	r29, 0x3e	; 62
    35a8:	ef df       	rcall	.-34     	; 0x3588 <sysclk_get_per_hz>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	08 95       	ret

000035b8 <sysclk_enable_peripheral_clock>:
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	1f 92       	push	r1
    35be:	1f 92       	push	r1
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	89 83       	std	Y+1, r24	; 0x01
    35c6:	9a 83       	std	Y+2, r25	; 0x02
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	9a 81       	ldd	r25, Y+2	; 0x02
    35cc:	89 2b       	or	r24, r25
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <sysclk_enable_peripheral_clock+0x1a>
    35d0:	85 c1       	rjmp	.+778    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	80 3c       	cpi	r24, 0xC0	; 192
    35d8:	91 05       	cpc	r25, r1
    35da:	29 f4       	brne	.+10     	; 0x35e6 <sysclk_enable_peripheral_clock+0x2e>
    35dc:	60 e1       	ldi	r22, 0x10	; 16
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    35e4:	7b c1       	rjmp	.+758    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ea:	80 34       	cpi	r24, 0x40	; 64
    35ec:	94 40       	sbci	r25, 0x04	; 4
    35ee:	29 f4       	brne	.+10     	; 0x35fa <sysclk_enable_peripheral_clock+0x42>
    35f0:	68 e0       	ldi	r22, 0x08	; 8
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    35f8:	71 c1       	rjmp	.+738    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	9a 81       	ldd	r25, Y+2	; 0x02
    35fe:	81 15       	cp	r24, r1
    3600:	94 40       	sbci	r25, 0x04	; 4
    3602:	29 f4       	brne	.+10     	; 0x360e <sysclk_enable_peripheral_clock+0x56>
    3604:	64 e0       	ldi	r22, 0x04	; 4
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    360c:	67 c1       	rjmp	.+718    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	80 38       	cpi	r24, 0x80	; 128
    3614:	91 40       	sbci	r25, 0x01	; 1
    3616:	29 f4       	brne	.+10     	; 0x3622 <sysclk_enable_peripheral_clock+0x6a>
    3618:	62 e0       	ldi	r22, 0x02	; 2
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3620:	5d c1       	rjmp	.+698    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	9a 81       	ldd	r25, Y+2	; 0x02
    3626:	81 15       	cp	r24, r1
    3628:	91 40       	sbci	r25, 0x01	; 1
    362a:	29 f4       	brne	.+10     	; 0x3636 <sysclk_enable_peripheral_clock+0x7e>
    362c:	61 e0       	ldi	r22, 0x01	; 1
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3634:	53 c1       	rjmp	.+678    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	80 38       	cpi	r24, 0x80	; 128
    363c:	93 40       	sbci	r25, 0x03	; 3
    363e:	29 f4       	brne	.+10     	; 0x364a <sysclk_enable_peripheral_clock+0x92>
    3640:	61 e0       	ldi	r22, 0x01	; 1
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3648:	49 c1       	rjmp	.+658    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	80 39       	cpi	r24, 0x90	; 144
    3650:	93 40       	sbci	r25, 0x03	; 3
    3652:	29 f4       	brne	.+10     	; 0x365e <sysclk_enable_peripheral_clock+0xa6>
    3654:	61 e0       	ldi	r22, 0x01	; 1
    3656:	82 e0       	ldi	r24, 0x02	; 2
    3658:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    365c:	3f c1       	rjmp	.+638    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	81 15       	cp	r24, r1
    3664:	92 40       	sbci	r25, 0x02	; 2
    3666:	29 f4       	brne	.+10     	; 0x3672 <sysclk_enable_peripheral_clock+0xba>
    3668:	62 e0       	ldi	r22, 0x02	; 2
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3670:	35 c1       	rjmp	.+618    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	80 34       	cpi	r24, 0x40	; 64
    3678:	92 40       	sbci	r25, 0x02	; 2
    367a:	29 f4       	brne	.+10     	; 0x3686 <sysclk_enable_peripheral_clock+0xce>
    367c:	62 e0       	ldi	r22, 0x02	; 2
    367e:	82 e0       	ldi	r24, 0x02	; 2
    3680:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3684:	2b c1       	rjmp	.+598    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	9a 81       	ldd	r25, Y+2	; 0x02
    368a:	81 15       	cp	r24, r1
    368c:	93 40       	sbci	r25, 0x03	; 3
    368e:	29 f4       	brne	.+10     	; 0x369a <sysclk_enable_peripheral_clock+0xe2>
    3690:	64 e0       	ldi	r22, 0x04	; 4
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3698:	21 c1       	rjmp	.+578    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	80 32       	cpi	r24, 0x20	; 32
    36a0:	93 40       	sbci	r25, 0x03	; 3
    36a2:	29 f4       	brne	.+10     	; 0x36ae <sysclk_enable_peripheral_clock+0xf6>
    36a4:	64 e0       	ldi	r22, 0x04	; 4
    36a6:	82 e0       	ldi	r24, 0x02	; 2
    36a8:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    36ac:	17 c1       	rjmp	.+558    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	9a 81       	ldd	r25, Y+2	; 0x02
    36b2:	81 15       	cp	r24, r1
    36b4:	98 40       	sbci	r25, 0x08	; 8
    36b6:	29 f4       	brne	.+10     	; 0x36c2 <sysclk_enable_peripheral_clock+0x10a>
    36b8:	61 e0       	ldi	r22, 0x01	; 1
    36ba:	83 e0       	ldi	r24, 0x03	; 3
    36bc:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    36c0:	0d c1       	rjmp	.+538    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	9a 81       	ldd	r25, Y+2	; 0x02
    36c6:	81 15       	cp	r24, r1
    36c8:	99 40       	sbci	r25, 0x09	; 9
    36ca:	29 f4       	brne	.+10     	; 0x36d6 <sysclk_enable_peripheral_clock+0x11e>
    36cc:	61 e0       	ldi	r22, 0x01	; 1
    36ce:	84 e0       	ldi	r24, 0x04	; 4
    36d0:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    36d4:	03 c1       	rjmp	.+518    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	81 15       	cp	r24, r1
    36dc:	9a 40       	sbci	r25, 0x0A	; 10
    36de:	29 f4       	brne	.+10     	; 0x36ea <sysclk_enable_peripheral_clock+0x132>
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	85 e0       	ldi	r24, 0x05	; 5
    36e4:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    36e8:	f9 c0       	rjmp	.+498    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	81 15       	cp	r24, r1
    36f0:	9b 40       	sbci	r25, 0x0B	; 11
    36f2:	29 f4       	brne	.+10     	; 0x36fe <sysclk_enable_peripheral_clock+0x146>
    36f4:	61 e0       	ldi	r22, 0x01	; 1
    36f6:	86 e0       	ldi	r24, 0x06	; 6
    36f8:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    36fc:	ef c0       	rjmp	.+478    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	80 34       	cpi	r24, 0x40	; 64
    3704:	98 40       	sbci	r25, 0x08	; 8
    3706:	29 f4       	brne	.+10     	; 0x3712 <sysclk_enable_peripheral_clock+0x15a>
    3708:	62 e0       	ldi	r22, 0x02	; 2
    370a:	83 e0       	ldi	r24, 0x03	; 3
    370c:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3710:	e5 c0       	rjmp	.+458    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	9a 81       	ldd	r25, Y+2	; 0x02
    3716:	80 34       	cpi	r24, 0x40	; 64
    3718:	99 40       	sbci	r25, 0x09	; 9
    371a:	29 f4       	brne	.+10     	; 0x3726 <sysclk_enable_peripheral_clock+0x16e>
    371c:	62 e0       	ldi	r22, 0x02	; 2
    371e:	84 e0       	ldi	r24, 0x04	; 4
    3720:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3724:	db c0       	rjmp	.+438    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	80 34       	cpi	r24, 0x40	; 64
    372c:	9a 40       	sbci	r25, 0x0A	; 10
    372e:	29 f4       	brne	.+10     	; 0x373a <sysclk_enable_peripheral_clock+0x182>
    3730:	62 e0       	ldi	r22, 0x02	; 2
    3732:	85 e0       	ldi	r24, 0x05	; 5
    3734:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3738:	d1 c0       	rjmp	.+418    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	9a 81       	ldd	r25, Y+2	; 0x02
    373e:	80 34       	cpi	r24, 0x40	; 64
    3740:	9b 40       	sbci	r25, 0x0B	; 11
    3742:	29 f4       	brne	.+10     	; 0x374e <sysclk_enable_peripheral_clock+0x196>
    3744:	62 e0       	ldi	r22, 0x02	; 2
    3746:	86 e0       	ldi	r24, 0x06	; 6
    3748:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    374c:	c7 c0       	rjmp	.+398    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	9a 81       	ldd	r25, Y+2	; 0x02
    3752:	80 39       	cpi	r24, 0x90	; 144
    3754:	98 40       	sbci	r25, 0x08	; 8
    3756:	29 f4       	brne	.+10     	; 0x3762 <sysclk_enable_peripheral_clock+0x1aa>
    3758:	64 e0       	ldi	r22, 0x04	; 4
    375a:	83 e0       	ldi	r24, 0x03	; 3
    375c:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3760:	bd c0       	rjmp	.+378    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	80 39       	cpi	r24, 0x90	; 144
    3768:	99 40       	sbci	r25, 0x09	; 9
    376a:	29 f4       	brne	.+10     	; 0x3776 <sysclk_enable_peripheral_clock+0x1be>
    376c:	64 e0       	ldi	r22, 0x04	; 4
    376e:	84 e0       	ldi	r24, 0x04	; 4
    3770:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3774:	b3 c0       	rjmp	.+358    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	9a 81       	ldd	r25, Y+2	; 0x02
    377a:	80 39       	cpi	r24, 0x90	; 144
    377c:	9a 40       	sbci	r25, 0x0A	; 10
    377e:	29 f4       	brne	.+10     	; 0x378a <sysclk_enable_peripheral_clock+0x1d2>
    3780:	64 e0       	ldi	r22, 0x04	; 4
    3782:	85 e0       	ldi	r24, 0x05	; 5
    3784:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3788:	a9 c0       	rjmp	.+338    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	9a 81       	ldd	r25, Y+2	; 0x02
    378e:	80 39       	cpi	r24, 0x90	; 144
    3790:	9b 40       	sbci	r25, 0x0B	; 11
    3792:	29 f4       	brne	.+10     	; 0x379e <sysclk_enable_peripheral_clock+0x1e6>
    3794:	64 e0       	ldi	r22, 0x04	; 4
    3796:	86 e0       	ldi	r24, 0x06	; 6
    3798:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    379c:	9f c0       	rjmp	.+318    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	9a 81       	ldd	r25, Y+2	; 0x02
    37a2:	80 3c       	cpi	r24, 0xC0	; 192
    37a4:	98 40       	sbci	r25, 0x08	; 8
    37a6:	29 f4       	brne	.+10     	; 0x37b2 <sysclk_enable_peripheral_clock+0x1fa>
    37a8:	68 e0       	ldi	r22, 0x08	; 8
    37aa:	83 e0       	ldi	r24, 0x03	; 3
    37ac:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    37b0:	95 c0       	rjmp	.+298    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	9a 81       	ldd	r25, Y+2	; 0x02
    37b6:	80 3c       	cpi	r24, 0xC0	; 192
    37b8:	99 40       	sbci	r25, 0x09	; 9
    37ba:	29 f4       	brne	.+10     	; 0x37c6 <sysclk_enable_peripheral_clock+0x20e>
    37bc:	68 e0       	ldi	r22, 0x08	; 8
    37be:	84 e0       	ldi	r24, 0x04	; 4
    37c0:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    37c4:	8b c0       	rjmp	.+278    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	80 3c       	cpi	r24, 0xC0	; 192
    37cc:	9a 40       	sbci	r25, 0x0A	; 10
    37ce:	29 f4       	brne	.+10     	; 0x37da <sysclk_enable_peripheral_clock+0x222>
    37d0:	68 e0       	ldi	r22, 0x08	; 8
    37d2:	85 e0       	ldi	r24, 0x05	; 5
    37d4:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    37d8:	81 c0       	rjmp	.+258    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	9a 81       	ldd	r25, Y+2	; 0x02
    37de:	80 3c       	cpi	r24, 0xC0	; 192
    37e0:	9b 40       	sbci	r25, 0x0B	; 11
    37e2:	29 f4       	brne	.+10     	; 0x37ee <sysclk_enable_peripheral_clock+0x236>
    37e4:	68 e0       	ldi	r22, 0x08	; 8
    37e6:	86 e0       	ldi	r24, 0x06	; 6
    37e8:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    37ec:	77 c0       	rjmp	.+238    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	9a 81       	ldd	r25, Y+2	; 0x02
    37f2:	80 3a       	cpi	r24, 0xA0	; 160
    37f4:	98 40       	sbci	r25, 0x08	; 8
    37f6:	29 f4       	brne	.+10     	; 0x3802 <sysclk_enable_peripheral_clock+0x24a>
    37f8:	60 e1       	ldi	r22, 0x10	; 16
    37fa:	83 e0       	ldi	r24, 0x03	; 3
    37fc:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3800:	6d c0       	rjmp	.+218    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	9a 81       	ldd	r25, Y+2	; 0x02
    3806:	80 3a       	cpi	r24, 0xA0	; 160
    3808:	99 40       	sbci	r25, 0x09	; 9
    380a:	29 f4       	brne	.+10     	; 0x3816 <sysclk_enable_peripheral_clock+0x25e>
    380c:	60 e1       	ldi	r22, 0x10	; 16
    380e:	84 e0       	ldi	r24, 0x04	; 4
    3810:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3814:	63 c0       	rjmp	.+198    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	9a 81       	ldd	r25, Y+2	; 0x02
    381a:	80 3a       	cpi	r24, 0xA0	; 160
    381c:	9a 40       	sbci	r25, 0x0A	; 10
    381e:	29 f4       	brne	.+10     	; 0x382a <sysclk_enable_peripheral_clock+0x272>
    3820:	60 e1       	ldi	r22, 0x10	; 16
    3822:	85 e0       	ldi	r24, 0x05	; 5
    3824:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3828:	59 c0       	rjmp	.+178    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	80 3a       	cpi	r24, 0xA0	; 160
    3830:	9b 40       	sbci	r25, 0x0B	; 11
    3832:	29 f4       	brne	.+10     	; 0x383e <sysclk_enable_peripheral_clock+0x286>
    3834:	60 e1       	ldi	r22, 0x10	; 16
    3836:	86 e0       	ldi	r24, 0x06	; 6
    3838:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    383c:	4f c0       	rjmp	.+158    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	9a 81       	ldd	r25, Y+2	; 0x02
    3842:	80 3b       	cpi	r24, 0xB0	; 176
    3844:	98 40       	sbci	r25, 0x08	; 8
    3846:	29 f4       	brne	.+10     	; 0x3852 <sysclk_enable_peripheral_clock+0x29a>
    3848:	60 e2       	ldi	r22, 0x20	; 32
    384a:	83 e0       	ldi	r24, 0x03	; 3
    384c:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3850:	45 c0       	rjmp	.+138    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	9a 81       	ldd	r25, Y+2	; 0x02
    3856:	80 3b       	cpi	r24, 0xB0	; 176
    3858:	99 40       	sbci	r25, 0x09	; 9
    385a:	29 f4       	brne	.+10     	; 0x3866 <sysclk_enable_peripheral_clock+0x2ae>
    385c:	60 e2       	ldi	r22, 0x20	; 32
    385e:	84 e0       	ldi	r24, 0x04	; 4
    3860:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3864:	3b c0       	rjmp	.+118    	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	9a 81       	ldd	r25, Y+2	; 0x02
    386a:	80 3b       	cpi	r24, 0xB0	; 176
    386c:	9a 40       	sbci	r25, 0x0A	; 10
    386e:	29 f4       	brne	.+10     	; 0x387a <sysclk_enable_peripheral_clock+0x2c2>
    3870:	60 e2       	ldi	r22, 0x20	; 32
    3872:	85 e0       	ldi	r24, 0x05	; 5
    3874:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3878:	31 c0       	rjmp	.+98     	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	9a 81       	ldd	r25, Y+2	; 0x02
    387e:	80 3b       	cpi	r24, 0xB0	; 176
    3880:	9b 40       	sbci	r25, 0x0B	; 11
    3882:	29 f4       	brne	.+10     	; 0x388e <sysclk_enable_peripheral_clock+0x2d6>
    3884:	60 e2       	ldi	r22, 0x20	; 32
    3886:	86 e0       	ldi	r24, 0x06	; 6
    3888:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    388c:	27 c0       	rjmp	.+78     	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	9a 81       	ldd	r25, Y+2	; 0x02
    3892:	80 38       	cpi	r24, 0x80	; 128
    3894:	94 40       	sbci	r25, 0x04	; 4
    3896:	29 f4       	brne	.+10     	; 0x38a2 <sysclk_enable_peripheral_clock+0x2ea>
    3898:	60 e4       	ldi	r22, 0x40	; 64
    389a:	83 e0       	ldi	r24, 0x03	; 3
    389c:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    38a0:	1d c0       	rjmp	.+58     	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	9a 81       	ldd	r25, Y+2	; 0x02
    38a6:	80 39       	cpi	r24, 0x90	; 144
    38a8:	94 40       	sbci	r25, 0x04	; 4
    38aa:	29 f4       	brne	.+10     	; 0x38b6 <sysclk_enable_peripheral_clock+0x2fe>
    38ac:	60 e4       	ldi	r22, 0x40	; 64
    38ae:	84 e0       	ldi	r24, 0x04	; 4
    38b0:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    38b4:	13 c0       	rjmp	.+38     	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ba:	80 3a       	cpi	r24, 0xA0	; 160
    38bc:	94 40       	sbci	r25, 0x04	; 4
    38be:	29 f4       	brne	.+10     	; 0x38ca <sysclk_enable_peripheral_clock+0x312>
    38c0:	60 e4       	ldi	r22, 0x40	; 64
    38c2:	85 e0       	ldi	r24, 0x05	; 5
    38c4:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    38c8:	09 c0       	rjmp	.+18     	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	9a 81       	ldd	r25, Y+2	; 0x02
    38ce:	80 3b       	cpi	r24, 0xB0	; 176
    38d0:	94 40       	sbci	r25, 0x04	; 4
    38d2:	21 f4       	brne	.+8      	; 0x38dc <sysclk_enable_peripheral_clock+0x324>
    38d4:	60 e4       	ldi	r22, 0x40	; 64
    38d6:	86 e0       	ldi	r24, 0x06	; 6
    38d8:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    38dc:	00 00       	nop
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	08 95       	ret

000038e8 <twi_master_read>:
    38e8:	cf 93       	push	r28
    38ea:	df 93       	push	r29
    38ec:	00 d0       	rcall	.+0      	; 0x38ee <twi_master_read+0x6>
    38ee:	1f 92       	push	r1
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	89 83       	std	Y+1, r24	; 0x01
    38f6:	9a 83       	std	Y+2, r25	; 0x02
    38f8:	6b 83       	std	Y+3, r22	; 0x03
    38fa:	7c 83       	std	Y+4, r23	; 0x04
    38fc:	2b 81       	ldd	r18, Y+3	; 0x03
    38fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	9a 81       	ldd	r25, Y+2	; 0x02
    3904:	41 e0       	ldi	r20, 0x01	; 1
    3906:	b9 01       	movw	r22, r18
    3908:	4a d8       	rcall	.-3948   	; 0x299e <twi_master_transfer>
    390a:	24 96       	adiw	r28, 0x04	; 4
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	df 91       	pop	r29
    3912:	cf 91       	pop	r28
    3914:	08 95       	ret

00003916 <twi_master_write>:
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	00 d0       	rcall	.+0      	; 0x391c <twi_master_write+0x6>
    391c:	1f 92       	push	r1
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	89 83       	std	Y+1, r24	; 0x01
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	6b 83       	std	Y+3, r22	; 0x03
    3928:	7c 83       	std	Y+4, r23	; 0x04
    392a:	2b 81       	ldd	r18, Y+3	; 0x03
    392c:	3c 81       	ldd	r19, Y+4	; 0x04
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	9a 81       	ldd	r25, Y+2	; 0x02
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	b9 01       	movw	r22, r18
    3936:	33 d8       	rcall	.-3994   	; 0x299e <twi_master_transfer>
    3938:	24 96       	adiw	r28, 0x04	; 4
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <twi_master_setup>:
    3944:	ef 92       	push	r14
    3946:	ff 92       	push	r15
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	00 d0       	rcall	.+0      	; 0x3952 <twi_master_setup+0xe>
    3952:	1f 92       	push	r1
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	89 83       	std	Y+1, r24	; 0x01
    395a:	9a 83       	std	Y+2, r25	; 0x02
    395c:	6b 83       	std	Y+3, r22	; 0x03
    395e:	7c 83       	std	Y+4, r23	; 0x04
    3960:	1f de       	rcall	.-962    	; 0x35a0 <sysclk_get_cpu_hz>
    3962:	7b 01       	movw	r14, r22
    3964:	8c 01       	movw	r16, r24
    3966:	8b 81       	ldd	r24, Y+3	; 0x03
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	fc 01       	movw	r30, r24
    396c:	80 81       	ld	r24, Z
    396e:	91 81       	ldd	r25, Z+1	; 0x01
    3970:	a2 81       	ldd	r26, Z+2	; 0x02
    3972:	b3 81       	ldd	r27, Z+3	; 0x03
    3974:	9c 01       	movw	r18, r24
    3976:	ad 01       	movw	r20, r26
    3978:	22 0f       	add	r18, r18
    397a:	33 1f       	adc	r19, r19
    397c:	44 1f       	adc	r20, r20
    397e:	55 1f       	adc	r21, r21
    3980:	c8 01       	movw	r24, r16
    3982:	b7 01       	movw	r22, r14
    3984:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    3988:	da 01       	movw	r26, r20
    398a:	c9 01       	movw	r24, r18
    398c:	05 97       	sbiw	r24, 0x05	; 5
    398e:	a1 09       	sbc	r26, r1
    3990:	b1 09       	sbc	r27, r1
    3992:	2b 81       	ldd	r18, Y+3	; 0x03
    3994:	3c 81       	ldd	r19, Y+4	; 0x04
    3996:	f9 01       	movw	r30, r18
    3998:	84 83       	std	Z+4, r24	; 0x04
    399a:	95 83       	std	Z+5, r25	; 0x05
    399c:	a6 83       	std	Z+6, r26	; 0x06
    399e:	b7 83       	std	Z+7, r27	; 0x07
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
    39a2:	9a 81       	ldd	r25, Y+2	; 0x02
    39a4:	09 de       	rcall	.-1006   	; 0x35b8 <sysclk_enable_peripheral_clock>
    39a6:	2b 81       	ldd	r18, Y+3	; 0x03
    39a8:	3c 81       	ldd	r19, Y+4	; 0x04
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	9a 81       	ldd	r25, Y+2	; 0x02
    39ae:	b9 01       	movw	r22, r18
    39b0:	0e 94 97 14 	call	0x292e	; 0x292e <twi_master_init>
    39b4:	08 2e       	mov	r0, r24
    39b6:	00 0c       	add	r0, r0
    39b8:	99 0b       	sbc	r25, r25
    39ba:	24 96       	adiw	r28, 0x04	; 4
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	1f 91       	pop	r17
    39c6:	0f 91       	pop	r16
    39c8:	ff 90       	pop	r15
    39ca:	ef 90       	pop	r14
    39cc:	08 95       	ret

000039ce <I2CInit>:
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	2e 97       	sbiw	r28, 0x0e	; 14
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	de bf       	out	0x3e, r29	; 62
    39dc:	6a 87       	std	Y+10, r22	; 0x0a
    39de:	7b 87       	std	Y+11, r23	; 0x0b
    39e0:	8c 87       	std	Y+12, r24	; 0x0c
    39e2:	9d 87       	std	Y+13, r25	; 0x0d
    39e4:	4e 87       	std	Y+14, r20	; 0x0e
    39e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    39e8:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <busAddress>
    39ec:	29 e0       	ldi	r18, 0x09	; 9
    39ee:	ce 01       	movw	r24, r28
    39f0:	01 96       	adiw	r24, 0x01	; 1
    39f2:	fc 01       	movw	r30, r24
    39f4:	32 2f       	mov	r19, r18
    39f6:	11 92       	st	Z+, r1
    39f8:	3a 95       	dec	r19
    39fa:	e9 f7       	brne	.-6      	; 0x39f6 <I2CInit+0x28>
    39fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    39fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a00:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a02:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	9a 83       	std	Y+2, r25	; 0x02
    3a08:	ab 83       	std	Y+3, r26	; 0x03
    3a0a:	bc 83       	std	Y+4, r27	; 0x04
    3a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a0e:	89 87       	std	Y+9, r24	; 0x09
    3a10:	ce 01       	movw	r24, r28
    3a12:	01 96       	adiw	r24, 0x01	; 1
    3a14:	bc 01       	movw	r22, r24
    3a16:	80 e8       	ldi	r24, 0x80	; 128
    3a18:	94 e0       	ldi	r25, 0x04	; 4
    3a1a:	94 df       	rcall	.-216    	; 0x3944 <twi_master_setup>
    3a1c:	00 00       	nop
    3a1e:	2e 96       	adiw	r28, 0x0e	; 14
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	de bf       	out	0x3e, r29	; 62
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	08 95       	ret

00003a2a <twi_write>:
// writes to a device using two wire interface. the address is the seven bit identifier for the specific device
//data is an array of data that you wish to transfer. 
void twi_write(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	2f 97       	sbiw	r28, 0x0f	; 15
    3a34:	cd bf       	out	0x3d, r28	; 61
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	8c 87       	std	Y+12, r24	; 0x0c
    3a3a:	9d 87       	std	Y+13, r25	; 0x0d
    3a3c:	6e 87       	std	Y+14, r22	; 0x0e
    3a3e:	4f 87       	std	Y+15, r20	; 0x0f
	twi_package_t packet_write = 
    3a40:	2b e0       	ldi	r18, 0x0B	; 11
    3a42:	ce 01       	movw	r24, r28
    3a44:	01 96       	adiw	r24, 0x01	; 1
    3a46:	fc 01       	movw	r30, r24
    3a48:	32 2f       	mov	r19, r18
    3a4a:	11 92       	st	Z+, r1
    3a4c:	3a 95       	dec	r19
    3a4e:	e9 f7       	brne	.-6      	; 0x3a4a <twi_write+0x20>
    3a50:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a52:	89 83       	std	Y+1, r24	; 0x01
    3a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a56:	8a 83       	std	Y+2, r24	; 0x02
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	8d 83       	std	Y+5, r24	; 0x05
    3a5e:	9e 83       	std	Y+6, r25	; 0x06
    3a60:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a62:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a64:	8f 83       	std	Y+7, r24	; 0x07
    3a66:	98 87       	std	Y+8, r25	; 0x08
    3a68:	82 e0       	ldi	r24, 0x02	; 2
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	89 87       	std	Y+9, r24	; 0x09
    3a6e:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,      // TWI slave bus address
		.buffer       = Data, // transfer data source buffer
		.length       = sizeof(Data)  // transfer data size (bytes)
	};
	while (twi_master_write(&MYI2C, &packet_write) != TWI_SUCCESS) printf("fail");//transfers data and waits until transfer is finished to do anything else
    3a70:	0b c0       	rjmp	.+22     	; 0x3a88 <twi_write+0x5e>
    3a72:	84 e1       	ldi	r24, 0x14	; 20
    3a74:	90 e2       	ldi	r25, 0x20	; 32
    3a76:	89 2f       	mov	r24, r25
    3a78:	8f 93       	push	r24
    3a7a:	84 e1       	ldi	r24, 0x14	; 20
    3a7c:	90 e2       	ldi	r25, 0x20	; 32
    3a7e:	8f 93       	push	r24
    3a80:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <printf>
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	ce 01       	movw	r24, r28
    3a8a:	01 96       	adiw	r24, 0x01	; 1
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	80 e8       	ldi	r24, 0x80	; 128
    3a90:	94 e0       	ldi	r25, 0x04	; 4
    3a92:	41 df       	rcall	.-382    	; 0x3916 <twi_master_write>
    3a94:	88 23       	and	r24, r24
    3a96:	69 f7       	brne	.-38     	; 0x3a72 <twi_write+0x48>
}
    3a98:	00 00       	nop
    3a9a:	2f 96       	adiw	r28, 0x0f	; 15
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	08 95       	ret

00003aa6 <twi_read>:

//reads using two wire interface. address is the 7 bit identifier for each device. Data is the array the data will be stored in.
//returns the status of the transfer
void twi_read(uint8_t * Data,uint8_t address,uint8_t memAddress)
{
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	2f 97       	sbiw	r28, 0x0f	; 15
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	8c 87       	std	Y+12, r24	; 0x0c
    3ab6:	9d 87       	std	Y+13, r25	; 0x0d
    3ab8:	6e 87       	std	Y+14, r22	; 0x0e
    3aba:	4f 87       	std	Y+15, r20	; 0x0f
	twi_package_t packet_read = 
    3abc:	2b e0       	ldi	r18, 0x0B	; 11
    3abe:	ce 01       	movw	r24, r28
    3ac0:	01 96       	adiw	r24, 0x01	; 1
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	32 2f       	mov	r19, r18
    3ac6:	11 92       	st	Z+, r1
    3ac8:	3a 95       	dec	r19
    3aca:	e9 f7       	brne	.-6      	; 0x3ac6 <twi_read+0x20>
    3acc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ace:	89 83       	std	Y+1, r24	; 0x01
    3ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad2:	8a 83       	std	Y+2, r24	; 0x02
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	8d 83       	std	Y+5, r24	; 0x05
    3ada:	9e 83       	std	Y+6, r25	; 0x06
    3adc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ade:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ae0:	8f 83       	std	Y+7, r24	; 0x07
    3ae2:	98 87       	std	Y+8, r25	; 0x08
    3ae4:	82 e0       	ldi	r24, 0x02	; 2
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	89 87       	std	Y+9, r24	; 0x09
    3aea:	9a 87       	std	Y+10, r25	; 0x0a
		.addr_length=sizeof(uint8_t),
		.chip         = address,       // TWI slave bus address
		.buffer       = Data,          // transfer data destination buffer
		.length       = sizeof(Data)        // transfer data size (bytes)
	};
	twi_master_read(&MYI2C, &packet_read); //preform read and return the status of the read
    3aec:	ce 01       	movw	r24, r28
    3aee:	01 96       	adiw	r24, 0x01	; 1
    3af0:	bc 01       	movw	r22, r24
    3af2:	80 e8       	ldi	r24, 0x80	; 128
    3af4:	94 e0       	ldi	r25, 0x04	; 4
    3af6:	f8 de       	rcall	.-528    	; 0x38e8 <twi_master_read>
	//Data = packet_read.buffer;
	//printf("%d",status);
	
}
    3af8:	00 00       	nop
    3afa:	2f 96       	adiw	r28, 0x0f	; 15
    3afc:	cd bf       	out	0x3d, r28	; 61
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	08 95       	ret

00003b06 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device,uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	1f 92       	push	r1
    3b0c:	1f 92       	push	r1
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	89 83       	std	Y+1, r24	; 0x01
    3b14:	9a 83       	std	Y+2, r25	; 0x02
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	89 2b       	or	r24, r25
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <sysclk_enable_peripheral_clock+0x1a>
    3b1e:	85 c1       	rjmp	.+778    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	9a 81       	ldd	r25, Y+2	; 0x02
    3b24:	80 3c       	cpi	r24, 0xC0	; 192
    3b26:	91 05       	cpc	r25, r1
    3b28:	29 f4       	brne	.+10     	; 0x3b34 <sysclk_enable_peripheral_clock+0x2e>
    3b2a:	60 e1       	ldi	r22, 0x10	; 16
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3b32:	7b c1       	rjmp	.+758    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	9a 81       	ldd	r25, Y+2	; 0x02
    3b38:	80 34       	cpi	r24, 0x40	; 64
    3b3a:	94 40       	sbci	r25, 0x04	; 4
    3b3c:	29 f4       	brne	.+10     	; 0x3b48 <sysclk_enable_peripheral_clock+0x42>
    3b3e:	68 e0       	ldi	r22, 0x08	; 8
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3b46:	71 c1       	rjmp	.+738    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4c:	81 15       	cp	r24, r1
    3b4e:	94 40       	sbci	r25, 0x04	; 4
    3b50:	29 f4       	brne	.+10     	; 0x3b5c <sysclk_enable_peripheral_clock+0x56>
    3b52:	64 e0       	ldi	r22, 0x04	; 4
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3b5a:	67 c1       	rjmp	.+718    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b60:	80 38       	cpi	r24, 0x80	; 128
    3b62:	91 40       	sbci	r25, 0x01	; 1
    3b64:	29 f4       	brne	.+10     	; 0x3b70 <sysclk_enable_peripheral_clock+0x6a>
    3b66:	62 e0       	ldi	r22, 0x02	; 2
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3b6e:	5d c1       	rjmp	.+698    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	9a 81       	ldd	r25, Y+2	; 0x02
    3b74:	81 15       	cp	r24, r1
    3b76:	91 40       	sbci	r25, 0x01	; 1
    3b78:	29 f4       	brne	.+10     	; 0x3b84 <sysclk_enable_peripheral_clock+0x7e>
    3b7a:	61 e0       	ldi	r22, 0x01	; 1
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3b82:	53 c1       	rjmp	.+678    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	9a 81       	ldd	r25, Y+2	; 0x02
    3b88:	80 38       	cpi	r24, 0x80	; 128
    3b8a:	93 40       	sbci	r25, 0x03	; 3
    3b8c:	29 f4       	brne	.+10     	; 0x3b98 <sysclk_enable_peripheral_clock+0x92>
    3b8e:	61 e0       	ldi	r22, 0x01	; 1
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3b96:	49 c1       	rjmp	.+658    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9c:	80 39       	cpi	r24, 0x90	; 144
    3b9e:	93 40       	sbci	r25, 0x03	; 3
    3ba0:	29 f4       	brne	.+10     	; 0x3bac <sysclk_enable_peripheral_clock+0xa6>
    3ba2:	61 e0       	ldi	r22, 0x01	; 1
    3ba4:	82 e0       	ldi	r24, 0x02	; 2
    3ba6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3baa:	3f c1       	rjmp	.+638    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb0:	81 15       	cp	r24, r1
    3bb2:	92 40       	sbci	r25, 0x02	; 2
    3bb4:	29 f4       	brne	.+10     	; 0x3bc0 <sysclk_enable_peripheral_clock+0xba>
    3bb6:	62 e0       	ldi	r22, 0x02	; 2
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3bbe:	35 c1       	rjmp	.+618    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	80 34       	cpi	r24, 0x40	; 64
    3bc6:	92 40       	sbci	r25, 0x02	; 2
    3bc8:	29 f4       	brne	.+10     	; 0x3bd4 <sysclk_enable_peripheral_clock+0xce>
    3bca:	62 e0       	ldi	r22, 0x02	; 2
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3bd2:	2b c1       	rjmp	.+598    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	81 15       	cp	r24, r1
    3bda:	93 40       	sbci	r25, 0x03	; 3
    3bdc:	29 f4       	brne	.+10     	; 0x3be8 <sysclk_enable_peripheral_clock+0xe2>
    3bde:	64 e0       	ldi	r22, 0x04	; 4
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3be6:	21 c1       	rjmp	.+578    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	9a 81       	ldd	r25, Y+2	; 0x02
    3bec:	80 32       	cpi	r24, 0x20	; 32
    3bee:	93 40       	sbci	r25, 0x03	; 3
    3bf0:	29 f4       	brne	.+10     	; 0x3bfc <sysclk_enable_peripheral_clock+0xf6>
    3bf2:	64 e0       	ldi	r22, 0x04	; 4
    3bf4:	82 e0       	ldi	r24, 0x02	; 2
    3bf6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3bfa:	17 c1       	rjmp	.+558    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3c00:	81 15       	cp	r24, r1
    3c02:	98 40       	sbci	r25, 0x08	; 8
    3c04:	29 f4       	brne	.+10     	; 0x3c10 <sysclk_enable_peripheral_clock+0x10a>
    3c06:	61 e0       	ldi	r22, 0x01	; 1
    3c08:	83 e0       	ldi	r24, 0x03	; 3
    3c0a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c0e:	0d c1       	rjmp	.+538    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	9a 81       	ldd	r25, Y+2	; 0x02
    3c14:	81 15       	cp	r24, r1
    3c16:	99 40       	sbci	r25, 0x09	; 9
    3c18:	29 f4       	brne	.+10     	; 0x3c24 <sysclk_enable_peripheral_clock+0x11e>
    3c1a:	61 e0       	ldi	r22, 0x01	; 1
    3c1c:	84 e0       	ldi	r24, 0x04	; 4
    3c1e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c22:	03 c1       	rjmp	.+518    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	9a 81       	ldd	r25, Y+2	; 0x02
    3c28:	81 15       	cp	r24, r1
    3c2a:	9a 40       	sbci	r25, 0x0A	; 10
    3c2c:	29 f4       	brne	.+10     	; 0x3c38 <sysclk_enable_peripheral_clock+0x132>
    3c2e:	61 e0       	ldi	r22, 0x01	; 1
    3c30:	85 e0       	ldi	r24, 0x05	; 5
    3c32:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c36:	f9 c0       	rjmp	.+498    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3c:	81 15       	cp	r24, r1
    3c3e:	9b 40       	sbci	r25, 0x0B	; 11
    3c40:	29 f4       	brne	.+10     	; 0x3c4c <sysclk_enable_peripheral_clock+0x146>
    3c42:	61 e0       	ldi	r22, 0x01	; 1
    3c44:	86 e0       	ldi	r24, 0x06	; 6
    3c46:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c4a:	ef c0       	rjmp	.+478    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	80 34       	cpi	r24, 0x40	; 64
    3c52:	98 40       	sbci	r25, 0x08	; 8
    3c54:	29 f4       	brne	.+10     	; 0x3c60 <sysclk_enable_peripheral_clock+0x15a>
    3c56:	62 e0       	ldi	r22, 0x02	; 2
    3c58:	83 e0       	ldi	r24, 0x03	; 3
    3c5a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c5e:	e5 c0       	rjmp	.+458    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	9a 81       	ldd	r25, Y+2	; 0x02
    3c64:	80 34       	cpi	r24, 0x40	; 64
    3c66:	99 40       	sbci	r25, 0x09	; 9
    3c68:	29 f4       	brne	.+10     	; 0x3c74 <sysclk_enable_peripheral_clock+0x16e>
    3c6a:	62 e0       	ldi	r22, 0x02	; 2
    3c6c:	84 e0       	ldi	r24, 0x04	; 4
    3c6e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c72:	db c0       	rjmp	.+438    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	9a 81       	ldd	r25, Y+2	; 0x02
    3c78:	80 34       	cpi	r24, 0x40	; 64
    3c7a:	9a 40       	sbci	r25, 0x0A	; 10
    3c7c:	29 f4       	brne	.+10     	; 0x3c88 <sysclk_enable_peripheral_clock+0x182>
    3c7e:	62 e0       	ldi	r22, 0x02	; 2
    3c80:	85 e0       	ldi	r24, 0x05	; 5
    3c82:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c86:	d1 c0       	rjmp	.+418    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8c:	80 34       	cpi	r24, 0x40	; 64
    3c8e:	9b 40       	sbci	r25, 0x0B	; 11
    3c90:	29 f4       	brne	.+10     	; 0x3c9c <sysclk_enable_peripheral_clock+0x196>
    3c92:	62 e0       	ldi	r22, 0x02	; 2
    3c94:	86 e0       	ldi	r24, 0x06	; 6
    3c96:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3c9a:	c7 c0       	rjmp	.+398    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca0:	80 39       	cpi	r24, 0x90	; 144
    3ca2:	98 40       	sbci	r25, 0x08	; 8
    3ca4:	29 f4       	brne	.+10     	; 0x3cb0 <sysclk_enable_peripheral_clock+0x1aa>
    3ca6:	64 e0       	ldi	r22, 0x04	; 4
    3ca8:	83 e0       	ldi	r24, 0x03	; 3
    3caa:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3cae:	bd c0       	rjmp	.+378    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb4:	80 39       	cpi	r24, 0x90	; 144
    3cb6:	99 40       	sbci	r25, 0x09	; 9
    3cb8:	29 f4       	brne	.+10     	; 0x3cc4 <sysclk_enable_peripheral_clock+0x1be>
    3cba:	64 e0       	ldi	r22, 0x04	; 4
    3cbc:	84 e0       	ldi	r24, 0x04	; 4
    3cbe:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3cc2:	b3 c0       	rjmp	.+358    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc8:	80 39       	cpi	r24, 0x90	; 144
    3cca:	9a 40       	sbci	r25, 0x0A	; 10
    3ccc:	29 f4       	brne	.+10     	; 0x3cd8 <sysclk_enable_peripheral_clock+0x1d2>
    3cce:	64 e0       	ldi	r22, 0x04	; 4
    3cd0:	85 e0       	ldi	r24, 0x05	; 5
    3cd2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3cd6:	a9 c0       	rjmp	.+338    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	80 39       	cpi	r24, 0x90	; 144
    3cde:	9b 40       	sbci	r25, 0x0B	; 11
    3ce0:	29 f4       	brne	.+10     	; 0x3cec <sysclk_enable_peripheral_clock+0x1e6>
    3ce2:	64 e0       	ldi	r22, 0x04	; 4
    3ce4:	86 e0       	ldi	r24, 0x06	; 6
    3ce6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3cea:	9f c0       	rjmp	.+318    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf0:	80 3c       	cpi	r24, 0xC0	; 192
    3cf2:	98 40       	sbci	r25, 0x08	; 8
    3cf4:	29 f4       	brne	.+10     	; 0x3d00 <sysclk_enable_peripheral_clock+0x1fa>
    3cf6:	68 e0       	ldi	r22, 0x08	; 8
    3cf8:	83 e0       	ldi	r24, 0x03	; 3
    3cfa:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3cfe:	95 c0       	rjmp	.+298    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
    3d02:	9a 81       	ldd	r25, Y+2	; 0x02
    3d04:	80 3c       	cpi	r24, 0xC0	; 192
    3d06:	99 40       	sbci	r25, 0x09	; 9
    3d08:	29 f4       	brne	.+10     	; 0x3d14 <sysclk_enable_peripheral_clock+0x20e>
    3d0a:	68 e0       	ldi	r22, 0x08	; 8
    3d0c:	84 e0       	ldi	r24, 0x04	; 4
    3d0e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d12:	8b c0       	rjmp	.+278    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	9a 81       	ldd	r25, Y+2	; 0x02
    3d18:	80 3c       	cpi	r24, 0xC0	; 192
    3d1a:	9a 40       	sbci	r25, 0x0A	; 10
    3d1c:	29 f4       	brne	.+10     	; 0x3d28 <sysclk_enable_peripheral_clock+0x222>
    3d1e:	68 e0       	ldi	r22, 0x08	; 8
    3d20:	85 e0       	ldi	r24, 0x05	; 5
    3d22:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d26:	81 c0       	rjmp	.+258    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2c:	80 3c       	cpi	r24, 0xC0	; 192
    3d2e:	9b 40       	sbci	r25, 0x0B	; 11
    3d30:	29 f4       	brne	.+10     	; 0x3d3c <sysclk_enable_peripheral_clock+0x236>
    3d32:	68 e0       	ldi	r22, 0x08	; 8
    3d34:	86 e0       	ldi	r24, 0x06	; 6
    3d36:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d3a:	77 c0       	rjmp	.+238    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d40:	80 3a       	cpi	r24, 0xA0	; 160
    3d42:	98 40       	sbci	r25, 0x08	; 8
    3d44:	29 f4       	brne	.+10     	; 0x3d50 <sysclk_enable_peripheral_clock+0x24a>
    3d46:	60 e1       	ldi	r22, 0x10	; 16
    3d48:	83 e0       	ldi	r24, 0x03	; 3
    3d4a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d4e:	6d c0       	rjmp	.+218    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	9a 81       	ldd	r25, Y+2	; 0x02
    3d54:	80 3a       	cpi	r24, 0xA0	; 160
    3d56:	99 40       	sbci	r25, 0x09	; 9
    3d58:	29 f4       	brne	.+10     	; 0x3d64 <sysclk_enable_peripheral_clock+0x25e>
    3d5a:	60 e1       	ldi	r22, 0x10	; 16
    3d5c:	84 e0       	ldi	r24, 0x04	; 4
    3d5e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d62:	63 c0       	rjmp	.+198    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	9a 81       	ldd	r25, Y+2	; 0x02
    3d68:	80 3a       	cpi	r24, 0xA0	; 160
    3d6a:	9a 40       	sbci	r25, 0x0A	; 10
    3d6c:	29 f4       	brne	.+10     	; 0x3d78 <sysclk_enable_peripheral_clock+0x272>
    3d6e:	60 e1       	ldi	r22, 0x10	; 16
    3d70:	85 e0       	ldi	r24, 0x05	; 5
    3d72:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d76:	59 c0       	rjmp	.+178    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7c:	80 3a       	cpi	r24, 0xA0	; 160
    3d7e:	9b 40       	sbci	r25, 0x0B	; 11
    3d80:	29 f4       	brne	.+10     	; 0x3d8c <sysclk_enable_peripheral_clock+0x286>
    3d82:	60 e1       	ldi	r22, 0x10	; 16
    3d84:	86 e0       	ldi	r24, 0x06	; 6
    3d86:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d8a:	4f c0       	rjmp	.+158    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	80 3b       	cpi	r24, 0xB0	; 176
    3d92:	98 40       	sbci	r25, 0x08	; 8
    3d94:	29 f4       	brne	.+10     	; 0x3da0 <sysclk_enable_peripheral_clock+0x29a>
    3d96:	60 e2       	ldi	r22, 0x20	; 32
    3d98:	83 e0       	ldi	r24, 0x03	; 3
    3d9a:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3d9e:	45 c0       	rjmp	.+138    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	9a 81       	ldd	r25, Y+2	; 0x02
    3da4:	80 3b       	cpi	r24, 0xB0	; 176
    3da6:	99 40       	sbci	r25, 0x09	; 9
    3da8:	29 f4       	brne	.+10     	; 0x3db4 <sysclk_enable_peripheral_clock+0x2ae>
    3daa:	60 e2       	ldi	r22, 0x20	; 32
    3dac:	84 e0       	ldi	r24, 0x04	; 4
    3dae:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3db2:	3b c0       	rjmp	.+118    	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	9a 81       	ldd	r25, Y+2	; 0x02
    3db8:	80 3b       	cpi	r24, 0xB0	; 176
    3dba:	9a 40       	sbci	r25, 0x0A	; 10
    3dbc:	29 f4       	brne	.+10     	; 0x3dc8 <sysclk_enable_peripheral_clock+0x2c2>
    3dbe:	60 e2       	ldi	r22, 0x20	; 32
    3dc0:	85 e0       	ldi	r24, 0x05	; 5
    3dc2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3dc6:	31 c0       	rjmp	.+98     	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	9a 81       	ldd	r25, Y+2	; 0x02
    3dcc:	80 3b       	cpi	r24, 0xB0	; 176
    3dce:	9b 40       	sbci	r25, 0x0B	; 11
    3dd0:	29 f4       	brne	.+10     	; 0x3ddc <sysclk_enable_peripheral_clock+0x2d6>
    3dd2:	60 e2       	ldi	r22, 0x20	; 32
    3dd4:	86 e0       	ldi	r24, 0x06	; 6
    3dd6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3dda:	27 c0       	rjmp	.+78     	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	9a 81       	ldd	r25, Y+2	; 0x02
    3de0:	80 38       	cpi	r24, 0x80	; 128
    3de2:	94 40       	sbci	r25, 0x04	; 4
    3de4:	29 f4       	brne	.+10     	; 0x3df0 <sysclk_enable_peripheral_clock+0x2ea>
    3de6:	60 e4       	ldi	r22, 0x40	; 64
    3de8:	83 e0       	ldi	r24, 0x03	; 3
    3dea:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3dee:	1d c0       	rjmp	.+58     	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	80 39       	cpi	r24, 0x90	; 144
    3df6:	94 40       	sbci	r25, 0x04	; 4
    3df8:	29 f4       	brne	.+10     	; 0x3e04 <sysclk_enable_peripheral_clock+0x2fe>
    3dfa:	60 e4       	ldi	r22, 0x40	; 64
    3dfc:	84 e0       	ldi	r24, 0x04	; 4
    3dfe:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3e02:	13 c0       	rjmp	.+38     	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	9a 81       	ldd	r25, Y+2	; 0x02
    3e08:	80 3a       	cpi	r24, 0xA0	; 160
    3e0a:	94 40       	sbci	r25, 0x04	; 4
    3e0c:	29 f4       	brne	.+10     	; 0x3e18 <sysclk_enable_peripheral_clock+0x312>
    3e0e:	60 e4       	ldi	r22, 0x40	; 64
    3e10:	85 e0       	ldi	r24, 0x05	; 5
    3e12:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3e16:	09 c0       	rjmp	.+18     	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1c:	80 3b       	cpi	r24, 0xB0	; 176
    3e1e:	94 40       	sbci	r25, 0x04	; 4
    3e20:	21 f4       	brne	.+8      	; 0x3e2a <sysclk_enable_peripheral_clock+0x324>
    3e22:	60 e4       	ldi	r22, 0x40	; 64
    3e24:	86 e0       	ldi	r24, 0x06	; 6
    3e26:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3e2a:	00 00       	nop
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	08 95       	ret

00003e36 <usart_serial_init>:
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
    3e3e:	2b 97       	sbiw	r28, 0x0b	; 11
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	88 87       	std	Y+8, r24	; 0x08
    3e46:	99 87       	std	Y+9, r25	; 0x09
    3e48:	6a 87       	std	Y+10, r22	; 0x0a
    3e4a:	7b 87       	std	Y+11, r23	; 0x0b
    3e4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e50:	fc 01       	movw	r30, r24
    3e52:	84 81       	ldd	r24, Z+4	; 0x04
    3e54:	8d 83       	std	Y+5, r24	; 0x05
    3e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e58:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	85 81       	ldd	r24, Z+5	; 0x05
    3e5e:	8e 83       	std	Y+6, r24	; 0x06
    3e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e64:	fc 01       	movw	r30, r24
    3e66:	86 81       	ldd	r24, Z+6	; 0x06
    3e68:	8f 83       	std	Y+7, r24	; 0x07
    3e6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e6e:	fc 01       	movw	r30, r24
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	a2 81       	ldd	r26, Z+2	; 0x02
    3e76:	b3 81       	ldd	r27, Z+3	; 0x03
    3e78:	89 83       	std	Y+1, r24	; 0x01
    3e7a:	9a 83       	std	Y+2, r25	; 0x02
    3e7c:	ab 83       	std	Y+3, r26	; 0x03
    3e7e:	bc 83       	std	Y+4, r27	; 0x04
    3e80:	88 85       	ldd	r24, Y+8	; 0x08
    3e82:	99 85       	ldd	r25, Y+9	; 0x09
    3e84:	80 3a       	cpi	r24, 0xA0	; 160
    3e86:	98 40       	sbci	r25, 0x08	; 8
    3e88:	21 f4       	brne	.+8      	; 0x3e92 <usart_serial_init+0x5c>
    3e8a:	60 e1       	ldi	r22, 0x10	; 16
    3e8c:	83 e0       	ldi	r24, 0x03	; 3
    3e8e:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3e92:	88 85       	ldd	r24, Y+8	; 0x08
    3e94:	99 85       	ldd	r25, Y+9	; 0x09
    3e96:	80 3b       	cpi	r24, 0xB0	; 176
    3e98:	98 40       	sbci	r25, 0x08	; 8
    3e9a:	21 f4       	brne	.+8      	; 0x3ea4 <usart_serial_init+0x6e>
    3e9c:	60 e2       	ldi	r22, 0x20	; 32
    3e9e:	83 e0       	ldi	r24, 0x03	; 3
    3ea0:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3ea4:	88 85       	ldd	r24, Y+8	; 0x08
    3ea6:	99 85       	ldd	r25, Y+9	; 0x09
    3ea8:	80 3a       	cpi	r24, 0xA0	; 160
    3eaa:	99 40       	sbci	r25, 0x09	; 9
    3eac:	21 f4       	brne	.+8      	; 0x3eb6 <usart_serial_init+0x80>
    3eae:	60 e1       	ldi	r22, 0x10	; 16
    3eb0:	84 e0       	ldi	r24, 0x04	; 4
    3eb2:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3eb6:	88 85       	ldd	r24, Y+8	; 0x08
    3eb8:	99 85       	ldd	r25, Y+9	; 0x09
    3eba:	80 3b       	cpi	r24, 0xB0	; 176
    3ebc:	99 40       	sbci	r25, 0x09	; 9
    3ebe:	21 f4       	brne	.+8      	; 0x3ec8 <usart_serial_init+0x92>
    3ec0:	60 e2       	ldi	r22, 0x20	; 32
    3ec2:	84 e0       	ldi	r24, 0x04	; 4
    3ec4:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3ec8:	88 85       	ldd	r24, Y+8	; 0x08
    3eca:	99 85       	ldd	r25, Y+9	; 0x09
    3ecc:	80 3a       	cpi	r24, 0xA0	; 160
    3ece:	9a 40       	sbci	r25, 0x0A	; 10
    3ed0:	21 f4       	brne	.+8      	; 0x3eda <usart_serial_init+0xa4>
    3ed2:	60 e1       	ldi	r22, 0x10	; 16
    3ed4:	85 e0       	ldi	r24, 0x05	; 5
    3ed6:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3eda:	88 85       	ldd	r24, Y+8	; 0x08
    3edc:	99 85       	ldd	r25, Y+9	; 0x09
    3ede:	80 3b       	cpi	r24, 0xB0	; 176
    3ee0:	9a 40       	sbci	r25, 0x0A	; 10
    3ee2:	21 f4       	brne	.+8      	; 0x3eec <usart_serial_init+0xb6>
    3ee4:	60 e2       	ldi	r22, 0x20	; 32
    3ee6:	85 e0       	ldi	r24, 0x05	; 5
    3ee8:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3eec:	88 85       	ldd	r24, Y+8	; 0x08
    3eee:	99 85       	ldd	r25, Y+9	; 0x09
    3ef0:	80 3a       	cpi	r24, 0xA0	; 160
    3ef2:	9b 40       	sbci	r25, 0x0B	; 11
    3ef4:	21 f4       	brne	.+8      	; 0x3efe <usart_serial_init+0xc8>
    3ef6:	60 e1       	ldi	r22, 0x10	; 16
    3ef8:	86 e0       	ldi	r24, 0x06	; 6
    3efa:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3efe:	88 85       	ldd	r24, Y+8	; 0x08
    3f00:	99 85       	ldd	r25, Y+9	; 0x09
    3f02:	80 3b       	cpi	r24, 0xB0	; 176
    3f04:	9b 40       	sbci	r25, 0x0B	; 11
    3f06:	21 f4       	brne	.+8      	; 0x3f10 <usart_serial_init+0xda>
    3f08:	60 e2       	ldi	r22, 0x20	; 32
    3f0a:	86 e0       	ldi	r24, 0x06	; 6
    3f0c:	0e 94 c3 02 	call	0x586	; 0x586 <sysclk_enable_module>
    3f10:	88 85       	ldd	r24, Y+8	; 0x08
    3f12:	99 85       	ldd	r25, Y+9	; 0x09
    3f14:	9e 01       	movw	r18, r28
    3f16:	2f 5f       	subi	r18, 0xFF	; 255
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	b9 01       	movw	r22, r18
    3f1c:	1e d8       	rcall	.-4036   	; 0x2f5a <usart_init_rs232>
    3f1e:	88 23       	and	r24, r24
    3f20:	11 f0       	breq	.+4      	; 0x3f26 <usart_serial_init+0xf0>
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	01 c0       	rjmp	.+2      	; 0x3f28 <usart_serial_init+0xf2>
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	2b 96       	adiw	r28, 0x0b	; 11
    3f2a:	cd bf       	out	0x3d, r28	; 61
    3f2c:	de bf       	out	0x3e, r29	; 62
    3f2e:	df 91       	pop	r29
    3f30:	cf 91       	pop	r28
    3f32:	08 95       	ret

00003f34 <usart_serial_putchar>:
    3f34:	cf 93       	push	r28
    3f36:	df 93       	push	r29
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <usart_serial_putchar+0x6>
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	89 83       	std	Y+1, r24	; 0x01
    3f40:	9a 83       	std	Y+2, r25	; 0x02
    3f42:	6b 83       	std	Y+3, r22	; 0x03
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	9a 81       	ldd	r25, Y+2	; 0x02
    3f48:	6b 81       	ldd	r22, Y+3	; 0x03
    3f4a:	4d d8       	rcall	.-3942   	; 0x2fe6 <usart_putchar>
    3f4c:	23 96       	adiw	r28, 0x03	; 3
    3f4e:	cd bf       	out	0x3d, r28	; 61
    3f50:	de bf       	out	0x3e, r29	; 62
    3f52:	df 91       	pop	r29
    3f54:	cf 91       	pop	r28
    3f56:	08 95       	ret

00003f58 <usart_serial_getchar>:
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	00 d0       	rcall	.+0      	; 0x3f5e <usart_serial_getchar+0x6>
    3f5e:	1f 92       	push	r1
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    3f64:	89 83       	std	Y+1, r24	; 0x01
    3f66:	9a 83       	std	Y+2, r25	; 0x02
    3f68:	6b 83       	std	Y+3, r22	; 0x03
    3f6a:	7c 83       	std	Y+4, r23	; 0x04
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f70:	58 d8       	rcall	.-3920   	; 0x3022 <usart_getchar>
    3f72:	28 2f       	mov	r18, r24
    3f74:	8b 81       	ldd	r24, Y+3	; 0x03
    3f76:	9c 81       	ldd	r25, Y+4	; 0x04
    3f78:	fc 01       	movw	r30, r24
    3f7a:	20 83       	st	Z, r18
    3f7c:	00 00       	nop
    3f7e:	24 96       	adiw	r28, 0x04	; 4
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	08 95       	ret

00003f8a <stdio_serial_init>:
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	00 d0       	rcall	.+0      	; 0x3f90 <stdio_serial_init+0x6>
    3f90:	1f 92       	push	r1
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	89 83       	std	Y+1, r24	; 0x01
    3f98:	9a 83       	std	Y+2, r25	; 0x02
    3f9a:	6b 83       	std	Y+3, r22	; 0x03
    3f9c:	7c 83       	std	Y+4, r23	; 0x04
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa2:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <stdio_base>
    3fa6:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <stdio_base+0x1>
    3faa:	8a e9       	ldi	r24, 0x9A	; 154
    3fac:	9f e1       	ldi	r25, 0x1F	; 31
    3fae:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <ptr_put>
    3fb2:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <ptr_put+0x1>
    3fb6:	8c ea       	ldi	r24, 0xAC	; 172
    3fb8:	9f e1       	ldi	r25, 0x1F	; 31
    3fba:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <ptr_get>
    3fbe:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <ptr_get+0x1>
    3fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    3fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	b9 01       	movw	r22, r18
    3fcc:	34 df       	rcall	.-408    	; 0x3e36 <usart_serial_init>
    3fce:	67 ee       	ldi	r22, 0xE7	; 231
    3fd0:	72 e0       	ldi	r23, 0x02	; 2
    3fd2:	86 e0       	ldi	r24, 0x06	; 6
    3fd4:	93 e0       	ldi	r25, 0x03	; 3
    3fd6:	1e d7       	rcall	.+3644   	; 0x4e14 <fdevopen>
    3fd8:	00 00       	nop
    3fda:	24 96       	adiw	r28, 0x04	; 4
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	df 91       	pop	r29
    3fe2:	cf 91       	pop	r28
    3fe4:	08 95       	ret

00003fe6 <uart_init>:
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	1f 92       	push	r1
    3fec:	1f 92       	push	r1
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	89 83       	std	Y+1, r24	; 0x01
    3ff4:	9a 83       	std	Y+2, r25	; 0x02
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	86 81       	ldd	r24, Z+6	; 0x06
    3ffe:	97 81       	ldd	r25, Z+7	; 0x07
    4000:	a0 85       	ldd	r26, Z+8	; 0x08
    4002:	b1 85       	ldd	r27, Z+9	; 0x09
    4004:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <usart_options.6315>
    4008:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <usart_options.6315+0x1>
    400c:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <usart_options.6315+0x2>
    4010:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <usart_options.6315+0x3>
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	9a 81       	ldd	r25, Y+2	; 0x02
    4018:	fc 01       	movw	r30, r24
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	29 81       	ldd	r18, Y+1	; 0x01
    4020:	3a 81       	ldd	r19, Y+2	; 0x02
    4022:	f9 01       	movw	r30, r18
    4024:	20 81       	ld	r18, Z
    4026:	31 81       	ldd	r19, Z+1	; 0x01
    4028:	f9 01       	movw	r30, r18
    402a:	40 81       	ld	r20, Z
    402c:	29 81       	ldd	r18, Y+1	; 0x01
    402e:	3a 81       	ldd	r19, Y+2	; 0x02
    4030:	f9 01       	movw	r30, r18
    4032:	25 81       	ldd	r18, Z+5	; 0x05
    4034:	24 2b       	or	r18, r20
    4036:	fc 01       	movw	r30, r24
    4038:	20 83       	st	Z, r18
    403a:	89 81       	ldd	r24, Y+1	; 0x01
    403c:	9a 81       	ldd	r25, Y+2	; 0x02
    403e:	fc 01       	movw	r30, r24
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	29 81       	ldd	r18, Y+1	; 0x01
    4046:	3a 81       	ldd	r19, Y+2	; 0x02
    4048:	f9 01       	movw	r30, r18
    404a:	20 81       	ld	r18, Z
    404c:	31 81       	ldd	r19, Z+1	; 0x01
    404e:	f9 01       	movw	r30, r18
    4050:	44 81       	ldd	r20, Z+4	; 0x04
    4052:	29 81       	ldd	r18, Y+1	; 0x01
    4054:	3a 81       	ldd	r19, Y+2	; 0x02
    4056:	f9 01       	movw	r30, r18
    4058:	25 81       	ldd	r18, Z+5	; 0x05
    405a:	24 2b       	or	r18, r20
    405c:	fc 01       	movw	r30, r24
    405e:	24 83       	std	Z+4, r18	; 0x04
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	9a 81       	ldd	r25, Y+2	; 0x02
    4064:	fc 01       	movw	r30, r24
    4066:	80 81       	ld	r24, Z
    4068:	91 81       	ldd	r25, Z+1	; 0x01
    406a:	29 81       	ldd	r18, Y+1	; 0x01
    406c:	3a 81       	ldd	r19, Y+2	; 0x02
    406e:	f9 01       	movw	r30, r18
    4070:	20 81       	ld	r18, Z
    4072:	31 81       	ldd	r19, Z+1	; 0x01
    4074:	f9 01       	movw	r30, r18
    4076:	20 81       	ld	r18, Z
    4078:	42 2f       	mov	r20, r18
    407a:	29 81       	ldd	r18, Y+1	; 0x01
    407c:	3a 81       	ldd	r19, Y+2	; 0x02
    407e:	f9 01       	movw	r30, r18
    4080:	24 81       	ldd	r18, Z+4	; 0x04
    4082:	20 95       	com	r18
    4084:	24 23       	and	r18, r20
    4086:	fc 01       	movw	r30, r24
    4088:	20 83       	st	Z, r18
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	9a 81       	ldd	r25, Y+2	; 0x02
    408e:	fc 01       	movw	r30, r24
    4090:	82 81       	ldd	r24, Z+2	; 0x02
    4092:	93 81       	ldd	r25, Z+3	; 0x03
    4094:	38 dd       	rcall	.-1424   	; 0x3b06 <sysclk_enable_peripheral_clock>
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	9a 81       	ldd	r25, Y+2	; 0x02
    409a:	fc 01       	movw	r30, r24
    409c:	82 81       	ldd	r24, Z+2	; 0x02
    409e:	93 81       	ldd	r25, Z+3	; 0x03
    40a0:	66 e0       	ldi	r22, 0x06	; 6
    40a2:	70 e2       	ldi	r23, 0x20	; 32
    40a4:	c8 de       	rcall	.-624    	; 0x3e36 <usart_serial_init>
    40a6:	00 00       	nop
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	df 91       	pop	r29
    40ae:	cf 91       	pop	r28
    40b0:	08 95       	ret

000040b2 <uart_terminal_init>:

void uart_terminal_init()
{
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    40ba:	80 ea       	ldi	r24, 0xA0	; 160
    40bc:	9a e0       	ldi	r25, 0x0A	; 10
    40be:	23 dd       	rcall	.-1466   	; 0x3b06 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    40c0:	80 e8       	ldi	r24, 0x80	; 128
    40c2:	96 e0       	ldi	r25, 0x06	; 6
    40c4:	20 e8       	ldi	r18, 0x80	; 128
    40c6:	36 e0       	ldi	r19, 0x06	; 6
    40c8:	f9 01       	movw	r30, r18
    40ca:	20 81       	ld	r18, Z
    40cc:	28 60       	ori	r18, 0x08	; 8
    40ce:	fc 01       	movw	r30, r24
    40d0:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    40d2:	6d e0       	ldi	r22, 0x0D	; 13
    40d4:	70 e2       	ldi	r23, 0x20	; 32
    40d6:	80 ea       	ldi	r24, 0xA0	; 160
    40d8:	9a e0       	ldi	r25, 0x0A	; 10
    40da:	57 df       	rcall	.-338    	; 0x3f8a <stdio_serial_init>
	
}
    40dc:	00 00       	nop
    40de:	df 91       	pop	r29
    40e0:	cf 91       	pop	r28
    40e2:	08 95       	ret

000040e4 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    40e4:	cf 93       	push	r28
    40e6:	df 93       	push	r29
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    40ec:	80 e0       	ldi	r24, 0x00	; 0
    40ee:	98 e4       	ldi	r25, 0x48	; 72
    40f0:	a8 ee       	ldi	r26, 0xE8	; 232
    40f2:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    40f4:	bc 01       	movw	r22, r24
    40f6:	cd 01       	movw	r24, r26
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	08 95       	ret

000040fe <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
    4102:	1f 92       	push	r1
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    4108:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    410a:	ec df       	rcall	.-40     	; 0x40e4 <sysclk_get_main_hz>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	29 81       	ldd	r18, Y+1	; 0x01
    4112:	22 2f       	mov	r18, r18
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	04 c0       	rjmp	.+8      	; 0x4120 <sysclk_get_per4_hz+0x22>
    4118:	b6 95       	lsr	r27
    411a:	a7 95       	ror	r26
    411c:	97 95       	ror	r25
    411e:	87 95       	ror	r24
    4120:	2a 95       	dec	r18
    4122:	d2 f7       	brpl	.-12     	; 0x4118 <sysclk_get_per4_hz+0x1a>
}
    4124:	bc 01       	movw	r22, r24
    4126:	cd 01       	movw	r24, r26
    4128:	0f 90       	pop	r0
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    4138:	e2 df       	rcall	.-60     	; 0x40fe <sysclk_get_per4_hz>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    413e:	bc 01       	movw	r22, r24
    4140:	cd 01       	movw	r24, r26
    4142:	df 91       	pop	r29
    4144:	cf 91       	pop	r28
    4146:	08 95       	ret

00004148 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    4150:	ef df       	rcall	.-34     	; 0x4130 <sysclk_get_per2_hz>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
}
    4156:	bc 01       	movw	r22, r24
    4158:	cd 01       	movw	r24, r26
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	08 95       	ret

00004160 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    4168:	ef df       	rcall	.-34     	; 0x4148 <sysclk_get_per_hz>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
}
    416e:	bc 01       	movw	r22, r24
    4170:	cd 01       	movw	r24, r26
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	08 95       	ret

00004178 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    4178:	04 c0       	rjmp	.+8      	; 0x4182 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    417a:	61 50       	subi	r22, 0x01	; 1
    417c:	71 09       	sbc	r23, r1
    417e:	81 09       	sbc	r24, r1
    4180:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    4182:	61 15       	cp	r22, r1
    4184:	71 05       	cpc	r23, r1
    4186:	81 05       	cpc	r24, r1
    4188:	91 05       	cpc	r25, r1
    418a:	b9 f7       	brne	.-18     	; 0x417a <__portable_avr_delay_cycles+0x2>
    418c:	08 95       	ret

0000418e <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    418e:	cf 93       	push	r28
    4190:	df 93       	push	r29
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    4196:	80 ea       	ldi	r24, 0xA0	; 160
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	27 e0       	ldi	r18, 0x07	; 7
    419c:	fc 01       	movw	r30, r24
    419e:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    41a0:	00 00       	nop
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	08 95       	ret

000041a8 <pmic_set_scheduling>:
 *
 * \note The low-priority vector, INTPRI, must be set to 0 when round-robin
 * scheduling is disabled to return to default interrupt priority order.
 */
static inline void pmic_set_scheduling(enum pmic_schedule schedule)
{
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	1f 92       	push	r1
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
    41b2:	89 83       	std	Y+1, r24	; 0x01
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	88 2f       	mov	r24, r24
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	19 f0       	breq	.+6      	; 0x41c4 <pmic_set_scheduling+0x1c>
    41be:	01 97       	sbiw	r24, 0x01	; 1
    41c0:	79 f0       	breq	.+30     	; 0x41e0 <pmic_set_scheduling+0x38>
	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
		break;

	default:
		break;
    41c2:	18 c0       	rjmp	.+48     	; 0x41f4 <pmic_set_scheduling+0x4c>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    41c4:	80 ea       	ldi	r24, 0xA0	; 160
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	20 ea       	ldi	r18, 0xA0	; 160
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	f9 01       	movw	r30, r18
    41ce:	22 81       	ldd	r18, Z+2	; 0x02
    41d0:	2f 77       	andi	r18, 0x7F	; 127
    41d2:	fc 01       	movw	r30, r24
    41d4:	22 83       	std	Z+2, r18	; 0x02
		PMIC.INTPRI = 0;
    41d6:	80 ea       	ldi	r24, 0xA0	; 160
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	fc 01       	movw	r30, r24
    41dc:	11 82       	std	Z+1, r1	; 0x01
		break;
    41de:	0a c0       	rjmp	.+20     	; 0x41f4 <pmic_set_scheduling+0x4c>

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    41e0:	80 ea       	ldi	r24, 0xA0	; 160
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	20 ea       	ldi	r18, 0xA0	; 160
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	f9 01       	movw	r30, r18
    41ea:	22 81       	ldd	r18, Z+2	; 0x02
    41ec:	20 68       	ori	r18, 0x80	; 128
    41ee:	fc 01       	movw	r30, r24
    41f0:	22 83       	std	Z+2, r18	; 0x02
		break;
    41f2:	00 00       	nop

	default:
		break;
	};
}
    41f4:	00 00       	nop
    41f6:	0f 90       	pop	r0
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	08 95       	ret

000041fe <main>:
#include "drivers/Xbee.h"
/************** I2C buffer length******/
volatile extern uint8_t XbeeRx;

int main (void)
{
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	67 97       	sbiw	r28, 0x17	; 23
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	de bf       	out	0x3e, r29	; 62
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	
	
	sysclk_init();
    422c:	0e 94 92 02 	call	0x524	; 0x524 <sysclk_init>
	board_init();
    4230:	69 d9       	rcall	.-3374   	; 0x3504 <board_init>
	uart_terminal_init();
    4232:	3f df       	rcall	.-386    	; 0x40b2 <uart_terminal_init>
    4234:	89 e1       	ldi	r24, 0x19	; 25
	printf("uart is working\n");
    4236:	90 e2       	ldi	r25, 0x20	; 32
    4238:	4a d6       	rcall	.+3220   	; 0x4ece <puts>
	
	pmic_init();
    423a:	a9 df       	rcall	.-174    	; 0x418e <pmic_init>
    423c:	81 e0       	ldi	r24, 0x01	; 1
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    423e:	b4 df       	rcall	.-152    	; 0x41a8 <pmic_set_scheduling>
    4240:	78 94       	sei
    4242:	49 e2       	ldi	r20, 0x29	; 41
	cpu_irq_enable();
    4244:	60 e0       	ldi	r22, 0x00	; 0
	
	I2CInit(115200,0x29);
    4246:	72 ec       	ldi	r23, 0xC2	; 194
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	c0 db       	rcall	.-2176   	; 0x39ce <I2CInit>
    424e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <xbee_init>
	xbee_init();
    4252:	1a 82       	std	Y+2, r1	; 0x02
    4254:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	uint8_t data;
	int16_t acel[]={0,0,0};
    4256:	1c 82       	std	Y+4, r1	; 0x04
    4258:	1d 82       	std	Y+5, r1	; 0x05
    425a:	1e 82       	std	Y+6, r1	; 0x06
    425c:	1f 82       	std	Y+7, r1	; 0x07
    425e:	19 82       	std	Y+1, r1	; 0x01
    4260:	6d e3       	ldi	r22, 0x3D	; 61
	int16_t acelx;
		data=BNO055_OPERATION_MODE_CONFIG;
		BNO_Write (&data, BNO055_OPR_MODE_ADDR);
    4262:	ce 01       	movw	r24, r28
    4264:	01 96       	adiw	r24, 0x01	; 1
    4266:	0e 94 25 01 	call	0x24a	; 0x24a <BNO_Write>
    426a:	7a df       	rcall	.-268    	; 0x4160 <sysclk_get_cpu_hz>
		delay_ms(22);
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	8c 01       	movw	r16, r24
    4272:	9d 01       	movw	r18, r26
    4274:	40 e0       	ldi	r20, 0x00	; 0
    4276:	50 e0       	ldi	r21, 0x00	; 0
    4278:	ba 01       	movw	r22, r20
    427a:	08 87       	std	Y+8, r16	; 0x08
    427c:	19 87       	std	Y+9, r17	; 0x09
    427e:	2a 87       	std	Y+10, r18	; 0x0a
    4280:	3b 87       	std	Y+11, r19	; 0x0b
    4282:	4c 87       	std	Y+12, r20	; 0x0c
    4284:	5d 87       	std	Y+13, r21	; 0x0d
    4286:	6e 87       	std	Y+14, r22	; 0x0e
    4288:	7f 87       	std	Y+15, r23	; 0x0f
    428a:	28 84       	ldd	r2, Y+8	; 0x08
    428c:	39 84       	ldd	r3, Y+9	; 0x09
    428e:	4a 84       	ldd	r4, Y+10	; 0x0a
    4290:	5b 84       	ldd	r5, Y+11	; 0x0b
    4292:	6c 84       	ldd	r6, Y+12	; 0x0c
    4294:	7d 84       	ldd	r7, Y+13	; 0x0d
    4296:	8e 84       	ldd	r8, Y+14	; 0x0e
    4298:	9f 84       	ldd	r9, Y+15	; 0x0f
    429a:	22 2d       	mov	r18, r2
    429c:	33 2d       	mov	r19, r3
    429e:	44 2d       	mov	r20, r4
    42a0:	55 2d       	mov	r21, r5
    42a2:	66 2d       	mov	r22, r6
    42a4:	77 2d       	mov	r23, r7
    42a6:	88 2d       	mov	r24, r8
    42a8:	99 2d       	mov	r25, r9
    42aa:	02 e0       	ldi	r16, 0x02	; 2
    42ac:	67 d4       	rcall	.+2254   	; 0x4b7c <__ashldi3>
    42ae:	a2 2e       	mov	r10, r18
    42b0:	b3 2e       	mov	r11, r19
    42b2:	c4 2e       	mov	r12, r20
    42b4:	d5 2e       	mov	r13, r21
    42b6:	e6 2e       	mov	r14, r22
    42b8:	f7 2e       	mov	r15, r23
    42ba:	08 2f       	mov	r16, r24
    42bc:	19 2f       	mov	r17, r25
    42be:	2a 2c       	mov	r2, r10
    42c0:	3b 2c       	mov	r3, r11
    42c2:	4c 2c       	mov	r4, r12
    42c4:	5d 2c       	mov	r5, r13
    42c6:	6e 2c       	mov	r6, r14
    42c8:	7f 2c       	mov	r7, r15
    42ca:	80 2e       	mov	r8, r16
    42cc:	91 2e       	mov	r9, r17
    42ce:	22 2d       	mov	r18, r2
    42d0:	33 2d       	mov	r19, r3
    42d2:	44 2d       	mov	r20, r4
    42d4:	55 2d       	mov	r21, r5
    42d6:	66 2d       	mov	r22, r6
    42d8:	77 2d       	mov	r23, r7
    42da:	88 2d       	mov	r24, r8
    42dc:	99 2d       	mov	r25, r9
    42de:	02 e0       	ldi	r16, 0x02	; 2
    42e0:	4d d4       	rcall	.+2202   	; 0x4b7c <__ashldi3>
    42e2:	a2 2e       	mov	r10, r18
    42e4:	b3 2e       	mov	r11, r19
    42e6:	c4 2e       	mov	r12, r20
    42e8:	d5 2e       	mov	r13, r21
    42ea:	e6 2e       	mov	r14, r22
    42ec:	f7 2e       	mov	r15, r23
    42ee:	08 2f       	mov	r16, r24
    42f0:	19 2f       	mov	r17, r25
    42f2:	2a 2d       	mov	r18, r10
    42f4:	3b 2d       	mov	r19, r11
    42f6:	4c 2d       	mov	r20, r12
    42f8:	5d 2d       	mov	r21, r13
    42fa:	6e 2d       	mov	r22, r14
    42fc:	7f 2d       	mov	r23, r15
    42fe:	80 2f       	mov	r24, r16
    4300:	91 2f       	mov	r25, r17
    4302:	a2 2c       	mov	r10, r2
    4304:	b3 2c       	mov	r11, r3
    4306:	c4 2c       	mov	r12, r4
    4308:	d5 2c       	mov	r13, r5
    430a:	e6 2c       	mov	r14, r6
    430c:	f7 2c       	mov	r15, r7
    430e:	08 2d       	mov	r16, r8
    4310:	19 2d       	mov	r17, r9
    4312:	56 d4       	rcall	.+2220   	; 0x4bc0 <__subdi3>
    4314:	a2 2e       	mov	r10, r18
    4316:	b3 2e       	mov	r11, r19
    4318:	c4 2e       	mov	r12, r20
    431a:	d5 2e       	mov	r13, r21
    431c:	e6 2e       	mov	r14, r22
    431e:	f7 2e       	mov	r15, r23
    4320:	08 2f       	mov	r16, r24
    4322:	19 2f       	mov	r17, r25
    4324:	2a 2d       	mov	r18, r10
    4326:	3b 2d       	mov	r19, r11
    4328:	4c 2d       	mov	r20, r12
    432a:	5d 2d       	mov	r21, r13
    432c:	6e 2d       	mov	r22, r14
    432e:	7f 2d       	mov	r23, r15
    4330:	80 2f       	mov	r24, r16
    4332:	91 2f       	mov	r25, r17
    4334:	a8 84       	ldd	r10, Y+8	; 0x08
    4336:	b9 84       	ldd	r11, Y+9	; 0x09
    4338:	ca 84       	ldd	r12, Y+10	; 0x0a
    433a:	db 84       	ldd	r13, Y+11	; 0x0b
    433c:	ec 84       	ldd	r14, Y+12	; 0x0c
    433e:	fd 84       	ldd	r15, Y+13	; 0x0d
    4340:	0e 85       	ldd	r16, Y+14	; 0x0e
    4342:	1f 85       	ldd	r17, Y+15	; 0x0f
    4344:	3d d4       	rcall	.+2170   	; 0x4bc0 <__subdi3>
    4346:	a2 2e       	mov	r10, r18
    4348:	b3 2e       	mov	r11, r19
    434a:	c4 2e       	mov	r12, r20
    434c:	d5 2e       	mov	r13, r21
    434e:	e6 2e       	mov	r14, r22
    4350:	f7 2e       	mov	r15, r23
    4352:	08 2f       	mov	r16, r24
    4354:	19 2f       	mov	r17, r25
    4356:	2a 2d       	mov	r18, r10
    4358:	3b 2d       	mov	r19, r11
    435a:	4c 2d       	mov	r20, r12
    435c:	5d 2d       	mov	r21, r13
    435e:	6e 2d       	mov	r22, r14
    4360:	7f 2d       	mov	r23, r15
    4362:	80 2f       	mov	r24, r16
    4364:	91 2f       	mov	r25, r17
    4366:	01 e0       	ldi	r16, 0x01	; 1
    4368:	09 d4       	rcall	.+2066   	; 0x4b7c <__ashldi3>
    436a:	22 2e       	mov	r2, r18
    436c:	33 2e       	mov	r3, r19
    436e:	44 2e       	mov	r4, r20
    4370:	55 2e       	mov	r5, r21
    4372:	66 2e       	mov	r6, r22
    4374:	77 2e       	mov	r7, r23
    4376:	88 2e       	mov	r8, r24
    4378:	99 2e       	mov	r9, r25
    437a:	a2 2c       	mov	r10, r2
    437c:	b3 2c       	mov	r11, r3
    437e:	c4 2c       	mov	r12, r4
    4380:	d5 2c       	mov	r13, r5
    4382:	e6 2c       	mov	r14, r6
    4384:	f7 2c       	mov	r15, r7
    4386:	08 2d       	mov	r16, r8
    4388:	19 2d       	mov	r17, r9
    438a:	2a 2c       	mov	r2, r10
    438c:	3b 2c       	mov	r3, r11
    438e:	4c 2c       	mov	r4, r12
    4390:	5d 2c       	mov	r5, r13
    4392:	6e 2c       	mov	r6, r14
    4394:	7f 2c       	mov	r7, r15
    4396:	80 2e       	mov	r8, r16
    4398:	91 2e       	mov	r9, r17
    439a:	0f 2e       	mov	r0, r31
    439c:	f6 e0       	ldi	r31, 0x06	; 6
    439e:	af 2e       	mov	r10, r31
    43a0:	f0 2d       	mov	r31, r0
    43a2:	b1 2c       	mov	r11, r1
    43a4:	c1 2c       	mov	r12, r1
    43a6:	d1 2c       	mov	r13, r1
    43a8:	e1 2c       	mov	r14, r1
    43aa:	f1 2c       	mov	r15, r1
    43ac:	00 e0       	ldi	r16, 0x00	; 0
    43ae:	10 e0       	ldi	r17, 0x00	; 0
    43b0:	22 2d       	mov	r18, r2
    43b2:	33 2d       	mov	r19, r3
    43b4:	44 2d       	mov	r20, r4
    43b6:	55 2d       	mov	r21, r5
    43b8:	66 2d       	mov	r22, r6
    43ba:	77 2d       	mov	r23, r7
    43bc:	88 2d       	mov	r24, r8
    43be:	99 2d       	mov	r25, r9
    43c0:	81 d3       	rcall	.+1794   	; 0x4ac4 <__udivdi3>
    43c2:	22 2e       	mov	r2, r18
    43c4:	33 2e       	mov	r3, r19
    43c6:	44 2e       	mov	r4, r20
    43c8:	55 2e       	mov	r5, r21
    43ca:	66 2e       	mov	r6, r22
    43cc:	77 2e       	mov	r7, r23
    43ce:	88 2e       	mov	r8, r24
    43d0:	99 2e       	mov	r9, r25
    43d2:	a2 2c       	mov	r10, r2
    43d4:	b3 2c       	mov	r11, r3
    43d6:	c4 2c       	mov	r12, r4
    43d8:	d5 2c       	mov	r13, r5
    43da:	e6 2c       	mov	r14, r6
    43dc:	f7 2c       	mov	r15, r7
    43de:	08 2d       	mov	r16, r8
    43e0:	19 2d       	mov	r17, r9
    43e2:	2a 2d       	mov	r18, r10
    43e4:	3b 2d       	mov	r19, r11
    43e6:	4c 2d       	mov	r20, r12
    43e8:	5d 2d       	mov	r21, r13
    43ea:	6e 2d       	mov	r22, r14
    43ec:	7f 2d       	mov	r23, r15
    43ee:	80 2f       	mov	r24, r16
    43f0:	91 2f       	mov	r25, r17
    43f2:	29 51       	subi	r18, 0x19	; 25
    43f4:	3c 4f       	sbci	r19, 0xFC	; 252
    43f6:	4f 4f       	sbci	r20, 0xFF	; 255
    43f8:	5f 4f       	sbci	r21, 0xFF	; 255
    43fa:	6f 4f       	sbci	r22, 0xFF	; 255
    43fc:	7f 4f       	sbci	r23, 0xFF	; 255
    43fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4400:	9f 4f       	sbci	r25, 0xFF	; 255
    4402:	a2 2e       	mov	r10, r18
    4404:	b3 2e       	mov	r11, r19
    4406:	c4 2e       	mov	r12, r20
    4408:	d5 2e       	mov	r13, r21
    440a:	e6 2e       	mov	r14, r22
    440c:	f7 2e       	mov	r15, r23
    440e:	08 2f       	mov	r16, r24
    4410:	19 2f       	mov	r17, r25
    4412:	2a 2d       	mov	r18, r10
    4414:	3b 2d       	mov	r19, r11
    4416:	4c 2d       	mov	r20, r12
    4418:	5d 2d       	mov	r21, r13
    441a:	6e 2d       	mov	r22, r14
    441c:	7f 2d       	mov	r23, r15
    441e:	80 2f       	mov	r24, r16
    4420:	91 2f       	mov	r25, r17
    4422:	8d d2       	rcall	.+1306   	; 0x493e <__floatundisf>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	4a e7       	ldi	r20, 0x7A	; 122
    442e:	54 e4       	ldi	r21, 0x44	; 68
    4430:	bc 01       	movw	r22, r24
    4432:	cd 01       	movw	r24, r26
    4434:	e2 d1       	rcall	.+964    	; 0x47fa <__divsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	bc 01       	movw	r22, r24
    443c:	cd 01       	movw	r24, r26
    443e:	4a d2       	rcall	.+1172   	; 0x48d4 <__fixunssfdi>
    4440:	a2 2e       	mov	r10, r18
    4442:	b3 2e       	mov	r11, r19
    4444:	c4 2e       	mov	r12, r20
    4446:	d5 2e       	mov	r13, r21
    4448:	e6 2e       	mov	r14, r22
    444a:	f7 2e       	mov	r15, r23
    444c:	08 2f       	mov	r16, r24
    444e:	19 2f       	mov	r17, r25
    4450:	d6 01       	movw	r26, r12
    4452:	c5 01       	movw	r24, r10
    4454:	bc 01       	movw	r22, r24
    4456:	cd 01       	movw	r24, r26
    4458:	8f de       	rcall	.-738    	; 0x4178 <__portable_avr_delay_cycles>
    445a:	8c e0       	ldi	r24, 0x0C	; 12
    445c:	89 83       	std	Y+1, r24	; 0x01
		
		data=BNO055_OPERATION_MODE_NDOF;
    445e:	6d e3       	ldi	r22, 0x3D	; 61
    4460:	ce 01       	movw	r24, r28
		BNO_Write (&data,BNO055_OPR_MODE_ADDR);
    4462:	01 96       	adiw	r24, 0x01	; 1
    4464:	0e 94 25 01 	call	0x24a	; 0x24a <BNO_Write>
    4468:	7b de       	rcall	.-778    	; 0x4160 <sysclk_get_cpu_hz>
    446a:	dc 01       	movw	r26, r24
		delay_ms(8);
    446c:	cb 01       	movw	r24, r22
    446e:	5c 01       	movw	r10, r24
    4470:	6d 01       	movw	r12, r26
    4472:	e1 2c       	mov	r14, r1
    4474:	f1 2c       	mov	r15, r1
    4476:	87 01       	movw	r16, r14
    4478:	2a 2d       	mov	r18, r10
    447a:	3b 2d       	mov	r19, r11
    447c:	4c 2d       	mov	r20, r12
    447e:	5d 2d       	mov	r21, r13
    4480:	6e 2d       	mov	r22, r14
    4482:	7f 2d       	mov	r23, r15
    4484:	80 2f       	mov	r24, r16
    4486:	91 2f       	mov	r25, r17
    4488:	03 e0       	ldi	r16, 0x03	; 3
    448a:	78 d3       	rcall	.+1776   	; 0x4b7c <__ashldi3>
    448c:	22 2e       	mov	r2, r18
    448e:	33 2e       	mov	r3, r19
    4490:	44 2e       	mov	r4, r20
    4492:	55 2e       	mov	r5, r21
    4494:	66 2e       	mov	r6, r22
    4496:	77 2e       	mov	r7, r23
    4498:	88 2e       	mov	r8, r24
    449a:	99 2e       	mov	r9, r25
    449c:	0f 2e       	mov	r0, r31
    449e:	f6 e0       	ldi	r31, 0x06	; 6
    44a0:	af 2e       	mov	r10, r31
    44a2:	f0 2d       	mov	r31, r0
    44a4:	b1 2c       	mov	r11, r1
    44a6:	c1 2c       	mov	r12, r1
    44a8:	d1 2c       	mov	r13, r1
    44aa:	e1 2c       	mov	r14, r1
    44ac:	f1 2c       	mov	r15, r1
    44ae:	00 e0       	ldi	r16, 0x00	; 0
    44b0:	10 e0       	ldi	r17, 0x00	; 0
    44b2:	22 2d       	mov	r18, r2
    44b4:	33 2d       	mov	r19, r3
    44b6:	44 2d       	mov	r20, r4
    44b8:	55 2d       	mov	r21, r5
    44ba:	66 2d       	mov	r22, r6
    44bc:	77 2d       	mov	r23, r7
    44be:	88 2d       	mov	r24, r8
    44c0:	99 2d       	mov	r25, r9
    44c2:	00 d3       	rcall	.+1536   	; 0x4ac4 <__udivdi3>
    44c4:	22 2e       	mov	r2, r18
    44c6:	33 2e       	mov	r3, r19
    44c8:	44 2e       	mov	r4, r20
    44ca:	55 2e       	mov	r5, r21
    44cc:	66 2e       	mov	r6, r22
    44ce:	77 2e       	mov	r7, r23
    44d0:	88 2e       	mov	r8, r24
    44d2:	99 2e       	mov	r9, r25
    44d4:	a2 2c       	mov	r10, r2
    44d6:	b3 2c       	mov	r11, r3
    44d8:	c4 2c       	mov	r12, r4
    44da:	d5 2c       	mov	r13, r5
    44dc:	e6 2c       	mov	r14, r6
    44de:	f7 2c       	mov	r15, r7
    44e0:	08 2d       	mov	r16, r8
    44e2:	19 2d       	mov	r17, r9
    44e4:	2a 2d       	mov	r18, r10
    44e6:	3b 2d       	mov	r19, r11
    44e8:	4c 2d       	mov	r20, r12
    44ea:	5d 2d       	mov	r21, r13
    44ec:	6e 2d       	mov	r22, r14
    44ee:	7f 2d       	mov	r23, r15
    44f0:	80 2f       	mov	r24, r16
    44f2:	91 2f       	mov	r25, r17
    44f4:	29 51       	subi	r18, 0x19	; 25
    44f6:	3c 4f       	sbci	r19, 0xFC	; 252
    44f8:	4f 4f       	sbci	r20, 0xFF	; 255
    44fa:	5f 4f       	sbci	r21, 0xFF	; 255
    44fc:	6f 4f       	sbci	r22, 0xFF	; 255
    44fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4500:	8f 4f       	sbci	r24, 0xFF	; 255
    4502:	9f 4f       	sbci	r25, 0xFF	; 255
    4504:	a2 2e       	mov	r10, r18
    4506:	b3 2e       	mov	r11, r19
    4508:	c4 2e       	mov	r12, r20
    450a:	d5 2e       	mov	r13, r21
    450c:	e6 2e       	mov	r14, r22
    450e:	f7 2e       	mov	r15, r23
    4510:	08 2f       	mov	r16, r24
    4512:	19 2f       	mov	r17, r25
    4514:	2a 2d       	mov	r18, r10
    4516:	3b 2d       	mov	r19, r11
    4518:	4c 2d       	mov	r20, r12
    451a:	5d 2d       	mov	r21, r13
    451c:	6e 2d       	mov	r22, r14
    451e:	7f 2d       	mov	r23, r15
    4520:	80 2f       	mov	r24, r16
    4522:	91 2f       	mov	r25, r17
    4524:	0c d2       	rcall	.+1048   	; 0x493e <__floatundisf>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	4a e7       	ldi	r20, 0x7A	; 122
    4530:	54 e4       	ldi	r21, 0x44	; 68
    4532:	bc 01       	movw	r22, r24
    4534:	cd 01       	movw	r24, r26
    4536:	61 d1       	rcall	.+706    	; 0x47fa <__divsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	c9 d1       	rcall	.+914    	; 0x48d4 <__fixunssfdi>
    4542:	a2 2e       	mov	r10, r18
    4544:	b3 2e       	mov	r11, r19
    4546:	c4 2e       	mov	r12, r20
    4548:	d5 2e       	mov	r13, r21
    454a:	e6 2e       	mov	r14, r22
    454c:	f7 2e       	mov	r15, r23
    454e:	08 2f       	mov	r16, r24
    4550:	19 2f       	mov	r17, r25
    4552:	d6 01       	movw	r26, r12
    4554:	c5 01       	movw	r24, r10
    4556:	bc 01       	movw	r22, r24
    4558:	cd 01       	movw	r24, r26
    455a:	0e de       	rcall	.-996    	; 0x4178 <__portable_avr_delay_cycles>
    455c:	66 e3       	ldi	r22, 0x36	; 54
    455e:	ce 01       	movw	r24, r28
    4560:	01 96       	adiw	r24, 0x01	; 1
	while (1) 
	{
		
		BNO_Read(&data,BNO055_SELFTEST_RESULT_ADDR);
    4562:	0e 94 3a 01 	call	0x274	; 0x274 <BNO_Read>
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	88 2f       	mov	r24, r24
    456a:	90 e0       	ldi	r25, 0x00	; 0
		
		printf("st_result = %i\n",data);
    456c:	29 2f       	mov	r18, r25
    456e:	2f 93       	push	r18
    4570:	8f 93       	push	r24
    4572:	89 e2       	ldi	r24, 0x29	; 41
    4574:	90 e2       	ldi	r25, 0x20	; 32
    4576:	89 2f       	mov	r24, r25
    4578:	8f 93       	push	r24
    457a:	89 e2       	ldi	r24, 0x29	; 41
    457c:	90 e2       	ldi	r25, 0x20	; 32
    457e:	8f 93       	push	r24
    4580:	93 d4       	rcall	.+2342   	; 0x4ea8 <printf>
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	0f 90       	pop	r0
    458a:	6d e3       	ldi	r22, 0x3D	; 61
    458c:	ce 01       	movw	r24, r28
    458e:	01 96       	adiw	r24, 0x01	; 1
		
		BNO_Read(&data,BNO055_OPR_MODE_ADDR);
    4590:	0e 94 3a 01 	call	0x274	; 0x274 <BNO_Read>
    4594:	89 81       	ldd	r24, Y+1	; 0x01
    4596:	88 2f       	mov	r24, r24
    4598:	90 e0       	ldi	r25, 0x00	; 0
		
		printf("opr mode = %i\n",data);
    459a:	29 2f       	mov	r18, r25
    459c:	2f 93       	push	r18
    459e:	8f 93       	push	r24
    45a0:	89 e3       	ldi	r24, 0x39	; 57
    45a2:	90 e2       	ldi	r25, 0x20	; 32
    45a4:	89 2f       	mov	r24, r25
    45a6:	8f 93       	push	r24
    45a8:	89 e3       	ldi	r24, 0x39	; 57
    45aa:	90 e2       	ldi	r25, 0x20	; 32
    45ac:	8f 93       	push	r24
    45ae:	7c d4       	rcall	.+2296   	; 0x4ea8 <printf>
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	65 e3       	ldi	r22, 0x35	; 53
    45ba:	ce 01       	movw	r24, r28
    45bc:	01 96       	adiw	r24, 0x01	; 1
		
		BNO_Read(&data,BNO055_CALIB_STAT_ADDR);
    45be:	0e 94 3a 01 	call	0x274	; 0x274 <BNO_Read>
    45c2:	89 81       	ldd	r24, Y+1	; 0x01
    45c4:	88 2f       	mov	r24, r24
    45c6:	90 e0       	ldi	r25, 0x00	; 0
		printf("Calibstat %i\n",data);
    45c8:	29 2f       	mov	r18, r25
    45ca:	2f 93       	push	r18
    45cc:	8f 93       	push	r24
    45ce:	88 e4       	ldi	r24, 0x48	; 72
    45d0:	90 e2       	ldi	r25, 0x20	; 32
    45d2:	89 2f       	mov	r24, r25
    45d4:	8f 93       	push	r24
    45d6:	88 e4       	ldi	r24, 0x48	; 72
    45d8:	90 e2       	ldi	r25, 0x20	; 32
    45da:	8f 93       	push	r24
    45dc:	65 d4       	rcall	.+2250   	; 0x4ea8 <printf>
    45de:	0f 90       	pop	r0
    45e0:	0f 90       	pop	r0
    45e2:	0f 90       	pop	r0
    45e4:	0f 90       	pop	r0
    45e6:	0e 94 4f 01 	call	0x29e	; 0x29e <get_acceleration_x>
		//printf("acceleration is x = %i",acel[0]);
		//printf(", y=%i",acel[1]);
		//printf(", z=%i\n",acel[2]);
		
		
		printf("acelx %i\n",get_acceleration_x());
    45ea:	29 2f       	mov	r18, r25
    45ec:	2f 93       	push	r18
    45ee:	8f 93       	push	r24
    45f0:	86 e5       	ldi	r24, 0x56	; 86
    45f2:	90 e2       	ldi	r25, 0x20	; 32
    45f4:	89 2f       	mov	r24, r25
    45f6:	8f 93       	push	r24
    45f8:	86 e5       	ldi	r24, 0x56	; 86
    45fa:	90 e2       	ldi	r25, 0x20	; 32
    45fc:	8f 93       	push	r24
    45fe:	54 d4       	rcall	.+2216   	; 0x4ea8 <printf>
    4600:	0f 90       	pop	r0
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
    4608:	ab dd       	rcall	.-1194   	; 0x4160 <sysclk_get_cpu_hz>
    460a:	dc 01       	movw	r26, r24
    460c:	cb 01       	movw	r24, r22
		delay_ms(500);
    460e:	8c 01       	movw	r16, r24
    4610:	9d 01       	movw	r18, r26
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	50 e0       	ldi	r21, 0x00	; 0
    4616:	ba 01       	movw	r22, r20
    4618:	08 8b       	std	Y+16, r16	; 0x10
    461a:	19 8b       	std	Y+17, r17	; 0x11
    461c:	2a 8b       	std	Y+18, r18	; 0x12
    461e:	3b 8b       	std	Y+19, r19	; 0x13
    4620:	4c 8b       	std	Y+20, r20	; 0x14
    4622:	5d 8b       	std	Y+21, r21	; 0x15
    4624:	6e 8b       	std	Y+22, r22	; 0x16
    4626:	7f 8b       	std	Y+23, r23	; 0x17
    4628:	28 88       	ldd	r2, Y+16	; 0x10
    462a:	39 88       	ldd	r3, Y+17	; 0x11
    462c:	4a 88       	ldd	r4, Y+18	; 0x12
    462e:	5b 88       	ldd	r5, Y+19	; 0x13
    4630:	6c 88       	ldd	r6, Y+20	; 0x14
    4632:	7d 88       	ldd	r7, Y+21	; 0x15
    4634:	8e 88       	ldd	r8, Y+22	; 0x16
    4636:	9f 88       	ldd	r9, Y+23	; 0x17
    4638:	22 2d       	mov	r18, r2
    463a:	33 2d       	mov	r19, r3
    463c:	44 2d       	mov	r20, r4
    463e:	55 2d       	mov	r21, r5
    4640:	66 2d       	mov	r22, r6
    4642:	77 2d       	mov	r23, r7
    4644:	88 2d       	mov	r24, r8
    4646:	99 2d       	mov	r25, r9
    4648:	02 e0       	ldi	r16, 0x02	; 2
    464a:	98 d2       	rcall	.+1328   	; 0x4b7c <__ashldi3>
    464c:	a2 2e       	mov	r10, r18
    464e:	b3 2e       	mov	r11, r19
    4650:	c4 2e       	mov	r12, r20
    4652:	d5 2e       	mov	r13, r21
    4654:	e6 2e       	mov	r14, r22
    4656:	f7 2e       	mov	r15, r23
    4658:	08 2f       	mov	r16, r24
    465a:	19 2f       	mov	r17, r25
    465c:	2a 2c       	mov	r2, r10
    465e:	3b 2c       	mov	r3, r11
    4660:	4c 2c       	mov	r4, r12
    4662:	5d 2c       	mov	r5, r13
    4664:	6e 2c       	mov	r6, r14
    4666:	7f 2c       	mov	r7, r15
    4668:	80 2e       	mov	r8, r16
    466a:	91 2e       	mov	r9, r17
    466c:	22 2d       	mov	r18, r2
    466e:	33 2d       	mov	r19, r3
    4670:	44 2d       	mov	r20, r4
    4672:	55 2d       	mov	r21, r5
    4674:	66 2d       	mov	r22, r6
    4676:	77 2d       	mov	r23, r7
    4678:	88 2d       	mov	r24, r8
    467a:	99 2d       	mov	r25, r9
    467c:	05 e0       	ldi	r16, 0x05	; 5
    467e:	7e d2       	rcall	.+1276   	; 0x4b7c <__ashldi3>
    4680:	a2 2e       	mov	r10, r18
    4682:	b3 2e       	mov	r11, r19
    4684:	c4 2e       	mov	r12, r20
    4686:	d5 2e       	mov	r13, r21
    4688:	e6 2e       	mov	r14, r22
    468a:	f7 2e       	mov	r15, r23
    468c:	08 2f       	mov	r16, r24
    468e:	19 2f       	mov	r17, r25
    4690:	2a 2d       	mov	r18, r10
    4692:	3b 2d       	mov	r19, r11
    4694:	4c 2d       	mov	r20, r12
    4696:	5d 2d       	mov	r21, r13
    4698:	6e 2d       	mov	r22, r14
    469a:	7f 2d       	mov	r23, r15
    469c:	80 2f       	mov	r24, r16
    469e:	91 2f       	mov	r25, r17
    46a0:	a2 2c       	mov	r10, r2
    46a2:	b3 2c       	mov	r11, r3
    46a4:	c4 2c       	mov	r12, r4
    46a6:	d5 2c       	mov	r13, r5
    46a8:	e6 2c       	mov	r14, r6
    46aa:	f7 2c       	mov	r15, r7
    46ac:	08 2d       	mov	r16, r8
    46ae:	19 2d       	mov	r17, r9
    46b0:	87 d2       	rcall	.+1294   	; 0x4bc0 <__subdi3>
    46b2:	a2 2e       	mov	r10, r18
    46b4:	b3 2e       	mov	r11, r19
    46b6:	c4 2e       	mov	r12, r20
    46b8:	d5 2e       	mov	r13, r21
    46ba:	e6 2e       	mov	r14, r22
    46bc:	f7 2e       	mov	r15, r23
    46be:	08 2f       	mov	r16, r24
    46c0:	19 2f       	mov	r17, r25
    46c2:	2a 2d       	mov	r18, r10
    46c4:	3b 2d       	mov	r19, r11
    46c6:	4c 2d       	mov	r20, r12
    46c8:	5d 2d       	mov	r21, r13
    46ca:	6e 2d       	mov	r22, r14
    46cc:	7f 2d       	mov	r23, r15
    46ce:	80 2f       	mov	r24, r16
    46d0:	91 2f       	mov	r25, r17
    46d2:	a8 88       	ldd	r10, Y+16	; 0x10
    46d4:	b9 88       	ldd	r11, Y+17	; 0x11
    46d6:	ca 88       	ldd	r12, Y+18	; 0x12
    46d8:	db 88       	ldd	r13, Y+19	; 0x13
    46da:	ec 88       	ldd	r14, Y+20	; 0x14
    46dc:	fd 88       	ldd	r15, Y+21	; 0x15
    46de:	0e 89       	ldd	r16, Y+22	; 0x16
    46e0:	1f 89       	ldd	r17, Y+23	; 0x17
    46e2:	65 d2       	rcall	.+1226   	; 0x4bae <__adddi3>
    46e4:	a2 2e       	mov	r10, r18
    46e6:	b3 2e       	mov	r11, r19
    46e8:	c4 2e       	mov	r12, r20
    46ea:	d5 2e       	mov	r13, r21
    46ec:	e6 2e       	mov	r14, r22
    46ee:	f7 2e       	mov	r15, r23
    46f0:	08 2f       	mov	r16, r24
    46f2:	19 2f       	mov	r17, r25
    46f4:	2a 2d       	mov	r18, r10
    46f6:	3b 2d       	mov	r19, r11
    46f8:	4c 2d       	mov	r20, r12
    46fa:	5d 2d       	mov	r21, r13
    46fc:	6e 2d       	mov	r22, r14
    46fe:	7f 2d       	mov	r23, r15
    4700:	80 2f       	mov	r24, r16
    4702:	91 2f       	mov	r25, r17
    4704:	02 e0       	ldi	r16, 0x02	; 2
    4706:	3a d2       	rcall	.+1140   	; 0x4b7c <__ashldi3>
    4708:	22 2e       	mov	r2, r18
    470a:	33 2e       	mov	r3, r19
    470c:	44 2e       	mov	r4, r20
    470e:	55 2e       	mov	r5, r21
    4710:	66 2e       	mov	r6, r22
    4712:	77 2e       	mov	r7, r23
    4714:	88 2e       	mov	r8, r24
    4716:	99 2e       	mov	r9, r25
    4718:	a2 2c       	mov	r10, r2
    471a:	b3 2c       	mov	r11, r3
    471c:	c4 2c       	mov	r12, r4
    471e:	d5 2c       	mov	r13, r5
    4720:	e6 2c       	mov	r14, r6
    4722:	f7 2c       	mov	r15, r7
    4724:	08 2d       	mov	r16, r8
    4726:	19 2d       	mov	r17, r9
    4728:	2a 2c       	mov	r2, r10
    472a:	3b 2c       	mov	r3, r11
    472c:	4c 2c       	mov	r4, r12
    472e:	5d 2c       	mov	r5, r13
    4730:	6e 2c       	mov	r6, r14
    4732:	7f 2c       	mov	r7, r15
    4734:	80 2e       	mov	r8, r16
    4736:	91 2e       	mov	r9, r17
    4738:	0f 2e       	mov	r0, r31
    473a:	f6 e0       	ldi	r31, 0x06	; 6
    473c:	af 2e       	mov	r10, r31
    473e:	f0 2d       	mov	r31, r0
    4740:	b1 2c       	mov	r11, r1
    4742:	c1 2c       	mov	r12, r1
    4744:	d1 2c       	mov	r13, r1
    4746:	e1 2c       	mov	r14, r1
    4748:	f1 2c       	mov	r15, r1
    474a:	00 e0       	ldi	r16, 0x00	; 0
    474c:	10 e0       	ldi	r17, 0x00	; 0
    474e:	22 2d       	mov	r18, r2
    4750:	33 2d       	mov	r19, r3
    4752:	44 2d       	mov	r20, r4
    4754:	55 2d       	mov	r21, r5
    4756:	66 2d       	mov	r22, r6
    4758:	77 2d       	mov	r23, r7
    475a:	88 2d       	mov	r24, r8
    475c:	99 2d       	mov	r25, r9
    475e:	b2 d1       	rcall	.+868    	; 0x4ac4 <__udivdi3>
    4760:	22 2e       	mov	r2, r18
    4762:	33 2e       	mov	r3, r19
    4764:	44 2e       	mov	r4, r20
    4766:	55 2e       	mov	r5, r21
    4768:	66 2e       	mov	r6, r22
    476a:	77 2e       	mov	r7, r23
    476c:	88 2e       	mov	r8, r24
    476e:	99 2e       	mov	r9, r25
    4770:	a2 2c       	mov	r10, r2
    4772:	b3 2c       	mov	r11, r3
    4774:	c4 2c       	mov	r12, r4
    4776:	d5 2c       	mov	r13, r5
    4778:	e6 2c       	mov	r14, r6
    477a:	f7 2c       	mov	r15, r7
    477c:	08 2d       	mov	r16, r8
    477e:	19 2d       	mov	r17, r9
    4780:	2a 2d       	mov	r18, r10
    4782:	3b 2d       	mov	r19, r11
    4784:	4c 2d       	mov	r20, r12
    4786:	5d 2d       	mov	r21, r13
    4788:	6e 2d       	mov	r22, r14
    478a:	7f 2d       	mov	r23, r15
    478c:	80 2f       	mov	r24, r16
    478e:	91 2f       	mov	r25, r17
    4790:	29 51       	subi	r18, 0x19	; 25
    4792:	3c 4f       	sbci	r19, 0xFC	; 252
    4794:	4f 4f       	sbci	r20, 0xFF	; 255
    4796:	5f 4f       	sbci	r21, 0xFF	; 255
    4798:	6f 4f       	sbci	r22, 0xFF	; 255
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	8f 4f       	sbci	r24, 0xFF	; 255
    479e:	9f 4f       	sbci	r25, 0xFF	; 255
    47a0:	a2 2e       	mov	r10, r18
    47a2:	b3 2e       	mov	r11, r19
    47a4:	c4 2e       	mov	r12, r20
    47a6:	d5 2e       	mov	r13, r21
    47a8:	e6 2e       	mov	r14, r22
    47aa:	f7 2e       	mov	r15, r23
    47ac:	08 2f       	mov	r16, r24
    47ae:	19 2f       	mov	r17, r25
    47b0:	2a 2d       	mov	r18, r10
    47b2:	3b 2d       	mov	r19, r11
    47b4:	4c 2d       	mov	r20, r12
    47b6:	5d 2d       	mov	r21, r13
    47b8:	6e 2d       	mov	r22, r14
    47ba:	7f 2d       	mov	r23, r15
    47bc:	80 2f       	mov	r24, r16
    47be:	91 2f       	mov	r25, r17
    47c0:	be d0       	rcall	.+380    	; 0x493e <__floatundisf>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	4a e7       	ldi	r20, 0x7A	; 122
    47cc:	54 e4       	ldi	r21, 0x44	; 68
    47ce:	bc 01       	movw	r22, r24
    47d0:	cd 01       	movw	r24, r26
    47d2:	13 d0       	rcall	.+38     	; 0x47fa <__divsf3>
    47d4:	dc 01       	movw	r26, r24
    47d6:	cb 01       	movw	r24, r22
    47d8:	bc 01       	movw	r22, r24
    47da:	cd 01       	movw	r24, r26
    47dc:	7b d0       	rcall	.+246    	; 0x48d4 <__fixunssfdi>
    47de:	a2 2e       	mov	r10, r18
    47e0:	b3 2e       	mov	r11, r19
    47e2:	c4 2e       	mov	r12, r20
    47e4:	d5 2e       	mov	r13, r21
    47e6:	e6 2e       	mov	r14, r22
    47e8:	f7 2e       	mov	r15, r23
    47ea:	08 2f       	mov	r16, r24
    47ec:	19 2f       	mov	r17, r25
    47ee:	d6 01       	movw	r26, r12
    47f0:	c5 01       	movw	r24, r10
    47f2:	bc 01       	movw	r22, r24
    47f4:	cd 01       	movw	r24, r26
    47f6:	c0 dc       	rcall	.-1664   	; 0x4178 <__portable_avr_delay_cycles>
    47f8:	b1 ce       	rjmp	.-670    	; 0x455c <main+0x35e>

000047fa <__divsf3>:
    47fa:	0c d0       	rcall	.+24     	; 0x4814 <__divsf3x>
    47fc:	05 c1       	rjmp	.+522    	; 0x4a08 <__fp_round>
    47fe:	fd d0       	rcall	.+506    	; 0x49fa <__fp_pscB>
		

	}
    4800:	40 f0       	brcs	.+16     	; 0x4812 <__divsf3+0x18>
    4802:	f4 d0       	rcall	.+488    	; 0x49ec <__fp_pscA>
    4804:	30 f0       	brcs	.+12     	; 0x4812 <__divsf3+0x18>
    4806:	21 f4       	brne	.+8      	; 0x4810 <__divsf3+0x16>
    4808:	5f 3f       	cpi	r21, 0xFF	; 255
    480a:	19 f0       	breq	.+6      	; 0x4812 <__divsf3+0x18>
    480c:	d6 c0       	rjmp	.+428    	; 0x49ba <__fp_inf>
    480e:	51 11       	cpse	r21, r1
    4810:	2f c1       	rjmp	.+606    	; 0x4a70 <__fp_szero>
    4812:	d9 c0       	rjmp	.+434    	; 0x49c6 <__fp_nan>

00004814 <__divsf3x>:
    4814:	0a d1       	rcall	.+532    	; 0x4a2a <__fp_split3>
    4816:	98 f3       	brcs	.-26     	; 0x47fe <__divsf3+0x4>

00004818 <__divsf3_pse>:
    4818:	99 23       	and	r25, r25
    481a:	c9 f3       	breq	.-14     	; 0x480e <__divsf3+0x14>
    481c:	55 23       	and	r21, r21
    481e:	b1 f3       	breq	.-20     	; 0x480c <__divsf3+0x12>
    4820:	95 1b       	sub	r25, r21
    4822:	55 0b       	sbc	r21, r21
    4824:	bb 27       	eor	r27, r27
    4826:	aa 27       	eor	r26, r26
    4828:	62 17       	cp	r22, r18
    482a:	73 07       	cpc	r23, r19
    482c:	84 07       	cpc	r24, r20
    482e:	38 f0       	brcs	.+14     	; 0x483e <__divsf3_pse+0x26>
    4830:	9f 5f       	subi	r25, 0xFF	; 255
    4832:	5f 4f       	sbci	r21, 0xFF	; 255
    4834:	22 0f       	add	r18, r18
    4836:	33 1f       	adc	r19, r19
    4838:	44 1f       	adc	r20, r20
    483a:	aa 1f       	adc	r26, r26
    483c:	a9 f3       	breq	.-22     	; 0x4828 <__divsf3_pse+0x10>
    483e:	33 d0       	rcall	.+102    	; 0x48a6 <__divsf3_pse+0x8e>
    4840:	0e 2e       	mov	r0, r30
    4842:	3a f0       	brmi	.+14     	; 0x4852 <__divsf3_pse+0x3a>
    4844:	e0 e8       	ldi	r30, 0x80	; 128
    4846:	30 d0       	rcall	.+96     	; 0x48a8 <__divsf3_pse+0x90>
    4848:	91 50       	subi	r25, 0x01	; 1
    484a:	50 40       	sbci	r21, 0x00	; 0
    484c:	e6 95       	lsr	r30
    484e:	00 1c       	adc	r0, r0
    4850:	ca f7       	brpl	.-14     	; 0x4844 <__divsf3_pse+0x2c>
    4852:	29 d0       	rcall	.+82     	; 0x48a6 <__divsf3_pse+0x8e>
    4854:	fe 2f       	mov	r31, r30
    4856:	27 d0       	rcall	.+78     	; 0x48a6 <__divsf3_pse+0x8e>
    4858:	66 0f       	add	r22, r22
    485a:	77 1f       	adc	r23, r23
    485c:	88 1f       	adc	r24, r24
    485e:	bb 1f       	adc	r27, r27
    4860:	26 17       	cp	r18, r22
    4862:	37 07       	cpc	r19, r23
    4864:	48 07       	cpc	r20, r24
    4866:	ab 07       	cpc	r26, r27
    4868:	b0 e8       	ldi	r27, 0x80	; 128
    486a:	09 f0       	breq	.+2      	; 0x486e <__divsf3_pse+0x56>
    486c:	bb 0b       	sbc	r27, r27
    486e:	80 2d       	mov	r24, r0
    4870:	bf 01       	movw	r22, r30
    4872:	ff 27       	eor	r31, r31
    4874:	93 58       	subi	r25, 0x83	; 131
    4876:	5f 4f       	sbci	r21, 0xFF	; 255
    4878:	2a f0       	brmi	.+10     	; 0x4884 <__divsf3_pse+0x6c>
    487a:	9e 3f       	cpi	r25, 0xFE	; 254
    487c:	51 05       	cpc	r21, r1
    487e:	68 f0       	brcs	.+26     	; 0x489a <__divsf3_pse+0x82>
    4880:	9c c0       	rjmp	.+312    	; 0x49ba <__fp_inf>
    4882:	f6 c0       	rjmp	.+492    	; 0x4a70 <__fp_szero>
    4884:	5f 3f       	cpi	r21, 0xFF	; 255
    4886:	ec f3       	brlt	.-6      	; 0x4882 <__divsf3_pse+0x6a>
    4888:	98 3e       	cpi	r25, 0xE8	; 232
    488a:	dc f3       	brlt	.-10     	; 0x4882 <__divsf3_pse+0x6a>
    488c:	86 95       	lsr	r24
    488e:	77 95       	ror	r23
    4890:	67 95       	ror	r22
    4892:	b7 95       	ror	r27
    4894:	f7 95       	ror	r31
    4896:	9f 5f       	subi	r25, 0xFF	; 255
    4898:	c9 f7       	brne	.-14     	; 0x488c <__divsf3_pse+0x74>
    489a:	88 0f       	add	r24, r24
    489c:	91 1d       	adc	r25, r1
    489e:	96 95       	lsr	r25
    48a0:	87 95       	ror	r24
    48a2:	97 f9       	bld	r25, 7
    48a4:	08 95       	ret
    48a6:	e1 e0       	ldi	r30, 0x01	; 1
    48a8:	66 0f       	add	r22, r22
    48aa:	77 1f       	adc	r23, r23
    48ac:	88 1f       	adc	r24, r24
    48ae:	bb 1f       	adc	r27, r27
    48b0:	62 17       	cp	r22, r18
    48b2:	73 07       	cpc	r23, r19
    48b4:	84 07       	cpc	r24, r20
    48b6:	ba 07       	cpc	r27, r26
    48b8:	20 f0       	brcs	.+8      	; 0x48c2 <__divsf3_pse+0xaa>
    48ba:	62 1b       	sub	r22, r18
    48bc:	73 0b       	sbc	r23, r19
    48be:	84 0b       	sbc	r24, r20
    48c0:	ba 0b       	sbc	r27, r26
    48c2:	ee 1f       	adc	r30, r30
    48c4:	88 f7       	brcc	.-30     	; 0x48a8 <__divsf3_pse+0x90>
    48c6:	e0 95       	com	r30
    48c8:	08 95       	ret

000048ca <__fixsfdi>:
    48ca:	be e3       	ldi	r27, 0x3E	; 62
    48cc:	04 d0       	rcall	.+8      	; 0x48d6 <__fixunssfdi+0x2>
    48ce:	08 f4       	brcc	.+2      	; 0x48d2 <__fixsfdi+0x8>
    48d0:	90 e8       	ldi	r25, 0x80	; 128
    48d2:	08 95       	ret

000048d4 <__fixunssfdi>:
    48d4:	bf e3       	ldi	r27, 0x3F	; 63
    48d6:	22 27       	eor	r18, r18
    48d8:	33 27       	eor	r19, r19
    48da:	a9 01       	movw	r20, r18
    48dc:	ae d0       	rcall	.+348    	; 0x4a3a <__fp_splitA>
    48de:	58 f1       	brcs	.+86     	; 0x4936 <__fixunssfdi+0x62>
    48e0:	9f 57       	subi	r25, 0x7F	; 127
    48e2:	40 f1       	brcs	.+80     	; 0x4934 <__fixunssfdi+0x60>
    48e4:	b9 17       	cp	r27, r25
    48e6:	38 f1       	brcs	.+78     	; 0x4936 <__fixunssfdi+0x62>
    48e8:	bf e3       	ldi	r27, 0x3F	; 63
    48ea:	b9 1b       	sub	r27, r25
    48ec:	99 27       	eor	r25, r25
    48ee:	b8 50       	subi	r27, 0x08	; 8
    48f0:	3a f4       	brpl	.+14     	; 0x4900 <__fixunssfdi+0x2c>
    48f2:	66 0f       	add	r22, r22
    48f4:	77 1f       	adc	r23, r23
    48f6:	88 1f       	adc	r24, r24
    48f8:	99 1f       	adc	r25, r25
    48fa:	b3 95       	inc	r27
    48fc:	d2 f3       	brmi	.-12     	; 0x48f2 <__fixunssfdi+0x1e>
    48fe:	16 c0       	rjmp	.+44     	; 0x492c <__fixunssfdi+0x58>
    4900:	b8 50       	subi	r27, 0x08	; 8
    4902:	4a f0       	brmi	.+18     	; 0x4916 <__fixunssfdi+0x42>
    4904:	23 2f       	mov	r18, r19
    4906:	34 2f       	mov	r19, r20
    4908:	45 2f       	mov	r20, r21
    490a:	56 2f       	mov	r21, r22
    490c:	67 2f       	mov	r22, r23
    490e:	78 2f       	mov	r23, r24
    4910:	88 27       	eor	r24, r24
    4912:	b8 50       	subi	r27, 0x08	; 8
    4914:	ba f7       	brpl	.-18     	; 0x4904 <__fixunssfdi+0x30>
    4916:	b8 5f       	subi	r27, 0xF8	; 248
    4918:	49 f0       	breq	.+18     	; 0x492c <__fixunssfdi+0x58>
    491a:	86 95       	lsr	r24
    491c:	77 95       	ror	r23
    491e:	67 95       	ror	r22
    4920:	57 95       	ror	r21
    4922:	47 95       	ror	r20
    4924:	37 95       	ror	r19
    4926:	27 95       	ror	r18
    4928:	ba 95       	dec	r27
    492a:	b9 f7       	brne	.-18     	; 0x491a <__fixunssfdi+0x46>
    492c:	0e f4       	brtc	.+2      	; 0x4930 <__fixunssfdi+0x5c>
    492e:	4e d0       	rcall	.+156    	; 0x49cc <__fp_negdi>
    4930:	88 94       	clc
    4932:	08 95       	ret
    4934:	88 94       	clc
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	70 e0       	ldi	r23, 0x00	; 0
    493a:	cb 01       	movw	r24, r22
    493c:	08 95       	ret

0000493e <__floatundisf>:
    493e:	e8 94       	clt

00004940 <__fp_di2sf>:
    4940:	f9 2f       	mov	r31, r25
    4942:	96 eb       	ldi	r25, 0xB6	; 182
    4944:	ff 23       	and	r31, r31
    4946:	81 f0       	breq	.+32     	; 0x4968 <__fp_di2sf+0x28>
    4948:	12 16       	cp	r1, r18
    494a:	13 06       	cpc	r1, r19
    494c:	14 06       	cpc	r1, r20
    494e:	44 0b       	sbc	r20, r20
    4950:	93 95       	inc	r25
    4952:	f6 95       	lsr	r31
    4954:	87 95       	ror	r24
    4956:	77 95       	ror	r23
    4958:	67 95       	ror	r22
    495a:	57 95       	ror	r21
    495c:	40 40       	sbci	r20, 0x00	; 0
    495e:	ff 23       	and	r31, r31
    4960:	b9 f7       	brne	.-18     	; 0x4950 <__fp_di2sf+0x10>
    4962:	1b c0       	rjmp	.+54     	; 0x499a <__fp_di2sf+0x5a>
    4964:	99 27       	eor	r25, r25
    4966:	08 95       	ret
    4968:	88 23       	and	r24, r24
    496a:	51 f4       	brne	.+20     	; 0x4980 <__fp_di2sf+0x40>
    496c:	98 50       	subi	r25, 0x08	; 8
    496e:	d2 f7       	brpl	.-12     	; 0x4964 <__fp_di2sf+0x24>
    4970:	87 2b       	or	r24, r23
    4972:	76 2f       	mov	r23, r22
    4974:	65 2f       	mov	r22, r21
    4976:	54 2f       	mov	r21, r20
    4978:	43 2f       	mov	r20, r19
    497a:	32 2f       	mov	r19, r18
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	b1 f3       	breq	.-20     	; 0x496c <__fp_di2sf+0x2c>
    4980:	12 16       	cp	r1, r18
    4982:	13 06       	cpc	r1, r19
    4984:	14 06       	cpc	r1, r20
    4986:	44 0b       	sbc	r20, r20
    4988:	88 23       	and	r24, r24
    498a:	3a f0       	brmi	.+14     	; 0x499a <__fp_di2sf+0x5a>
    498c:	9a 95       	dec	r25
    498e:	44 0f       	add	r20, r20
    4990:	55 1f       	adc	r21, r21
    4992:	66 1f       	adc	r22, r22
    4994:	77 1f       	adc	r23, r23
    4996:	88 1f       	adc	r24, r24
    4998:	ca f7       	brpl	.-14     	; 0x498c <__fp_di2sf+0x4c>
    499a:	55 23       	and	r21, r21
    499c:	4a f4       	brpl	.+18     	; 0x49b0 <__fp_di2sf+0x70>
    499e:	44 0f       	add	r20, r20
    49a0:	55 1f       	adc	r21, r21
    49a2:	11 f4       	brne	.+4      	; 0x49a8 <__fp_di2sf+0x68>
    49a4:	60 ff       	sbrs	r22, 0
    49a6:	04 c0       	rjmp	.+8      	; 0x49b0 <__fp_di2sf+0x70>
    49a8:	6f 5f       	subi	r22, 0xFF	; 255
    49aa:	7f 4f       	sbci	r23, 0xFF	; 255
    49ac:	8f 4f       	sbci	r24, 0xFF	; 255
    49ae:	9f 4f       	sbci	r25, 0xFF	; 255
    49b0:	88 0f       	add	r24, r24
    49b2:	96 95       	lsr	r25
    49b4:	87 95       	ror	r24
    49b6:	97 f9       	bld	r25, 7
    49b8:	08 95       	ret

000049ba <__fp_inf>:
    49ba:	97 f9       	bld	r25, 7
    49bc:	9f 67       	ori	r25, 0x7F	; 127
    49be:	80 e8       	ldi	r24, 0x80	; 128
    49c0:	70 e0       	ldi	r23, 0x00	; 0
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	08 95       	ret

000049c6 <__fp_nan>:
    49c6:	9f ef       	ldi	r25, 0xFF	; 255
    49c8:	80 ec       	ldi	r24, 0xC0	; 192
    49ca:	08 95       	ret

000049cc <__fp_negdi>:
    49cc:	90 95       	com	r25
    49ce:	80 95       	com	r24
    49d0:	70 95       	com	r23
    49d2:	60 95       	com	r22
    49d4:	50 95       	com	r21
    49d6:	40 95       	com	r20
    49d8:	30 95       	com	r19
    49da:	21 95       	neg	r18
    49dc:	3f 4f       	sbci	r19, 0xFF	; 255
    49de:	4f 4f       	sbci	r20, 0xFF	; 255
    49e0:	5f 4f       	sbci	r21, 0xFF	; 255
    49e2:	6f 4f       	sbci	r22, 0xFF	; 255
    49e4:	7f 4f       	sbci	r23, 0xFF	; 255
    49e6:	8f 4f       	sbci	r24, 0xFF	; 255
    49e8:	9f 4f       	sbci	r25, 0xFF	; 255
    49ea:	08 95       	ret

000049ec <__fp_pscA>:
    49ec:	00 24       	eor	r0, r0
    49ee:	0a 94       	dec	r0
    49f0:	16 16       	cp	r1, r22
    49f2:	17 06       	cpc	r1, r23
    49f4:	18 06       	cpc	r1, r24
    49f6:	09 06       	cpc	r0, r25
    49f8:	08 95       	ret

000049fa <__fp_pscB>:
    49fa:	00 24       	eor	r0, r0
    49fc:	0a 94       	dec	r0
    49fe:	12 16       	cp	r1, r18
    4a00:	13 06       	cpc	r1, r19
    4a02:	14 06       	cpc	r1, r20
    4a04:	05 06       	cpc	r0, r21
    4a06:	08 95       	ret

00004a08 <__fp_round>:
    4a08:	09 2e       	mov	r0, r25
    4a0a:	03 94       	inc	r0
    4a0c:	00 0c       	add	r0, r0
    4a0e:	11 f4       	brne	.+4      	; 0x4a14 <__fp_round+0xc>
    4a10:	88 23       	and	r24, r24
    4a12:	52 f0       	brmi	.+20     	; 0x4a28 <__fp_round+0x20>
    4a14:	bb 0f       	add	r27, r27
    4a16:	40 f4       	brcc	.+16     	; 0x4a28 <__fp_round+0x20>
    4a18:	bf 2b       	or	r27, r31
    4a1a:	11 f4       	brne	.+4      	; 0x4a20 <__fp_round+0x18>
    4a1c:	60 ff       	sbrs	r22, 0
    4a1e:	04 c0       	rjmp	.+8      	; 0x4a28 <__fp_round+0x20>
    4a20:	6f 5f       	subi	r22, 0xFF	; 255
    4a22:	7f 4f       	sbci	r23, 0xFF	; 255
    4a24:	8f 4f       	sbci	r24, 0xFF	; 255
    4a26:	9f 4f       	sbci	r25, 0xFF	; 255
    4a28:	08 95       	ret

00004a2a <__fp_split3>:
    4a2a:	57 fd       	sbrc	r21, 7
    4a2c:	90 58       	subi	r25, 0x80	; 128
    4a2e:	44 0f       	add	r20, r20
    4a30:	55 1f       	adc	r21, r21
    4a32:	59 f0       	breq	.+22     	; 0x4a4a <__fp_splitA+0x10>
    4a34:	5f 3f       	cpi	r21, 0xFF	; 255
    4a36:	71 f0       	breq	.+28     	; 0x4a54 <__fp_splitA+0x1a>
    4a38:	47 95       	ror	r20

00004a3a <__fp_splitA>:
    4a3a:	88 0f       	add	r24, r24
    4a3c:	97 fb       	bst	r25, 7
    4a3e:	99 1f       	adc	r25, r25
    4a40:	61 f0       	breq	.+24     	; 0x4a5a <__fp_splitA+0x20>
    4a42:	9f 3f       	cpi	r25, 0xFF	; 255
    4a44:	79 f0       	breq	.+30     	; 0x4a64 <__fp_splitA+0x2a>
    4a46:	87 95       	ror	r24
    4a48:	08 95       	ret
    4a4a:	12 16       	cp	r1, r18
    4a4c:	13 06       	cpc	r1, r19
    4a4e:	14 06       	cpc	r1, r20
    4a50:	55 1f       	adc	r21, r21
    4a52:	f2 cf       	rjmp	.-28     	; 0x4a38 <__fp_split3+0xe>
    4a54:	46 95       	lsr	r20
    4a56:	f1 df       	rcall	.-30     	; 0x4a3a <__fp_splitA>
    4a58:	08 c0       	rjmp	.+16     	; 0x4a6a <__fp_splitA+0x30>
    4a5a:	16 16       	cp	r1, r22
    4a5c:	17 06       	cpc	r1, r23
    4a5e:	18 06       	cpc	r1, r24
    4a60:	99 1f       	adc	r25, r25
    4a62:	f1 cf       	rjmp	.-30     	; 0x4a46 <__fp_splitA+0xc>
    4a64:	86 95       	lsr	r24
    4a66:	71 05       	cpc	r23, r1
    4a68:	61 05       	cpc	r22, r1
    4a6a:	08 94       	sec
    4a6c:	08 95       	ret

00004a6e <__fp_zero>:
    4a6e:	e8 94       	clt

00004a70 <__fp_szero>:
    4a70:	bb 27       	eor	r27, r27
    4a72:	66 27       	eor	r22, r22
    4a74:	77 27       	eor	r23, r23
    4a76:	cb 01       	movw	r24, r22
    4a78:	97 f9       	bld	r25, 7
    4a7a:	08 95       	ret

00004a7c <__udivmodsi4>:
    4a7c:	a1 e2       	ldi	r26, 0x21	; 33
    4a7e:	1a 2e       	mov	r1, r26
    4a80:	aa 1b       	sub	r26, r26
    4a82:	bb 1b       	sub	r27, r27
    4a84:	fd 01       	movw	r30, r26
    4a86:	0d c0       	rjmp	.+26     	; 0x4aa2 <__udivmodsi4_ep>

00004a88 <__udivmodsi4_loop>:
    4a88:	aa 1f       	adc	r26, r26
    4a8a:	bb 1f       	adc	r27, r27
    4a8c:	ee 1f       	adc	r30, r30
    4a8e:	ff 1f       	adc	r31, r31
    4a90:	a2 17       	cp	r26, r18
    4a92:	b3 07       	cpc	r27, r19
    4a94:	e4 07       	cpc	r30, r20
    4a96:	f5 07       	cpc	r31, r21
    4a98:	20 f0       	brcs	.+8      	; 0x4aa2 <__udivmodsi4_ep>
    4a9a:	a2 1b       	sub	r26, r18
    4a9c:	b3 0b       	sbc	r27, r19
    4a9e:	e4 0b       	sbc	r30, r20
    4aa0:	f5 0b       	sbc	r31, r21

00004aa2 <__udivmodsi4_ep>:
    4aa2:	66 1f       	adc	r22, r22
    4aa4:	77 1f       	adc	r23, r23
    4aa6:	88 1f       	adc	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	1a 94       	dec	r1
    4aac:	69 f7       	brne	.-38     	; 0x4a88 <__udivmodsi4_loop>
    4aae:	60 95       	com	r22
    4ab0:	70 95       	com	r23
    4ab2:	80 95       	com	r24
    4ab4:	90 95       	com	r25
    4ab6:	9b 01       	movw	r18, r22
    4ab8:	ac 01       	movw	r20, r24
    4aba:	bd 01       	movw	r22, r26
    4abc:	cf 01       	movw	r24, r30
    4abe:	08 95       	ret

00004ac0 <__umoddi3>:
    4ac0:	68 94       	set
    4ac2:	01 c0       	rjmp	.+2      	; 0x4ac6 <__udivdi3_umoddi3>

00004ac4 <__udivdi3>:
    4ac4:	e8 94       	clt

00004ac6 <__udivdi3_umoddi3>:
    4ac6:	8f 92       	push	r8
    4ac8:	9f 92       	push	r9
    4aca:	cf 93       	push	r28
    4acc:	df 93       	push	r29
    4ace:	05 d0       	rcall	.+10     	; 0x4ada <__udivmod64>
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	9f 90       	pop	r9
    4ad6:	8f 90       	pop	r8
    4ad8:	08 95       	ret

00004ada <__udivmod64>:
    4ada:	88 24       	eor	r8, r8
    4adc:	99 24       	eor	r9, r9
    4ade:	f4 01       	movw	r30, r8
    4ae0:	e4 01       	movw	r28, r8
    4ae2:	b0 e4       	ldi	r27, 0x40	; 64
    4ae4:	9f 93       	push	r25
    4ae6:	aa 27       	eor	r26, r26
    4ae8:	9a 15       	cp	r25, r10
    4aea:	8b 04       	cpc	r8, r11
    4aec:	9c 04       	cpc	r9, r12
    4aee:	ed 05       	cpc	r30, r13
    4af0:	fe 05       	cpc	r31, r14
    4af2:	cf 05       	cpc	r28, r15
    4af4:	d0 07       	cpc	r29, r16
    4af6:	a1 07       	cpc	r26, r17
    4af8:	98 f4       	brcc	.+38     	; 0x4b20 <__udivmod64+0x46>
    4afa:	ad 2f       	mov	r26, r29
    4afc:	dc 2f       	mov	r29, r28
    4afe:	cf 2f       	mov	r28, r31
    4b00:	fe 2f       	mov	r31, r30
    4b02:	e9 2d       	mov	r30, r9
    4b04:	98 2c       	mov	r9, r8
    4b06:	89 2e       	mov	r8, r25
    4b08:	98 2f       	mov	r25, r24
    4b0a:	87 2f       	mov	r24, r23
    4b0c:	76 2f       	mov	r23, r22
    4b0e:	65 2f       	mov	r22, r21
    4b10:	54 2f       	mov	r21, r20
    4b12:	43 2f       	mov	r20, r19
    4b14:	32 2f       	mov	r19, r18
    4b16:	22 27       	eor	r18, r18
    4b18:	b8 50       	subi	r27, 0x08	; 8
    4b1a:	31 f7       	brne	.-52     	; 0x4ae8 <__udivmod64+0xe>
    4b1c:	bf 91       	pop	r27
    4b1e:	27 c0       	rjmp	.+78     	; 0x4b6e <__udivmod64+0x94>
    4b20:	1b 2e       	mov	r1, r27
    4b22:	bf 91       	pop	r27
    4b24:	bb 27       	eor	r27, r27
    4b26:	22 0f       	add	r18, r18
    4b28:	33 1f       	adc	r19, r19
    4b2a:	44 1f       	adc	r20, r20
    4b2c:	55 1f       	adc	r21, r21
    4b2e:	66 1f       	adc	r22, r22
    4b30:	77 1f       	adc	r23, r23
    4b32:	88 1f       	adc	r24, r24
    4b34:	99 1f       	adc	r25, r25
    4b36:	88 1c       	adc	r8, r8
    4b38:	99 1c       	adc	r9, r9
    4b3a:	ee 1f       	adc	r30, r30
    4b3c:	ff 1f       	adc	r31, r31
    4b3e:	cc 1f       	adc	r28, r28
    4b40:	dd 1f       	adc	r29, r29
    4b42:	aa 1f       	adc	r26, r26
    4b44:	bb 1f       	adc	r27, r27
    4b46:	8a 14       	cp	r8, r10
    4b48:	9b 04       	cpc	r9, r11
    4b4a:	ec 05       	cpc	r30, r12
    4b4c:	fd 05       	cpc	r31, r13
    4b4e:	ce 05       	cpc	r28, r14
    4b50:	df 05       	cpc	r29, r15
    4b52:	a0 07       	cpc	r26, r16
    4b54:	b1 07       	cpc	r27, r17
    4b56:	48 f0       	brcs	.+18     	; 0x4b6a <__udivmod64+0x90>
    4b58:	8a 18       	sub	r8, r10
    4b5a:	9b 08       	sbc	r9, r11
    4b5c:	ec 09       	sbc	r30, r12
    4b5e:	fd 09       	sbc	r31, r13
    4b60:	ce 09       	sbc	r28, r14
    4b62:	df 09       	sbc	r29, r15
    4b64:	a0 0b       	sbc	r26, r16
    4b66:	b1 0b       	sbc	r27, r17
    4b68:	21 60       	ori	r18, 0x01	; 1
    4b6a:	1a 94       	dec	r1
    4b6c:	e1 f6       	brne	.-72     	; 0x4b26 <__udivmod64+0x4c>
    4b6e:	2e f4       	brtc	.+10     	; 0x4b7a <__udivmod64+0xa0>
    4b70:	94 01       	movw	r18, r8
    4b72:	af 01       	movw	r20, r30
    4b74:	be 01       	movw	r22, r28
    4b76:	cd 01       	movw	r24, r26
    4b78:	00 0c       	add	r0, r0
    4b7a:	08 95       	ret

00004b7c <__ashldi3>:
    4b7c:	0f 93       	push	r16
    4b7e:	08 30       	cpi	r16, 0x08	; 8
    4b80:	90 f0       	brcs	.+36     	; 0x4ba6 <__ashldi3+0x2a>
    4b82:	98 2f       	mov	r25, r24
    4b84:	87 2f       	mov	r24, r23
    4b86:	76 2f       	mov	r23, r22
    4b88:	65 2f       	mov	r22, r21
    4b8a:	54 2f       	mov	r21, r20
    4b8c:	43 2f       	mov	r20, r19
    4b8e:	32 2f       	mov	r19, r18
    4b90:	22 27       	eor	r18, r18
    4b92:	08 50       	subi	r16, 0x08	; 8
    4b94:	f4 cf       	rjmp	.-24     	; 0x4b7e <__ashldi3+0x2>
    4b96:	22 0f       	add	r18, r18
    4b98:	33 1f       	adc	r19, r19
    4b9a:	44 1f       	adc	r20, r20
    4b9c:	55 1f       	adc	r21, r21
    4b9e:	66 1f       	adc	r22, r22
    4ba0:	77 1f       	adc	r23, r23
    4ba2:	88 1f       	adc	r24, r24
    4ba4:	99 1f       	adc	r25, r25
    4ba6:	0a 95       	dec	r16
    4ba8:	b2 f7       	brpl	.-20     	; 0x4b96 <__ashldi3+0x1a>
    4baa:	0f 91       	pop	r16
    4bac:	08 95       	ret

00004bae <__adddi3>:
    4bae:	2a 0d       	add	r18, r10
    4bb0:	3b 1d       	adc	r19, r11
    4bb2:	4c 1d       	adc	r20, r12
    4bb4:	5d 1d       	adc	r21, r13
    4bb6:	6e 1d       	adc	r22, r14
    4bb8:	7f 1d       	adc	r23, r15
    4bba:	80 1f       	adc	r24, r16
    4bbc:	91 1f       	adc	r25, r17
    4bbe:	08 95       	ret

00004bc0 <__subdi3>:
    4bc0:	2a 19       	sub	r18, r10
    4bc2:	3b 09       	sbc	r19, r11
    4bc4:	4c 09       	sbc	r20, r12
    4bc6:	5d 09       	sbc	r21, r13
    4bc8:	6e 09       	sbc	r22, r14
    4bca:	7f 09       	sbc	r23, r15
    4bcc:	80 0b       	sbc	r24, r16
    4bce:	91 0b       	sbc	r25, r17
    4bd0:	08 95       	ret

00004bd2 <malloc>:
    4bd2:	0f 93       	push	r16
    4bd4:	1f 93       	push	r17
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	82 30       	cpi	r24, 0x02	; 2
    4bdc:	91 05       	cpc	r25, r1
    4bde:	10 f4       	brcc	.+4      	; 0x4be4 <malloc+0x12>
    4be0:	82 e0       	ldi	r24, 0x02	; 2
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <__flp>
    4be8:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <__flp+0x1>
    4bec:	20 e0       	ldi	r18, 0x00	; 0
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	a0 e0       	ldi	r26, 0x00	; 0
    4bf2:	b0 e0       	ldi	r27, 0x00	; 0
    4bf4:	30 97       	sbiw	r30, 0x00	; 0
    4bf6:	19 f1       	breq	.+70     	; 0x4c3e <malloc+0x6c>
    4bf8:	40 81       	ld	r20, Z
    4bfa:	51 81       	ldd	r21, Z+1	; 0x01
    4bfc:	02 81       	ldd	r16, Z+2	; 0x02
    4bfe:	13 81       	ldd	r17, Z+3	; 0x03
    4c00:	48 17       	cp	r20, r24
    4c02:	59 07       	cpc	r21, r25
    4c04:	c8 f0       	brcs	.+50     	; 0x4c38 <malloc+0x66>
    4c06:	84 17       	cp	r24, r20
    4c08:	95 07       	cpc	r25, r21
    4c0a:	69 f4       	brne	.+26     	; 0x4c26 <malloc+0x54>
    4c0c:	10 97       	sbiw	r26, 0x00	; 0
    4c0e:	31 f0       	breq	.+12     	; 0x4c1c <malloc+0x4a>
    4c10:	12 96       	adiw	r26, 0x02	; 2
    4c12:	0c 93       	st	X, r16
    4c14:	12 97       	sbiw	r26, 0x02	; 2
    4c16:	13 96       	adiw	r26, 0x03	; 3
    4c18:	1c 93       	st	X, r17
    4c1a:	27 c0       	rjmp	.+78     	; 0x4c6a <malloc+0x98>
    4c1c:	00 93 d7 20 	sts	0x20D7, r16	; 0x8020d7 <__flp>
    4c20:	10 93 d8 20 	sts	0x20D8, r17	; 0x8020d8 <__flp+0x1>
    4c24:	22 c0       	rjmp	.+68     	; 0x4c6a <malloc+0x98>
    4c26:	21 15       	cp	r18, r1
    4c28:	31 05       	cpc	r19, r1
    4c2a:	19 f0       	breq	.+6      	; 0x4c32 <malloc+0x60>
    4c2c:	42 17       	cp	r20, r18
    4c2e:	53 07       	cpc	r21, r19
    4c30:	18 f4       	brcc	.+6      	; 0x4c38 <malloc+0x66>
    4c32:	9a 01       	movw	r18, r20
    4c34:	bd 01       	movw	r22, r26
    4c36:	ef 01       	movw	r28, r30
    4c38:	df 01       	movw	r26, r30
    4c3a:	f8 01       	movw	r30, r16
    4c3c:	db cf       	rjmp	.-74     	; 0x4bf4 <malloc+0x22>
    4c3e:	21 15       	cp	r18, r1
    4c40:	31 05       	cpc	r19, r1
    4c42:	f9 f0       	breq	.+62     	; 0x4c82 <malloc+0xb0>
    4c44:	28 1b       	sub	r18, r24
    4c46:	39 0b       	sbc	r19, r25
    4c48:	24 30       	cpi	r18, 0x04	; 4
    4c4a:	31 05       	cpc	r19, r1
    4c4c:	80 f4       	brcc	.+32     	; 0x4c6e <malloc+0x9c>
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	9b 81       	ldd	r25, Y+3	; 0x03
    4c52:	61 15       	cp	r22, r1
    4c54:	71 05       	cpc	r23, r1
    4c56:	21 f0       	breq	.+8      	; 0x4c60 <malloc+0x8e>
    4c58:	fb 01       	movw	r30, r22
    4c5a:	82 83       	std	Z+2, r24	; 0x02
    4c5c:	93 83       	std	Z+3, r25	; 0x03
    4c5e:	04 c0       	rjmp	.+8      	; 0x4c68 <malloc+0x96>
    4c60:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <__flp>
    4c64:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <__flp+0x1>
    4c68:	fe 01       	movw	r30, r28
    4c6a:	32 96       	adiw	r30, 0x02	; 2
    4c6c:	44 c0       	rjmp	.+136    	; 0x4cf6 <malloc+0x124>
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e2 0f       	add	r30, r18
    4c72:	f3 1f       	adc	r31, r19
    4c74:	81 93       	st	Z+, r24
    4c76:	91 93       	st	Z+, r25
    4c78:	22 50       	subi	r18, 0x02	; 2
    4c7a:	31 09       	sbc	r19, r1
    4c7c:	28 83       	st	Y, r18
    4c7e:	39 83       	std	Y+1, r19	; 0x01
    4c80:	3a c0       	rjmp	.+116    	; 0x4cf6 <malloc+0x124>
    4c82:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <__brkval>
    4c86:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <__brkval+0x1>
    4c8a:	23 2b       	or	r18, r19
    4c8c:	41 f4       	brne	.+16     	; 0x4c9e <malloc+0xcc>
    4c8e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4c92:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4c96:	20 93 d5 20 	sts	0x20D5, r18	; 0x8020d5 <__brkval>
    4c9a:	30 93 d6 20 	sts	0x20D6, r19	; 0x8020d6 <__brkval+0x1>
    4c9e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4ca2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4ca6:	21 15       	cp	r18, r1
    4ca8:	31 05       	cpc	r19, r1
    4caa:	41 f4       	brne	.+16     	; 0x4cbc <malloc+0xea>
    4cac:	2d b7       	in	r18, 0x3d	; 61
    4cae:	3e b7       	in	r19, 0x3e	; 62
    4cb0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4cb4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4cb8:	24 1b       	sub	r18, r20
    4cba:	35 0b       	sbc	r19, r21
    4cbc:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <__brkval>
    4cc0:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <__brkval+0x1>
    4cc4:	e2 17       	cp	r30, r18
    4cc6:	f3 07       	cpc	r31, r19
    4cc8:	a0 f4       	brcc	.+40     	; 0x4cf2 <malloc+0x120>
    4cca:	2e 1b       	sub	r18, r30
    4ccc:	3f 0b       	sbc	r19, r31
    4cce:	28 17       	cp	r18, r24
    4cd0:	39 07       	cpc	r19, r25
    4cd2:	78 f0       	brcs	.+30     	; 0x4cf2 <malloc+0x120>
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	4e 5f       	subi	r20, 0xFE	; 254
    4cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cda:	24 17       	cp	r18, r20
    4cdc:	35 07       	cpc	r19, r21
    4cde:	48 f0       	brcs	.+18     	; 0x4cf2 <malloc+0x120>
    4ce0:	4e 0f       	add	r20, r30
    4ce2:	5f 1f       	adc	r21, r31
    4ce4:	40 93 d5 20 	sts	0x20D5, r20	; 0x8020d5 <__brkval>
    4ce8:	50 93 d6 20 	sts	0x20D6, r21	; 0x8020d6 <__brkval+0x1>
    4cec:	81 93       	st	Z+, r24
    4cee:	91 93       	st	Z+, r25
    4cf0:	02 c0       	rjmp	.+4      	; 0x4cf6 <malloc+0x124>
    4cf2:	e0 e0       	ldi	r30, 0x00	; 0
    4cf4:	f0 e0       	ldi	r31, 0x00	; 0
    4cf6:	cf 01       	movw	r24, r30
    4cf8:	df 91       	pop	r29
    4cfa:	cf 91       	pop	r28
    4cfc:	1f 91       	pop	r17
    4cfe:	0f 91       	pop	r16
    4d00:	08 95       	ret

00004d02 <free>:
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	00 97       	sbiw	r24, 0x00	; 0
    4d08:	09 f4       	brne	.+2      	; 0x4d0c <free+0xa>
    4d0a:	81 c0       	rjmp	.+258    	; 0x4e0e <free+0x10c>
    4d0c:	fc 01       	movw	r30, r24
    4d0e:	32 97       	sbiw	r30, 0x02	; 2
    4d10:	12 82       	std	Z+2, r1	; 0x02
    4d12:	13 82       	std	Z+3, r1	; 0x03
    4d14:	a0 91 d7 20 	lds	r26, 0x20D7	; 0x8020d7 <__flp>
    4d18:	b0 91 d8 20 	lds	r27, 0x20D8	; 0x8020d8 <__flp+0x1>
    4d1c:	10 97       	sbiw	r26, 0x00	; 0
    4d1e:	81 f4       	brne	.+32     	; 0x4d40 <free+0x3e>
    4d20:	20 81       	ld	r18, Z
    4d22:	31 81       	ldd	r19, Z+1	; 0x01
    4d24:	82 0f       	add	r24, r18
    4d26:	93 1f       	adc	r25, r19
    4d28:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <__brkval>
    4d2c:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <__brkval+0x1>
    4d30:	28 17       	cp	r18, r24
    4d32:	39 07       	cpc	r19, r25
    4d34:	51 f5       	brne	.+84     	; 0x4d8a <free+0x88>
    4d36:	e0 93 d5 20 	sts	0x20D5, r30	; 0x8020d5 <__brkval>
    4d3a:	f0 93 d6 20 	sts	0x20D6, r31	; 0x8020d6 <__brkval+0x1>
    4d3e:	67 c0       	rjmp	.+206    	; 0x4e0e <free+0x10c>
    4d40:	ed 01       	movw	r28, r26
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	ce 17       	cp	r28, r30
    4d48:	df 07       	cpc	r29, r31
    4d4a:	40 f4       	brcc	.+16     	; 0x4d5c <free+0x5a>
    4d4c:	4a 81       	ldd	r20, Y+2	; 0x02
    4d4e:	5b 81       	ldd	r21, Y+3	; 0x03
    4d50:	9e 01       	movw	r18, r28
    4d52:	41 15       	cp	r20, r1
    4d54:	51 05       	cpc	r21, r1
    4d56:	f1 f0       	breq	.+60     	; 0x4d94 <free+0x92>
    4d58:	ea 01       	movw	r28, r20
    4d5a:	f5 cf       	rjmp	.-22     	; 0x4d46 <free+0x44>
    4d5c:	c2 83       	std	Z+2, r28	; 0x02
    4d5e:	d3 83       	std	Z+3, r29	; 0x03
    4d60:	40 81       	ld	r20, Z
    4d62:	51 81       	ldd	r21, Z+1	; 0x01
    4d64:	84 0f       	add	r24, r20
    4d66:	95 1f       	adc	r25, r21
    4d68:	c8 17       	cp	r28, r24
    4d6a:	d9 07       	cpc	r29, r25
    4d6c:	59 f4       	brne	.+22     	; 0x4d84 <free+0x82>
    4d6e:	88 81       	ld	r24, Y
    4d70:	99 81       	ldd	r25, Y+1	; 0x01
    4d72:	84 0f       	add	r24, r20
    4d74:	95 1f       	adc	r25, r21
    4d76:	02 96       	adiw	r24, 0x02	; 2
    4d78:	80 83       	st	Z, r24
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d80:	82 83       	std	Z+2, r24	; 0x02
    4d82:	93 83       	std	Z+3, r25	; 0x03
    4d84:	21 15       	cp	r18, r1
    4d86:	31 05       	cpc	r19, r1
    4d88:	29 f4       	brne	.+10     	; 0x4d94 <free+0x92>
    4d8a:	e0 93 d7 20 	sts	0x20D7, r30	; 0x8020d7 <__flp>
    4d8e:	f0 93 d8 20 	sts	0x20D8, r31	; 0x8020d8 <__flp+0x1>
    4d92:	3d c0       	rjmp	.+122    	; 0x4e0e <free+0x10c>
    4d94:	e9 01       	movw	r28, r18
    4d96:	ea 83       	std	Y+2, r30	; 0x02
    4d98:	fb 83       	std	Y+3, r31	; 0x03
    4d9a:	49 91       	ld	r20, Y+
    4d9c:	59 91       	ld	r21, Y+
    4d9e:	c4 0f       	add	r28, r20
    4da0:	d5 1f       	adc	r29, r21
    4da2:	ec 17       	cp	r30, r28
    4da4:	fd 07       	cpc	r31, r29
    4da6:	61 f4       	brne	.+24     	; 0x4dc0 <free+0xbe>
    4da8:	80 81       	ld	r24, Z
    4daa:	91 81       	ldd	r25, Z+1	; 0x01
    4dac:	84 0f       	add	r24, r20
    4dae:	95 1f       	adc	r25, r21
    4db0:	02 96       	adiw	r24, 0x02	; 2
    4db2:	e9 01       	movw	r28, r18
    4db4:	88 83       	st	Y, r24
    4db6:	99 83       	std	Y+1, r25	; 0x01
    4db8:	82 81       	ldd	r24, Z+2	; 0x02
    4dba:	93 81       	ldd	r25, Z+3	; 0x03
    4dbc:	8a 83       	std	Y+2, r24	; 0x02
    4dbe:	9b 83       	std	Y+3, r25	; 0x03
    4dc0:	e0 e0       	ldi	r30, 0x00	; 0
    4dc2:	f0 e0       	ldi	r31, 0x00	; 0
    4dc4:	12 96       	adiw	r26, 0x02	; 2
    4dc6:	8d 91       	ld	r24, X+
    4dc8:	9c 91       	ld	r25, X
    4dca:	13 97       	sbiw	r26, 0x03	; 3
    4dcc:	00 97       	sbiw	r24, 0x00	; 0
    4dce:	19 f0       	breq	.+6      	; 0x4dd6 <free+0xd4>
    4dd0:	fd 01       	movw	r30, r26
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	f7 cf       	rjmp	.-18     	; 0x4dc4 <free+0xc2>
    4dd6:	8d 91       	ld	r24, X+
    4dd8:	9c 91       	ld	r25, X
    4dda:	11 97       	sbiw	r26, 0x01	; 1
    4ddc:	9d 01       	movw	r18, r26
    4dde:	2e 5f       	subi	r18, 0xFE	; 254
    4de0:	3f 4f       	sbci	r19, 0xFF	; 255
    4de2:	82 0f       	add	r24, r18
    4de4:	93 1f       	adc	r25, r19
    4de6:	20 91 d5 20 	lds	r18, 0x20D5	; 0x8020d5 <__brkval>
    4dea:	30 91 d6 20 	lds	r19, 0x20D6	; 0x8020d6 <__brkval+0x1>
    4dee:	28 17       	cp	r18, r24
    4df0:	39 07       	cpc	r19, r25
    4df2:	69 f4       	brne	.+26     	; 0x4e0e <free+0x10c>
    4df4:	30 97       	sbiw	r30, 0x00	; 0
    4df6:	29 f4       	brne	.+10     	; 0x4e02 <free+0x100>
    4df8:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <__flp>
    4dfc:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <__flp+0x1>
    4e00:	02 c0       	rjmp	.+4      	; 0x4e06 <free+0x104>
    4e02:	12 82       	std	Z+2, r1	; 0x02
    4e04:	13 82       	std	Z+3, r1	; 0x03
    4e06:	a0 93 d5 20 	sts	0x20D5, r26	; 0x8020d5 <__brkval>
    4e0a:	b0 93 d6 20 	sts	0x20D6, r27	; 0x8020d6 <__brkval+0x1>
    4e0e:	df 91       	pop	r29
    4e10:	cf 91       	pop	r28
    4e12:	08 95       	ret

00004e14 <fdevopen>:
    4e14:	0f 93       	push	r16
    4e16:	1f 93       	push	r17
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	00 97       	sbiw	r24, 0x00	; 0
    4e1e:	31 f4       	brne	.+12     	; 0x4e2c <fdevopen+0x18>
    4e20:	61 15       	cp	r22, r1
    4e22:	71 05       	cpc	r23, r1
    4e24:	19 f4       	brne	.+6      	; 0x4e2c <fdevopen+0x18>
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	39 c0       	rjmp	.+114    	; 0x4e9e <fdevopen+0x8a>
    4e2c:	8b 01       	movw	r16, r22
    4e2e:	ec 01       	movw	r28, r24
    4e30:	6e e0       	ldi	r22, 0x0E	; 14
    4e32:	70 e0       	ldi	r23, 0x00	; 0
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	71 d2       	rcall	.+1250   	; 0x531c <calloc>
    4e3a:	fc 01       	movw	r30, r24
    4e3c:	89 2b       	or	r24, r25
    4e3e:	99 f3       	breq	.-26     	; 0x4e26 <fdevopen+0x12>
    4e40:	80 e8       	ldi	r24, 0x80	; 128
    4e42:	83 83       	std	Z+3, r24	; 0x03
    4e44:	01 15       	cp	r16, r1
    4e46:	11 05       	cpc	r17, r1
    4e48:	71 f0       	breq	.+28     	; 0x4e66 <fdevopen+0x52>
    4e4a:	02 87       	std	Z+10, r16	; 0x0a
    4e4c:	13 87       	std	Z+11, r17	; 0x0b
    4e4e:	81 e8       	ldi	r24, 0x81	; 129
    4e50:	83 83       	std	Z+3, r24	; 0x03
    4e52:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <__iob>
    4e56:	90 91 da 20 	lds	r25, 0x20DA	; 0x8020da <__iob+0x1>
    4e5a:	89 2b       	or	r24, r25
    4e5c:	21 f4       	brne	.+8      	; 0x4e66 <fdevopen+0x52>
    4e5e:	e0 93 d9 20 	sts	0x20D9, r30	; 0x8020d9 <__iob>
    4e62:	f0 93 da 20 	sts	0x20DA, r31	; 0x8020da <__iob+0x1>
    4e66:	20 97       	sbiw	r28, 0x00	; 0
    4e68:	c9 f0       	breq	.+50     	; 0x4e9c <fdevopen+0x88>
    4e6a:	c0 87       	std	Z+8, r28	; 0x08
    4e6c:	d1 87       	std	Z+9, r29	; 0x09
    4e6e:	83 81       	ldd	r24, Z+3	; 0x03
    4e70:	82 60       	ori	r24, 0x02	; 2
    4e72:	83 83       	std	Z+3, r24	; 0x03
    4e74:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <__iob+0x2>
    4e78:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <__iob+0x3>
    4e7c:	89 2b       	or	r24, r25
    4e7e:	71 f4       	brne	.+28     	; 0x4e9c <fdevopen+0x88>
    4e80:	e0 93 db 20 	sts	0x20DB, r30	; 0x8020db <__iob+0x2>
    4e84:	f0 93 dc 20 	sts	0x20DC, r31	; 0x8020dc <__iob+0x3>
    4e88:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <__iob+0x4>
    4e8c:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <__iob+0x5>
    4e90:	89 2b       	or	r24, r25
    4e92:	21 f4       	brne	.+8      	; 0x4e9c <fdevopen+0x88>
    4e94:	e0 93 dd 20 	sts	0x20DD, r30	; 0x8020dd <__iob+0x4>
    4e98:	f0 93 de 20 	sts	0x20DE, r31	; 0x8020de <__iob+0x5>
    4e9c:	cf 01       	movw	r24, r30
    4e9e:	df 91       	pop	r29
    4ea0:	cf 91       	pop	r28
    4ea2:	1f 91       	pop	r17
    4ea4:	0f 91       	pop	r16
    4ea6:	08 95       	ret

00004ea8 <printf>:
    4ea8:	cf 93       	push	r28
    4eaa:	df 93       	push	r29
    4eac:	cd b7       	in	r28, 0x3d	; 61
    4eae:	de b7       	in	r29, 0x3e	; 62
    4eb0:	ae 01       	movw	r20, r28
    4eb2:	4a 5f       	subi	r20, 0xFA	; 250
    4eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4eb6:	fa 01       	movw	r30, r20
    4eb8:	61 91       	ld	r22, Z+
    4eba:	71 91       	ld	r23, Z+
    4ebc:	af 01       	movw	r20, r30
    4ebe:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <__iob+0x2>
    4ec2:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <__iob+0x3>
    4ec6:	33 d0       	rcall	.+102    	; 0x4f2e <vfprintf>
    4ec8:	df 91       	pop	r29
    4eca:	cf 91       	pop	r28
    4ecc:	08 95       	ret

00004ece <puts>:
    4ece:	0f 93       	push	r16
    4ed0:	1f 93       	push	r17
    4ed2:	cf 93       	push	r28
    4ed4:	df 93       	push	r29
    4ed6:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <__iob+0x2>
    4eda:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <__iob+0x3>
    4ede:	23 81       	ldd	r18, Z+3	; 0x03
    4ee0:	21 ff       	sbrs	r18, 1
    4ee2:	1b c0       	rjmp	.+54     	; 0x4f1a <puts+0x4c>
    4ee4:	8c 01       	movw	r16, r24
    4ee6:	d0 e0       	ldi	r29, 0x00	; 0
    4ee8:	c0 e0       	ldi	r28, 0x00	; 0
    4eea:	f8 01       	movw	r30, r16
    4eec:	81 91       	ld	r24, Z+
    4eee:	8f 01       	movw	r16, r30
    4ef0:	60 91 db 20 	lds	r22, 0x20DB	; 0x8020db <__iob+0x2>
    4ef4:	70 91 dc 20 	lds	r23, 0x20DC	; 0x8020dc <__iob+0x3>
    4ef8:	db 01       	movw	r26, r22
    4efa:	18 96       	adiw	r26, 0x08	; 8
    4efc:	ed 91       	ld	r30, X+
    4efe:	fc 91       	ld	r31, X
    4f00:	19 97       	sbiw	r26, 0x09	; 9
    4f02:	88 23       	and	r24, r24
    4f04:	31 f0       	breq	.+12     	; 0x4f12 <puts+0x44>
    4f06:	19 95       	eicall
    4f08:	89 2b       	or	r24, r25
    4f0a:	79 f3       	breq	.-34     	; 0x4eea <puts+0x1c>
    4f0c:	df ef       	ldi	r29, 0xFF	; 255
    4f0e:	cf ef       	ldi	r28, 0xFF	; 255
    4f10:	ec cf       	rjmp	.-40     	; 0x4eea <puts+0x1c>
    4f12:	8a e0       	ldi	r24, 0x0A	; 10
    4f14:	19 95       	eicall
    4f16:	89 2b       	or	r24, r25
    4f18:	19 f0       	breq	.+6      	; 0x4f20 <puts+0x52>
    4f1a:	8f ef       	ldi	r24, 0xFF	; 255
    4f1c:	9f ef       	ldi	r25, 0xFF	; 255
    4f1e:	02 c0       	rjmp	.+4      	; 0x4f24 <puts+0x56>
    4f20:	8d 2f       	mov	r24, r29
    4f22:	9c 2f       	mov	r25, r28
    4f24:	df 91       	pop	r29
    4f26:	cf 91       	pop	r28
    4f28:	1f 91       	pop	r17
    4f2a:	0f 91       	pop	r16
    4f2c:	08 95       	ret

00004f2e <vfprintf>:
    4f2e:	2f 92       	push	r2
    4f30:	3f 92       	push	r3
    4f32:	4f 92       	push	r4
    4f34:	5f 92       	push	r5
    4f36:	6f 92       	push	r6
    4f38:	7f 92       	push	r7
    4f3a:	8f 92       	push	r8
    4f3c:	9f 92       	push	r9
    4f3e:	af 92       	push	r10
    4f40:	bf 92       	push	r11
    4f42:	cf 92       	push	r12
    4f44:	df 92       	push	r13
    4f46:	ef 92       	push	r14
    4f48:	ff 92       	push	r15
    4f4a:	0f 93       	push	r16
    4f4c:	1f 93       	push	r17
    4f4e:	cf 93       	push	r28
    4f50:	df 93       	push	r29
    4f52:	cd b7       	in	r28, 0x3d	; 61
    4f54:	de b7       	in	r29, 0x3e	; 62
    4f56:	2b 97       	sbiw	r28, 0x0b	; 11
    4f58:	cd bf       	out	0x3d, r28	; 61
    4f5a:	de bf       	out	0x3e, r29	; 62
    4f5c:	6c 01       	movw	r12, r24
    4f5e:	7b 01       	movw	r14, r22
    4f60:	8a 01       	movw	r16, r20
    4f62:	fc 01       	movw	r30, r24
    4f64:	16 82       	std	Z+6, r1	; 0x06
    4f66:	17 82       	std	Z+7, r1	; 0x07
    4f68:	83 81       	ldd	r24, Z+3	; 0x03
    4f6a:	81 ff       	sbrs	r24, 1
    4f6c:	bf c1       	rjmp	.+894    	; 0x52ec <vfprintf+0x3be>
    4f6e:	ce 01       	movw	r24, r28
    4f70:	01 96       	adiw	r24, 0x01	; 1
    4f72:	3c 01       	movw	r6, r24
    4f74:	f6 01       	movw	r30, r12
    4f76:	93 81       	ldd	r25, Z+3	; 0x03
    4f78:	f7 01       	movw	r30, r14
    4f7a:	93 fd       	sbrc	r25, 3
    4f7c:	85 91       	lpm	r24, Z+
    4f7e:	93 ff       	sbrs	r25, 3
    4f80:	81 91       	ld	r24, Z+
    4f82:	7f 01       	movw	r14, r30
    4f84:	88 23       	and	r24, r24
    4f86:	09 f4       	brne	.+2      	; 0x4f8a <vfprintf+0x5c>
    4f88:	ad c1       	rjmp	.+858    	; 0x52e4 <vfprintf+0x3b6>
    4f8a:	85 32       	cpi	r24, 0x25	; 37
    4f8c:	39 f4       	brne	.+14     	; 0x4f9c <vfprintf+0x6e>
    4f8e:	93 fd       	sbrc	r25, 3
    4f90:	85 91       	lpm	r24, Z+
    4f92:	93 ff       	sbrs	r25, 3
    4f94:	81 91       	ld	r24, Z+
    4f96:	7f 01       	movw	r14, r30
    4f98:	85 32       	cpi	r24, 0x25	; 37
    4f9a:	21 f4       	brne	.+8      	; 0x4fa4 <vfprintf+0x76>
    4f9c:	b6 01       	movw	r22, r12
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	f4 d1       	rcall	.+1000   	; 0x538a <fputc>
    4fa2:	e8 cf       	rjmp	.-48     	; 0x4f74 <vfprintf+0x46>
    4fa4:	91 2c       	mov	r9, r1
    4fa6:	21 2c       	mov	r2, r1
    4fa8:	31 2c       	mov	r3, r1
    4faa:	ff e1       	ldi	r31, 0x1F	; 31
    4fac:	f3 15       	cp	r31, r3
    4fae:	d8 f0       	brcs	.+54     	; 0x4fe6 <vfprintf+0xb8>
    4fb0:	8b 32       	cpi	r24, 0x2B	; 43
    4fb2:	79 f0       	breq	.+30     	; 0x4fd2 <vfprintf+0xa4>
    4fb4:	38 f4       	brcc	.+14     	; 0x4fc4 <vfprintf+0x96>
    4fb6:	80 32       	cpi	r24, 0x20	; 32
    4fb8:	79 f0       	breq	.+30     	; 0x4fd8 <vfprintf+0xaa>
    4fba:	83 32       	cpi	r24, 0x23	; 35
    4fbc:	a1 f4       	brne	.+40     	; 0x4fe6 <vfprintf+0xb8>
    4fbe:	23 2d       	mov	r18, r3
    4fc0:	20 61       	ori	r18, 0x10	; 16
    4fc2:	1d c0       	rjmp	.+58     	; 0x4ffe <vfprintf+0xd0>
    4fc4:	8d 32       	cpi	r24, 0x2D	; 45
    4fc6:	61 f0       	breq	.+24     	; 0x4fe0 <vfprintf+0xb2>
    4fc8:	80 33       	cpi	r24, 0x30	; 48
    4fca:	69 f4       	brne	.+26     	; 0x4fe6 <vfprintf+0xb8>
    4fcc:	23 2d       	mov	r18, r3
    4fce:	21 60       	ori	r18, 0x01	; 1
    4fd0:	16 c0       	rjmp	.+44     	; 0x4ffe <vfprintf+0xd0>
    4fd2:	83 2d       	mov	r24, r3
    4fd4:	82 60       	ori	r24, 0x02	; 2
    4fd6:	38 2e       	mov	r3, r24
    4fd8:	e3 2d       	mov	r30, r3
    4fda:	e4 60       	ori	r30, 0x04	; 4
    4fdc:	3e 2e       	mov	r3, r30
    4fde:	2a c0       	rjmp	.+84     	; 0x5034 <vfprintf+0x106>
    4fe0:	f3 2d       	mov	r31, r3
    4fe2:	f8 60       	ori	r31, 0x08	; 8
    4fe4:	1d c0       	rjmp	.+58     	; 0x5020 <vfprintf+0xf2>
    4fe6:	37 fc       	sbrc	r3, 7
    4fe8:	2d c0       	rjmp	.+90     	; 0x5044 <vfprintf+0x116>
    4fea:	20 ed       	ldi	r18, 0xD0	; 208
    4fec:	28 0f       	add	r18, r24
    4fee:	2a 30       	cpi	r18, 0x0A	; 10
    4ff0:	40 f0       	brcs	.+16     	; 0x5002 <vfprintf+0xd4>
    4ff2:	8e 32       	cpi	r24, 0x2E	; 46
    4ff4:	b9 f4       	brne	.+46     	; 0x5024 <vfprintf+0xf6>
    4ff6:	36 fc       	sbrc	r3, 6
    4ff8:	75 c1       	rjmp	.+746    	; 0x52e4 <vfprintf+0x3b6>
    4ffa:	23 2d       	mov	r18, r3
    4ffc:	20 64       	ori	r18, 0x40	; 64
    4ffe:	32 2e       	mov	r3, r18
    5000:	19 c0       	rjmp	.+50     	; 0x5034 <vfprintf+0x106>
    5002:	36 fe       	sbrs	r3, 6
    5004:	06 c0       	rjmp	.+12     	; 0x5012 <vfprintf+0xe4>
    5006:	8a e0       	ldi	r24, 0x0A	; 10
    5008:	98 9e       	mul	r9, r24
    500a:	20 0d       	add	r18, r0
    500c:	11 24       	eor	r1, r1
    500e:	92 2e       	mov	r9, r18
    5010:	11 c0       	rjmp	.+34     	; 0x5034 <vfprintf+0x106>
    5012:	ea e0       	ldi	r30, 0x0A	; 10
    5014:	2e 9e       	mul	r2, r30
    5016:	20 0d       	add	r18, r0
    5018:	11 24       	eor	r1, r1
    501a:	22 2e       	mov	r2, r18
    501c:	f3 2d       	mov	r31, r3
    501e:	f0 62       	ori	r31, 0x20	; 32
    5020:	3f 2e       	mov	r3, r31
    5022:	08 c0       	rjmp	.+16     	; 0x5034 <vfprintf+0x106>
    5024:	8c 36       	cpi	r24, 0x6C	; 108
    5026:	21 f4       	brne	.+8      	; 0x5030 <vfprintf+0x102>
    5028:	83 2d       	mov	r24, r3
    502a:	80 68       	ori	r24, 0x80	; 128
    502c:	38 2e       	mov	r3, r24
    502e:	02 c0       	rjmp	.+4      	; 0x5034 <vfprintf+0x106>
    5030:	88 36       	cpi	r24, 0x68	; 104
    5032:	41 f4       	brne	.+16     	; 0x5044 <vfprintf+0x116>
    5034:	f7 01       	movw	r30, r14
    5036:	93 fd       	sbrc	r25, 3
    5038:	85 91       	lpm	r24, Z+
    503a:	93 ff       	sbrs	r25, 3
    503c:	81 91       	ld	r24, Z+
    503e:	7f 01       	movw	r14, r30
    5040:	81 11       	cpse	r24, r1
    5042:	b3 cf       	rjmp	.-154    	; 0x4faa <vfprintf+0x7c>
    5044:	98 2f       	mov	r25, r24
    5046:	9f 7d       	andi	r25, 0xDF	; 223
    5048:	95 54       	subi	r25, 0x45	; 69
    504a:	93 30       	cpi	r25, 0x03	; 3
    504c:	28 f4       	brcc	.+10     	; 0x5058 <vfprintf+0x12a>
    504e:	0c 5f       	subi	r16, 0xFC	; 252
    5050:	1f 4f       	sbci	r17, 0xFF	; 255
    5052:	9f e3       	ldi	r25, 0x3F	; 63
    5054:	99 83       	std	Y+1, r25	; 0x01
    5056:	0d c0       	rjmp	.+26     	; 0x5072 <vfprintf+0x144>
    5058:	83 36       	cpi	r24, 0x63	; 99
    505a:	31 f0       	breq	.+12     	; 0x5068 <vfprintf+0x13a>
    505c:	83 37       	cpi	r24, 0x73	; 115
    505e:	71 f0       	breq	.+28     	; 0x507c <vfprintf+0x14e>
    5060:	83 35       	cpi	r24, 0x53	; 83
    5062:	09 f0       	breq	.+2      	; 0x5066 <vfprintf+0x138>
    5064:	55 c0       	rjmp	.+170    	; 0x5110 <vfprintf+0x1e2>
    5066:	20 c0       	rjmp	.+64     	; 0x50a8 <vfprintf+0x17a>
    5068:	f8 01       	movw	r30, r16
    506a:	80 81       	ld	r24, Z
    506c:	89 83       	std	Y+1, r24	; 0x01
    506e:	0e 5f       	subi	r16, 0xFE	; 254
    5070:	1f 4f       	sbci	r17, 0xFF	; 255
    5072:	88 24       	eor	r8, r8
    5074:	83 94       	inc	r8
    5076:	91 2c       	mov	r9, r1
    5078:	53 01       	movw	r10, r6
    507a:	12 c0       	rjmp	.+36     	; 0x50a0 <vfprintf+0x172>
    507c:	28 01       	movw	r4, r16
    507e:	f2 e0       	ldi	r31, 0x02	; 2
    5080:	4f 0e       	add	r4, r31
    5082:	51 1c       	adc	r5, r1
    5084:	f8 01       	movw	r30, r16
    5086:	a0 80       	ld	r10, Z
    5088:	b1 80       	ldd	r11, Z+1	; 0x01
    508a:	36 fe       	sbrs	r3, 6
    508c:	03 c0       	rjmp	.+6      	; 0x5094 <vfprintf+0x166>
    508e:	69 2d       	mov	r22, r9
    5090:	70 e0       	ldi	r23, 0x00	; 0
    5092:	02 c0       	rjmp	.+4      	; 0x5098 <vfprintf+0x16a>
    5094:	6f ef       	ldi	r22, 0xFF	; 255
    5096:	7f ef       	ldi	r23, 0xFF	; 255
    5098:	c5 01       	movw	r24, r10
    509a:	6c d1       	rcall	.+728    	; 0x5374 <strnlen>
    509c:	4c 01       	movw	r8, r24
    509e:	82 01       	movw	r16, r4
    50a0:	f3 2d       	mov	r31, r3
    50a2:	ff 77       	andi	r31, 0x7F	; 127
    50a4:	3f 2e       	mov	r3, r31
    50a6:	15 c0       	rjmp	.+42     	; 0x50d2 <vfprintf+0x1a4>
    50a8:	28 01       	movw	r4, r16
    50aa:	22 e0       	ldi	r18, 0x02	; 2
    50ac:	42 0e       	add	r4, r18
    50ae:	51 1c       	adc	r5, r1
    50b0:	f8 01       	movw	r30, r16
    50b2:	a0 80       	ld	r10, Z
    50b4:	b1 80       	ldd	r11, Z+1	; 0x01
    50b6:	36 fe       	sbrs	r3, 6
    50b8:	03 c0       	rjmp	.+6      	; 0x50c0 <vfprintf+0x192>
    50ba:	69 2d       	mov	r22, r9
    50bc:	70 e0       	ldi	r23, 0x00	; 0
    50be:	02 c0       	rjmp	.+4      	; 0x50c4 <vfprintf+0x196>
    50c0:	6f ef       	ldi	r22, 0xFF	; 255
    50c2:	7f ef       	ldi	r23, 0xFF	; 255
    50c4:	c5 01       	movw	r24, r10
    50c6:	44 d1       	rcall	.+648    	; 0x5350 <strnlen_P>
    50c8:	4c 01       	movw	r8, r24
    50ca:	f3 2d       	mov	r31, r3
    50cc:	f0 68       	ori	r31, 0x80	; 128
    50ce:	3f 2e       	mov	r3, r31
    50d0:	82 01       	movw	r16, r4
    50d2:	33 fc       	sbrc	r3, 3
    50d4:	19 c0       	rjmp	.+50     	; 0x5108 <vfprintf+0x1da>
    50d6:	82 2d       	mov	r24, r2
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	88 16       	cp	r8, r24
    50dc:	99 06       	cpc	r9, r25
    50de:	a0 f4       	brcc	.+40     	; 0x5108 <vfprintf+0x1da>
    50e0:	b6 01       	movw	r22, r12
    50e2:	80 e2       	ldi	r24, 0x20	; 32
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	51 d1       	rcall	.+674    	; 0x538a <fputc>
    50e8:	2a 94       	dec	r2
    50ea:	f5 cf       	rjmp	.-22     	; 0x50d6 <vfprintf+0x1a8>
    50ec:	f5 01       	movw	r30, r10
    50ee:	37 fc       	sbrc	r3, 7
    50f0:	85 91       	lpm	r24, Z+
    50f2:	37 fe       	sbrs	r3, 7
    50f4:	81 91       	ld	r24, Z+
    50f6:	5f 01       	movw	r10, r30
    50f8:	b6 01       	movw	r22, r12
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	46 d1       	rcall	.+652    	; 0x538a <fputc>
    50fe:	21 10       	cpse	r2, r1
    5100:	2a 94       	dec	r2
    5102:	21 e0       	ldi	r18, 0x01	; 1
    5104:	82 1a       	sub	r8, r18
    5106:	91 08       	sbc	r9, r1
    5108:	81 14       	cp	r8, r1
    510a:	91 04       	cpc	r9, r1
    510c:	79 f7       	brne	.-34     	; 0x50ec <vfprintf+0x1be>
    510e:	e1 c0       	rjmp	.+450    	; 0x52d2 <vfprintf+0x3a4>
    5110:	84 36       	cpi	r24, 0x64	; 100
    5112:	11 f0       	breq	.+4      	; 0x5118 <vfprintf+0x1ea>
    5114:	89 36       	cpi	r24, 0x69	; 105
    5116:	39 f5       	brne	.+78     	; 0x5166 <vfprintf+0x238>
    5118:	f8 01       	movw	r30, r16
    511a:	37 fe       	sbrs	r3, 7
    511c:	07 c0       	rjmp	.+14     	; 0x512c <vfprintf+0x1fe>
    511e:	60 81       	ld	r22, Z
    5120:	71 81       	ldd	r23, Z+1	; 0x01
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	93 81       	ldd	r25, Z+3	; 0x03
    5126:	0c 5f       	subi	r16, 0xFC	; 252
    5128:	1f 4f       	sbci	r17, 0xFF	; 255
    512a:	08 c0       	rjmp	.+16     	; 0x513c <vfprintf+0x20e>
    512c:	60 81       	ld	r22, Z
    512e:	71 81       	ldd	r23, Z+1	; 0x01
    5130:	07 2e       	mov	r0, r23
    5132:	00 0c       	add	r0, r0
    5134:	88 0b       	sbc	r24, r24
    5136:	99 0b       	sbc	r25, r25
    5138:	0e 5f       	subi	r16, 0xFE	; 254
    513a:	1f 4f       	sbci	r17, 0xFF	; 255
    513c:	f3 2d       	mov	r31, r3
    513e:	ff 76       	andi	r31, 0x6F	; 111
    5140:	3f 2e       	mov	r3, r31
    5142:	97 ff       	sbrs	r25, 7
    5144:	09 c0       	rjmp	.+18     	; 0x5158 <vfprintf+0x22a>
    5146:	90 95       	com	r25
    5148:	80 95       	com	r24
    514a:	70 95       	com	r23
    514c:	61 95       	neg	r22
    514e:	7f 4f       	sbci	r23, 0xFF	; 255
    5150:	8f 4f       	sbci	r24, 0xFF	; 255
    5152:	9f 4f       	sbci	r25, 0xFF	; 255
    5154:	f0 68       	ori	r31, 0x80	; 128
    5156:	3f 2e       	mov	r3, r31
    5158:	2a e0       	ldi	r18, 0x0A	; 10
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	a3 01       	movw	r20, r6
    515e:	51 d1       	rcall	.+674    	; 0x5402 <__ultoa_invert>
    5160:	88 2e       	mov	r8, r24
    5162:	86 18       	sub	r8, r6
    5164:	44 c0       	rjmp	.+136    	; 0x51ee <vfprintf+0x2c0>
    5166:	85 37       	cpi	r24, 0x75	; 117
    5168:	31 f4       	brne	.+12     	; 0x5176 <vfprintf+0x248>
    516a:	23 2d       	mov	r18, r3
    516c:	2f 7e       	andi	r18, 0xEF	; 239
    516e:	b2 2e       	mov	r11, r18
    5170:	2a e0       	ldi	r18, 0x0A	; 10
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	25 c0       	rjmp	.+74     	; 0x51c0 <vfprintf+0x292>
    5176:	93 2d       	mov	r25, r3
    5178:	99 7f       	andi	r25, 0xF9	; 249
    517a:	b9 2e       	mov	r11, r25
    517c:	8f 36       	cpi	r24, 0x6F	; 111
    517e:	c1 f0       	breq	.+48     	; 0x51b0 <vfprintf+0x282>
    5180:	18 f4       	brcc	.+6      	; 0x5188 <vfprintf+0x25a>
    5182:	88 35       	cpi	r24, 0x58	; 88
    5184:	79 f0       	breq	.+30     	; 0x51a4 <vfprintf+0x276>
    5186:	ae c0       	rjmp	.+348    	; 0x52e4 <vfprintf+0x3b6>
    5188:	80 37       	cpi	r24, 0x70	; 112
    518a:	19 f0       	breq	.+6      	; 0x5192 <vfprintf+0x264>
    518c:	88 37       	cpi	r24, 0x78	; 120
    518e:	21 f0       	breq	.+8      	; 0x5198 <vfprintf+0x26a>
    5190:	a9 c0       	rjmp	.+338    	; 0x52e4 <vfprintf+0x3b6>
    5192:	e9 2f       	mov	r30, r25
    5194:	e0 61       	ori	r30, 0x10	; 16
    5196:	be 2e       	mov	r11, r30
    5198:	b4 fe       	sbrs	r11, 4
    519a:	0d c0       	rjmp	.+26     	; 0x51b6 <vfprintf+0x288>
    519c:	fb 2d       	mov	r31, r11
    519e:	f4 60       	ori	r31, 0x04	; 4
    51a0:	bf 2e       	mov	r11, r31
    51a2:	09 c0       	rjmp	.+18     	; 0x51b6 <vfprintf+0x288>
    51a4:	34 fe       	sbrs	r3, 4
    51a6:	0a c0       	rjmp	.+20     	; 0x51bc <vfprintf+0x28e>
    51a8:	29 2f       	mov	r18, r25
    51aa:	26 60       	ori	r18, 0x06	; 6
    51ac:	b2 2e       	mov	r11, r18
    51ae:	06 c0       	rjmp	.+12     	; 0x51bc <vfprintf+0x28e>
    51b0:	28 e0       	ldi	r18, 0x08	; 8
    51b2:	30 e0       	ldi	r19, 0x00	; 0
    51b4:	05 c0       	rjmp	.+10     	; 0x51c0 <vfprintf+0x292>
    51b6:	20 e1       	ldi	r18, 0x10	; 16
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <vfprintf+0x292>
    51bc:	20 e1       	ldi	r18, 0x10	; 16
    51be:	32 e0       	ldi	r19, 0x02	; 2
    51c0:	f8 01       	movw	r30, r16
    51c2:	b7 fe       	sbrs	r11, 7
    51c4:	07 c0       	rjmp	.+14     	; 0x51d4 <vfprintf+0x2a6>
    51c6:	60 81       	ld	r22, Z
    51c8:	71 81       	ldd	r23, Z+1	; 0x01
    51ca:	82 81       	ldd	r24, Z+2	; 0x02
    51cc:	93 81       	ldd	r25, Z+3	; 0x03
    51ce:	0c 5f       	subi	r16, 0xFC	; 252
    51d0:	1f 4f       	sbci	r17, 0xFF	; 255
    51d2:	06 c0       	rjmp	.+12     	; 0x51e0 <vfprintf+0x2b2>
    51d4:	60 81       	ld	r22, Z
    51d6:	71 81       	ldd	r23, Z+1	; 0x01
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	0e 5f       	subi	r16, 0xFE	; 254
    51de:	1f 4f       	sbci	r17, 0xFF	; 255
    51e0:	a3 01       	movw	r20, r6
    51e2:	0f d1       	rcall	.+542    	; 0x5402 <__ultoa_invert>
    51e4:	88 2e       	mov	r8, r24
    51e6:	86 18       	sub	r8, r6
    51e8:	fb 2d       	mov	r31, r11
    51ea:	ff 77       	andi	r31, 0x7F	; 127
    51ec:	3f 2e       	mov	r3, r31
    51ee:	36 fe       	sbrs	r3, 6
    51f0:	0d c0       	rjmp	.+26     	; 0x520c <vfprintf+0x2de>
    51f2:	23 2d       	mov	r18, r3
    51f4:	2e 7f       	andi	r18, 0xFE	; 254
    51f6:	a2 2e       	mov	r10, r18
    51f8:	89 14       	cp	r8, r9
    51fa:	58 f4       	brcc	.+22     	; 0x5212 <vfprintf+0x2e4>
    51fc:	34 fe       	sbrs	r3, 4
    51fe:	0b c0       	rjmp	.+22     	; 0x5216 <vfprintf+0x2e8>
    5200:	32 fc       	sbrc	r3, 2
    5202:	09 c0       	rjmp	.+18     	; 0x5216 <vfprintf+0x2e8>
    5204:	83 2d       	mov	r24, r3
    5206:	8e 7e       	andi	r24, 0xEE	; 238
    5208:	a8 2e       	mov	r10, r24
    520a:	05 c0       	rjmp	.+10     	; 0x5216 <vfprintf+0x2e8>
    520c:	b8 2c       	mov	r11, r8
    520e:	a3 2c       	mov	r10, r3
    5210:	03 c0       	rjmp	.+6      	; 0x5218 <vfprintf+0x2ea>
    5212:	b8 2c       	mov	r11, r8
    5214:	01 c0       	rjmp	.+2      	; 0x5218 <vfprintf+0x2ea>
    5216:	b9 2c       	mov	r11, r9
    5218:	a4 fe       	sbrs	r10, 4
    521a:	0f c0       	rjmp	.+30     	; 0x523a <vfprintf+0x30c>
    521c:	fe 01       	movw	r30, r28
    521e:	e8 0d       	add	r30, r8
    5220:	f1 1d       	adc	r31, r1
    5222:	80 81       	ld	r24, Z
    5224:	80 33       	cpi	r24, 0x30	; 48
    5226:	21 f4       	brne	.+8      	; 0x5230 <vfprintf+0x302>
    5228:	9a 2d       	mov	r25, r10
    522a:	99 7e       	andi	r25, 0xE9	; 233
    522c:	a9 2e       	mov	r10, r25
    522e:	09 c0       	rjmp	.+18     	; 0x5242 <vfprintf+0x314>
    5230:	a2 fe       	sbrs	r10, 2
    5232:	06 c0       	rjmp	.+12     	; 0x5240 <vfprintf+0x312>
    5234:	b3 94       	inc	r11
    5236:	b3 94       	inc	r11
    5238:	04 c0       	rjmp	.+8      	; 0x5242 <vfprintf+0x314>
    523a:	8a 2d       	mov	r24, r10
    523c:	86 78       	andi	r24, 0x86	; 134
    523e:	09 f0       	breq	.+2      	; 0x5242 <vfprintf+0x314>
    5240:	b3 94       	inc	r11
    5242:	a3 fc       	sbrc	r10, 3
    5244:	10 c0       	rjmp	.+32     	; 0x5266 <vfprintf+0x338>
    5246:	a0 fe       	sbrs	r10, 0
    5248:	06 c0       	rjmp	.+12     	; 0x5256 <vfprintf+0x328>
    524a:	b2 14       	cp	r11, r2
    524c:	80 f4       	brcc	.+32     	; 0x526e <vfprintf+0x340>
    524e:	28 0c       	add	r2, r8
    5250:	92 2c       	mov	r9, r2
    5252:	9b 18       	sub	r9, r11
    5254:	0d c0       	rjmp	.+26     	; 0x5270 <vfprintf+0x342>
    5256:	b2 14       	cp	r11, r2
    5258:	58 f4       	brcc	.+22     	; 0x5270 <vfprintf+0x342>
    525a:	b6 01       	movw	r22, r12
    525c:	80 e2       	ldi	r24, 0x20	; 32
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	94 d0       	rcall	.+296    	; 0x538a <fputc>
    5262:	b3 94       	inc	r11
    5264:	f8 cf       	rjmp	.-16     	; 0x5256 <vfprintf+0x328>
    5266:	b2 14       	cp	r11, r2
    5268:	18 f4       	brcc	.+6      	; 0x5270 <vfprintf+0x342>
    526a:	2b 18       	sub	r2, r11
    526c:	02 c0       	rjmp	.+4      	; 0x5272 <vfprintf+0x344>
    526e:	98 2c       	mov	r9, r8
    5270:	21 2c       	mov	r2, r1
    5272:	a4 fe       	sbrs	r10, 4
    5274:	0f c0       	rjmp	.+30     	; 0x5294 <vfprintf+0x366>
    5276:	b6 01       	movw	r22, r12
    5278:	80 e3       	ldi	r24, 0x30	; 48
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	86 d0       	rcall	.+268    	; 0x538a <fputc>
    527e:	a2 fe       	sbrs	r10, 2
    5280:	16 c0       	rjmp	.+44     	; 0x52ae <vfprintf+0x380>
    5282:	a1 fc       	sbrc	r10, 1
    5284:	03 c0       	rjmp	.+6      	; 0x528c <vfprintf+0x35e>
    5286:	88 e7       	ldi	r24, 0x78	; 120
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	02 c0       	rjmp	.+4      	; 0x5290 <vfprintf+0x362>
    528c:	88 e5       	ldi	r24, 0x58	; 88
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	b6 01       	movw	r22, r12
    5292:	0c c0       	rjmp	.+24     	; 0x52ac <vfprintf+0x37e>
    5294:	8a 2d       	mov	r24, r10
    5296:	86 78       	andi	r24, 0x86	; 134
    5298:	51 f0       	breq	.+20     	; 0x52ae <vfprintf+0x380>
    529a:	a1 fe       	sbrs	r10, 1
    529c:	02 c0       	rjmp	.+4      	; 0x52a2 <vfprintf+0x374>
    529e:	8b e2       	ldi	r24, 0x2B	; 43
    52a0:	01 c0       	rjmp	.+2      	; 0x52a4 <vfprintf+0x376>
    52a2:	80 e2       	ldi	r24, 0x20	; 32
    52a4:	a7 fc       	sbrc	r10, 7
    52a6:	8d e2       	ldi	r24, 0x2D	; 45
    52a8:	b6 01       	movw	r22, r12
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	6e d0       	rcall	.+220    	; 0x538a <fputc>
    52ae:	89 14       	cp	r8, r9
    52b0:	30 f4       	brcc	.+12     	; 0x52be <vfprintf+0x390>
    52b2:	b6 01       	movw	r22, r12
    52b4:	80 e3       	ldi	r24, 0x30	; 48
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	68 d0       	rcall	.+208    	; 0x538a <fputc>
    52ba:	9a 94       	dec	r9
    52bc:	f8 cf       	rjmp	.-16     	; 0x52ae <vfprintf+0x380>
    52be:	8a 94       	dec	r8
    52c0:	f3 01       	movw	r30, r6
    52c2:	e8 0d       	add	r30, r8
    52c4:	f1 1d       	adc	r31, r1
    52c6:	80 81       	ld	r24, Z
    52c8:	b6 01       	movw	r22, r12
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	5e d0       	rcall	.+188    	; 0x538a <fputc>
    52ce:	81 10       	cpse	r8, r1
    52d0:	f6 cf       	rjmp	.-20     	; 0x52be <vfprintf+0x390>
    52d2:	22 20       	and	r2, r2
    52d4:	09 f4       	brne	.+2      	; 0x52d8 <vfprintf+0x3aa>
    52d6:	4e ce       	rjmp	.-868    	; 0x4f74 <vfprintf+0x46>
    52d8:	b6 01       	movw	r22, r12
    52da:	80 e2       	ldi	r24, 0x20	; 32
    52dc:	90 e0       	ldi	r25, 0x00	; 0
    52de:	55 d0       	rcall	.+170    	; 0x538a <fputc>
    52e0:	2a 94       	dec	r2
    52e2:	f7 cf       	rjmp	.-18     	; 0x52d2 <vfprintf+0x3a4>
    52e4:	f6 01       	movw	r30, r12
    52e6:	86 81       	ldd	r24, Z+6	; 0x06
    52e8:	97 81       	ldd	r25, Z+7	; 0x07
    52ea:	02 c0       	rjmp	.+4      	; 0x52f0 <vfprintf+0x3c2>
    52ec:	8f ef       	ldi	r24, 0xFF	; 255
    52ee:	9f ef       	ldi	r25, 0xFF	; 255
    52f0:	2b 96       	adiw	r28, 0x0b	; 11
    52f2:	cd bf       	out	0x3d, r28	; 61
    52f4:	de bf       	out	0x3e, r29	; 62
    52f6:	df 91       	pop	r29
    52f8:	cf 91       	pop	r28
    52fa:	1f 91       	pop	r17
    52fc:	0f 91       	pop	r16
    52fe:	ff 90       	pop	r15
    5300:	ef 90       	pop	r14
    5302:	df 90       	pop	r13
    5304:	cf 90       	pop	r12
    5306:	bf 90       	pop	r11
    5308:	af 90       	pop	r10
    530a:	9f 90       	pop	r9
    530c:	8f 90       	pop	r8
    530e:	7f 90       	pop	r7
    5310:	6f 90       	pop	r6
    5312:	5f 90       	pop	r5
    5314:	4f 90       	pop	r4
    5316:	3f 90       	pop	r3
    5318:	2f 90       	pop	r2
    531a:	08 95       	ret

0000531c <calloc>:
    531c:	0f 93       	push	r16
    531e:	1f 93       	push	r17
    5320:	cf 93       	push	r28
    5322:	df 93       	push	r29
    5324:	86 9f       	mul	r24, r22
    5326:	80 01       	movw	r16, r0
    5328:	87 9f       	mul	r24, r23
    532a:	10 0d       	add	r17, r0
    532c:	96 9f       	mul	r25, r22
    532e:	10 0d       	add	r17, r0
    5330:	11 24       	eor	r1, r1
    5332:	c8 01       	movw	r24, r16
    5334:	4e dc       	rcall	.-1892   	; 0x4bd2 <malloc>
    5336:	ec 01       	movw	r28, r24
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	21 f0       	breq	.+8      	; 0x5344 <calloc+0x28>
    533c:	a8 01       	movw	r20, r16
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	70 e0       	ldi	r23, 0x00	; 0
    5342:	11 d0       	rcall	.+34     	; 0x5366 <memset>
    5344:	ce 01       	movw	r24, r28
    5346:	df 91       	pop	r29
    5348:	cf 91       	pop	r28
    534a:	1f 91       	pop	r17
    534c:	0f 91       	pop	r16
    534e:	08 95       	ret

00005350 <strnlen_P>:
    5350:	fc 01       	movw	r30, r24
    5352:	05 90       	lpm	r0, Z+
    5354:	61 50       	subi	r22, 0x01	; 1
    5356:	70 40       	sbci	r23, 0x00	; 0
    5358:	01 10       	cpse	r0, r1
    535a:	d8 f7       	brcc	.-10     	; 0x5352 <strnlen_P+0x2>
    535c:	80 95       	com	r24
    535e:	90 95       	com	r25
    5360:	8e 0f       	add	r24, r30
    5362:	9f 1f       	adc	r25, r31
    5364:	08 95       	ret

00005366 <memset>:
    5366:	dc 01       	movw	r26, r24
    5368:	01 c0       	rjmp	.+2      	; 0x536c <memset+0x6>
    536a:	6d 93       	st	X+, r22
    536c:	41 50       	subi	r20, 0x01	; 1
    536e:	50 40       	sbci	r21, 0x00	; 0
    5370:	e0 f7       	brcc	.-8      	; 0x536a <memset+0x4>
    5372:	08 95       	ret

00005374 <strnlen>:
    5374:	fc 01       	movw	r30, r24
    5376:	61 50       	subi	r22, 0x01	; 1
    5378:	70 40       	sbci	r23, 0x00	; 0
    537a:	01 90       	ld	r0, Z+
    537c:	01 10       	cpse	r0, r1
    537e:	d8 f7       	brcc	.-10     	; 0x5376 <strnlen+0x2>
    5380:	80 95       	com	r24
    5382:	90 95       	com	r25
    5384:	8e 0f       	add	r24, r30
    5386:	9f 1f       	adc	r25, r31
    5388:	08 95       	ret

0000538a <fputc>:
    538a:	0f 93       	push	r16
    538c:	1f 93       	push	r17
    538e:	cf 93       	push	r28
    5390:	df 93       	push	r29
    5392:	fb 01       	movw	r30, r22
    5394:	23 81       	ldd	r18, Z+3	; 0x03
    5396:	21 fd       	sbrc	r18, 1
    5398:	03 c0       	rjmp	.+6      	; 0x53a0 <fputc+0x16>
    539a:	8f ef       	ldi	r24, 0xFF	; 255
    539c:	9f ef       	ldi	r25, 0xFF	; 255
    539e:	2c c0       	rjmp	.+88     	; 0x53f8 <fputc+0x6e>
    53a0:	22 ff       	sbrs	r18, 2
    53a2:	16 c0       	rjmp	.+44     	; 0x53d0 <fputc+0x46>
    53a4:	46 81       	ldd	r20, Z+6	; 0x06
    53a6:	57 81       	ldd	r21, Z+7	; 0x07
    53a8:	24 81       	ldd	r18, Z+4	; 0x04
    53aa:	35 81       	ldd	r19, Z+5	; 0x05
    53ac:	42 17       	cp	r20, r18
    53ae:	53 07       	cpc	r21, r19
    53b0:	44 f4       	brge	.+16     	; 0x53c2 <fputc+0x38>
    53b2:	a0 81       	ld	r26, Z
    53b4:	b1 81       	ldd	r27, Z+1	; 0x01
    53b6:	9d 01       	movw	r18, r26
    53b8:	2f 5f       	subi	r18, 0xFF	; 255
    53ba:	3f 4f       	sbci	r19, 0xFF	; 255
    53bc:	20 83       	st	Z, r18
    53be:	31 83       	std	Z+1, r19	; 0x01
    53c0:	8c 93       	st	X, r24
    53c2:	26 81       	ldd	r18, Z+6	; 0x06
    53c4:	37 81       	ldd	r19, Z+7	; 0x07
    53c6:	2f 5f       	subi	r18, 0xFF	; 255
    53c8:	3f 4f       	sbci	r19, 0xFF	; 255
    53ca:	26 83       	std	Z+6, r18	; 0x06
    53cc:	37 83       	std	Z+7, r19	; 0x07
    53ce:	14 c0       	rjmp	.+40     	; 0x53f8 <fputc+0x6e>
    53d0:	8b 01       	movw	r16, r22
    53d2:	ec 01       	movw	r28, r24
    53d4:	fb 01       	movw	r30, r22
    53d6:	00 84       	ldd	r0, Z+8	; 0x08
    53d8:	f1 85       	ldd	r31, Z+9	; 0x09
    53da:	e0 2d       	mov	r30, r0
    53dc:	19 95       	eicall
    53de:	89 2b       	or	r24, r25
    53e0:	e1 f6       	brne	.-72     	; 0x539a <fputc+0x10>
    53e2:	d8 01       	movw	r26, r16
    53e4:	16 96       	adiw	r26, 0x06	; 6
    53e6:	8d 91       	ld	r24, X+
    53e8:	9c 91       	ld	r25, X
    53ea:	17 97       	sbiw	r26, 0x07	; 7
    53ec:	01 96       	adiw	r24, 0x01	; 1
    53ee:	16 96       	adiw	r26, 0x06	; 6
    53f0:	8d 93       	st	X+, r24
    53f2:	9c 93       	st	X, r25
    53f4:	17 97       	sbiw	r26, 0x07	; 7
    53f6:	ce 01       	movw	r24, r28
    53f8:	df 91       	pop	r29
    53fa:	cf 91       	pop	r28
    53fc:	1f 91       	pop	r17
    53fe:	0f 91       	pop	r16
    5400:	08 95       	ret

00005402 <__ultoa_invert>:
    5402:	fa 01       	movw	r30, r20
    5404:	aa 27       	eor	r26, r26
    5406:	28 30       	cpi	r18, 0x08	; 8
    5408:	51 f1       	breq	.+84     	; 0x545e <__ultoa_invert+0x5c>
    540a:	20 31       	cpi	r18, 0x10	; 16
    540c:	81 f1       	breq	.+96     	; 0x546e <__ultoa_invert+0x6c>
    540e:	e8 94       	clt
    5410:	6f 93       	push	r22
    5412:	6e 7f       	andi	r22, 0xFE	; 254
    5414:	6e 5f       	subi	r22, 0xFE	; 254
    5416:	7f 4f       	sbci	r23, 0xFF	; 255
    5418:	8f 4f       	sbci	r24, 0xFF	; 255
    541a:	9f 4f       	sbci	r25, 0xFF	; 255
    541c:	af 4f       	sbci	r26, 0xFF	; 255
    541e:	b1 e0       	ldi	r27, 0x01	; 1
    5420:	3e d0       	rcall	.+124    	; 0x549e <__ultoa_invert+0x9c>
    5422:	b4 e0       	ldi	r27, 0x04	; 4
    5424:	3c d0       	rcall	.+120    	; 0x549e <__ultoa_invert+0x9c>
    5426:	67 0f       	add	r22, r23
    5428:	78 1f       	adc	r23, r24
    542a:	89 1f       	adc	r24, r25
    542c:	9a 1f       	adc	r25, r26
    542e:	a1 1d       	adc	r26, r1
    5430:	68 0f       	add	r22, r24
    5432:	79 1f       	adc	r23, r25
    5434:	8a 1f       	adc	r24, r26
    5436:	91 1d       	adc	r25, r1
    5438:	a1 1d       	adc	r26, r1
    543a:	6a 0f       	add	r22, r26
    543c:	71 1d       	adc	r23, r1
    543e:	81 1d       	adc	r24, r1
    5440:	91 1d       	adc	r25, r1
    5442:	a1 1d       	adc	r26, r1
    5444:	20 d0       	rcall	.+64     	; 0x5486 <__ultoa_invert+0x84>
    5446:	09 f4       	brne	.+2      	; 0x544a <__ultoa_invert+0x48>
    5448:	68 94       	set
    544a:	3f 91       	pop	r19
    544c:	2a e0       	ldi	r18, 0x0A	; 10
    544e:	26 9f       	mul	r18, r22
    5450:	11 24       	eor	r1, r1
    5452:	30 19       	sub	r19, r0
    5454:	30 5d       	subi	r19, 0xD0	; 208
    5456:	31 93       	st	Z+, r19
    5458:	de f6       	brtc	.-74     	; 0x5410 <__ultoa_invert+0xe>
    545a:	cf 01       	movw	r24, r30
    545c:	08 95       	ret
    545e:	46 2f       	mov	r20, r22
    5460:	47 70       	andi	r20, 0x07	; 7
    5462:	40 5d       	subi	r20, 0xD0	; 208
    5464:	41 93       	st	Z+, r20
    5466:	b3 e0       	ldi	r27, 0x03	; 3
    5468:	0f d0       	rcall	.+30     	; 0x5488 <__ultoa_invert+0x86>
    546a:	c9 f7       	brne	.-14     	; 0x545e <__ultoa_invert+0x5c>
    546c:	f6 cf       	rjmp	.-20     	; 0x545a <__ultoa_invert+0x58>
    546e:	46 2f       	mov	r20, r22
    5470:	4f 70       	andi	r20, 0x0F	; 15
    5472:	40 5d       	subi	r20, 0xD0	; 208
    5474:	4a 33       	cpi	r20, 0x3A	; 58
    5476:	18 f0       	brcs	.+6      	; 0x547e <__ultoa_invert+0x7c>
    5478:	49 5d       	subi	r20, 0xD9	; 217
    547a:	31 fd       	sbrc	r19, 1
    547c:	40 52       	subi	r20, 0x20	; 32
    547e:	41 93       	st	Z+, r20
    5480:	02 d0       	rcall	.+4      	; 0x5486 <__ultoa_invert+0x84>
    5482:	a9 f7       	brne	.-22     	; 0x546e <__ultoa_invert+0x6c>
    5484:	ea cf       	rjmp	.-44     	; 0x545a <__ultoa_invert+0x58>
    5486:	b4 e0       	ldi	r27, 0x04	; 4
    5488:	a6 95       	lsr	r26
    548a:	97 95       	ror	r25
    548c:	87 95       	ror	r24
    548e:	77 95       	ror	r23
    5490:	67 95       	ror	r22
    5492:	ba 95       	dec	r27
    5494:	c9 f7       	brne	.-14     	; 0x5488 <__ultoa_invert+0x86>
    5496:	00 97       	sbiw	r24, 0x00	; 0
    5498:	61 05       	cpc	r22, r1
    549a:	71 05       	cpc	r23, r1
    549c:	08 95       	ret
    549e:	9b 01       	movw	r18, r22
    54a0:	ac 01       	movw	r20, r24
    54a2:	0a 2e       	mov	r0, r26
    54a4:	06 94       	lsr	r0
    54a6:	57 95       	ror	r21
    54a8:	47 95       	ror	r20
    54aa:	37 95       	ror	r19
    54ac:	27 95       	ror	r18
    54ae:	ba 95       	dec	r27
    54b0:	c9 f7       	brne	.-14     	; 0x54a4 <__ultoa_invert+0xa2>
    54b2:	62 0f       	add	r22, r18
    54b4:	73 1f       	adc	r23, r19
    54b6:	84 1f       	adc	r24, r20
    54b8:	95 1f       	adc	r25, r21
    54ba:	a0 1d       	adc	r26, r0
    54bc:	08 95       	ret

000054be <_exit>:
    54be:	f8 94       	cli

000054c0 <__stop_program>:
    54c0:	ff cf       	rjmp	.-2      	; 0x54c0 <__stop_program>
