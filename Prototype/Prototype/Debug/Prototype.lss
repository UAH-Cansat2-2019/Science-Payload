
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bbf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018e  00802000  0000bbf6  0000bc8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000665  0080218e  0080218e  0000be18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000be18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000be74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000013f0  00000000  00000000  0000beb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000205cd  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007206  00000000  00000000  0002d875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001c8a2  00000000  00000000  00034a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000057d8  00000000  00000000  00051320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0004409e  00000000  00000000  00056af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c12c  00000000  00000000  0009ab96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012a0  00000000  00000000  000a6cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00013ca5  00000000  00000000  000a7f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0b 31 	jmp	0x6216	; 0x6216 <__vector_10>
      2c:	0c 94 3b 31 	jmp	0x6276	; 0x6276 <__vector_11>
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 4d 41 	jmp	0x829a	; 0x829a <__vector_13>
      38:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__vector_14>
      3c:	0c 94 12 33 	jmp	0x6624	; 0x6624 <__vector_15>
      40:	0c 94 69 33 	jmp	0x66d2	; 0x66d2 <__vector_16>
      44:	0c 94 c0 33 	jmp	0x6780	; 0x6780 <__vector_17>
      48:	0c 94 17 34 	jmp	0x682e	; 0x682e <__vector_18>
      4c:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__vector_19>
      50:	0c 94 c5 34 	jmp	0x698a	; 0x698a <__vector_20>
      54:	0c 94 1c 35 	jmp	0x6a38	; 0x6a38 <__vector_21>
      58:	0c 94 73 35 	jmp	0x6ae6	; 0x6ae6 <__vector_22>
      5c:	0c 94 ca 35 	jmp	0x6b94	; 0x6b94 <__vector_23>
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__vector_25>
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ef c7       	rjmp	.+4062   	; 0x107c <__vector_39>
      9e:	00 00       	nop
      a0:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_40>
      a4:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_41>
      a8:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_42>
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 e5 41 	jmp	0x83ca	; 0x83ca <__vector_46>
      bc:	0c 94 87 39 	jmp	0x730e	; 0x730e <__vector_47>
      c0:	0c 94 de 39 	jmp	0x73bc	; 0x73bc <__vector_48>
      c4:	0c 94 35 3a 	jmp	0x746a	; 0x746a <__vector_49>
      c8:	0c 94 8c 3a 	jmp	0x7518	; 0x7518 <__vector_50>
      cc:	0c 94 e3 3a 	jmp	0x75c6	; 0x75c6 <__vector_51>
      d0:	0c 94 3a 3b 	jmp	0x7674	; 0x7674 <__vector_52>
      d4:	0c 94 91 3b 	jmp	0x7722	; 0x7722 <__vector_53>
      d8:	0c 94 e8 3b 	jmp	0x77d0	; 0x77d0 <__vector_54>
      dc:	0c 94 3f 3c 	jmp	0x787e	; 0x787e <__vector_55>
      e0:	0c 94 96 3c 	jmp	0x792c	; 0x792c <__vector_56>
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	7f c5       	rjmp	.+2814   	; 0xc1c <__vector_71>
     11e:	00 00       	nop
     120:	09 c6       	rjmp	.+3090   	; 0xd34 <__vector_72>
     122:	00 00       	nop
     124:	93 c6       	rjmp	.+3366   	; 0xe4c <__vector_73>
     126:	00 00       	nop
     128:	1d c7       	rjmp	.+3642   	; 0xf64 <__vector_74>
     12a:	00 00       	nop
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 99 41 	jmp	0x8332	; 0x8332 <__vector_76>
     134:	0c 94 21 36 	jmp	0x6c42	; 0x6c42 <__vector_77>
     138:	0c 94 78 36 	jmp	0x6cf0	; 0x6cf0 <__vector_78>
     13c:	0c 94 cf 36 	jmp	0x6d9e	; 0x6d9e <__vector_79>
     140:	0c 94 26 37 	jmp	0x6e4c	; 0x6e4c <__vector_80>
     144:	0c 94 7d 37 	jmp	0x6efa	; 0x6efa <__vector_81>
     148:	0c 94 d4 37 	jmp	0x6fa8	; 0x6fa8 <__vector_82>
     14c:	0c 94 2b 38 	jmp	0x7056	; 0x7056 <__vector_83>
     150:	0c 94 82 38 	jmp	0x7104	; 0x7104 <__vector_84>
     154:	0c 94 d9 38 	jmp	0x71b2	; 0x71b2 <__vector_85>
     158:	0c 94 30 39 	jmp	0x7260	; 0x7260 <__vector_86>
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c1       	rjmp	.+566    	; 0x3a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 31 42 	jmp	0x8462	; 0x8462 <__vector_107>
     1b0:	0c 94 ed 3c 	jmp	0x79da	; 0x79da <__vector_108>
     1b4:	0c 94 44 3d 	jmp	0x7a88	; 0x7a88 <__vector_109>
     1b8:	0c 94 9b 3d 	jmp	0x7b36	; 0x7b36 <__vector_110>
     1bc:	0c 94 f2 3d 	jmp	0x7be4	; 0x7be4 <__vector_111>
     1c0:	0c 94 49 3e 	jmp	0x7c92	; 0x7c92 <__vector_112>
     1c4:	0c 94 a0 3e 	jmp	0x7d40	; 0x7d40 <__vector_113>
     1c8:	0c 94 f7 3e 	jmp	0x7dee	; 0x7dee <__vector_114>
     1cc:	0c 94 4e 3f 	jmp	0x7e9c	; 0x7e9c <__vector_115>
     1d0:	0c 94 a5 3f 	jmp	0x7f4a	; 0x7f4a <__vector_116>
     1d4:	0c 94 fc 3f 	jmp	0x7ff8	; 0x7ff8 <__vector_117>
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c0       	rjmp	.+454    	; 0x3a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__vector_122>
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__vector_124>
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <adc_disable_clock+0x42>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	11 e2       	ldi	r17, 0x21	; 33
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	e6 ef       	ldi	r30, 0xF6	; 246
     378:	fb eb       	ldi	r31, 0xBB	; 187
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 38       	cpi	r26, 0x8E	; 142
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	27 e2       	ldi	r18, 0x27	; 39
     38e:	ae e8       	ldi	r26, 0x8E	; 142
     390:	b1 e2       	ldi	r27, 0x21	; 33
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a3 3f       	cpi	r26, 0xF3	; 243
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 ca 4e 	call	0x9d94	; 0x9d94 <main>
     3a0:	0c 94 f9 5d 	jmp	0xbbf2	; 0xbbf2 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <ioport_set_pin_low>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_low(port_pin_t pin)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	2a 97       	sbiw	r28, 0x0a	; 10
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	8a 87       	std	Y+10, r24	; 0x0a
     3b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	1a 82       	std	Y+2, r1	; 0x02
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	8b 83       	std	Y+3, r24	; 0x03
     3c0:	8b 81       	ldd	r24, Y+3	; 0x03
     3c2:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	86 95       	lsr	r24
     3c8:	86 95       	lsr	r24
     3ca:	86 95       	lsr	r24
     3cc:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	88 2f       	mov	r24, r24
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	82 95       	swap	r24
     3da:	92 95       	swap	r25
     3dc:	90 7f       	andi	r25, 0xF0	; 240
     3de:	98 27       	eor	r25, r24
     3e0:	80 7f       	andi	r24, 0xF0	; 240
     3e2:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     3e4:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     3e6:	8e 83       	std	Y+6, r24	; 0x06
     3e8:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	88 23       	and	r24, r24
     3ee:	a9 f0       	breq	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     3f4:	88 85       	ldd	r24, Y+8	; 0x08
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9c 01       	movw	r18, r24
     3fc:	27 70       	andi	r18, 0x07	; 7
     3fe:	33 27       	eor	r19, r19
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	2a 95       	dec	r18
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40e:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     410:	8e 81       	ldd	r24, Y+6	; 0x06
     412:	9f 81       	ldd	r25, Y+7	; 0x07
     414:	fc 01       	movw	r30, r24
     416:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, false);
}
     418:	14 c0       	rjmp	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     41e:	89 85       	ldd	r24, Y+9	; 0x09
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	9c 01       	movw	r18, r24
     426:	27 70       	andi	r18, 0x07	; 7
     428:	33 27       	eor	r19, r19
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	2a 95       	dec	r18
     436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     43a:	8e 81       	ldd	r24, Y+6	; 0x06
     43c:	9f 81       	ldd	r25, Y+7	; 0x07
     43e:	fc 01       	movw	r30, r24
     440:	26 83       	std	Z+6, r18	; 0x06
     442:	00 00       	nop
     444:	2a 96       	adiw	r28, 0x0a	; 10
     446:	cd bf       	out	0x3d, r28	; 61
     448:	de bf       	out	0x3e, r29	; 62
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	2a 97       	sbiw	r28, 0x0a	; 10
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	8a 87       	std	Y+10, r24	; 0x0a
     460:	8a 85       	ldd	r24, Y+10	; 0x0a
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	8a 83       	std	Y+2, r24	; 0x02
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	8b 83       	std	Y+3, r24	; 0x03
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     470:	8c 81       	ldd	r24, Y+4	; 0x04
     472:	86 95       	lsr	r24
     474:	86 95       	lsr	r24
     476:	86 95       	lsr	r24
     478:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     47a:	8d 81       	ldd	r24, Y+5	; 0x05
     47c:	88 2f       	mov	r24, r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	82 95       	swap	r24
     486:	92 95       	swap	r25
     488:	90 7f       	andi	r25, 0xF0	; 240
     48a:	98 27       	eor	r25, r24
     48c:	80 7f       	andi	r24, 0xF0	; 240
     48e:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     490:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     492:	8e 83       	std	Y+6, r24	; 0x06
     494:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	88 23       	and	r24, r24
     49a:	a9 f0       	breq	.+42     	; 0x4c6 <ioport_set_pin_high+0x76>
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     4a0:	88 85       	ldd	r24, Y+8	; 0x08
     4a2:	88 2f       	mov	r24, r24
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9c 01       	movw	r18, r24
     4a8:	27 70       	andi	r18, 0x07	; 7
     4aa:	33 27       	eor	r19, r19
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <ioport_set_pin_high+0x66>
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	2a 95       	dec	r18
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <ioport_set_pin_high+0x62>
     4ba:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4bc:	8e 81       	ldd	r24, Y+6	; 0x06
     4be:	9f 81       	ldd	r25, Y+7	; 0x07
     4c0:	fc 01       	movw	r30, r24
     4c2:	25 83       	std	Z+5, r18	; 0x05
	arch_ioport_set_pin_level(pin, true);
}
     4c4:	14 c0       	rjmp	.+40     	; 0x4ee <ioport_set_pin_high+0x9e>
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     4ca:	89 85       	ldd	r24, Y+9	; 0x09
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9c 01       	movw	r18, r24
     4d2:	27 70       	andi	r18, 0x07	; 7
     4d4:	33 27       	eor	r19, r19
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <ioport_set_pin_high+0x90>
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	2a 95       	dec	r18
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <ioport_set_pin_high+0x8c>
     4e4:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4e6:	8e 81       	ldd	r24, Y+6	; 0x06
     4e8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ea:	fc 01       	movw	r30, r24
     4ec:	26 83       	std	Z+6, r18	; 0x06
     4ee:	00 00       	nop
     4f0:	2a 96       	adiw	r28, 0x0a	; 10
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 d0       	rcall	.+0      	; 0x502 <spi_put+0x6>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	6b 83       	std	Y+3, r22	; 0x03
	spi->DATA = data;
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	2b 81       	ldd	r18, Y+3	; 0x03
     512:	fc 01       	movw	r30, r24
     514:	23 83       	std	Z+3, r18	; 0x03
}
     516:	00 00       	nop
     518:	23 96       	adiw	r28, 0x03	; 3
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	1f 92       	push	r1
     52a:	1f 92       	push	r1
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	9a 83       	std	Y+2, r25	; 0x02
	return spi->DATA;
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	fc 01       	movw	r30, r24
     53a:	83 81       	ldd	r24, Z+3	; 0x03
}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <spi_is_tx_ok>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	1f 92       	push	r1
     54c:	1f 92       	push	r1
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	9a 83       	std	Y+2, r25	; 0x02
	return spi->STATUS & SPI_IF_bm ? true : false;
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	fc 01       	movw	r30, r24
     55c:	82 81       	ldd	r24, Z+2	; 0x02
     55e:	88 1f       	adc	r24, r24
     560:	88 27       	eor	r24, r24
     562:	88 1f       	adc	r24, r24
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <spi_enable_master_mode>:
 * \param spi Base address of the SPI instance.
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	1f 92       	push	r1
     574:	1f 92       	push	r1
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	89 83       	std	Y+1, r24	; 0x01
     57c:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_MASTER_bm;
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	28 2f       	mov	r18, r24
     588:	20 61       	ori	r18, 0x10	; 16
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
}
     592:	00 00       	nop
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <spi_read_single>:
 * \param spi Base address of the SPI instance.
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <spi_read_single+0x6>
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	6b 83       	std	Y+3, r22	; 0x03
     5b0:	7c 83       	std	Y+4, r23	; 0x04
	*data=spi_get(spi);
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	b6 df       	rcall	.-148    	; 0x524 <spi_get>
     5b8:	28 2f       	mov	r18, r24
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
}
     5c2:	00 00       	nop
     5c4:	24 96       	adiw	r28, 0x04	; 4
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <spi_is_rx_full>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
inline static bool spi_is_rx_full(SPI_t *spi)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	1f 92       	push	r1
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	9a 83       	std	Y+2, r25	; 0x02
	return spi_is_tx_ok(spi);
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	b0 df       	rcall	.-160    	; 0x546 <spi_is_tx_ok>
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	9c e6       	ldi	r25, 0x6C	; 108
     5fc:	ac ed       	ldi	r26, 0xDC	; 220
     5fe:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     600:	bc 01       	movw	r22, r24
     602:	cd 01       	movw	r24, r26
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	1f 92       	push	r1
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     614:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     616:	ec df       	rcall	.-40     	; 0x5f0 <sysclk_get_main_hz>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	29 81       	ldd	r18, Y+1	; 0x01
     61e:	22 2f       	mov	r18, r18
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	04 c0       	rjmp	.+8      	; 0x62c <sysclk_get_per4_hz+0x22>
     624:	b6 95       	lsr	r27
     626:	a7 95       	ror	r26
     628:	97 95       	ror	r25
     62a:	87 95       	ror	r24
     62c:	2a 95       	dec	r18
     62e:	d2 f7       	brpl	.-12     	; 0x624 <sysclk_get_per4_hz+0x1a>
}
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	0f 90       	pop	r0
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     644:	e2 df       	rcall	.-60     	; 0x60a <sysclk_get_per4_hz>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     64a:	bc 01       	movw	r22, r24
     64c:	cd 01       	movw	r24, r26
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     65c:	ef df       	rcall	.-34     	; 0x63c <sysclk_get_per2_hz>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
}
     662:	bc 01       	movw	r22, r24
     664:	cd 01       	movw	r24, r26
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
     674:	ef df       	rcall	.-34     	; 0x654 <sysclk_get_per_hz>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
}
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	1f 92       	push	r1
     68a:	1f 92       	push	r1
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	9a 83       	std	Y+2, r25	; 0x02
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	80 3c       	cpi	r24, 0xC0	; 192
     69a:	98 40       	sbci	r25, 0x08	; 8
     69c:	21 f4       	brne	.+8      	; 0x6a6 <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     69e:	68 e0       	ldi	r22, 0x08	; 8
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	9a 81       	ldd	r25, Y+2	; 0x02
     6aa:	80 3c       	cpi	r24, 0xC0	; 192
     6ac:	99 40       	sbci	r25, 0x09	; 9
     6ae:	21 f4       	brne	.+8      	; 0x6b8 <spi_master_init+0x34>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     6b0:	68 e0       	ldi	r22, 0x08	; 8
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	if ((uint16_t)spi == (uint16_t)&SPIE) {
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	80 3c       	cpi	r24, 0xC0	; 192
     6be:	9a 40       	sbci	r25, 0x0A	; 10
     6c0:	21 f4       	brne	.+8      	; 0x6ca <spi_master_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_E, PR_SPI_bm);
     6c2:	68 e0       	ldi	r22, 0x08	; 8
     6c4:	85 e0       	ldi	r24, 0x05	; 5
     6c6:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	if ((uint16_t)spi == (uint16_t)&SPIF) {
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	80 3c       	cpi	r24, 0xC0	; 192
     6d0:	9b 40       	sbci	r25, 0x0B	; 11
     6d2:	21 f4       	brne	.+8      	; 0x6dc <spi_master_init+0x58>
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
     6d4:	68 e0       	ldi	r22, 0x08	; 8
     6d6:	86 e0       	ldi	r24, 0x06	; 6
     6d8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
	}
#endif
	spi_enable_master_mode(spi);
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	46 df       	rcall	.-372    	; 0x56e <spi_enable_master_mode>
}
     6e2:	00 00       	nop
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	2d 97       	sbiw	r28, 0x0d	; 13
     704:	cd bf       	out	0x3d, r28	; 61
     706:	de bf       	out	0x3e, r29	; 62
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	9a 83       	std	Y+2, r25	; 0x02
     70c:	6b 83       	std	Y+3, r22	; 0x03
     70e:	7c 83       	std	Y+4, r23	; 0x04
     710:	4d 83       	std	Y+5, r20	; 0x05
     712:	0e 83       	std	Y+6, r16	; 0x06
     714:	1f 83       	std	Y+7, r17	; 0x07
     716:	28 87       	std	Y+8, r18	; 0x08
     718:	39 87       	std	Y+9, r19	; 0x09
     71a:	ca 86       	std	Y+10, r12	; 0x0a
     71c:	db 86       	std	Y+11, r13	; 0x0b
     71e:	ec 86       	std	Y+12, r14	; 0x0c
     720:	fd 86       	std	Y+13, r15	; 0x0d
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     722:	a4 df       	rcall	.-184    	; 0x66c <sysclk_get_cpu_hz>
     724:	9b 01       	movw	r18, r22
     726:	ac 01       	movw	r20, r24
     728:	8e 81       	ldd	r24, Y+6	; 0x06
     72a:	9f 81       	ldd	r25, Y+7	; 0x07
     72c:	a8 85       	ldd	r26, Y+8	; 0x08
     72e:	b9 85       	ldd	r27, Y+9	; 0x09
     730:	e9 81       	ldd	r30, Y+1	; 0x01
     732:	fa 81       	ldd	r31, Y+2	; 0x02
     734:	89 01       	movw	r16, r18
     736:	9a 01       	movw	r18, r20
     738:	ac 01       	movw	r20, r24
     73a:	bd 01       	movw	r22, r26
     73c:	cf 01       	movw	r24, r30
     73e:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <spi_xmega_set_baud_div>
     742:	88 23       	and	r24, r24
     744:	ac f0       	brlt	.+42     	; 0x770 <spi_master_setup_device+0x82>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	28 2f       	mov	r18, r24
     750:	23 7f       	andi	r18, 0xF3	; 243
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     752:	8d 81       	ldd	r24, Y+5	; 0x05
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     760:	8c 70       	andi	r24, 0x0C	; 12
     762:	82 2b       	or	r24, r18
     764:	28 2f       	mov	r18, r24
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
     76e:	01 c0       	rjmp	.+2      	; 0x772 <spi_master_setup_device+0x84>
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
		Assert(false);
		return;
     770:	00 00       	nop
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     772:	2d 96       	adiw	r28, 0x0d	; 13
     774:	cd bf       	out	0x3d, r28	; 61
     776:	de bf       	out	0x3e, r29	; 62
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	29 97       	sbiw	r28, 0x09	; 9
     794:	cd bf       	out	0x3d, r28	; 61
     796:	de bf       	out	0x3e, r29	; 62
     798:	8c 83       	std	Y+4, r24	; 0x04
     79a:	9d 83       	std	Y+5, r25	; 0x05
     79c:	6e 83       	std	Y+6, r22	; 0x06
     79e:	7f 83       	std	Y+7, r23	; 0x07
     7a0:	48 87       	std	Y+8, r20	; 0x08
     7a2:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     7a4:	1b c0       	rjmp	.+54     	; 0x7dc <spi_write_packet+0x52>
		spi_write_single(spi, *data++);
     7a6:	8e 81       	ldd	r24, Y+6	; 0x06
     7a8:	9f 81       	ldd	r25, Y+7	; 0x07
     7aa:	9c 01       	movw	r18, r24
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	2e 83       	std	Y+6, r18	; 0x06
     7b2:	3f 83       	std	Y+7, r19	; 0x07
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 81       	ld	r18, Z
     7b8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ba:	9d 81       	ldd	r25, Y+5	; 0x05
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	2b 83       	std	Y+3, r18	; 0x03
 * \param data The data byte to be loaded
 *
 */
__always_inline static void spi_write_single(SPI_t *spi, uint8_t data)
{
	spi_put(spi,data);
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	6b 81       	ldd	r22, Y+3	; 0x03
     7c8:	99 de       	rcall	.-718    	; 0x4fc <spi_put>
		
		while (!spi_is_rx_full(spi)) {
     7ca:	00 00       	nop
     7cc:	8c 81       	ldd	r24, Y+4	; 0x04
     7ce:	9d 81       	ldd	r25, Y+5	; 0x05
     7d0:	ff de       	rcall	.-514    	; 0x5d0 <spi_is_rx_full>
     7d2:	98 2f       	mov	r25, r24
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	89 27       	eor	r24, r25
     7d8:	88 23       	and	r24, r24
     7da:	c1 f7       	brne	.-16     	; 0x7cc <spi_write_packet+0x42>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     7dc:	88 85       	ldd	r24, Y+8	; 0x08
     7de:	99 85       	ldd	r25, Y+9	; 0x09
     7e0:	9c 01       	movw	r18, r24
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	31 09       	sbc	r19, r1
     7e6:	28 87       	std	Y+8, r18	; 0x08
     7e8:	39 87       	std	Y+9, r19	; 0x09
     7ea:	89 2b       	or	r24, r25
     7ec:	e1 f6       	brne	.-72     	; 0x7a6 <spi_write_packet+0x1c>
		
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
}
     7f0:	29 96       	adiw	r28, 0x09	; 9
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	29 97       	sbiw	r28, 0x09	; 9
     806:	cd bf       	out	0x3d, r28	; 61
     808:	de bf       	out	0x3e, r29	; 62
     80a:	8c 83       	std	Y+4, r24	; 0x04
     80c:	9d 83       	std	Y+5, r25	; 0x05
     80e:	6e 83       	std	Y+6, r22	; 0x06
     810:	7f 83       	std	Y+7, r23	; 0x07
     812:	48 87       	std	Y+8, r20	; 0x08
     814:	59 87       	std	Y+9, r21	; 0x09
	while (len--) {
     816:	1e c0       	rjmp	.+60     	; 0x854 <spi_read_packet+0x58>
     818:	8c 81       	ldd	r24, Y+4	; 0x04
     81a:	9d 81       	ldd	r25, Y+5	; 0x05
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	9a 83       	std	Y+2, r25	; 0x02
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	6b 81       	ldd	r22, Y+3	; 0x03
     82a:	68 de       	rcall	.-816    	; 0x4fc <spi_put>
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     82c:	00 00       	nop
     82e:	8c 81       	ldd	r24, Y+4	; 0x04
     830:	9d 81       	ldd	r25, Y+5	; 0x05
     832:	ce de       	rcall	.-612    	; 0x5d0 <spi_is_rx_full>
     834:	98 2f       	mov	r25, r24
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	89 27       	eor	r24, r25
     83a:	88 23       	and	r24, r24
     83c:	c1 f7       	brne	.-16     	; 0x82e <spi_read_packet+0x32>
		}
		
		spi_read_single(spi, data);
     83e:	2e 81       	ldd	r18, Y+6	; 0x06
     840:	3f 81       	ldd	r19, Y+7	; 0x07
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	b9 01       	movw	r22, r18
     848:	aa de       	rcall	.-684    	; 0x59e <spi_read_single>
		data++;
     84a:	8e 81       	ldd	r24, Y+6	; 0x06
     84c:	9f 81       	ldd	r25, Y+7	; 0x07
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	8e 83       	std	Y+6, r24	; 0x06
     852:	9f 83       	std	Y+7, r25	; 0x07
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     854:	88 85       	ldd	r24, Y+8	; 0x08
     856:	99 85       	ldd	r25, Y+9	; 0x09
     858:	9c 01       	movw	r18, r24
     85a:	21 50       	subi	r18, 0x01	; 1
     85c:	31 09       	sbc	r19, r1
     85e:	28 87       	std	Y+8, r18	; 0x08
     860:	39 87       	std	Y+9, r19	; 0x09
     862:	89 2b       	or	r24, r25
     864:	c9 f6       	brne	.-78     	; 0x818 <spi_read_packet+0x1c>
		
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
     866:	80 e0       	ldi	r24, 0x00	; 0
}
     868:	29 96       	adiw	r28, 0x09	; 9
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	00 d0       	rcall	.+0      	; 0x87a <spi_select_device+0x6>
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	9a 83       	std	Y+2, r25	; 0x02
     884:	6b 83       	std	Y+3, r22	; 0x03
     886:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_low(device->id);
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	9c 81       	ldd	r25, Y+4	; 0x04
     88c:	fc 01       	movw	r30, r24
     88e:	80 81       	ld	r24, Z
     890:	8a dd       	rcall	.-1260   	; 0x3a6 <ioport_set_pin_low>
}
     892:	00 00       	nop
     894:	24 96       	adiw	r28, 0x04	; 4
     896:	cd bf       	out	0x3d, r28	; 61
     898:	de bf       	out	0x3e, r29	; 62
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <spi_deselect_device+0x6>
     8a6:	1f 92       	push	r1
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	9a 83       	std	Y+2, r25	; 0x02
     8b0:	6b 83       	std	Y+3, r22	; 0x03
     8b2:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_high(device->id);
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	9c 81       	ldd	r25, Y+4	; 0x04
     8b8:	fc 01       	movw	r30, r24
     8ba:	80 81       	ld	r24, Z
     8bc:	c9 dd       	rcall	.-1134   	; 0x450 <ioport_set_pin_high>
}
     8be:	00 00       	nop
     8c0:	24 96       	adiw	r28, 0x04	; 4
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <cpu_irq_save>:
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	1f 92       	push	r1
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	8f e3       	ldi	r24, 0x3F	; 63
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	89 83       	std	Y+1, r24	; 0x01
     8e0:	f8 94       	cli
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	0f 90       	pop	r0
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <cpu_irq_restore>:
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	89 83       	std	Y+1, r24	; 0x01
     8f8:	8f e3       	ldi	r24, 0x3F	; 63
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	29 81       	ldd	r18, Y+1	; 0x01
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
     902:	00 00       	nop
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <sleepmgr_lock_mode>:
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	1f 92       	push	r1
     912:	1f 92       	push	r1
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	8a 83       	std	Y+2, r24	; 0x02
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	8b 52       	subi	r24, 0x2B	; 43
     922:	98 4d       	sbci	r25, 0xD8	; 216
     924:	fc 01       	movw	r30, r24
     926:	80 81       	ld	r24, Z
     928:	8f 3f       	cpi	r24, 0xFF	; 255
     92a:	09 f4       	brne	.+2      	; 0x92e <sleepmgr_lock_mode+0x22>
     92c:	ff cf       	rjmp	.-2      	; 0x92c <sleepmgr_lock_mode+0x20>
     92e:	ce df       	rcall	.-100    	; 0x8cc <cpu_irq_save>
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9c 01       	movw	r18, r24
     93a:	2b 52       	subi	r18, 0x2B	; 43
     93c:	38 4d       	sbci	r19, 0xD8	; 216
     93e:	f9 01       	movw	r30, r18
     940:	20 81       	ld	r18, Z
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	8b 52       	subi	r24, 0x2B	; 43
     946:	98 4d       	sbci	r25, 0xD8	; 216
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	ce df       	rcall	.-100    	; 0x8ec <cpu_irq_restore>
     950:	00 00       	nop
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <sleepmgr_unlock_mode>:
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	1f 92       	push	r1
     962:	1f 92       	push	r1
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	8a 83       	std	Y+2, r24	; 0x02
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	8b 52       	subi	r24, 0x2B	; 43
     972:	98 4d       	sbci	r25, 0xD8	; 216
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	88 23       	and	r24, r24
     97a:	09 f4       	brne	.+2      	; 0x97e <sleepmgr_unlock_mode+0x22>
     97c:	ff cf       	rjmp	.-2      	; 0x97c <sleepmgr_unlock_mode+0x20>
     97e:	a6 df       	rcall	.-180    	; 0x8cc <cpu_irq_save>
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	9c 01       	movw	r18, r24
     98a:	2b 52       	subi	r18, 0x2B	; 43
     98c:	38 4d       	sbci	r19, 0xD8	; 216
     98e:	f9 01       	movw	r30, r18
     990:	20 81       	ld	r18, Z
     992:	21 50       	subi	r18, 0x01	; 1
     994:	8b 52       	subi	r24, 0x2B	; 43
     996:	98 4d       	sbci	r25, 0xD8	; 216
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	a6 df       	rcall	.-180    	; 0x8ec <cpu_irq_restore>
     9a0:	00 00       	nop
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	1f 92       	push	r1
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	89 83       	std	Y+1, r24	; 0x01
     9ba:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	81 15       	cp	r24, r1
     9c2:	92 40       	sbci	r25, 0x02	; 2
     9c4:	69 f4       	brne	.+26     	; 0x9e0 <adc_enable_clock+0x34>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     9c6:	80 91 8e 21 	lds	r24, 0x218E	; 0x80218e <__data_end>
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	98 0f       	add	r25, r24
     9ce:	90 93 8e 21 	sts	0x218E, r25	; 0x80218e <__data_end>
     9d2:	88 23       	and	r24, r24
     9d4:	b1 f4       	brne	.+44     	; 0xa02 <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9d6:	62 e0       	ldi	r22, 0x02	; 2
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     9de:	11 c0       	rjmp	.+34     	; 0xa02 <adc_enable_clock+0x56>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	80 34       	cpi	r24, 0x40	; 64
     9e6:	92 40       	sbci	r25, 0x02	; 2
     9e8:	61 f4       	brne	.+24     	; 0xa02 <adc_enable_clock+0x56>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     9ea:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <adcb_enable_count>
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	98 0f       	add	r25, r24
     9f2:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <adcb_enable_count>
     9f6:	88 23       	and	r24, r24
     9f8:	21 f4       	brne	.+8      	; 0xa02 <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
     a02:	00 00       	nop
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	1f 92       	push	r1
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	81 15       	cp	r24, r1
     a24:	92 40       	sbci	r25, 0x02	; 2
     a26:	71 f4       	brne	.+28     	; 0xa44 <adc_disable_clock+0x36>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     a28:	80 91 8e 21 	lds	r24, 0x218E	; 0x80218e <__data_end>
     a2c:	81 50       	subi	r24, 0x01	; 1
     a2e:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <__data_end>
     a32:	80 91 8e 21 	lds	r24, 0x218E	; 0x80218e <__data_end>
     a36:	88 23       	and	r24, r24
     a38:	b9 f4       	brne	.+46     	; 0xa68 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     a42:	12 c0       	rjmp	.+36     	; 0xa68 <adc_disable_clock+0x5a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	80 34       	cpi	r24, 0x40	; 64
     a4a:	92 40       	sbci	r25, 0x02	; 2
     a4c:	69 f4       	brne	.+26     	; 0xa68 <adc_disable_clock+0x5a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     a4e:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <adcb_enable_count>
     a52:	81 50       	subi	r24, 0x01	; 1
     a54:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <adcb_enable_count>
     a58:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <adcb_enable_count>
     a5c:	88 23       	and	r24, r24
     a5e:	21 f4       	brne	.+8      	; 0xa68 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
     a68:	00 00       	nop
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <adc_enable+0x6>
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	8a 83       	std	Y+2, r24	; 0x02
     a80:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     a82:	24 df       	rcall	.-440    	; 0x8cc <cpu_irq_save>
     a84:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
     a86:	8a 81       	ldd	r24, Y+2	; 0x02
     a88:	9b 81       	ldd	r25, Y+3	; 0x03
     a8a:	90 df       	rcall	.-224    	; 0x9ac <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	9b 81       	ldd	r25, Y+3	; 0x03
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	28 2f       	mov	r18, r24
     a96:	21 60       	ori	r18, 0x01	; 1
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	9b 81       	ldd	r25, Y+3	; 0x03
     a9c:	fc 01       	movw	r30, r24
	cpu_irq_restore(flags);
     a9e:	20 83       	st	Z, r18
     aa0:	89 81       	ldd	r24, Y+1	; 0x01

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
     aa2:	24 df       	rcall	.-440    	; 0x8ec <cpu_irq_restore>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	32 df       	rcall	.-412    	; 0x90c <sleepmgr_lock_mode>
}
     aa8:	00 00       	nop
     aaa:	23 96       	adiw	r28, 0x03	; 3
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	00 d0       	rcall	.+0      	; 0xabc <adc_disable+0x6>
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	8a 83       	std	Y+2, r24	; 0x02
     ac2:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
     ac4:	03 df       	rcall	.-506    	; 0x8cc <cpu_irq_save>
     ac6:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA &= ~ADC_ENABLE_bm;
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	9b 81       	ldd	r25, Y+3	; 0x03
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	28 2f       	mov	r18, r24
     ad2:	2e 7f       	andi	r18, 0xFE	; 254
     ad4:	8a 81       	ldd	r24, Y+2	; 0x02
     ad6:	9b 81       	ldd	r25, Y+3	; 0x03
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	9b 81       	ldd	r25, Y+3	; 0x03
     ae0:	96 df       	rcall	.-212    	; 0xa0e <adc_disable_clock>
	cpu_irq_restore(flags);
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	03 df       	rcall	.-506    	; 0x8ec <cpu_irq_restore>

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	39 df       	rcall	.-398    	; 0x95c <sleepmgr_unlock_mode>
     aea:	00 00       	nop
}
     aec:	23 96       	adiw	r28, 0x03	; 3
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	1f 92       	push	r1
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     b02:	8f e3       	ldi	r24, 0x3F	; 63
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b0c:	f8 94       	cli
	return flags;
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	1f 92       	push	r1
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     b24:	8f e3       	ldi	r24, 0x3F	; 63
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	29 81       	ldd	r18, Y+1	; 0x01
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
}
     b2e:	00 00       	nop
     b30:	0f 90       	pop	r0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	1f 92       	push	r1
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	88 2f       	mov	r24, r24
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	bc 01       	movw	r22, r24
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0e 94 43 30 	call	0x6086	; 0x6086 <nvm_read_byte>
}
     b52:	0f 90       	pop	r0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <adc_get_calibration_data+0x6>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 05       	cpc	r25, r1
     b70:	e9 f0       	breq	.+58     	; 0xbac <adc_get_calibration_data+0x52>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	91 05       	cpc	r25, r1
     b76:	89 f1       	breq	.+98     	; 0xbda <adc_get_calibration_data+0x80>
     b78:	89 2b       	or	r24, r25
     b7a:	09 f0       	breq	.+2      	; 0xb7e <adc_get_calibration_data+0x24>
     b7c:	45 c0       	rjmp	.+138    	; 0xc08 <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     b7e:	81 e2       	ldi	r24, 0x21	; 33
     b80:	db df       	rcall	.-74     	; 0xb38 <nvm_read_production_signature_row>
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	98 2f       	mov	r25, r24
     b90:	88 27       	eor	r24, r24
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	cf df       	rcall	.-98     	; 0xb38 <nvm_read_production_signature_row>
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	29 81       	ldd	r18, Y+1	; 0x01
     ba0:	3a 81       	ldd	r19, Y+2	; 0x02
     ba2:	82 2b       	or	r24, r18
     ba4:	93 2b       	or	r25, r19
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     baa:	30 c0       	rjmp	.+96     	; 0xc0c <adc_get_calibration_data+0xb2>
     bac:	85 e2       	ldi	r24, 0x25	; 37
     bae:	c4 df       	rcall	.-120    	; 0xb38 <nvm_read_production_signature_row>
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	98 2f       	mov	r25, r24
     bbe:	88 27       	eor	r24, r24
     bc0:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	84 e2       	ldi	r24, 0x24	; 36
     bc6:	b8 df       	rcall	.-144    	; 0xb38 <nvm_read_production_signature_row>
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	29 81       	ldd	r18, Y+1	; 0x01
     bce:	3a 81       	ldd	r19, Y+2	; 0x02
     bd0:	82 2b       	or	r24, r18
     bd2:	93 2b       	or	r25, r19
     bd4:	89 83       	std	Y+1, r24	; 0x01
		break;
     bd6:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <adc_get_calibration_data+0xb2>
     bda:	8f e2       	ldi	r24, 0x2F	; 47
     bdc:	ad df       	rcall	.-166    	; 0xb38 <nvm_read_production_signature_row>
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	98 2f       	mov	r25, r24
     bec:	88 27       	eor	r24, r24
     bee:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	8e e2       	ldi	r24, 0x2E	; 46
     bf4:	a1 df       	rcall	.-190    	; 0xb38 <nvm_read_production_signature_row>
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	29 81       	ldd	r18, Y+1	; 0x01
     bfc:	3a 81       	ldd	r19, Y+2	; 0x02
     bfe:	82 2b       	or	r24, r18
     c00:	93 2b       	or	r25, r19
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	9a 83       	std	Y+2, r25	; 0x02
		break;
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
     c08:	19 82       	std	Y+1, r1	; 0x01
     c0a:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c10:	23 96       	adiw	r28, 0x03	; 3
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c2c:	0f 92       	push	r0
     c2e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     c32:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c36:	0f 92       	push	r0
     c38:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     c3c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c40:	0f 92       	push	r0
     c42:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     c46:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c4a:	0f 92       	push	r0
     c4c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <__vector_71+0x52>
     c6e:	1f 92       	push	r1
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     c74:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <adca_callback>
     c78:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <adca_callback+0x1>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	9a 83       	std	Y+2, r25	; 0x02
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c88:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	83 70       	andi	r24, 0x03	; 3
     c92:	99 27       	eor	r25, r25
     c94:	89 2b       	or	r24, r25
     c96:	39 f4       	brne	.+14     	; 0xca6 <__vector_71+0x8a>
		index += 2;
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	8e 5f       	subi	r24, 0xFE	; 254
     c9c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	86 95       	lsr	r24
     ca2:	86 95       	lsr	r24
     ca4:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	81 70       	andi	r24, 0x01	; 1
     cae:	99 27       	eor	r25, r25
     cb0:	89 2b       	or	r24, r25
     cb2:	19 f4       	brne	.+6      	; 0xcba <__vector_71+0x9e>
		index++;
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	ac 01       	movw	r20, r24
     cc0:	40 5e       	subi	r20, 0xE0	; 224
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	84 0f       	add	r24, r20
     cd8:	95 1f       	adc	r25, r21
     cda:	fc 01       	movw	r30, r24
     cdc:	84 81       	ldd	r24, Z+4	; 0x04
     cde:	95 81       	ldd	r25, Z+5	; 0x05
     ce0:	ac 01       	movw	r20, r24
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	f9 01       	movw	r30, r18
     cea:	19 95       	eicall
}
     cec:	00 00       	nop
     cee:	24 96       	adiw	r28, 0x04	; 4
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d16:	0f 90       	pop	r0
     d18:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d1c:	0f 90       	pop	r0
     d1e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d22:	0f 90       	pop	r0
     d24:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d28:	0f 90       	pop	r0
     d2a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d44:	0f 92       	push	r0
     d46:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     d4a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d4e:	0f 92       	push	r0
     d50:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     d54:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d58:	0f 92       	push	r0
     d5a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     d5e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d62:	0f 92       	push	r0
     d64:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	ef 93       	push	r30
     d7e:	ff 93       	push	r31
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	00 d0       	rcall	.+0      	; 0xd86 <__vector_72+0x52>
     d86:	1f 92       	push	r1
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     d8c:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <adca_callback>
     d90:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <adca_callback+0x1>
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     da0:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	83 70       	andi	r24, 0x03	; 3
     daa:	99 27       	eor	r25, r25
     dac:	89 2b       	or	r24, r25
     dae:	39 f4       	brne	.+14     	; 0xdbe <__vector_72+0x8a>
		index += 2;
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	8e 5f       	subi	r24, 0xFE	; 254
     db4:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	86 95       	lsr	r24
     dba:	86 95       	lsr	r24
     dbc:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	81 70       	andi	r24, 0x01	; 1
     dc6:	99 27       	eor	r25, r25
     dc8:	89 2b       	or	r24, r25
     dca:	19 f4       	brne	.+6      	; 0xdd2 <__vector_72+0x9e>
		index++;
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	ac 01       	movw	r20, r24
     dd8:	40 5e       	subi	r20, 0xE0	; 224
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	84 0f       	add	r24, r20
     df0:	95 1f       	adc	r25, r21
     df2:	fc 01       	movw	r30, r24
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	95 81       	ldd	r25, Z+5	; 0x05
     df8:	ac 01       	movw	r20, r24
     dfa:	62 e0       	ldi	r22, 0x02	; 2
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	f9 01       	movw	r30, r18
     e02:	19 95       	eicall
}
     e04:	00 00       	nop
     e06:	24 96       	adiw	r28, 0x04	; 4
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e2e:	0f 90       	pop	r0
     e30:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e34:	0f 90       	pop	r0
     e36:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e3a:	0f 90       	pop	r0
     e3c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e40:	0f 90       	pop	r0
     e42:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e5c:	0f 92       	push	r0
     e5e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     e62:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e66:	0f 92       	push	r0
     e68:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     e6c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e70:	0f 92       	push	r0
     e72:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     e76:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e7a:	0f 92       	push	r0
     e7c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	ef 93       	push	r30
     e96:	ff 93       	push	r31
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <__vector_73+0x52>
     e9e:	1f 92       	push	r1
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     ea4:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <adca_callback>
     ea8:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <adca_callback+0x1>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     eb8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	83 70       	andi	r24, 0x03	; 3
     ec2:	99 27       	eor	r25, r25
     ec4:	89 2b       	or	r24, r25
     ec6:	39 f4       	brne	.+14     	; 0xed6 <__vector_73+0x8a>
		index += 2;
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	8e 5f       	subi	r24, 0xFE	; 254
     ecc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	86 95       	lsr	r24
     ed2:	86 95       	lsr	r24
     ed4:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	81 70       	andi	r24, 0x01	; 1
     ede:	99 27       	eor	r25, r25
     ee0:	89 2b       	or	r24, r25
     ee2:	19 f4       	brne	.+6      	; 0xeea <__vector_73+0x9e>
		index++;
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	ac 01       	movw	r20, r24
     ef0:	40 5e       	subi	r20, 0xE0	; 224
     ef2:	5f 4f       	sbci	r21, 0xFF	; 255
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	84 0f       	add	r24, r20
     f08:	95 1f       	adc	r25, r21
     f0a:	fc 01       	movw	r30, r24
     f0c:	84 81       	ldd	r24, Z+4	; 0x04
     f0e:	95 81       	ldd	r25, Z+5	; 0x05
     f10:	ac 01       	movw	r20, r24
     f12:	64 e0       	ldi	r22, 0x04	; 4
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	f9 01       	movw	r30, r18
     f1a:	19 95       	eicall
}
     f1c:	00 00       	nop
     f1e:	24 96       	adiw	r28, 0x04	; 4
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f46:	0f 90       	pop	r0
     f48:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f4c:	0f 90       	pop	r0
     f4e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f52:	0f 90       	pop	r0
     f54:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f58:	0f 90       	pop	r0
     f5a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f74:	0f 92       	push	r0
     f76:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
     f7a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f7e:	0f 92       	push	r0
     f80:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
     f84:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f88:	0f 92       	push	r0
     f8a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
     f8e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f92:	0f 92       	push	r0
     f94:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <__vector_74+0x52>
     fb6:	1f 92       	push	r1
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     fbc:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <adca_callback>
     fc0:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <adca_callback+0x1>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	88 e0       	ldi	r24, 0x08	; 8
     fce:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     fd0:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	83 70       	andi	r24, 0x03	; 3
     fda:	99 27       	eor	r25, r25
     fdc:	89 2b       	or	r24, r25
     fde:	39 f4       	brne	.+14     	; 0xfee <__vector_74+0x8a>
		index += 2;
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	8e 5f       	subi	r24, 0xFE	; 254
     fe4:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	86 95       	lsr	r24
     fea:	86 95       	lsr	r24
     fec:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	99 27       	eor	r25, r25
     ff8:	89 2b       	or	r24, r25
     ffa:	19 f4       	brne	.+6      	; 0x1002 <__vector_74+0x9e>
		index++;
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	ac 01       	movw	r20, r24
    1008:	40 5e       	subi	r20, 0xE0	; 224
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	fc 01       	movw	r30, r24
    1024:	84 81       	ldd	r24, Z+4	; 0x04
    1026:	95 81       	ldd	r25, Z+5	; 0x05
    1028:	ac 01       	movw	r20, r24
    102a:	68 e0       	ldi	r22, 0x08	; 8
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	f9 01       	movw	r30, r18
    1032:	19 95       	eicall
}
    1034:	00 00       	nop
    1036:	24 96       	adiw	r28, 0x04	; 4
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    105e:	0f 90       	pop	r0
    1060:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1064:	0f 90       	pop	r0
    1066:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    106a:	0f 90       	pop	r0
    106c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1070:	0f 90       	pop	r0
    1072:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    108c:	0f 92       	push	r0
    108e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1092:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1096:	0f 92       	push	r0
    1098:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    109c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10a0:	0f 92       	push	r0
    10a2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    10a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10aa:	0f 92       	push	r0
    10ac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10b0:	2f 93       	push	r18
    10b2:	3f 93       	push	r19
    10b4:	4f 93       	push	r20
    10b6:	5f 93       	push	r21
    10b8:	6f 93       	push	r22
    10ba:	7f 93       	push	r23
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	af 93       	push	r26
    10c2:	bf 93       	push	r27
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <__vector_39+0x52>
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    10d4:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <adcb_callback>
    10d8:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <adcb_callback+0x1>
    10dc:	80 e4       	ldi	r24, 0x40	; 64
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    10e8:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	83 70       	andi	r24, 0x03	; 3
    10f2:	99 27       	eor	r25, r25
    10f4:	89 2b       	or	r24, r25
    10f6:	39 f4       	brne	.+14     	; 0x1106 <__vector_39+0x8a>
		index += 2;
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	8e 5f       	subi	r24, 0xFE	; 254
    10fc:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	86 95       	lsr	r24
    1102:	86 95       	lsr	r24
    1104:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	99 27       	eor	r25, r25
    1110:	89 2b       	or	r24, r25
    1112:	19 f4       	brne	.+6      	; 0x111a <__vector_39+0x9e>
		index++;
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	ac 01       	movw	r20, r24
    1120:	40 5e       	subi	r20, 0xE0	; 224
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	84 0f       	add	r24, r20
    1138:	95 1f       	adc	r25, r21
    113a:	fc 01       	movw	r30, r24
    113c:	84 81       	ldd	r24, Z+4	; 0x04
    113e:	95 81       	ldd	r25, Z+5	; 0x05
    1140:	ac 01       	movw	r20, r24
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	80 e4       	ldi	r24, 0x40	; 64
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	f9 01       	movw	r30, r18
    114a:	19 95       	eicall
}
    114c:	00 00       	nop
    114e:	24 96       	adiw	r28, 0x04	; 4
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1176:	0f 90       	pop	r0
    1178:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    117c:	0f 90       	pop	r0
    117e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    1182:	0f 90       	pop	r0
    1184:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    1188:	0f 90       	pop	r0
    118a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11a4:	0f 92       	push	r0
    11a6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    11aa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11ae:	0f 92       	push	r0
    11b0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    11b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11b8:	0f 92       	push	r0
    11ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    11be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11c2:	0f 92       	push	r0
    11c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <__vector_40+0x52>
    11e6:	1f 92       	push	r1
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    11ec:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <adcb_callback>
    11f0:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <adcb_callback+0x1>
    11f4:	80 e4       	ldi	r24, 0x40	; 64
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1200:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	83 70       	andi	r24, 0x03	; 3
    120a:	99 27       	eor	r25, r25
    120c:	89 2b       	or	r24, r25
    120e:	39 f4       	brne	.+14     	; 0x121e <__vector_40+0x8a>
		index += 2;
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	8e 5f       	subi	r24, 0xFE	; 254
    1214:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	99 27       	eor	r25, r25
    1228:	89 2b       	or	r24, r25
    122a:	19 f4       	brne	.+6      	; 0x1232 <__vector_40+0x9e>
		index++;
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	ac 01       	movw	r20, r24
    1238:	40 5e       	subi	r20, 0xE0	; 224
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	84 0f       	add	r24, r20
    1250:	95 1f       	adc	r25, r21
    1252:	fc 01       	movw	r30, r24
    1254:	84 81       	ldd	r24, Z+4	; 0x04
    1256:	95 81       	ldd	r25, Z+5	; 0x05
    1258:	ac 01       	movw	r20, r24
    125a:	62 e0       	ldi	r22, 0x02	; 2
    125c:	80 e4       	ldi	r24, 0x40	; 64
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	f9 01       	movw	r30, r18
    1262:	19 95       	eicall
}
    1264:	00 00       	nop
    1266:	24 96       	adiw	r28, 0x04	; 4
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    128e:	0f 90       	pop	r0
    1290:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    1294:	0f 90       	pop	r0
    1296:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    129a:	0f 90       	pop	r0
    129c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12a0:	0f 90       	pop	r0
    12a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12bc:	0f 92       	push	r0
    12be:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    12c2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12c6:	0f 92       	push	r0
    12c8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    12cc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12d0:	0f 92       	push	r0
    12d2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    12d6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12da:	0f 92       	push	r0
    12dc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <__vector_41+0x52>
    12fe:	1f 92       	push	r1
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1304:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <adcb_callback>
    1308:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <adcb_callback+0x1>
    130c:	80 e4       	ldi	r24, 0x40	; 64
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1318:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	83 70       	andi	r24, 0x03	; 3
    1322:	99 27       	eor	r25, r25
    1324:	89 2b       	or	r24, r25
    1326:	39 f4       	brne	.+14     	; 0x1336 <__vector_41+0x8a>
		index += 2;
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	8e 5f       	subi	r24, 0xFE	; 254
    132c:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	86 95       	lsr	r24
    1332:	86 95       	lsr	r24
    1334:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	81 70       	andi	r24, 0x01	; 1
    133e:	99 27       	eor	r25, r25
    1340:	89 2b       	or	r24, r25
    1342:	19 f4       	brne	.+6      	; 0x134a <__vector_41+0x9e>
		index++;
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	ac 01       	movw	r20, r24
    1350:	40 5e       	subi	r20, 0xE0	; 224
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	84 0f       	add	r24, r20
    1368:	95 1f       	adc	r25, r21
    136a:	fc 01       	movw	r30, r24
    136c:	84 81       	ldd	r24, Z+4	; 0x04
    136e:	95 81       	ldd	r25, Z+5	; 0x05
    1370:	ac 01       	movw	r20, r24
    1372:	64 e0       	ldi	r22, 0x04	; 4
    1374:	80 e4       	ldi	r24, 0x40	; 64
    1376:	92 e0       	ldi	r25, 0x02	; 2
    1378:	f9 01       	movw	r30, r18
    137a:	19 95       	eicall
}
    137c:	00 00       	nop
    137e:	24 96       	adiw	r28, 0x04	; 4
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	0f 90       	pop	r0
    13a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13a6:	0f 90       	pop	r0
    13a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13ac:	0f 90       	pop	r0
    13ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13b2:	0f 90       	pop	r0
    13b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13b8:	0f 90       	pop	r0
    13ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13d4:	0f 92       	push	r0
    13d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    13da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13de:	0f 92       	push	r0
    13e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    13e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13e8:	0f 92       	push	r0
    13ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    13ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13f2:	0f 92       	push	r0
    13f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	00 d0       	rcall	.+0      	; 0x1416 <__vector_42+0x52>
    1416:	1f 92       	push	r1
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    141c:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <adcb_callback>
    1420:	30 91 02 22 	lds	r19, 0x2202	; 0x802202 <adcb_callback+0x1>
    1424:	80 e4       	ldi	r24, 0x40	; 64
    1426:	92 e0       	ldi	r25, 0x02	; 2
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	88 e0       	ldi	r24, 0x08	; 8
    142e:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1430:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	83 70       	andi	r24, 0x03	; 3
    143a:	99 27       	eor	r25, r25
    143c:	89 2b       	or	r24, r25
    143e:	39 f4       	brne	.+14     	; 0x144e <__vector_42+0x8a>
		index += 2;
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	8e 5f       	subi	r24, 0xFE	; 254
    1444:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	99 27       	eor	r25, r25
    1458:	89 2b       	or	r24, r25
    145a:	19 f4       	brne	.+6      	; 0x1462 <__vector_42+0x9e>
		index++;
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	8f 5f       	subi	r24, 0xFF	; 255
    1460:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	ac 01       	movw	r20, r24
    1468:	40 5e       	subi	r20, 0xE0	; 224
    146a:	5f 4f       	sbci	r21, 0xFF	; 255
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	84 0f       	add	r24, r20
    1480:	95 1f       	adc	r25, r21
    1482:	fc 01       	movw	r30, r24
    1484:	84 81       	ldd	r24, Z+4	; 0x04
    1486:	95 81       	ldd	r25, Z+5	; 0x05
    1488:	ac 01       	movw	r20, r24
    148a:	68 e0       	ldi	r22, 0x08	; 8
    148c:	80 e4       	ldi	r24, 0x40	; 64
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	f9 01       	movw	r30, r18
    1492:	19 95       	eicall
}
    1494:	00 00       	nop
    1496:	24 96       	adiw	r28, 0x04	; 4
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    14be:	0f 90       	pop	r0
    14c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    14c4:	0f 90       	pop	r0
    14c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    14ca:	0f 90       	pop	r0
    14cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    14d0:	0f 90       	pop	r0
    14d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	28 97       	sbiw	r28, 0x08	; 8
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	6f 83       	std	Y+7, r22	; 0x07
    14f0:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	81 15       	cp	r24, r1
    14f8:	92 40       	sbci	r25, 0x02	; 2
    14fa:	29 f4       	brne	.+10     	; 0x1506 <adc_write_configuration+0x2a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	2d db       	rcall	.-2470   	; 0xb5a <adc_get_calibration_data>
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	0a c0       	rjmp	.+20     	; 0x151a <adc_write_configuration+0x3e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	80 34       	cpi	r24, 0x40	; 64
    150c:	92 40       	sbci	r25, 0x02	; 2
    150e:	09 f0       	breq	.+2      	; 0x1512 <adc_write_configuration+0x36>
    1510:	56 c0       	rjmp	.+172    	; 0x15be <adc_write_configuration+0xe2>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	22 db       	rcall	.-2492   	; 0xb5a <adc_get_calibration_data>
    1516:	89 83       	std	Y+1, r24	; 0x01
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	ee da       	rcall	.-2596   	; 0xaf8 <cpu_irq_save>
	adc_enable_clock(adc);
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	44 da       	rcall	.-2936   	; 0x9ac <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	22 e0       	ldi	r18, 0x02	; 2
    1536:	fc 01       	movw	r30, r24
    1538:	20 83       	st	Z, r18
	adc->CAL = cal;
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	3a 81       	ldd	r19, Y+2	; 0x02
    1542:	fc 01       	movw	r30, r24
    1544:	24 87       	std	Z+12, r18	; 0x0c
    1546:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    1548:	8f 81       	ldd	r24, Y+7	; 0x07
    154a:	98 85       	ldd	r25, Y+8	; 0x08
    154c:	fc 01       	movw	r30, r24
    154e:	25 81       	ldd	r18, Z+5	; 0x05
    1550:	36 81       	ldd	r19, Z+6	; 0x06
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	fc 01       	movw	r30, r24
    1558:	20 8f       	std	Z+24, r18	; 0x18
    155a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    155c:	8f 81       	ldd	r24, Y+7	; 0x07
    155e:	98 85       	ldd	r25, Y+8	; 0x08
    1560:	fc 01       	movw	r30, r24
    1562:	22 81       	ldd	r18, Z+2	; 0x02
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	fc 01       	movw	r30, r24
    156a:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    156c:	8f 81       	ldd	r24, Y+7	; 0x07
    156e:	98 85       	ldd	r25, Y+8	; 0x08
    1570:	fc 01       	movw	r30, r24
    1572:	24 81       	ldd	r18, Z+4	; 0x04
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	fc 01       	movw	r30, r24
    157a:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	fc 01       	movw	r30, r24
    1582:	23 81       	ldd	r18, Z+3	; 0x03
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	fc 01       	movw	r30, r24
    158a:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	fc 01       	movw	r30, r24
    1592:	21 81       	ldd	r18, Z+1	; 0x01
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	fc 01       	movw	r30, r24
    159a:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    159c:	8f 81       	ldd	r24, Y+7	; 0x07
    159e:	98 85       	ldd	r25, Y+8	; 0x08
    15a0:	fc 01       	movw	r30, r24
    15a2:	90 81       	ld	r25, Z
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	29 2f       	mov	r18, r25
    15a8:	28 2b       	or	r18, r24
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	fc 01       	movw	r30, r24

	adc_disable_clock(adc);
    15b0:	20 83       	st	Z, r18
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06

	cpu_irq_restore(flags);
    15b6:	2b da       	rcall	.-2986   	; 0xa0e <adc_disable_clock>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	ae da       	rcall	.-2724   	; 0xb18 <cpu_irq_restore>
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <adc_write_configuration+0xe4>
	} else
#endif

	{
		Assert(0);
		return;
    15be:	00 00       	nop
	adc->CTRLA = enable | conf->ctrla;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    15c0:	28 96       	adiw	r28, 0x08	; 8
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	25 97       	sbiw	r28, 0x05	; 5
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	9b 83       	std	Y+3, r25	; 0x03
    15de:	6c 83       	std	Y+4, r22	; 0x04
    15e0:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    15e2:	8a da       	rcall	.-2796   	; 0xaf8 <cpu_irq_save>
    15e4:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	e0 d9       	rcall	.-3136   	; 0x9ac <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	fc 01       	movw	r30, r24
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	20 7c       	andi	r18, 0xC0	; 192
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	fc 01       	movw	r30, r24
    15fe:	20 83       	st	Z, r18

	conf->cmp = adc->CMP;
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	9b 81       	ldd	r25, Y+3	; 0x03
    1604:	fc 01       	movw	r30, r24
    1606:	20 8d       	ldd	r18, Z+24	; 0x18
    1608:	31 8d       	ldd	r19, Z+25	; 0x19
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	9d 81       	ldd	r25, Y+5	; 0x05
    160e:	fc 01       	movw	r30, r24
    1610:	25 83       	std	Z+5, r18	; 0x05
    1612:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	fc 01       	movw	r30, r24
    161a:	22 81       	ldd	r18, Z+2	; 0x02
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	9d 81       	ldd	r25, Y+5	; 0x05
    1620:	fc 01       	movw	r30, r24
    1622:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	fc 01       	movw	r30, r24
    162a:	24 81       	ldd	r18, Z+4	; 0x04
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	fc 01       	movw	r30, r24
    1632:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	fc 01       	movw	r30, r24
    163a:	23 81       	ldd	r18, Z+3	; 0x03
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	fc 01       	movw	r30, r24
    1642:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	9b 81       	ldd	r25, Y+3	; 0x03
    1648:	fc 01       	movw	r30, r24
    164a:	21 81       	ldd	r18, Z+1	; 0x01
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	fc 01       	movw	r30, r24
    1652:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03

	cpu_irq_restore(flags);
    1658:	da d9       	rcall	.-3148   	; 0xa0e <adc_disable_clock>
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	5d da       	rcall	.-2886   	; 0xb18 <cpu_irq_restore>
}
    165e:	00 00       	nop
    1660:	25 96       	adiw	r28, 0x05	; 5
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	2c 97       	sbiw	r28, 0x0c	; 12
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	88 87       	std	Y+8, r24	; 0x08
    167c:	99 87       	std	Y+9, r25	; 0x09
    167e:	6a 87       	std	Y+10, r22	; 0x0a
    1680:	4b 87       	std	Y+11, r20	; 0x0b
    1682:	5c 87       	std	Y+12, r21	; 0x0c
    1684:	88 85       	ldd	r24, Y+8	; 0x08
    1686:	99 85       	ldd	r25, Y+9	; 0x09
    1688:	8c 83       	std	Y+4, r24	; 0x04
    168a:	9d 83       	std	Y+5, r25	; 0x05
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1690:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1692:	8e 81       	ldd	r24, Y+6	; 0x06
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	83 70       	andi	r24, 0x03	; 3
    169a:	99 27       	eor	r25, r25
    169c:	89 2b       	or	r24, r25
    169e:	39 f4       	brne	.+14     	; 0x16ae <adcch_write_configuration+0x42>
		index += 2;
    16a0:	8f 81       	ldd	r24, Y+7	; 0x07
    16a2:	8e 5f       	subi	r24, 0xFE	; 254
    16a4:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	86 95       	lsr	r24
    16aa:	86 95       	lsr	r24
    16ac:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	81 70       	andi	r24, 0x01	; 1
    16b6:	99 27       	eor	r25, r25
    16b8:	89 2b       	or	r24, r25
    16ba:	19 f4       	brne	.+6      	; 0x16c2 <adcch_write_configuration+0x56>
		index++;
    16bc:	8f 81       	ldd	r24, Y+7	; 0x07
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	9c 01       	movw	r18, r24
    16c8:	20 5e       	subi	r18, 0xE0	; 224
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	8f 81       	ldd	r24, Y+7	; 0x07
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    16e6:	08 da       	rcall	.-3056   	; 0xaf8 <cpu_irq_save>
    16e8:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    16ea:	88 85       	ldd	r24, Y+8	; 0x08
    16ec:	99 85       	ldd	r25, Y+9	; 0x09
    16ee:	5e d9       	rcall	.-3396   	; 0x9ac <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    16f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16f4:	fc 01       	movw	r30, r24
    16f6:	20 81       	ld	r18, Z
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    1700:	8b 85       	ldd	r24, Y+11	; 0x0b
    1702:	9c 85       	ldd	r25, Y+12	; 0x0c
    1704:	fc 01       	movw	r30, r24
    1706:	22 81       	ldd	r18, Z+2	; 0x02
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	fc 01       	movw	r30, r24
    170e:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1710:	8b 85       	ldd	r24, Y+11	; 0x0b
    1712:	9c 85       	ldd	r25, Y+12	; 0x0c
    1714:	fc 01       	movw	r30, r24
    1716:	21 81       	ldd	r18, Z+1	; 0x01
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	fc 01       	movw	r30, r24
    171e:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    1720:	8a 85       	ldd	r24, Y+10	; 0x0a
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	81 70       	andi	r24, 0x01	; 1
    1728:	99 27       	eor	r25, r25
    172a:	89 2b       	or	r24, r25
    172c:	41 f0       	breq	.+16     	; 0x173e <adcch_write_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    172e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1730:	9c 85       	ldd	r25, Y+12	; 0x0c
    1732:	fc 01       	movw	r30, r24
    1734:	23 81       	ldd	r18, Z+3	; 0x03
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	fc 01       	movw	r30, r24
    173c:	26 83       	std	Z+6, r18	; 0x06
	}
	adc_disable_clock(adc);
    173e:	88 85       	ldd	r24, Y+8	; 0x08
    1740:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    1742:	65 d9       	rcall	.-3382   	; 0xa0e <adc_disable_clock>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	e8 d9       	rcall	.-3120   	; 0xb18 <cpu_irq_restore>
}
    1748:	00 00       	nop
    174a:	2c 96       	adiw	r28, 0x0c	; 12
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	2c 97       	sbiw	r28, 0x0c	; 12
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	88 87       	std	Y+8, r24	; 0x08
    1766:	99 87       	std	Y+9, r25	; 0x09
    1768:	6a 87       	std	Y+10, r22	; 0x0a
    176a:	4b 87       	std	Y+11, r20	; 0x0b
    176c:	5c 87       	std	Y+12, r21	; 0x0c
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	99 85       	ldd	r25, Y+9	; 0x09
    1772:	8c 83       	std	Y+4, r24	; 0x04
    1774:	9d 83       	std	Y+5, r25	; 0x05
    1776:	8a 85       	ldd	r24, Y+10	; 0x0a
    1778:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    177a:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	83 70       	andi	r24, 0x03	; 3
    1784:	99 27       	eor	r25, r25
    1786:	89 2b       	or	r24, r25
    1788:	39 f4       	brne	.+14     	; 0x1798 <adcch_read_configuration+0x42>
		index += 2;
    178a:	8f 81       	ldd	r24, Y+7	; 0x07
    178c:	8e 5f       	subi	r24, 0xFE	; 254
    178e:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
    1790:	8e 81       	ldd	r24, Y+6	; 0x06
    1792:	86 95       	lsr	r24
    1794:	86 95       	lsr	r24
    1796:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	99 27       	eor	r25, r25
    17a2:	89 2b       	or	r24, r25
    17a4:	19 f4       	brne	.+6      	; 0x17ac <adcch_read_configuration+0x56>
		index++;
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	9c 01       	movw	r18, r24
    17b2:	20 5e       	subi	r18, 0xE0	; 224
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	8f 81       	ldd	r24, Y+7	; 0x07
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    17d0:	93 d9       	rcall	.-3290   	; 0xaf8 <cpu_irq_save>
    17d2:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    17d4:	88 85       	ldd	r24, Y+8	; 0x08
    17d6:	99 85       	ldd	r25, Y+9	; 0x09
    17d8:	e9 d8       	rcall	.-3630   	; 0x9ac <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	fc 01       	movw	r30, r24
    17e0:	20 81       	ld	r18, Z
    17e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	fc 01       	movw	r30, r24
    17f0:	22 81       	ldd	r18, Z+2	; 0x02
    17f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f6:	fc 01       	movw	r30, r24
    17f8:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	fc 01       	movw	r30, r24
    1800:	21 81       	ldd	r18, Z+1	; 0x01
    1802:	8b 85       	ldd	r24, Y+11	; 0x0b
    1804:	9c 85       	ldd	r25, Y+12	; 0x0c
    1806:	fc 01       	movw	r30, r24
    1808:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
    180a:	8a 85       	ldd	r24, Y+10	; 0x0a
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	99 27       	eor	r25, r25
    1814:	89 2b       	or	r24, r25
    1816:	41 f0       	breq	.+16     	; 0x1828 <adcch_read_configuration+0xd2>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	9a 81       	ldd	r25, Y+2	; 0x02
    181c:	fc 01       	movw	r30, r24
    181e:	26 81       	ldd	r18, Z+6	; 0x06
    1820:	8b 85       	ldd	r24, Y+11	; 0x0b
    1822:	9c 85       	ldd	r25, Y+12	; 0x0c
    1824:	fc 01       	movw	r30, r24
    1826:	23 83       	std	Z+3, r18	; 0x03
	}
	adc_disable_clock(adc);
    1828:	88 85       	ldd	r24, Y+8	; 0x08
    182a:	99 85       	ldd	r25, Y+9	; 0x09

	cpu_irq_restore(flags);
    182c:	f0 d8       	rcall	.-3616   	; 0xa0e <adc_disable_clock>
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	73 d9       	rcall	.-3354   	; 0xb18 <cpu_irq_restore>
}
    1832:	00 00       	nop
    1834:	2c 96       	adiw	r28, 0x0c	; 12
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	1f 92       	push	r1
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    184a:	8f e3       	ldi	r24, 0x3F	; 63
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	fc 01       	movw	r30, r24
    1850:	80 81       	ld	r24, Z
    1852:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1854:	f8 94       	cli
	return flags;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
}
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	1f 92       	push	r1
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    186c:	8f e3       	ldi	r24, 0x3F	; 63
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	29 81       	ldd	r18, Y+1	; 0x01
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
}
    1876:	00 00       	nop
    1878:	0f 90       	pop	r0
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	9c e6       	ldi	r25, 0x6C	; 108
    188c:	ac ed       	ldi	r26, 0xDC	; 220
    188e:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	1f 92       	push	r1
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    18a4:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    18a6:	ec df       	rcall	.-40     	; 0x1880 <sysclk_get_main_hz>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	29 81       	ldd	r18, Y+1	; 0x01
    18ae:	22 2f       	mov	r18, r18
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <sysclk_get_per4_hz+0x22>
    18b4:	b6 95       	lsr	r27
    18b6:	a7 95       	ror	r26
    18b8:	97 95       	ror	r25
    18ba:	87 95       	ror	r24
    18bc:	2a 95       	dec	r18
    18be:	d2 f7       	brpl	.-12     	; 0x18b4 <sysclk_get_per4_hz+0x1a>
}
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0f 90       	pop	r0
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    18d4:	e2 df       	rcall	.-60     	; 0x189a <sysclk_get_per4_hz>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	08 95       	ret

000018e4 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    18ec:	ef df       	rcall	.-34     	; 0x18cc <sysclk_get_per2_hz>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
}
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	00 d0       	rcall	.+0      	; 0x1902 <adc_start_conversion+0x6>
    1902:	1f 92       	push	r1
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	9b 83       	std	Y+3, r25	; 0x03
    190c:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
    190e:	98 df       	rcall	.-208    	; 0x1840 <cpu_irq_save>
    1910:	89 83       	std	Y+1, r24	; 0x01
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	82 2b       	or	r24, r18
    192c:	28 2f       	mov	r18, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	9b 81       	ldd	r25, Y+3	; 0x03
    1932:	fc 01       	movw	r30, r24
    1934:	20 83       	st	Z, r18
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
#endif
	cpu_irq_restore(flags);
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	93 df       	rcall	.-218    	; 0x1860 <cpu_irq_restore>
}
    193a:	00 00       	nop
    193c:	24 96       	adiw	r28, 0x04	; 4
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <adc_get_interrupt_flag>:
 * together.)
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	00 d0       	rcall	.+0      	; 0x194e <adc_get_interrupt_flag+0x6>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	6b 83       	std	Y+3, r22	; 0x03
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	96 81       	ldd	r25, Z+6	; 0x06
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	89 23       	and	r24, r25
}
    1964:	23 96       	adiw	r28, 0x03	; 3
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	08 95       	ret

00001970 <adc_clear_interrupt_flag>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	00 d0       	rcall	.+0      	; 0x1976 <adc_clear_interrupt_flag+0x6>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	6b 83       	std	Y+3, r22	; 0x03
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	fc 01       	movw	r30, r24
    1988:	26 83       	std	Z+6, r18	; 0x06
}
    198a:	00 00       	nop
    198c:	23 96       	adiw	r28, 0x03	; 3
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <adc_wait_for_interrupt_flag>:
 * \param ch_mask Mask of ADC channel(s):
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	00 d0       	rcall	.+0      	; 0x199e <adc_wait_for_interrupt_flag+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	6b 83       	std	Y+3, r22	; 0x03
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	6b 81       	ldd	r22, Y+3	; 0x03
    19ae:	cc df       	rcall	.-104    	; 0x1948 <adc_get_interrupt_flag>
    19b0:	98 2f       	mov	r25, r24
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	98 17       	cp	r25, r24
    19b6:	c1 f7       	brne	.-16     	; 0x19a8 <adc_wait_for_interrupt_flag+0x10>
	adc_clear_interrupt_flag(adc, ch_mask);
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	6b 81       	ldd	r22, Y+3	; 0x03
    19be:	d8 df       	rcall	.-80     	; 0x1970 <adc_clear_interrupt_flag>
}
    19c0:	00 00       	nop
    19c2:	23 96       	adiw	r28, 0x03	; 3
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	2d 97       	sbiw	r28, 0x0d	; 13
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	88 87       	std	Y+8, r24	; 0x08
    19de:	99 87       	std	Y+9, r25	; 0x09
    19e0:	4a 87       	std	Y+10, r20	; 0x0a
    19e2:	5b 87       	std	Y+11, r21	; 0x0b
    19e4:	6c 87       	std	Y+12, r22	; 0x0c
    19e6:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_B || XMEGA_C || XMEGA_E
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
    19e8:	7d df       	rcall	.-262    	; 0x18e4 <sysclk_get_per_hz>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	9b 83       	std	Y+3, r25	; 0x03
    19f2:	ac 83       	std	Y+4, r26	; 0x04
    19f4:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	ac 81       	ldd	r26, Y+4	; 0x04
    19fc:	bd 81       	ldd	r27, Y+5	; 0x05
    19fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a00:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a02:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a04:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 0d 59 	call	0xb21a	; 0xb21a <__udivmodsi4>
    1a0e:	da 01       	movw	r26, r20
    1a10:	c9 01       	movw	r24, r18
    1a12:	8e 83       	std	Y+6, r24	; 0x06
    1a14:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1a:	05 97       	sbiw	r24, 0x05	; 5
    1a1c:	10 f4       	brcc	.+4      	; 0x1a22 <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	2f c0       	rjmp	.+94     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 8) {
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	9f 81       	ldd	r25, Y+7	; 0x07
    1a26:	09 97       	sbiw	r24, 0x09	; 9
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <adc_set_clock_rate+0x62>
		psc = ADC_PRESCALER_DIV8_gc;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	28 c0       	rjmp	.+80     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 16) {
    1a30:	8e 81       	ldd	r24, Y+6	; 0x06
    1a32:	9f 81       	ldd	r25, Y+7	; 0x07
    1a34:	41 97       	sbiw	r24, 0x11	; 17
    1a36:	18 f4       	brcc	.+6      	; 0x1a3e <adc_set_clock_rate+0x70>
		psc = ADC_PRESCALER_DIV16_gc;
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	21 c0       	rjmp	.+66     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 32) {
    1a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a40:	9f 81       	ldd	r25, Y+7	; 0x07
    1a42:	81 97       	sbiw	r24, 0x21	; 33
    1a44:	18 f4       	brcc	.+6      	; 0x1a4c <adc_set_clock_rate+0x7e>
		psc = ADC_PRESCALER_DIV32_gc;
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	1a c0       	rjmp	.+52     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 64) {
    1a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a50:	81 34       	cpi	r24, 0x41	; 65
    1a52:	91 05       	cpc	r25, r1
    1a54:	18 f4       	brcc	.+6      	; 0x1a5c <adc_set_clock_rate+0x8e>
		psc = ADC_PRESCALER_DIV64_gc;
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 128) {
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	81 38       	cpi	r24, 0x81	; 129
    1a62:	91 05       	cpc	r25, r1
    1a64:	18 f4       	brcc	.+6      	; 0x1a6c <adc_set_clock_rate+0x9e>
		psc = ADC_PRESCALER_DIV128_gc;
    1a66:	85 e0       	ldi	r24, 0x05	; 5
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	0a c0       	rjmp	.+20     	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 256) {
    1a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 40       	sbci	r25, 0x01	; 1
    1a74:	18 f4       	brcc	.+6      	; 0x1a7c <adc_set_clock_rate+0xae>
		psc = ADC_PRESCALER_DIV256_gc;
    1a76:	86 e0       	ldi	r24, 0x06	; 6
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <adc_set_clock_rate+0xb2>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    1a7c:	87 e0       	ldi	r24, 0x07	; 7
    1a7e:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    1a80:	88 85       	ldd	r24, Y+8	; 0x08
    1a82:	99 85       	ldd	r25, Y+9	; 0x09
    1a84:	29 81       	ldd	r18, Y+1	; 0x01
    1a86:	fc 01       	movw	r30, r24
    1a88:	24 83       	std	Z+4, r18	; 0x04
}
    1a8a:	00 00       	nop
    1a8c:	2d 96       	adiw	r28, 0x0d	; 13
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	25 97       	sbiw	r28, 0x05	; 5
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	6b 83       	std	Y+3, r22	; 0x03
    1aac:	4c 83       	std	Y+4, r20	; 0x04
    1aae:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	28 2f       	mov	r18, r24
    1aba:	29 7e       	andi	r18, 0xE9	; 233
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	fc 01       	movw	r30, r24
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	82 2b       	or	r24, r18
    1ad2:	29 2f       	mov	r18, r25
    1ad4:	28 2b       	or	r18, r24
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	fc 01       	movw	r30, r24
    1adc:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	2f 78       	andi	r18, 0x8F	; 143
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	fc 01       	movw	r30, r24
    1af0:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	fc 01       	movw	r30, r24
    1af8:	92 81       	ldd	r25, Z+2	; 0x02
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	29 2f       	mov	r18, r25
    1afe:	28 2b       	or	r18, r24
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	fc 01       	movw	r30, r24
    1b06:	22 83       	std	Z+2, r18	; 0x02
}
    1b08:	00 00       	nop
    1b0a:	25 96       	adiw	r28, 0x05	; 5
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	25 97       	sbiw	r28, 0x05	; 5
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	6b 83       	std	Y+3, r22	; 0x03
    1b2a:	4c 83       	std	Y+4, r20	; 0x04
    1b2c:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	91 05       	cpc	r25, r1
    1b38:	11 f1       	breq	.+68     	; 0x1b7e <adc_set_conversion_trigger+0x68>
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <adc_set_conversion_trigger+0x34>
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	71 f0       	breq	.+28     	; 0x1b60 <adc_set_conversion_trigger+0x4a>
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	b9 f1       	breq	.+110    	; 0x1bb6 <adc_set_conversion_trigger+0xa0>
		break;

	default:
		Assert(0);
	}
}
    1b48:	a9 c0       	rjmp	.+338    	; 0x1c9c <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <adc_set_conversion_trigger+0x3c>
    1b50:	53 c0       	rjmp	.+166    	; 0x1bf8 <adc_set_conversion_trigger+0xe2>
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	91 05       	cpc	r25, r1
    1b56:	d4 f1       	brlt	.+116    	; 0x1bcc <adc_set_conversion_trigger+0xb6>
    1b58:	05 97       	sbiw	r24, 0x05	; 5
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <adc_set_conversion_trigger+0x48>
    1b5c:	76 c0       	rjmp	.+236    	; 0x1c4a <adc_set_conversion_trigger+0x134>
		break;

	default:
		Assert(0);
	}
}
    1b5e:	9e c0       	rjmp	.+316    	; 0x1c9c <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	fc 01       	movw	r30, r24
    1b66:	81 81       	ldd	r24, Z+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	27 7f       	andi	r18, 0xF7	; 247
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	fc 01       	movw	r30, r24
    1b72:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	fc 01       	movw	r30, r24
    1b7a:	13 82       	std	Z+3, r1	; 0x03
		break;
    1b7c:	8f c0       	rjmp	.+286    	; 0x1c9c <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	fc 01       	movw	r30, r24
    1b84:	81 81       	ldd	r24, Z+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	27 7f       	andi	r18, 0xF7	; 247
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	fc 01       	movw	r30, r24
    1b90:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	89 2b       	or	r24, r25
    1baa:	28 2f       	mov	r18, r24
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    1bb4:	73 c0       	rjmp	.+230    	; 0x1c9c <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	fc 01       	movw	r30, r24
    1bbc:	81 81       	ldd	r24, Z+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	28 60       	ori	r18, 0x08	; 8
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	21 83       	std	Z+1, r18	; 0x01
		break;
    1bca:	68 c0       	rjmp	.+208    	; 0x1c9c <adc_set_conversion_trigger+0x186>

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	81 81       	ldd	r24, Z+1	; 0x01
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	28 60       	ori	r18, 0x08	; 8
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	fc 01       	movw	r30, r24
    1bde:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	81 50       	subi	r24, 0x01	; 1
    1be4:	28 2f       	mov	r18, r24
    1be6:	22 95       	swap	r18
    1be8:	22 0f       	add	r18, r18
    1bea:	22 0f       	add	r18, r18
    1bec:	20 7c       	andi	r18, 0xC0	; 192
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	23 83       	std	Z+3, r18	; 0x03
		break;
    1bf6:	52 c0       	rjmp	.+164    	; 0x1c9c <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	81 81       	ldd	r24, Z+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	27 7f       	andi	r18, 0xF7	; 247
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	fc 01       	movw	r30, r24
    1c0a:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	00 24       	eor	r0, r0
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	07 94       	ror	r0
    1c1c:	96 95       	lsr	r25
    1c1e:	87 95       	ror	r24
    1c20:	07 94       	ror	r0
    1c22:	98 2f       	mov	r25, r24
    1c24:	80 2d       	mov	r24, r0
    1c26:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    1c3a:	82 2b       	or	r24, r18
    1c3c:	85 60       	ori	r24, 0x05	; 5
    1c3e:	28 2f       	mov	r18, r24
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	fc 01       	movw	r30, r24
    1c46:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    1c48:	29 c0       	rjmp	.+82     	; 0x1c9c <adc_set_conversion_trigger+0x186>
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	fc 01       	movw	r30, r24
    1c50:	81 81       	ldd	r24, Z+1	; 0x01
    1c52:	28 2f       	mov	r18, r24
    1c54:	27 7f       	andi	r18, 0xF7	; 247
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl =
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	00 24       	eor	r0, r0
    1c68:	96 95       	lsr	r25
    1c6a:	87 95       	ror	r24
    1c6c:	07 94       	ror	r0
    1c6e:	96 95       	lsr	r25
    1c70:	87 95       	ror	r24
    1c72:	07 94       	ror	r0
    1c74:	98 2f       	mov	r25, r24
    1c76:	80 2d       	mov	r24, r0
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1c78:	28 2f       	mov	r18, r24
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    1c8c:	82 2b       	or	r24, r18
    1c8e:	86 60       	ori	r24, 0x06	; 6
    1c90:	28 2f       	mov	r18, r24
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	fc 01       	movw	r30, r24
    1c98:	23 83       	std	Z+3, r18	; 0x03
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCSWEEP_gc;
		break;
    1c9a:	00 00       	nop

	default:
		Assert(0);
	}
}
    1c9c:	00 00       	nop
    1c9e:	25 96       	adiw	r28, 0x05	; 5
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	1f 92       	push	r1
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	88 30       	cpi	r24, 0x08	; 8
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	51 f1       	breq	.+84     	; 0x1d16 <adcch_get_gain_setting+0x6c>
    1cc2:	89 30       	cpi	r24, 0x09	; 9
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	7c f4       	brge	.+30     	; 0x1ce6 <adcch_get_gain_setting+0x3c>
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	f1 f0       	breq	.+60     	; 0x1d0a <adcch_get_gain_setting+0x60>
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	1c f4       	brge	.+6      	; 0x1cda <adcch_get_gain_setting+0x30>
    1cd4:	89 2b       	or	r24, r25
    1cd6:	b9 f0       	breq	.+46     	; 0x1d06 <adcch_get_gain_setting+0x5c>
    1cd8:	28 c0       	rjmp	.+80     	; 0x1d2a <adcch_get_gain_setting+0x80>
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	91 05       	cpc	r25, r1
    1cde:	b9 f0       	breq	.+46     	; 0x1d0e <adcch_get_gain_setting+0x64>
    1ce0:	04 97       	sbiw	r24, 0x04	; 4
    1ce2:	b9 f0       	breq	.+46     	; 0x1d12 <adcch_get_gain_setting+0x68>
    1ce4:	22 c0       	rjmp	.+68     	; 0x1d2a <adcch_get_gain_setting+0x80>
    1ce6:	80 32       	cpi	r24, 0x20	; 32
    1ce8:	91 05       	cpc	r25, r1
    1cea:	c9 f0       	breq	.+50     	; 0x1d1e <adcch_get_gain_setting+0x74>
    1cec:	81 32       	cpi	r24, 0x21	; 33
    1cee:	91 05       	cpc	r25, r1
    1cf0:	1c f4       	brge	.+6      	; 0x1cf8 <adcch_get_gain_setting+0x4e>
    1cf2:	40 97       	sbiw	r24, 0x10	; 16
    1cf4:	91 f0       	breq	.+36     	; 0x1d1a <adcch_get_gain_setting+0x70>
    1cf6:	19 c0       	rjmp	.+50     	; 0x1d2a <adcch_get_gain_setting+0x80>
    1cf8:	80 34       	cpi	r24, 0x40	; 64
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	91 f0       	breq	.+36     	; 0x1d22 <adcch_get_gain_setting+0x78>
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	91 05       	cpc	r25, r1
    1d02:	89 f0       	breq	.+34     	; 0x1d26 <adcch_get_gain_setting+0x7c>
    1d04:	12 c0       	rjmp	.+36     	; 0x1d2a <adcch_get_gain_setting+0x80>
	case 0:
		return ADC_CH_GAIN_DIV2_gc;
    1d06:	8c e1       	ldi	r24, 0x1C	; 28
    1d08:	11 c0       	rjmp	.+34     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 1:
		return ADC_CH_GAIN_1X_gc;
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 2:
		return ADC_CH_GAIN_2X_gc;
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	0d c0       	rjmp	.+26     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 4:
		return ADC_CH_GAIN_4X_gc;
    1d12:	88 e0       	ldi	r24, 0x08	; 8
    1d14:	0b c0       	rjmp	.+22     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 8:
		return ADC_CH_GAIN_8X_gc;
    1d16:	8c e0       	ldi	r24, 0x0C	; 12
    1d18:	09 c0       	rjmp	.+18     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 16:
		return ADC_CH_GAIN_16X_gc;
    1d1a:	80 e1       	ldi	r24, 0x10	; 16
    1d1c:	07 c0       	rjmp	.+14     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 32:
		return ADC_CH_GAIN_32X_gc;
    1d1e:	84 e1       	ldi	r24, 0x14	; 20
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <adcch_get_gain_setting+0x82>

	case 64:
		return ADC_CH_GAIN_64X_gc;
    1d22:	88 e1       	ldi	r24, 0x18	; 24
    1d24:	03 c0       	rjmp	.+6      	; 0x1d2c <adcch_get_gain_setting+0x82>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <adcch_get_gain_setting+0x82>

	default:
		Assert(0);
		return 0;
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d2c:	0f 90       	pop	r0
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	25 97       	sbiw	r28, 0x05	; 5
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	6b 83       	std	Y+3, r22	; 0x03
    1d48:	4c 83       	std	Y+4, r20	; 0x04
    1d4a:	2d 83       	std	Y+5, r18	; 0x05
	if (pos >= ADCCH_POS_TEMPSENSE) {
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	80 31       	cpi	r24, 0x10	; 16
    1d50:	78 f0       	brcs	.+30     	; 0x1d70 <adcch_set_input+0x3c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	fc 01       	movw	r30, r24
    1d58:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	80 51       	subi	r24, 0x10	; 16
    1d5e:	28 2f       	mov	r18, r24
    1d60:	22 0f       	add	r18, r18
    1d62:	22 0f       	add	r18, r18
    1d64:	22 0f       	add	r18, r18
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1d6e:	87 c0       	rjmp	.+270    	; 0x1e7e <adcch_set_input+0x14a>
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	8a 30       	cpi	r24, 0x0A	; 10
    1d74:	79 f4       	brne	.+30     	; 0x1d94 <adcch_set_input+0x60>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	21 e0       	ldi	r18, 0x01	; 1
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	28 2f       	mov	r18, r24
    1d84:	22 0f       	add	r18, r18
    1d86:	22 0f       	add	r18, r18
    1d88:	22 0f       	add	r18, r18
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	fc 01       	movw	r30, r24
    1d90:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1d92:	75 c0       	rjmp	.+234    	; 0x1e7e <adcch_set_input+0x14a>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
	} else if (neg <= ADCCH_NEG_PIN3) {
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	84 30       	cpi	r24, 0x04	; 4
    1d98:	b8 f4       	brcc	.+46     	; 0x1dc8 <adcch_set_input+0x94>
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINL_gc;
#else
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	22 e0       	ldi	r18, 0x02	; 2
    1da0:	fc 01       	movw	r30, r24
    1da2:	20 83       	st	Z, r18
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	98 2f       	mov	r25, r24
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	89 2b       	or	r24, r25
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1dc6:	5b c0       	rjmp	.+182    	; 0x1e7e <adcch_set_input+0x14a>
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
				(neg << ADC_CH_MUXNEG_gp);
	} else if (neg <= ADCCH_NEG_PIN7) {
    1dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dca:	88 30       	cpi	r24, 0x08	; 8
    1dcc:	d8 f4       	brcc	.+54     	; 0x1e04 <adcch_set_input+0xd0>
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	6c df       	rcall	.-296    	; 0x1caa <adcch_get_gain_setting>
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	23 60       	ori	r18, 0x03	; 3
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	98 2f       	mov	r25, r24
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	84 50       	subi	r24, 0x04	; 4
    1df6:	89 2b       	or	r24, r25
    1df8:	28 2f       	mov	r18, r24
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	fc 01       	movw	r30, r24
    1e00:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1e02:	3d c0       	rjmp	.+122    	; 0x1e7e <adcch_set_input+0x14a>
		 * The bitmasks for the on-chip GND signals change when
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	e1 f4       	brne	.+56     	; 0x1e42 <adcch_set_input+0x10e>
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	fc 01       	movw	r30, r24
    1e12:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	98 2f       	mov	r25, r24
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	88 30       	cpi	r24, 0x08	; 8
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <adcch_set_input+0xfe>
    1e2e:	85 e0       	ldi	r24, 0x05	; 5
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <adcch_set_input+0x100>
    1e32:	87 e0       	ldi	r24, 0x07	; 7
    1e34:	89 2b       	or	r24, r25
    1e36:	28 2f       	mov	r18, r24
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1e40:	1e c0       	rjmp	.+60     	; 0x1e7e <adcch_set_input+0x14a>
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	32 df       	rcall	.-412    	; 0x1caa <adcch_get_gain_setting>
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    1e46:	28 2f       	mov	r18, r24
    1e48:	23 60       	ori	r18, 0x03	; 3
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	fc 01       	movw	r30, r24
    1e50:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	98 2f       	mov	r25, r24
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	89 30       	cpi	r24, 0x09	; 9
    1e6a:	11 f4       	brne	.+4      	; 0x1e70 <adcch_set_input+0x13c>
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <adcch_set_input+0x13e>
    1e70:	87 e0       	ldi	r24, 0x07	; 7
    1e72:	89 2b       	or	r24, r25
    1e74:	28 2f       	mov	r18, r24
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    1e7e:	00 00       	nop
    1e80:	25 96       	adiw	r28, 0x05	; 5
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <adc_init>:
 */ 

#include "adc_sensors.h"

void adc_init(ADC_t* adc, uint8_t ch_mask)
{
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	2e 97       	sbiw	r28, 0x0e	; 14
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	8c 87       	std	Y+12, r24	; 0x0c
    1e9c:	9d 87       	std	Y+13, r25	; 0x0d
    1e9e:	6e 87       	std	Y+14, r22	; 0x0e
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(adc, &adc_conf);
    1ea0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ea4:	9e 01       	movw	r18, r28
    1ea6:	2f 5f       	subi	r18, 0xFF	; 255
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	b9 01       	movw	r22, r18
    1eac:	8f db       	rcall	.-2274   	; 0x15cc <adc_read_configuration>
	adcch_read_configuration(adc, ch_mask, &adcch_conf);
    1eae:	9e 01       	movw	r18, r28
    1eb0:	28 5f       	subi	r18, 0xF8	; 248
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eb8:	a9 01       	movw	r20, r18
    1eba:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ebc:	4c dc       	rcall	.-1896   	; 0x1756 <adcch_read_configuration>
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
    1ebe:	20 e1       	ldi	r18, 0x10	; 16
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	e7 dd       	rcall	.-1074   	; 0x1a98 <adc_set_conversion_parameters>
	ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	20 de       	rcall	.-960    	; 0x1b16 <adc_set_conversion_trigger>
	adc_set_clock_rate(&adc_conf, 200000UL);
    1ed6:	40 e4       	ldi	r20, 0x40	; 64
    1ed8:	5d e0       	ldi	r21, 0x0D	; 13
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	ce 01       	movw	r24, r28
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	75 dd       	rcall	.-1302   	; 0x19ce <adc_set_clock_rate>
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 0);
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	08 96       	adiw	r24, 0x08	; 8
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	4a e0       	ldi	r20, 0x0A	; 10
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	22 df       	rcall	.-444    	; 0x1d34 <adcch_set_input>
	adc_write_configuration(adc, &adc_conf);
    1ef0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ef2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	b9 01       	movw	r22, r18
    1efc:	ef da       	rcall	.-2594   	; 0x14dc <adc_write_configuration>
	adcch_write_configuration(adc, ch_mask, &adcch_conf);
    1efe:	9e 01       	movw	r18, r28
    1f00:	28 5f       	subi	r18, 0xF8	; 248
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f06:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f08:	a9 01       	movw	r20, r18
    1f0a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f0c:	af db       	rcall	.-2210   	; 0x166c <adcch_write_configuration>
	
	
}
    1f0e:	00 00       	nop
    1f10:	2e 96       	adiw	r28, 0x0e	; 14
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	08 95       	ret

00001f1c <thermistor_init>:
void thermistor_init(void)
{
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	adc_init(&THERM_ADC,THERM_ADC_CH);
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	92 e0       	ldi	r25, 0x02	; 2
    1f2a:	b0 df       	rcall	.-160    	; 0x1e8c <adc_init>
	
	if(DEBUG) printf("Thermistor Initialized.\n");
    1f2c:	87 e5       	ldi	r24, 0x57	; 87
    1f2e:	90 e2       	ldi	r25, 0x20	; 32
    1f30:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
}
    1f34:	00 00       	nop
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	08 95       	ret

00001f3c <volt_init>:
void volt_init(void)
{
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	adc_init(&VOLT_ADC,VOLT_ADC_CH);
    1f44:	61 e0       	ldi	r22, 0x01	; 1
    1f46:	80 e4       	ldi	r24, 0x40	; 64
    1f48:	92 e0       	ldi	r25, 0x02	; 2
    1f4a:	a0 df       	rcall	.-192    	; 0x1e8c <adc_init>
	
	if(DEBUG) printf("Voltage Initialized.\n");
    1f4c:	8f e6       	ldi	r24, 0x6F	; 111
    1f4e:	90 e2       	ldi	r25, 0x20	; 32
    1f50:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
}
    1f54:	00 00       	nop
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <getADCRead>:


float getADCRead(ADC_t* adc, uint8_t ch_mask)
{
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	29 97       	sbiw	r28, 0x09	; 9
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	8f 83       	std	Y+7, r24	; 0x07
    1f6c:	98 87       	std	Y+8, r25	; 0x08
    1f6e:	69 87       	std	Y+9, r22	; 0x09
		adc_enable(adc);
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
    1f72:	98 85       	ldd	r25, Y+8	; 0x08
    1f74:	0e 94 3a 05 	call	0xa74	; 0xa74 <adc_enable>
		
		
		adc_start_conversion(adc, ch_mask);
    1f78:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7a:	98 85       	ldd	r25, Y+8	; 0x08
    1f7c:	69 85       	ldd	r22, Y+9	; 0x09
    1f7e:	be dc       	rcall	.-1668   	; 0x18fc <adc_start_conversion>
		adc_wait_for_interrupt_flag(adc, ch_mask);
    1f80:	8f 81       	ldd	r24, Y+7	; 0x07
    1f82:	98 85       	ldd	r25, Y+8	; 0x08
    1f84:	69 85       	ldd	r22, Y+9	; 0x09
    1f86:	08 dd       	rcall	.-1520   	; 0x1998 <adc_wait_for_interrupt_flag>
    1f88:	8f 81       	ldd	r24, Y+7	; 0x07
    1f8a:	98 85       	ldd	r25, Y+8	; 0x08
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	8d 83       	std	Y+5, r24	; 0x05
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1f94:	1e 82       	std	Y+6, r1	; 0x06
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	83 70       	andi	r24, 0x03	; 3
    1f9e:	99 27       	eor	r25, r25
    1fa0:	89 2b       	or	r24, r25
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <getADCRead+0x56>
		index += 2;
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	8e 5f       	subi	r24, 0xFE	; 254
    1fa8:	8e 83       	std	Y+6, r24	; 0x06
		ch_mask >>= 2;
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	86 95       	lsr	r24
    1fae:	86 95       	lsr	r24
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	99 27       	eor	r25, r25
    1fbc:	89 2b       	or	r24, r25
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <getADCRead+0x6a>
		index++;
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	9c 01       	movw	r18, r24
    1fcc:	20 5e       	subi	r18, 0xE0	; 224
    1fce:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	82 0f       	add	r24, r18
    1fe4:	93 1f       	adc	r25, r19
		uint16_t adcReading = adc_get_result(adc, ch_mask);
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	84 81       	ldd	r24, Z+4	; 0x04
    1fea:	95 81       	ldd	r25, Z+5	; 0x05
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	9a 83       	std	Y+2, r25	; 0x02
		//printf("ADC reading = %u\n", adcReading);
		//float voltage = adcReading/4096.0*2;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
		//printf("voltage: %f \n", voltage);
		
		adc_disable(adc);
    1ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff2:	98 85       	ldd	r25, Y+8	; 0x08
    1ff4:	0e 94 5b 05 	call	0xab6	; 0xab6 <adc_disable>
		return adcReading;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	cc 01       	movw	r24, r24
    1ffe:	a0 e0       	ldi	r26, 0x00	; 0
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 88 53 	call	0xa710	; 0xa710 <__floatunsisf>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
	
}
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	29 96       	adiw	r28, 0x09	; 9
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	08 95       	ret

0000201e <getVoltage>:
float getVoltage(void)
{
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	00 d0       	rcall	.+0      	; 0x2024 <getVoltage+0x6>
    2024:	1f 92       	push	r1
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	float adc_val = getADCRead(&VOLT_ADC,VOLT_ADC_CH)/4096.0*2;
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	80 e4       	ldi	r24, 0x40	; 64
    202e:	92 e0       	ldi	r25, 0x02	; 2
    2030:	95 df       	rcall	.-214    	; 0x1f5c <getADCRead>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	55 e4       	ldi	r21, 0x45	; 69
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9c 01       	movw	r18, r24
    204c:	ad 01       	movw	r20, r26
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	ab 83       	std	Y+3, r26	; 0x03
    2060:	bc 83       	std	Y+4, r27	; 0x04
	if(DEBUG && DEBUG_ADC) printf("volt: %f\n",adc_val);
	return adc_val;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	ab 81       	ldd	r26, Y+3	; 0x03
    2068:	bc 81       	ldd	r27, Y+4	; 0x04
}
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	24 96       	adiw	r28, 0x04	; 4
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	08 95       	ret

0000207a <getTemperature>:
float getTemperature(void)
{
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	28 97       	sbiw	r28, 0x08	; 8
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	de bf       	out	0x3e, r29	; 62
	float adc_val = getADCRead(&THERM_ADC,THERM_ADC_CH)*.636;
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	66 df       	rcall	.-308    	; 0x1f5c <getADCRead>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	25 ee       	ldi	r18, 0xE5	; 229
    2096:	30 ed       	ldi	r19, 0xD0	; 208
    2098:	42 e2       	ldi	r20, 0x22	; 34
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	ab 83       	std	Y+3, r26	; 0x03
    20ae:	bc 83       	std	Y+4, r27	; 0x04
	//float resistance = (8300.0)*((adc_val/3.3)-1);
	//printf("\n%f\n",resistance);
	uint32_t temperature = 1.0/(1.0/298.15 + 1.0/3977.0*log(4096.0/(float)adc_val-1.0));
    20b0:	29 81       	ldd	r18, Y+1	; 0x01
    20b2:	3a 81       	ldd	r19, Y+2	; 0x02
    20b4:	4b 81       	ldd	r20, Y+3	; 0x03
    20b6:	5c 81       	ldd	r21, Y+4	; 0x04
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	80 e8       	ldi	r24, 0x80	; 128
    20be:	95 e4       	ldi	r25, 0x45	; 69
    20c0:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 4c 52 	call	0xa498	; 0xa498 <__subsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 91 54 	call	0xa922	; 0xa922 <log>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	2c e7       	ldi	r18, 0x7C	; 124
    20ea:	34 ed       	ldi	r19, 0xD4	; 212
    20ec:	43 e8       	ldi	r20, 0x83	; 131
    20ee:	59 e3       	ldi	r21, 0x39	; 57
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	2f e0       	ldi	r18, 0x0F	; 15
    20fe:	3f ec       	ldi	r19, 0xCF	; 207
    2100:	4b e5       	ldi	r20, 0x5B	; 91
    2102:	5b e3       	ldi	r21, 0x3B	; 59
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 01       	movw	r18, r24
    2112:	ad 01       	movw	r20, r26
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	80 e8       	ldi	r24, 0x80	; 128
    211a:	9f e3       	ldi	r25, 0x3F	; 63
    211c:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 5c 53 	call	0xa6b8	; 0xa6b8 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	af 83       	std	Y+7, r26	; 0x07
    2136:	b8 87       	std	Y+8, r27	; 0x08
	if(DEBUG && DEBUG_ADC) printf("temp: %f\n", temperature-273.15);
	return (temperature - 273.15);
    2138:	6d 81       	ldd	r22, Y+5	; 0x05
    213a:	7e 81       	ldd	r23, Y+6	; 0x06
    213c:	8f 81       	ldd	r24, Y+7	; 0x07
    213e:	98 85       	ldd	r25, Y+8	; 0x08
    2140:	0e 94 88 53 	call	0xa710	; 0xa710 <__floatunsisf>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	23 e3       	ldi	r18, 0x33	; 51
    214a:	33 e9       	ldi	r19, 0x93	; 147
    214c:	48 e8       	ldi	r20, 0x88	; 136
    214e:	53 e4       	ldi	r21, 0x43	; 67
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 4c 52 	call	0xa498	; 0xa498 <__subsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
	
	
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	28 96       	adiw	r28, 0x08	; 8
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <bno055_write_register>:
		/* set the operation mode
		of previous operation mode*/
		com_rslt += bno055_set_operation_mode
		(prev_opmode_u8);
	return com_rslt;
}
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	25 97       	sbiw	r28, 0x05	; 5
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	6b 83       	std	Y+3, r22	; 0x03
    217e:	7c 83       	std	Y+4, r23	; 0x04
    2180:	4d 83       	std	Y+5, r20	; 0x05
    2182:	8f ef       	ldi	r24, 0xFF	; 255
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    218a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    218e:	89 2b       	or	r24, r25
    2190:	11 f4       	brne	.+4      	; 0x2196 <bno055_write_register+0x2a>
    2192:	81 e8       	ldi	r24, 0x81	; 129
    2194:	19 c0       	rjmp	.+50     	; 0x21c8 <bno055_write_register+0x5c>
    2196:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    219a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    219e:	dc 01       	movw	r26, r24
    21a0:	19 96       	adiw	r26, 0x09	; 9
    21a2:	ed 91       	ld	r30, X+
    21a4:	fc 91       	ld	r31, X
    21a6:	1a 97       	sbiw	r26, 0x0a	; 10
    21a8:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    21ac:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    21b0:	dc 01       	movw	r26, r24
    21b2:	18 96       	adiw	r26, 0x08	; 8
    21b4:	3c 91       	ld	r19, X
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	2d 81       	ldd	r18, Y+5	; 0x05
    21bc:	ac 01       	movw	r20, r24
    21be:	6a 81       	ldd	r22, Y+2	; 0x02
    21c0:	83 2f       	mov	r24, r19
    21c2:	19 95       	eicall
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	25 96       	adiw	r28, 0x05	; 5
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <bno055_write_page_id>:
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	00 d0       	rcall	.+0      	; 0x21da <bno055_write_page_id+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	1a 82       	std	Y+2, r1	; 0x02
    21e6:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    21ea:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    21ee:	89 2b       	or	r24, r25
    21f0:	11 f4       	brne	.+4      	; 0x21f6 <bno055_write_page_id+0x22>
    21f2:	81 e8       	ldi	r24, 0x81	; 129
    21f4:	46 c0       	rjmp	.+140    	; 0x2282 <bno055_write_page_id+0xae>
    21f6:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    21fa:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    21fe:	dc 01       	movw	r26, r24
    2200:	1b 96       	adiw	r26, 0x0b	; 11
    2202:	ed 91       	ld	r30, X+
    2204:	fc 91       	ld	r31, X
    2206:	1c 97       	sbiw	r26, 0x0c	; 12
    2208:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    220c:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2210:	dc 01       	movw	r26, r24
    2212:	18 96       	adiw	r26, 0x08	; 8
    2214:	3c 91       	ld	r19, X
    2216:	ce 01       	movw	r24, r28
    2218:	02 96       	adiw	r24, 0x02	; 2
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	ac 01       	movw	r20, r24
    221e:	67 e0       	ldi	r22, 0x07	; 7
    2220:	83 2f       	mov	r24, r19
    2222:	19 95       	eicall
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	88 23       	and	r24, r24
    222a:	41 f5       	brne	.+80     	; 0x227c <bno055_write_page_id+0xa8>
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2234:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2238:	dc 01       	movw	r26, r24
    223a:	19 96       	adiw	r26, 0x09	; 9
    223c:	ed 91       	ld	r30, X+
    223e:	fc 91       	ld	r31, X
    2240:	1a 97       	sbiw	r26, 0x0a	; 10
    2242:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2246:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    224a:	dc 01       	movw	r26, r24
    224c:	18 96       	adiw	r26, 0x08	; 8
    224e:	3c 91       	ld	r19, X
    2250:	ce 01       	movw	r24, r28
    2252:	02 96       	adiw	r24, 0x02	; 2
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	ac 01       	movw	r20, r24
    2258:	67 e0       	ldi	r22, 0x07	; 7
    225a:	83 2f       	mov	r24, r19
    225c:	19 95       	eicall
    225e:	98 2f       	mov	r25, r24
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	89 0f       	add	r24, r25
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	88 23       	and	r24, r24
    226a:	51 f4       	brne	.+20     	; 0x2280 <bno055_write_page_id+0xac>
    226c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2270:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2274:	2b 81       	ldd	r18, Y+3	; 0x03
    2276:	fc 01       	movw	r30, r24
    2278:	23 83       	std	Z+3, r18	; 0x03
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <bno055_write_page_id+0xac>
    227c:	8f ef       	ldi	r24, 0xFF	; 255
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	23 96       	adiw	r28, 0x03	; 3
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <bno055_read_euler_hrp>:
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	2a 97       	sbiw	r28, 0x0a	; 10
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	89 87       	std	Y+9, r24	; 0x09
    229e:	9a 87       	std	Y+10, r25	; 0x0a
    22a0:	8f ef       	ldi	r24, 0xFF	; 255
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	26 e0       	ldi	r18, 0x06	; 6
    22a6:	ce 01       	movw	r24, r28
    22a8:	03 96       	adiw	r24, 0x03	; 3
    22aa:	dc 01       	movw	r26, r24
    22ac:	e2 2f       	mov	r30, r18
    22ae:	1d 92       	st	X+, r1
    22b0:	ea 95       	dec	r30
    22b2:	e9 f7       	brne	.-6      	; 0x22ae <bno055_read_euler_hrp+0x20>
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	8a 83       	std	Y+2, r24	; 0x02
    22b8:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    22bc:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    22c0:	89 2b       	or	r24, r25
    22c2:	11 f4       	brne	.+4      	; 0x22c8 <bno055_read_euler_hrp+0x3a>
    22c4:	81 e8       	ldi	r24, 0x81	; 129
    22c6:	72 c0       	rjmp	.+228    	; 0x23ac <bno055_read_euler_hrp+0x11e>
    22c8:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    22cc:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    22d0:	dc 01       	movw	r26, r24
    22d2:	13 96       	adiw	r26, 0x03	; 3
    22d4:	8c 91       	ld	r24, X
    22d6:	88 23       	and	r24, r24
    22d8:	19 f0       	breq	.+6      	; 0x22e0 <bno055_read_euler_hrp+0x52>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	7b df       	rcall	.-266    	; 0x21d4 <bno055_write_page_id>
    22de:	8a 83       	std	Y+2, r24	; 0x02
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	88 23       	and	r24, r24
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <bno055_read_euler_hrp+0x6a>
    22e6:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    22ea:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    22ee:	fc 01       	movw	r30, r24
    22f0:	83 81       	ldd	r24, Z+3	; 0x03
    22f2:	88 23       	and	r24, r24
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <bno055_read_euler_hrp+0x6a>
    22f6:	57 c0       	rjmp	.+174    	; 0x23a6 <bno055_read_euler_hrp+0x118>
    22f8:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    22fc:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2300:	dc 01       	movw	r26, r24
    2302:	1b 96       	adiw	r26, 0x0b	; 11
    2304:	ed 91       	ld	r30, X+
    2306:	fc 91       	ld	r31, X
    2308:	1c 97       	sbiw	r26, 0x0c	; 12
    230a:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    230e:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2312:	dc 01       	movw	r26, r24
    2314:	18 96       	adiw	r26, 0x08	; 8
    2316:	3c 91       	ld	r19, X
    2318:	ce 01       	movw	r24, r28
    231a:	03 96       	adiw	r24, 0x03	; 3
    231c:	26 e0       	ldi	r18, 0x06	; 6
    231e:	ac 01       	movw	r20, r24
    2320:	6a e1       	ldi	r22, 0x1A	; 26
    2322:	83 2f       	mov	r24, r19
    2324:	19 95       	eicall
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	8b 83       	std	Y+3, r24	; 0x03
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	8c 83       	std	Y+4, r24	; 0x04
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	08 2e       	mov	r0, r24
    2334:	00 0c       	add	r0, r0
    2336:	99 0b       	sbc	r25, r25
    2338:	38 2f       	mov	r19, r24
    233a:	22 27       	eor	r18, r18
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	28 2b       	or	r18, r24
    2344:	39 2b       	or	r19, r25
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	fc 01       	movw	r30, r24
    234c:	20 83       	st	Z, r18
    234e:	31 83       	std	Z+1, r19	; 0x01
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	8e 81       	ldd	r24, Y+6	; 0x06
    2356:	8e 83       	std	Y+6, r24	; 0x06
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	08 2e       	mov	r0, r24
    235c:	00 0c       	add	r0, r0
    235e:	99 0b       	sbc	r25, r25
    2360:	38 2f       	mov	r19, r24
    2362:	22 27       	eor	r18, r18
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	28 2b       	or	r18, r24
    236c:	39 2b       	or	r19, r25
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	dc 01       	movw	r26, r24
    2374:	12 96       	adiw	r26, 0x02	; 2
    2376:	2d 93       	st	X+, r18
    2378:	3c 93       	st	X, r19
    237a:	13 97       	sbiw	r26, 0x03	; 3
    237c:	8f 81       	ldd	r24, Y+7	; 0x07
    237e:	8f 83       	std	Y+7, r24	; 0x07
    2380:	88 85       	ldd	r24, Y+8	; 0x08
    2382:	88 87       	std	Y+8, r24	; 0x08
    2384:	88 85       	ldd	r24, Y+8	; 0x08
    2386:	08 2e       	mov	r0, r24
    2388:	00 0c       	add	r0, r0
    238a:	99 0b       	sbc	r25, r25
    238c:	38 2f       	mov	r19, r24
    238e:	22 27       	eor	r18, r18
    2390:	8f 81       	ldd	r24, Y+7	; 0x07
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	28 2b       	or	r18, r24
    2398:	39 2b       	or	r19, r25
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	fc 01       	movw	r30, r24
    23a0:	24 83       	std	Z+4, r18	; 0x04
    23a2:	35 83       	std	Z+5, r19	; 0x05
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <bno055_read_euler_hrp+0x11c>
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	2a 96       	adiw	r28, 0x0a	; 10
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <bno055_read_linear_accel_xyz>:
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	2a 97       	sbiw	r28, 0x0a	; 10
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	89 87       	std	Y+9, r24	; 0x09
    23c8:	9a 87       	std	Y+10, r25	; 0x0a
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	26 e0       	ldi	r18, 0x06	; 6
    23d0:	ce 01       	movw	r24, r28
    23d2:	03 96       	adiw	r24, 0x03	; 3
    23d4:	dc 01       	movw	r26, r24
    23d6:	e2 2f       	mov	r30, r18
    23d8:	1d 92       	st	X+, r1
    23da:	ea 95       	dec	r30
    23dc:	e9 f7       	brne	.-6      	; 0x23d8 <bno055_read_linear_accel_xyz+0x20>
    23de:	8f ef       	ldi	r24, 0xFF	; 255
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    23e6:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    23ea:	89 2b       	or	r24, r25
    23ec:	11 f4       	brne	.+4      	; 0x23f2 <bno055_read_linear_accel_xyz+0x3a>
    23ee:	81 e8       	ldi	r24, 0x81	; 129
    23f0:	72 c0       	rjmp	.+228    	; 0x24d6 <bno055_read_linear_accel_xyz+0x11e>
    23f2:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    23f6:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    23fa:	dc 01       	movw	r26, r24
    23fc:	13 96       	adiw	r26, 0x03	; 3
    23fe:	8c 91       	ld	r24, X
    2400:	88 23       	and	r24, r24
    2402:	19 f0       	breq	.+6      	; 0x240a <bno055_read_linear_accel_xyz+0x52>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	e6 de       	rcall	.-564    	; 0x21d4 <bno055_write_page_id>
    2408:	8a 83       	std	Y+2, r24	; 0x02
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	88 23       	and	r24, r24
    240e:	49 f0       	breq	.+18     	; 0x2422 <bno055_read_linear_accel_xyz+0x6a>
    2410:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2414:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2418:	fc 01       	movw	r30, r24
    241a:	83 81       	ldd	r24, Z+3	; 0x03
    241c:	88 23       	and	r24, r24
    241e:	09 f0       	breq	.+2      	; 0x2422 <bno055_read_linear_accel_xyz+0x6a>
    2420:	57 c0       	rjmp	.+174    	; 0x24d0 <bno055_read_linear_accel_xyz+0x118>
    2422:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2426:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    242a:	dc 01       	movw	r26, r24
    242c:	1b 96       	adiw	r26, 0x0b	; 11
    242e:	ed 91       	ld	r30, X+
    2430:	fc 91       	ld	r31, X
    2432:	1c 97       	sbiw	r26, 0x0c	; 12
    2434:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2438:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    243c:	dc 01       	movw	r26, r24
    243e:	18 96       	adiw	r26, 0x08	; 8
    2440:	3c 91       	ld	r19, X
    2442:	ce 01       	movw	r24, r28
    2444:	03 96       	adiw	r24, 0x03	; 3
    2446:	26 e0       	ldi	r18, 0x06	; 6
    2448:	ac 01       	movw	r20, r24
    244a:	68 e2       	ldi	r22, 0x28	; 40
    244c:	83 2f       	mov	r24, r19
    244e:	19 95       	eicall
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	8c 83       	std	Y+4, r24	; 0x04
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	08 2e       	mov	r0, r24
    245e:	00 0c       	add	r0, r0
    2460:	99 0b       	sbc	r25, r25
    2462:	38 2f       	mov	r19, r24
    2464:	22 27       	eor	r18, r18
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	28 2b       	or	r18, r24
    246e:	39 2b       	or	r19, r25
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	fc 01       	movw	r30, r24
    2476:	20 83       	st	Z, r18
    2478:	31 83       	std	Z+1, r19	; 0x01
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8e 81       	ldd	r24, Y+6	; 0x06
    2480:	8e 83       	std	Y+6, r24	; 0x06
    2482:	8e 81       	ldd	r24, Y+6	; 0x06
    2484:	08 2e       	mov	r0, r24
    2486:	00 0c       	add	r0, r0
    2488:	99 0b       	sbc	r25, r25
    248a:	38 2f       	mov	r19, r24
    248c:	22 27       	eor	r18, r18
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	28 2b       	or	r18, r24
    2496:	39 2b       	or	r19, r25
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	dc 01       	movw	r26, r24
    249e:	12 96       	adiw	r26, 0x02	; 2
    24a0:	2d 93       	st	X+, r18
    24a2:	3c 93       	st	X, r19
    24a4:	13 97       	sbiw	r26, 0x03	; 3
    24a6:	8f 81       	ldd	r24, Y+7	; 0x07
    24a8:	8f 83       	std	Y+7, r24	; 0x07
    24aa:	88 85       	ldd	r24, Y+8	; 0x08
    24ac:	88 87       	std	Y+8, r24	; 0x08
    24ae:	88 85       	ldd	r24, Y+8	; 0x08
    24b0:	08 2e       	mov	r0, r24
    24b2:	00 0c       	add	r0, r0
    24b4:	99 0b       	sbc	r25, r25
    24b6:	38 2f       	mov	r19, r24
    24b8:	22 27       	eor	r18, r18
    24ba:	8f 81       	ldd	r24, Y+7	; 0x07
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	28 2b       	or	r18, r24
    24c2:	39 2b       	or	r19, r25
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	fc 01       	movw	r30, r24
    24ca:	24 83       	std	Z+4, r18	; 0x04
    24cc:	35 83       	std	Z+5, r19	; 0x05
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <bno055_read_linear_accel_xyz+0x11c>
    24d0:	8f ef       	ldi	r24, 0xFF	; 255
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	2a 96       	adiw	r28, 0x0a	; 10
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	08 95       	ret

000024e2 <bno055_convert_double_euler_hpr_deg>:
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	2a 97       	sbiw	r28, 0x0a	; 10
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	89 87       	std	Y+9, r24	; 0x09
    24f2:	9a 87       	std	Y+10, r25	; 0x0a
    24f4:	8f ef       	ldi	r24, 0xFF	; 255
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	1a 82       	std	Y+2, r1	; 0x02
    24fa:	1b 82       	std	Y+3, r1	; 0x03
    24fc:	1c 82       	std	Y+4, r1	; 0x04
    24fe:	1d 82       	std	Y+5, r1	; 0x05
    2500:	1e 82       	std	Y+6, r1	; 0x06
    2502:	1f 82       	std	Y+7, r1	; 0x07
    2504:	18 86       	std	Y+8, r1	; 0x08
    2506:	ce 01       	movw	r24, r28
    2508:	08 96       	adiw	r24, 0x08	; 8
    250a:	64 d2       	rcall	.+1224   	; 0x29d4 <bno055_get_euler_unit>
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	88 85       	ldd	r24, Y+8	; 0x08
    2510:	88 23       	and	r24, r24
    2512:	31 f0       	breq	.+12     	; 0x2520 <bno055_convert_double_euler_hpr_deg+0x3e>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	bb d2       	rcall	.+1398   	; 0x2a8e <bno055_set_euler_unit>
    2518:	98 2f       	mov	r25, r24
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	89 0f       	add	r24, r25
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	88 23       	and	r24, r24
    2524:	09 f0       	breq	.+2      	; 0x2528 <bno055_convert_double_euler_hpr_deg+0x46>
    2526:	66 c0       	rjmp	.+204    	; 0x25f4 <bno055_convert_double_euler_hpr_deg+0x112>
    2528:	ce 01       	movw	r24, r28
    252a:	02 96       	adiw	r24, 0x02	; 2
    252c:	b0 de       	rcall	.-672    	; 0x228e <bno055_read_euler_hrp>
    252e:	98 2f       	mov	r25, r24
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	89 0f       	add	r24, r25
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	88 23       	and	r24, r24
    253a:	09 f0       	breq	.+2      	; 0x253e <bno055_convert_double_euler_hpr_deg+0x5c>
    253c:	58 c0       	rjmp	.+176    	; 0x25ee <bno055_convert_double_euler_hpr_deg+0x10c>
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	09 2e       	mov	r0, r25
    2544:	00 0c       	add	r0, r0
    2546:	aa 0b       	sbc	r26, r26
    2548:	bb 0b       	sbc	r27, r27
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e8       	ldi	r20, 0x80	; 128
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	29 85       	ldd	r18, Y+9	; 0x09
    256c:	3a 85       	ldd	r19, Y+10	; 0x0a
    256e:	f9 01       	movw	r30, r18
    2570:	80 83       	st	Z, r24
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	a2 83       	std	Z+2, r26	; 0x02
    2576:	b3 83       	std	Z+3, r27	; 0x03
    2578:	8e 81       	ldd	r24, Y+6	; 0x06
    257a:	9f 81       	ldd	r25, Y+7	; 0x07
    257c:	09 2e       	mov	r0, r25
    257e:	00 0c       	add	r0, r0
    2580:	aa 0b       	sbc	r26, r26
    2582:	bb 0b       	sbc	r27, r27
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	29 85       	ldd	r18, Y+9	; 0x09
    25a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    25a8:	f9 01       	movw	r30, r18
    25aa:	80 87       	std	Z+8, r24	; 0x08
    25ac:	91 87       	std	Z+9, r25	; 0x09
    25ae:	a2 87       	std	Z+10, r26	; 0x0a
    25b0:	b3 87       	std	Z+11, r27	; 0x0b
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	9d 81       	ldd	r25, Y+5	; 0x05
    25b6:	09 2e       	mov	r0, r25
    25b8:	00 0c       	add	r0, r0
    25ba:	aa 0b       	sbc	r26, r26
    25bc:	bb 0b       	sbc	r27, r27
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	29 85       	ldd	r18, Y+9	; 0x09
    25e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    25e2:	f9 01       	movw	r30, r18
    25e4:	84 83       	std	Z+4, r24	; 0x04
    25e6:	95 83       	std	Z+5, r25	; 0x05
    25e8:	a6 83       	std	Z+6, r26	; 0x06
    25ea:	b7 83       	std	Z+7, r27	; 0x07
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <bno055_convert_double_euler_hpr_deg+0x116>
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <bno055_convert_double_euler_hpr_deg+0x116>
    25f4:	8f ef       	ldi	r24, 0xFF	; 255
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	2a 96       	adiw	r28, 0x0a	; 10
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <bno055_convert_double_linear_accel_xyz_msq>:
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	29 97       	sbiw	r28, 0x09	; 9
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	88 87       	std	Y+8, r24	; 0x08
    2616:	99 87       	std	Y+9, r25	; 0x09
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	1a 82       	std	Y+2, r1	; 0x02
    261e:	1b 82       	std	Y+3, r1	; 0x03
    2620:	1c 82       	std	Y+4, r1	; 0x04
    2622:	1d 82       	std	Y+5, r1	; 0x05
    2624:	1e 82       	std	Y+6, r1	; 0x06
    2626:	1f 82       	std	Y+7, r1	; 0x07
    2628:	ce 01       	movw	r24, r28
    262a:	02 96       	adiw	r24, 0x02	; 2
    262c:	c5 de       	rcall	.-630    	; 0x23b8 <bno055_read_linear_accel_xyz>
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	88 23       	and	r24, r24
    2634:	09 f0       	breq	.+2      	; 0x2638 <bno055_convert_double_linear_accel_xyz_msq+0x32>
    2636:	58 c0       	rjmp	.+176    	; 0x26e8 <bno055_convert_double_linear_accel_xyz_msq+0xe2>
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	09 2e       	mov	r0, r25
    263e:	00 0c       	add	r0, r0
    2640:	aa 0b       	sbc	r26, r26
    2642:	bb 0b       	sbc	r27, r27
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	48 ec       	ldi	r20, 0xC8	; 200
    2656:	52 e4       	ldi	r21, 0x42	; 66
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	28 85       	ldd	r18, Y+8	; 0x08
    2666:	39 85       	ldd	r19, Y+9	; 0x09
    2668:	f9 01       	movw	r30, r18
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	09 2e       	mov	r0, r25
    2678:	00 0c       	add	r0, r0
    267a:	aa 0b       	sbc	r26, r26
    267c:	bb 0b       	sbc	r27, r27
    267e:	bc 01       	movw	r22, r24
    2680:	cd 01       	movw	r24, r26
    2682:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	48 ec       	ldi	r20, 0xC8	; 200
    2690:	52 e4       	ldi	r21, 0x42	; 66
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	28 85       	ldd	r18, Y+8	; 0x08
    26a0:	39 85       	ldd	r19, Y+9	; 0x09
    26a2:	f9 01       	movw	r30, r18
    26a4:	84 83       	std	Z+4, r24	; 0x04
    26a6:	95 83       	std	Z+5, r25	; 0x05
    26a8:	a6 83       	std	Z+6, r26	; 0x06
    26aa:	b7 83       	std	Z+7, r27	; 0x07
    26ac:	8e 81       	ldd	r24, Y+6	; 0x06
    26ae:	9f 81       	ldd	r25, Y+7	; 0x07
    26b0:	09 2e       	mov	r0, r25
    26b2:	00 0c       	add	r0, r0
    26b4:	aa 0b       	sbc	r26, r26
    26b6:	bb 0b       	sbc	r27, r27
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	48 ec       	ldi	r20, 0xC8	; 200
    26ca:	52 e4       	ldi	r21, 0x42	; 66
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	28 85       	ldd	r18, Y+8	; 0x08
    26da:	39 85       	ldd	r19, Y+9	; 0x09
    26dc:	f9 01       	movw	r30, r18
    26de:	80 87       	std	Z+8, r24	; 0x08
    26e0:	91 87       	std	Z+9, r25	; 0x09
    26e2:	a2 87       	std	Z+10, r26	; 0x0a
    26e4:	b3 87       	std	Z+11, r27	; 0x0b
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <bno055_convert_double_linear_accel_xyz_msq+0xe6>
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	29 96       	adiw	r28, 0x09	; 9
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	08 95       	ret

000026fa <bno055_get_mag_calib_stat>:
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	25 97       	sbiw	r28, 0x05	; 5
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	8c 83       	std	Y+4, r24	; 0x04
    270a:	9d 83       	std	Y+5, r25	; 0x05
    270c:	8f ef       	ldi	r24, 0xFF	; 255
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	1b 82       	std	Y+3, r1	; 0x03
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	8a 83       	std	Y+2, r24	; 0x02
    2716:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    271a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    271e:	89 2b       	or	r24, r25
    2720:	11 f4       	brne	.+4      	; 0x2726 <bno055_get_mag_calib_stat+0x2c>
    2722:	81 e8       	ldi	r24, 0x81	; 129
    2724:	3a c0       	rjmp	.+116    	; 0x279a <bno055_get_mag_calib_stat+0xa0>
    2726:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    272a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    272e:	dc 01       	movw	r26, r24
    2730:	13 96       	adiw	r26, 0x03	; 3
    2732:	8c 91       	ld	r24, X
    2734:	88 23       	and	r24, r24
    2736:	19 f0       	breq	.+6      	; 0x273e <bno055_get_mag_calib_stat+0x44>
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	4c dd       	rcall	.-1384   	; 0x21d4 <bno055_write_page_id>
    273c:	8a 83       	std	Y+2, r24	; 0x02
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	88 23       	and	r24, r24
    2742:	41 f0       	breq	.+16     	; 0x2754 <bno055_get_mag_calib_stat+0x5a>
    2744:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2748:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    274c:	fc 01       	movw	r30, r24
    274e:	83 81       	ldd	r24, Z+3	; 0x03
    2750:	88 23       	and	r24, r24
    2752:	01 f5       	brne	.+64     	; 0x2794 <bno055_get_mag_calib_stat+0x9a>
    2754:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2758:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    275c:	dc 01       	movw	r26, r24
    275e:	1b 96       	adiw	r26, 0x0b	; 11
    2760:	ed 91       	ld	r30, X+
    2762:	fc 91       	ld	r31, X
    2764:	1c 97       	sbiw	r26, 0x0c	; 12
    2766:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    276a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    276e:	dc 01       	movw	r26, r24
    2770:	18 96       	adiw	r26, 0x08	; 8
    2772:	3c 91       	ld	r19, X
    2774:	ce 01       	movw	r24, r28
    2776:	03 96       	adiw	r24, 0x03	; 3
    2778:	21 e0       	ldi	r18, 0x01	; 1
    277a:	ac 01       	movw	r20, r24
    277c:	65 e3       	ldi	r22, 0x35	; 53
    277e:	83 2f       	mov	r24, r19
    2780:	19 95       	eicall
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	28 2f       	mov	r18, r24
    2788:	23 70       	andi	r18, 0x03	; 3
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	9d 81       	ldd	r25, Y+5	; 0x05
    278e:	fc 01       	movw	r30, r24
    2790:	20 83       	st	Z, r18
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <bno055_get_mag_calib_stat+0x9e>
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	25 96       	adiw	r28, 0x05	; 5
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	08 95       	ret

000027a6 <bno055_get_accel_calib_stat>:
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	25 97       	sbiw	r28, 0x05	; 5
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	8c 83       	std	Y+4, r24	; 0x04
    27b6:	9d 83       	std	Y+5, r25	; 0x05
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	1b 82       	std	Y+3, r1	; 0x03
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	8a 83       	std	Y+2, r24	; 0x02
    27c2:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    27c6:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    27ca:	89 2b       	or	r24, r25
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <bno055_get_accel_calib_stat+0x2c>
    27ce:	81 e8       	ldi	r24, 0x81	; 129
    27d0:	41 c0       	rjmp	.+130    	; 0x2854 <bno055_get_accel_calib_stat+0xae>
    27d2:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    27d6:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    27da:	dc 01       	movw	r26, r24
    27dc:	13 96       	adiw	r26, 0x03	; 3
    27de:	8c 91       	ld	r24, X
    27e0:	88 23       	and	r24, r24
    27e2:	19 f0       	breq	.+6      	; 0x27ea <bno055_get_accel_calib_stat+0x44>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	f6 dc       	rcall	.-1556   	; 0x21d4 <bno055_write_page_id>
    27e8:	8a 83       	std	Y+2, r24	; 0x02
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	88 23       	and	r24, r24
    27ee:	41 f0       	breq	.+16     	; 0x2800 <bno055_get_accel_calib_stat+0x5a>
    27f0:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    27f4:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    27f8:	fc 01       	movw	r30, r24
    27fa:	83 81       	ldd	r24, Z+3	; 0x03
    27fc:	88 23       	and	r24, r24
    27fe:	39 f5       	brne	.+78     	; 0x284e <bno055_get_accel_calib_stat+0xa8>
    2800:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2804:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2808:	dc 01       	movw	r26, r24
    280a:	1b 96       	adiw	r26, 0x0b	; 11
    280c:	ed 91       	ld	r30, X+
    280e:	fc 91       	ld	r31, X
    2810:	1c 97       	sbiw	r26, 0x0c	; 12
    2812:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2816:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    281a:	dc 01       	movw	r26, r24
    281c:	18 96       	adiw	r26, 0x08	; 8
    281e:	3c 91       	ld	r19, X
    2820:	ce 01       	movw	r24, r28
    2822:	03 96       	adiw	r24, 0x03	; 3
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	ac 01       	movw	r20, r24
    2828:	65 e3       	ldi	r22, 0x35	; 53
    282a:	83 2f       	mov	r24, r19
    282c:	19 95       	eicall
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	8c 70       	andi	r24, 0x0C	; 12
    2838:	99 27       	eor	r25, r25
    283a:	95 95       	asr	r25
    283c:	87 95       	ror	r24
    283e:	95 95       	asr	r25
    2840:	87 95       	ror	r24
    2842:	28 2f       	mov	r18, r24
    2844:	8c 81       	ldd	r24, Y+4	; 0x04
    2846:	9d 81       	ldd	r25, Y+5	; 0x05
    2848:	fc 01       	movw	r30, r24
    284a:	20 83       	st	Z, r18
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <bno055_get_accel_calib_stat+0xac>
    284e:	8f ef       	ldi	r24, 0xFF	; 255
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	25 96       	adiw	r28, 0x05	; 5
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	08 95       	ret

00002860 <bno055_get_gyro_calib_stat>:
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	25 97       	sbiw	r28, 0x05	; 5
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	8c 83       	std	Y+4, r24	; 0x04
    2870:	9d 83       	std	Y+5, r25	; 0x05
    2872:	8f ef       	ldi	r24, 0xFF	; 255
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	1b 82       	std	Y+3, r1	; 0x03
    2878:	8f ef       	ldi	r24, 0xFF	; 255
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2880:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2884:	89 2b       	or	r24, r25
    2886:	11 f4       	brne	.+4      	; 0x288c <bno055_get_gyro_calib_stat+0x2c>
    2888:	81 e8       	ldi	r24, 0x81	; 129
    288a:	45 c0       	rjmp	.+138    	; 0x2916 <bno055_get_gyro_calib_stat+0xb6>
    288c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2890:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2894:	dc 01       	movw	r26, r24
    2896:	13 96       	adiw	r26, 0x03	; 3
    2898:	8c 91       	ld	r24, X
    289a:	88 23       	and	r24, r24
    289c:	19 f0       	breq	.+6      	; 0x28a4 <bno055_get_gyro_calib_stat+0x44>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	99 dc       	rcall	.-1742   	; 0x21d4 <bno055_write_page_id>
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	88 23       	and	r24, r24
    28a8:	41 f0       	breq	.+16     	; 0x28ba <bno055_get_gyro_calib_stat+0x5a>
    28aa:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    28ae:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    28b2:	fc 01       	movw	r30, r24
    28b4:	83 81       	ldd	r24, Z+3	; 0x03
    28b6:	88 23       	and	r24, r24
    28b8:	59 f5       	brne	.+86     	; 0x2910 <bno055_get_gyro_calib_stat+0xb0>
    28ba:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    28be:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    28c2:	dc 01       	movw	r26, r24
    28c4:	1b 96       	adiw	r26, 0x0b	; 11
    28c6:	ed 91       	ld	r30, X+
    28c8:	fc 91       	ld	r31, X
    28ca:	1c 97       	sbiw	r26, 0x0c	; 12
    28cc:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    28d0:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    28d4:	dc 01       	movw	r26, r24
    28d6:	18 96       	adiw	r26, 0x08	; 8
    28d8:	3c 91       	ld	r19, X
    28da:	ce 01       	movw	r24, r28
    28dc:	03 96       	adiw	r24, 0x03	; 3
    28de:	21 e0       	ldi	r18, 0x01	; 1
    28e0:	ac 01       	movw	r20, r24
    28e2:	65 e3       	ldi	r22, 0x35	; 53
    28e4:	83 2f       	mov	r24, r19
    28e6:	19 95       	eicall
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	80 73       	andi	r24, 0x30	; 48
    28f2:	99 27       	eor	r25, r25
    28f4:	95 95       	asr	r25
    28f6:	87 95       	ror	r24
    28f8:	95 95       	asr	r25
    28fa:	87 95       	ror	r24
    28fc:	95 95       	asr	r25
    28fe:	87 95       	ror	r24
    2900:	95 95       	asr	r25
    2902:	87 95       	ror	r24
    2904:	28 2f       	mov	r18, r24
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	fc 01       	movw	r30, r24
    290c:	20 83       	st	Z, r18
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <bno055_get_gyro_calib_stat+0xb4>
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	25 96       	adiw	r28, 0x05	; 5
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <bno055_get_sys_calib_stat>:
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	25 97       	sbiw	r28, 0x05	; 5
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	8c 83       	std	Y+4, r24	; 0x04
    2932:	9d 83       	std	Y+5, r25	; 0x05
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	1b 82       	std	Y+3, r1	; 0x03
    293a:	8f ef       	ldi	r24, 0xFF	; 255
    293c:	8a 83       	std	Y+2, r24	; 0x02
    293e:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2942:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2946:	89 2b       	or	r24, r25
    2948:	11 f4       	brne	.+4      	; 0x294e <bno055_get_sys_calib_stat+0x2c>
    294a:	81 e8       	ldi	r24, 0x81	; 129
    294c:	3d c0       	rjmp	.+122    	; 0x29c8 <bno055_get_sys_calib_stat+0xa6>
    294e:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2952:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2956:	dc 01       	movw	r26, r24
    2958:	13 96       	adiw	r26, 0x03	; 3
    295a:	8c 91       	ld	r24, X
    295c:	88 23       	and	r24, r24
    295e:	19 f0       	breq	.+6      	; 0x2966 <bno055_get_sys_calib_stat+0x44>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	38 dc       	rcall	.-1936   	; 0x21d4 <bno055_write_page_id>
    2964:	8a 83       	std	Y+2, r24	; 0x02
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	88 23       	and	r24, r24
    296a:	41 f0       	breq	.+16     	; 0x297c <bno055_get_sys_calib_stat+0x5a>
    296c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2970:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2974:	fc 01       	movw	r30, r24
    2976:	83 81       	ldd	r24, Z+3	; 0x03
    2978:	88 23       	and	r24, r24
    297a:	19 f5       	brne	.+70     	; 0x29c2 <bno055_get_sys_calib_stat+0xa0>
    297c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2980:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2984:	dc 01       	movw	r26, r24
    2986:	1b 96       	adiw	r26, 0x0b	; 11
    2988:	ed 91       	ld	r30, X+
    298a:	fc 91       	ld	r31, X
    298c:	1c 97       	sbiw	r26, 0x0c	; 12
    298e:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2992:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2996:	dc 01       	movw	r26, r24
    2998:	18 96       	adiw	r26, 0x08	; 8
    299a:	3c 91       	ld	r19, X
    299c:	ce 01       	movw	r24, r28
    299e:	03 96       	adiw	r24, 0x03	; 3
    29a0:	21 e0       	ldi	r18, 0x01	; 1
    29a2:	ac 01       	movw	r20, r24
    29a4:	65 e3       	ldi	r22, 0x35	; 53
    29a6:	83 2f       	mov	r24, r19
    29a8:	19 95       	eicall
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	28 2f       	mov	r18, r24
    29b0:	22 95       	swap	r18
    29b2:	26 95       	lsr	r18
    29b4:	26 95       	lsr	r18
    29b6:	23 70       	andi	r18, 0x03	; 3
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	fc 01       	movw	r30, r24
    29be:	20 83       	st	Z, r18
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <bno055_get_sys_calib_stat+0xa4>
    29c2:	8f ef       	ldi	r24, 0xFF	; 255
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	25 96       	adiw	r28, 0x05	; 5
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <bno055_get_euler_unit>:
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	25 97       	sbiw	r28, 0x05	; 5
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	8c 83       	std	Y+4, r24	; 0x04
    29e4:	9d 83       	std	Y+5, r25	; 0x05
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	1b 82       	std	Y+3, r1	; 0x03
    29ec:	8f ef       	ldi	r24, 0xFF	; 255
    29ee:	8a 83       	std	Y+2, r24	; 0x02
    29f0:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    29f4:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    29f8:	89 2b       	or	r24, r25
    29fa:	11 f4       	brne	.+4      	; 0x2a00 <bno055_get_euler_unit+0x2c>
    29fc:	81 e8       	ldi	r24, 0x81	; 129
    29fe:	41 c0       	rjmp	.+130    	; 0x2a82 <bno055_get_euler_unit+0xae>
    2a00:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2a04:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	13 96       	adiw	r26, 0x03	; 3
    2a0c:	8c 91       	ld	r24, X
    2a0e:	88 23       	and	r24, r24
    2a10:	19 f0       	breq	.+6      	; 0x2a18 <bno055_get_euler_unit+0x44>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	df db       	rcall	.-2114   	; 0x21d4 <bno055_write_page_id>
    2a16:	8a 83       	std	Y+2, r24	; 0x02
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	88 23       	and	r24, r24
    2a1c:	41 f0       	breq	.+16     	; 0x2a2e <bno055_get_euler_unit+0x5a>
    2a1e:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2a22:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2a26:	fc 01       	movw	r30, r24
    2a28:	83 81       	ldd	r24, Z+3	; 0x03
    2a2a:	88 23       	and	r24, r24
    2a2c:	39 f5       	brne	.+78     	; 0x2a7c <bno055_get_euler_unit+0xa8>
    2a2e:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2a32:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2a36:	dc 01       	movw	r26, r24
    2a38:	1b 96       	adiw	r26, 0x0b	; 11
    2a3a:	ed 91       	ld	r30, X+
    2a3c:	fc 91       	ld	r31, X
    2a3e:	1c 97       	sbiw	r26, 0x0c	; 12
    2a40:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2a44:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	18 96       	adiw	r26, 0x08	; 8
    2a4c:	3c 91       	ld	r19, X
    2a4e:	ce 01       	movw	r24, r28
    2a50:	03 96       	adiw	r24, 0x03	; 3
    2a52:	21 e0       	ldi	r18, 0x01	; 1
    2a54:	ac 01       	movw	r20, r24
    2a56:	6b e3       	ldi	r22, 0x3B	; 59
    2a58:	83 2f       	mov	r24, r19
    2a5a:	19 95       	eicall
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	84 70       	andi	r24, 0x04	; 4
    2a66:	99 27       	eor	r25, r25
    2a68:	95 95       	asr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	95 95       	asr	r25
    2a6e:	87 95       	ror	r24
    2a70:	28 2f       	mov	r18, r24
    2a72:	8c 81       	ldd	r24, Y+4	; 0x04
    2a74:	9d 81       	ldd	r25, Y+5	; 0x05
    2a76:	fc 01       	movw	r30, r24
    2a78:	20 83       	st	Z, r18
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <bno055_get_euler_unit+0xac>
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	25 96       	adiw	r28, 0x05	; 5
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	08 95       	ret

00002a8e <bno055_set_euler_unit>:
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	25 97       	sbiw	r28, 0x05	; 5
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	8f ef       	ldi	r24, 0xFF	; 255
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	1b 82       	std	Y+3, r1	; 0x03
    2aa4:	1c 82       	std	Y+4, r1	; 0x04
    2aa6:	8f ef       	ldi	r24, 0xFF	; 255
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
    2aaa:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2aae:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2ab2:	89 2b       	or	r24, r25
    2ab4:	11 f4       	brne	.+4      	; 0x2aba <bno055_set_euler_unit+0x2c>
    2ab6:	81 e8       	ldi	r24, 0x81	; 129
    2ab8:	68 c0       	rjmp	.+208    	; 0x2b8a <bno055_set_euler_unit+0xfc>
    2aba:	ce 01       	movw	r24, r28
    2abc:	04 96       	adiw	r24, 0x04	; 4
    2abe:	6b d0       	rcall	.+214    	; 0x2b96 <bno055_get_operation_mode>
    2ac0:	8a 83       	std	Y+2, r24	; 0x02
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	88 23       	and	r24, r24
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <bno055_set_euler_unit+0x3c>
    2ac8:	54 c0       	rjmp	.+168    	; 0x2b72 <bno055_set_euler_unit+0xe4>
    2aca:	8c 81       	ldd	r24, Y+4	; 0x04
    2acc:	88 23       	and	r24, r24
    2ace:	31 f0       	breq	.+12     	; 0x2adc <bno055_set_euler_unit+0x4e>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	b7 d0       	rcall	.+366    	; 0x2c42 <bno055_set_operation_mode>
    2ad4:	98 2f       	mov	r25, r24
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	89 0f       	add	r24, r25
    2ada:	8a 83       	std	Y+2, r24	; 0x02
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	88 23       	and	r24, r24
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <bno055_set_euler_unit+0x56>
    2ae2:	44 c0       	rjmp	.+136    	; 0x2b6c <bno055_set_euler_unit+0xde>
    2ae4:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2ae8:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2aec:	dc 01       	movw	r26, r24
    2aee:	1b 96       	adiw	r26, 0x0b	; 11
    2af0:	ed 91       	ld	r30, X+
    2af2:	fc 91       	ld	r31, X
    2af4:	1c 97       	sbiw	r26, 0x0c	; 12
    2af6:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2afa:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2afe:	dc 01       	movw	r26, r24
    2b00:	18 96       	adiw	r26, 0x08	; 8
    2b02:	3c 91       	ld	r19, X
    2b04:	ce 01       	movw	r24, r28
    2b06:	03 96       	adiw	r24, 0x03	; 3
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	6b e3       	ldi	r22, 0x3B	; 59
    2b0e:	83 2f       	mov	r24, r19
    2b10:	19 95       	eicall
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	88 23       	and	r24, r24
    2b18:	71 f5       	brne	.+92     	; 0x2b76 <bno055_set_euler_unit+0xe8>
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	2b 7f       	andi	r18, 0xFB	; 251
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	84 70       	andi	r24, 0x04	; 4
    2b30:	82 2b       	or	r24, r18
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2b38:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	19 96       	adiw	r26, 0x09	; 9
    2b40:	ed 91       	ld	r30, X+
    2b42:	fc 91       	ld	r31, X
    2b44:	1a 97       	sbiw	r26, 0x0a	; 10
    2b46:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2b4a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	18 96       	adiw	r26, 0x08	; 8
    2b52:	3c 91       	ld	r19, X
    2b54:	ce 01       	movw	r24, r28
    2b56:	03 96       	adiw	r24, 0x03	; 3
    2b58:	21 e0       	ldi	r18, 0x01	; 1
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	6b e3       	ldi	r22, 0x3B	; 59
    2b5e:	83 2f       	mov	r24, r19
    2b60:	19 95       	eicall
    2b62:	98 2f       	mov	r25, r24
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	89 0f       	add	r24, r25
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	05 c0       	rjmp	.+10     	; 0x2b76 <bno055_set_euler_unit+0xe8>
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <bno055_set_euler_unit+0xe8>
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	88 23       	and	r24, r24
    2b7a:	31 f0       	breq	.+12     	; 0x2b88 <bno055_set_euler_unit+0xfa>
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	61 d0       	rcall	.+194    	; 0x2c42 <bno055_set_operation_mode>
    2b80:	98 2f       	mov	r25, r24
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	89 0f       	add	r24, r25
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	25 96       	adiw	r28, 0x05	; 5
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	08 95       	ret

00002b96 <bno055_get_operation_mode>:
 *	to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(
u8 *operation_mode_u8)
{
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	25 97       	sbiw	r28, 0x05	; 5
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	8c 83       	std	Y+4, r24	; 0x04
    2ba6:	9d 83       	std	Y+5, r25	; 0x05
	/* Variable used to return value of
	communication routine*/
	BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    2ba8:	8f ef       	ldi	r24, 0xFF	; 255
    2baa:	89 83       	std	Y+1, r24	; 0x01
	u8 data_u8r = BNO055_INIT_VALUE;
    2bac:	1b 82       	std	Y+3, r1	; 0x03
	s8 stat_s8 = BNO055_ERROR;
    2bae:	8f ef       	ldi	r24, 0xFF	; 255
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
	/* Check the struct p_bno055 is empty */
	if (p_bno055 == BNO055_INIT_VALUE) {
    2bb2:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2bb6:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2bba:	89 2b       	or	r24, r25
    2bbc:	11 f4       	brne	.+4      	; 0x2bc2 <bno055_get_operation_mode+0x2c>
		return BNO055_E_NULL_PTR;
    2bbe:	81 e8       	ldi	r24, 0x81	; 129
    2bc0:	3a c0       	rjmp	.+116    	; 0x2c36 <bno055_get_operation_mode+0xa0>
		} else {
		/*condition check for page, operation mode is
		available in the page zero*/
		if (p_bno055->page_id != BNO055_PAGE_ZERO)
    2bc2:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2bc6:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	13 96       	adiw	r26, 0x03	; 3
    2bce:	8c 91       	ld	r24, X
    2bd0:	88 23       	and	r24, r24
    2bd2:	19 f0       	breq	.+6      	; 0x2bda <bno055_get_operation_mode+0x44>
			/* Write the page zero*/
			stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	fe da       	rcall	.-2564   	; 0x21d4 <bno055_write_page_id>
    2bd8:	8a 83       	std	Y+2, r24	; 0x02
		if ((stat_s8 == BNO055_SUCCESS) ||
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	88 23       	and	r24, r24
    2bde:	41 f0       	breq	.+16     	; 0x2bf0 <bno055_get_operation_mode+0x5a>
		(p_bno055->page_id == BNO055_PAGE_ZERO)) {
    2be0:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2be4:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2be8:	fc 01       	movw	r30, r24
    2bea:	83 81       	ldd	r24, Z+3	; 0x03
		/*condition check for page, operation mode is
		available in the page zero*/
		if (p_bno055->page_id != BNO055_PAGE_ZERO)
			/* Write the page zero*/
			stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
		if ((stat_s8 == BNO055_SUCCESS) ||
    2bec:	88 23       	and	r24, r24
    2bee:	01 f5       	brne	.+64     	; 0x2c30 <bno055_get_operation_mode+0x9a>
		(p_bno055->page_id == BNO055_PAGE_ZERO)) {
			/* Read the value of operation mode*/
			com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2bf0:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2bf4:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	1b 96       	adiw	r26, 0x0b	; 11
    2bfc:	ed 91       	ld	r30, X+
    2bfe:	fc 91       	ld	r31, X
    2c00:	1c 97       	sbiw	r26, 0x0c	; 12
    2c02:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2c06:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	18 96       	adiw	r26, 0x08	; 8
    2c0e:	3c 91       	ld	r19, X
    2c10:	ce 01       	movw	r24, r28
    2c12:	03 96       	adiw	r24, 0x03	; 3
    2c14:	21 e0       	ldi	r18, 0x01	; 1
    2c16:	ac 01       	movw	r20, r24
    2c18:	6d e3       	ldi	r22, 0x3D	; 61
    2c1a:	83 2f       	mov	r24, r19
    2c1c:	19 95       	eicall
    2c1e:	89 83       	std	Y+1, r24	; 0x01
			(p_bno055->dev_addr,
			BNO055_OPERATION_MODE_REG,
			&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
			*operation_mode_u8 =
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	28 2f       	mov	r18, r24
    2c24:	2f 70       	andi	r18, 0x0F	; 15
    2c26:	8c 81       	ldd	r24, Y+4	; 0x04
    2c28:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	20 83       	st	Z, r18
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <bno055_get_operation_mode+0x9e>
			BNO055_GET_BITSLICE(data_u8r,
			BNO055_OPERATION_MODE);
		} else {
		com_rslt = BNO055_ERROR;
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return com_rslt;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c36:	25 96       	adiw	r28, 0x05	; 5
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <bno055_set_operation_mode>:
 *	becomes zero and it is mainly derived
 *	to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	25 97       	sbiw	r28, 0x05	; 5
    2c4c:	cd bf       	out	0x3d, r28	; 61
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	8d 83       	std	Y+5, r24	; 0x05
BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	89 83       	std	Y+1, r24	; 0x01
u8 data_u8r = BNO055_INIT_VALUE;
    2c56:	1b 82       	std	Y+3, r1	; 0x03
u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
    2c58:	1c 82       	std	Y+4, r1	; 0x04
s8 stat_s8 = BNO055_ERROR;
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
/* Check the struct p_bno055 is empty */
if (p_bno055 == BNO055_INIT_VALUE) {
    2c5e:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2c62:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2c66:	89 2b       	or	r24, r25
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <bno055_set_operation_mode+0x2c>
	return BNO055_E_NULL_PTR;
    2c6a:	81 e8       	ldi	r24, 0x81	; 129
    2c6c:	d9 c0       	rjmp	.+434    	; 0x2e20 <bno055_set_operation_mode+0x1de>
	} else {
		/* The write operation effective only if the operation
		mode is in config mode, this part of code is checking the
		current operation mode and set the config mode */
		stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
    2c6e:	ce 01       	movw	r24, r28
    2c70:	04 96       	adiw	r24, 0x04	; 4
    2c72:	91 df       	rcall	.-222    	; 0x2b96 <bno055_get_operation_mode>
    2c74:	8a 83       	std	Y+2, r24	; 0x02
		if (stat_s8 == BNO055_SUCCESS) {
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	88 23       	and	r24, r24
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <bno055_set_operation_mode+0x3c>
    2c7c:	ce c0       	rjmp	.+412    	; 0x2e1a <bno055_set_operation_mode+0x1d8>
			/* If the previous operation mode is config it is
				directly write the operation mode */
			if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG) {
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	88 23       	and	r24, r24
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <bno055_set_operation_mode+0x44>
    2c84:	4a c0       	rjmp	.+148    	; 0x2d1a <bno055_set_operation_mode+0xd8>
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2c86:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2c8a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	1b 96       	adiw	r26, 0x0b	; 11
    2c92:	ed 91       	ld	r30, X+
    2c94:	fc 91       	ld	r31, X
    2c96:	1c 97       	sbiw	r26, 0x0c	; 12
    2c98:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2c9c:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	18 96       	adiw	r26, 0x08	; 8
    2ca4:	3c 91       	ld	r19, X
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	03 96       	adiw	r24, 0x03	; 3
    2caa:	21 e0       	ldi	r18, 0x01	; 1
    2cac:	ac 01       	movw	r20, r24
    2cae:	6d e3       	ldi	r22, 0x3D	; 61
    2cb0:	83 2f       	mov	r24, r19
    2cb2:	19 95       	eicall
    2cb4:	89 83       	std	Y+1, r24	; 0x01
				(p_bno055->dev_addr,
				BNO055_OPERATION_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 23       	and	r24, r24
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <bno055_set_operation_mode+0x7c>
    2cbc:	b0 c0       	rjmp	.+352    	; 0x2e1e <bno055_set_operation_mode+0x1dc>
					data_u8r =
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	90 7f       	andi	r25, 0xF0	; 240
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	8f 70       	andi	r24, 0x0F	; 15
    2cc8:	89 2b       	or	r24, r25
    2cca:	8b 83       	std	Y+3, r24	; 0x03
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_OPERATION_MODE,
					operation_mode_u8);
					com_rslt +=
					p_bno055->BNO055_BUS_WRITE_FUNC
    2ccc:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2cd0:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	19 96       	adiw	r26, 0x09	; 9
    2cd8:	ed 91       	ld	r30, X+
    2cda:	fc 91       	ld	r31, X
    2cdc:	1a 97       	sbiw	r26, 0x0a	; 10
    2cde:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2ce2:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	18 96       	adiw	r26, 0x08	; 8
    2cea:	3c 91       	ld	r19, X
    2cec:	ce 01       	movw	r24, r28
    2cee:	03 96       	adiw	r24, 0x03	; 3
    2cf0:	21 e0       	ldi	r18, 0x01	; 1
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	6d e3       	ldi	r22, 0x3D	; 61
    2cf6:	83 2f       	mov	r24, r19
    2cf8:	19 95       	eicall
				if (com_rslt == BNO055_SUCCESS) {
					data_u8r =
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_OPERATION_MODE,
					operation_mode_u8);
					com_rslt +=
    2cfa:	98 2f       	mov	r25, r24
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	89 0f       	add	r24, r25
    2d00:	89 83       	std	Y+1, r24	; 0x01
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
					/* Config mode to other
					operation mode switching
					required delay of 600ms*/
					p_bno055->delay_msec(
    2d02:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2d06:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	25 85       	ldd	r18, Z+13	; 0x0d
    2d0e:	36 85       	ldd	r19, Z+14	; 0x0e
    2d10:	88 e5       	ldi	r24, 0x58	; 88
    2d12:	92 e0       	ldi	r25, 0x02	; 2
    2d14:	f9 01       	movw	r30, r18
    2d16:	19 95       	eicall
    2d18:	82 c0       	rjmp	.+260    	; 0x2e1e <bno055_set_operation_mode+0x1dc>
				}
			} else {
				/* If the previous operation
				mode is not config it is
				 write the config mode */
				com_rslt = p_bno055->BNO055_BUS_READ_FUNC
    2d1a:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2d1e:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2d22:	dc 01       	movw	r26, r24
    2d24:	1b 96       	adiw	r26, 0x0b	; 11
    2d26:	ed 91       	ld	r30, X+
    2d28:	fc 91       	ld	r31, X
    2d2a:	1c 97       	sbiw	r26, 0x0c	; 12
    2d2c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2d30:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2d34:	dc 01       	movw	r26, r24
    2d36:	18 96       	adiw	r26, 0x08	; 8
    2d38:	3c 91       	ld	r19, X
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	03 96       	adiw	r24, 0x03	; 3
    2d3e:	21 e0       	ldi	r18, 0x01	; 1
    2d40:	ac 01       	movw	r20, r24
    2d42:	6d e3       	ldi	r22, 0x3D	; 61
    2d44:	83 2f       	mov	r24, r19
    2d46:	19 95       	eicall
    2d48:	89 83       	std	Y+1, r24	; 0x01
				(p_bno055->dev_addr,
				BNO055_OPERATION_MODE_REG,
				&data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
				if (com_rslt == BNO055_SUCCESS) {
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	88 23       	and	r24, r24
    2d4e:	c1 f4       	brne	.+48     	; 0x2d80 <bno055_set_operation_mode+0x13e>
					data_u8r =
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	80 7f       	andi	r24, 0xF0	; 240
    2d54:	8b 83       	std	Y+3, r24	; 0x03
					BNO055_SET_BITSLICE(data_u8r,
					BNO055_OPERATION_MODE,
					BNO055_OPERATION_MODE_CONFIG);
					com_rslt += bno055_write_register(
    2d56:	ce 01       	movw	r24, r28
    2d58:	03 96       	adiw	r24, 0x03	; 3
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	8d e3       	ldi	r24, 0x3D	; 61
    2d60:	05 da       	rcall	.-3062   	; 0x216c <bno055_write_register>
    2d62:	98 2f       	mov	r25, r24
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	89 0f       	add	r24, r25
    2d68:	89 83       	std	Y+1, r24	; 0x01
					BNO055_OPERATION_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
					/* other mode to config mode switching
					required delay of 20ms*/
					p_bno055->delay_msec(
    2d6a:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2d6e:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2d72:	fc 01       	movw	r30, r24
    2d74:	25 85       	ldd	r18, Z+13	; 0x0d
    2d76:	36 85       	ldd	r19, Z+14	; 0x0e
    2d78:	84 e1       	ldi	r24, 0x14	; 20
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	f9 01       	movw	r30, r18
    2d7e:	19 95       	eicall
					BNO055_CONFIG_MODE_SWITCHING_DELAY);
				}
				/* Write the operation mode */
				if (operation_mode_u8 !=
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	88 23       	and	r24, r24
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <bno055_set_operation_mode+0x146>
    2d86:	4b c0       	rjmp	.+150    	; 0x2e1e <bno055_set_operation_mode+0x1dc>
				BNO055_OPERATION_MODE_CONFIG) {
					com_rslt =
					p_bno055->BNO055_BUS_READ_FUNC
    2d88:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2d8c:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2d90:	dc 01       	movw	r26, r24
    2d92:	1b 96       	adiw	r26, 0x0b	; 11
    2d94:	ed 91       	ld	r30, X+
    2d96:	fc 91       	ld	r31, X
    2d98:	1c 97       	sbiw	r26, 0x0c	; 12
    2d9a:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2d9e:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2da2:	dc 01       	movw	r26, r24
    2da4:	18 96       	adiw	r26, 0x08	; 8
    2da6:	3c 91       	ld	r19, X
					BNO055_CONFIG_MODE_SWITCHING_DELAY);
				}
				/* Write the operation mode */
				if (operation_mode_u8 !=
				BNO055_OPERATION_MODE_CONFIG) {
					com_rslt =
    2da8:	ce 01       	movw	r24, r28
    2daa:	03 96       	adiw	r24, 0x03	; 3
    2dac:	21 e0       	ldi	r18, 0x01	; 1
    2dae:	ac 01       	movw	r20, r24
    2db0:	6d e3       	ldi	r22, 0x3D	; 61
    2db2:	83 2f       	mov	r24, r19
    2db4:	19 95       	eicall
    2db6:	89 83       	std	Y+1, r24	; 0x01
					p_bno055->BNO055_BUS_READ_FUNC
					(p_bno055->dev_addr,
					BNO055_OPERATION_MODE_REG,
					&data_u8r,
					BNO055_GEN_READ_WRITE_LENGTH);
					if (com_rslt == BNO055_SUCCESS) {
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	88 23       	and	r24, r24
    2dbc:	81 f5       	brne	.+96     	; 0x2e1e <bno055_set_operation_mode+0x1dc>
						data_u8r = BNO055_SET_BITSLICE
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	90 7f       	andi	r25, 0xF0	; 240
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	8f 70       	andi	r24, 0x0F	; 15
    2dc8:	89 2b       	or	r24, r25
    2dca:	8b 83       	std	Y+3, r24	; 0x03
						(data_u8r,
						BNO055_OPERATION_MODE,
						operation_mode_u8);
						com_rslt +=
						p_bno055->BNO055_BUS_WRITE_FUNC
    2dcc:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2dd0:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	19 96       	adiw	r26, 0x09	; 9
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	1a 97       	sbiw	r26, 0x0a	; 10
    2dde:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2de2:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2de6:	dc 01       	movw	r26, r24
    2de8:	18 96       	adiw	r26, 0x08	; 8
    2dea:	3c 91       	ld	r19, X
    2dec:	ce 01       	movw	r24, r28
    2dee:	03 96       	adiw	r24, 0x03	; 3
    2df0:	21 e0       	ldi	r18, 0x01	; 1
    2df2:	ac 01       	movw	r20, r24
    2df4:	6d e3       	ldi	r22, 0x3D	; 61
    2df6:	83 2f       	mov	r24, r19
    2df8:	19 95       	eicall
					if (com_rslt == BNO055_SUCCESS) {
						data_u8r = BNO055_SET_BITSLICE
						(data_u8r,
						BNO055_OPERATION_MODE,
						operation_mode_u8);
						com_rslt +=
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	89 0f       	add	r24, r25
    2e00:	89 83       	std	Y+1, r24	; 0x01
						&data_u8r,
						BNO055_GEN_READ_WRITE_LENGTH);
						/* Config mode to other
						operation mode switching
						required delay of 600ms*/
						p_bno055->delay_msec(
    2e02:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <p_bno055>
    2e06:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <p_bno055+0x1>
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	25 85       	ldd	r18, Z+13	; 0x0d
    2e0e:	36 85       	ldd	r19, Z+14	; 0x0e
    2e10:	88 e5       	ldi	r24, 0x58	; 88
    2e12:	92 e0       	ldi	r25, 0x02	; 2
    2e14:	f9 01       	movw	r30, r18
    2e16:	19 95       	eicall
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <bno055_set_operation_mode+0x1dc>
						BNO055_MODE_SWITCHING_DELAY);
					}
				}
			}
		} else {
		com_rslt = BNO055_ERROR;
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return com_rslt;
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e20:	25 96       	adiw	r28, 0x05	; 5
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <init_gps_interrupts>:
#include <string.h>
#include "gps.h"
#include "gps_interrupts.h"

void init_gps_interrupts(void)
{
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	1f 92       	push	r1
    2e32:	1f 92       	push	r1
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
    2e38:	80 eb       	ldi	r24, 0xB0	; 176
    2e3a:	9b e0       	ldi	r25, 0x0B	; 11
    2e3c:	24 e1       	ldi	r18, 0x14	; 20
    2e3e:	fc 01       	movw	r30, r24
    2e40:	23 83       	std	Z+3, r18	; 0x03
	gpgga_index = 0;
    2e42:	10 92 6d 27 	sts	0x276D, r1	; 0x80276d <gpgga_index>
	uint8_t dollar_counter = 0;
    2e46:	19 82       	std	Y+1, r1	; 0x01
	uint8_t current_sentence = SENTENCE_NONE;
    2e48:	1a 82       	std	Y+2, r1	; 0x02
	last_finished = SENTENCE_NONE;
    2e4a:	10 92 78 25 	sts	0x2578, r1	; 0x802578 <last_finished>
	
}
    2e4e:	00 00       	nop
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	08 95       	ret

00002e5a <init_gps_buffers>:

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
    2e62:	40 e0       	ldi	r20, 0x00	; 0
    2e64:	51 e0       	ldi	r21, 0x01	; 1
    2e66:	60 ed       	ldi	r22, 0xD0	; 208
    2e68:	75 e2       	ldi	r23, 0x25	; 37
    2e6a:	80 e7       	ldi	r24, 0x70	; 112
    2e6c:	95 e2       	ldi	r25, 0x25	; 37
    2e6e:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
    2e72:	40 e4       	ldi	r20, 0x40	; 64
    2e74:	50 e0       	ldi	r21, 0x00	; 0
    2e76:	60 ed       	ldi	r22, 0xD0	; 208
    2e78:	76 e2       	ldi	r23, 0x26	; 38
    2e7a:	80 e1       	ldi	r24, 0x10	; 16
    2e7c:	97 e2       	ldi	r25, 0x27	; 39
    2e7e:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <rbu8_init>
}
    2e82:	00 00       	nop
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <__vector_122>:

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
    2e8a:	1f 92       	push	r1
    2e8c:	0f 92       	push	r0
    2e8e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2e92:	0f 92       	push	r0
    2e94:	11 24       	eor	r1, r1
    2e96:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2e9a:	0f 92       	push	r0
    2e9c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ea0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2ea4:	0f 92       	push	r0
    2ea6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2eaa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2eae:	0f 92       	push	r0
    2eb0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2eb4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2eb8:	0f 92       	push	r0
    2eba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	ef 93       	push	r30
    2ed4:	ff 93       	push	r31
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	1f 92       	push	r1
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t ch = GPS_USART.DATA;
    2ee0:	80 eb       	ldi	r24, 0xB0	; 176
    2ee2:	9b e0       	ldi	r25, 0x0B	; 11
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	80 81       	ld	r24, Z
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	
	//printf("%c\n",ch);
	//printf("%c""\0", (char)ch);
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
    2eea:	80 91 cf 25 	lds	r24, 0x25CF	; 0x8025cf <current_sentence>
    2eee:	81 30       	cpi	r24, 0x01	; 1
    2ef0:	41 f5       	brne	.+80     	; 0x2f42 <__vector_122+0xb8>
	{
		if (ch == '\n')
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	8a 30       	cpi	r24, 0x0A	; 10
    2ef6:	b1 f4       	brne	.+44     	; 0x2f24 <__vector_122+0x9a>
		{
			
			rbu8_write(gpgga_buff, &gps_receive_buffer, gpgga_index);
    2ef8:	80 91 6d 27 	lds	r24, 0x276D	; 0x80276d <gpgga_index>
    2efc:	88 2f       	mov	r24, r24
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	ac 01       	movw	r20, r24
    2f02:	60 e7       	ldi	r22, 0x70	; 112
    2f04:	75 e2       	ldi	r23, 0x25	; 37
    2f06:	88 e1       	ldi	r24, 0x18	; 24
    2f08:	97 e2       	ldi	r25, 0x27	; 39
    2f0a:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <rbu8_write>
			last_finished = current_sentence;
    2f0e:	80 91 cf 25 	lds	r24, 0x25CF	; 0x8025cf <current_sentence>
    2f12:	80 93 78 25 	sts	0x2578, r24	; 0x802578 <last_finished>
			gpgga_index=0;
    2f16:	10 92 6d 27 	sts	0x276D, r1	; 0x80276d <gpgga_index>
			current_sentence = SENTENCE_WAIT;
    2f1a:	85 e0       	ldi	r24, 0x05	; 5
    2f1c:	80 93 cf 25 	sts	0x25CF, r24	; 0x8025cf <current_sentence>
			dollar_counter = 0;
    2f20:	10 92 6f 25 	sts	0x256F, r1	; 0x80256f <dollar_counter>
		}
		
		gpgga_buff[gpgga_index] = ch;
    2f24:	80 91 6d 27 	lds	r24, 0x276D	; 0x80276d <gpgga_index>
    2f28:	88 2f       	mov	r24, r24
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	88 5e       	subi	r24, 0xE8	; 232
    2f2e:	98 4d       	sbci	r25, 0xD8	; 216
    2f30:	29 81       	ldd	r18, Y+1	; 0x01
    2f32:	fc 01       	movw	r30, r24
    2f34:	20 83       	st	Z, r18
		gpgga_index++;
    2f36:	80 91 6d 27 	lds	r24, 0x276D	; 0x80276d <gpgga_index>
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <gpgga_index>
    2f40:	0a c0       	rjmp	.+20     	; 0x2f56 <__vector_122+0xcc>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
		
	

	}
	else if (ch == '$' && current_sentence == SENTENCE_NONE)
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	84 32       	cpi	r24, 0x24	; 36
    2f46:	39 f4       	brne	.+14     	; 0x2f56 <__vector_122+0xcc>
    2f48:	80 91 cf 25 	lds	r24, 0x25CF	; 0x8025cf <current_sentence>
    2f4c:	88 23       	and	r24, r24
    2f4e:	19 f4       	brne	.+6      	; 0x2f56 <__vector_122+0xcc>
	{
		dollar_counter = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	80 93 6f 25 	sts	0x256F, r24	; 0x80256f <dollar_counter>
	}
	
	if (dollar_counter > 0 && current_sentence == SENTENCE_NONE)
    2f56:	80 91 6f 25 	lds	r24, 0x256F	; 0x80256f <dollar_counter>
    2f5a:	88 23       	and	r24, r24
    2f5c:	21 f1       	breq	.+72     	; 0x2fa6 <__vector_122+0x11c>
    2f5e:	80 91 cf 25 	lds	r24, 0x25CF	; 0x8025cf <current_sentence>
    2f62:	88 23       	and	r24, r24
    2f64:	01 f5       	brne	.+64     	; 0x2fa6 <__vector_122+0x11c>
	{
		if (dollar_counter == 5 && ch == 'G' )
    2f66:	80 91 6f 25 	lds	r24, 0x256F	; 0x80256f <dollar_counter>
    2f6a:	85 30       	cpi	r24, 0x05	; 5
    2f6c:	b9 f4       	brne	.+46     	; 0x2f9c <__vector_122+0x112>
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	87 34       	cpi	r24, 0x47	; 71
    2f72:	a1 f4       	brne	.+40     	; 0x2f9c <__vector_122+0x112>
		{
			current_sentence= SENTENCE_GPGGA;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	80 93 cf 25 	sts	0x25CF, r24	; 0x8025cf <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
    2f7a:	45 e0       	ldi	r20, 0x05	; 5
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	64 e8       	ldi	r22, 0x84	; 132
    2f80:	70 e2       	ldi	r23, 0x20	; 32
    2f82:	88 e1       	ldi	r24, 0x18	; 24
    2f84:	97 e2       	ldi	r25, 0x27	; 39
    2f86:	0e 94 5c 5c 	call	0xb8b8	; 0xb8b8 <memcpy>
			gpgga_index = 5;
    2f8a:	85 e0       	ldi	r24, 0x05	; 5
    2f8c:	80 93 6d 27 	sts	0x276D, r24	; 0x80276d <gpgga_index>
			dollar_counter++;
    2f90:	80 91 6f 25 	lds	r24, 0x256F	; 0x80256f <dollar_counter>
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	80 93 6f 25 	sts	0x256F, r24	; 0x80256f <dollar_counter>
			dollar_counter++;
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    2f9a:	05 c0       	rjmp	.+10     	; 0x2fa6 <__vector_122+0x11c>
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
    2f9c:	80 91 6f 25 	lds	r24, 0x256F	; 0x80256f <dollar_counter>
    2fa0:	8f 5f       	subi	r24, 0xFF	; 255
    2fa2:	80 93 6f 25 	sts	0x256F, r24	; 0x80256f <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
    2fa6:	00 00       	nop
    2fa8:	0f 90       	pop	r0
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	ff 91       	pop	r31
    2fb0:	ef 91       	pop	r30
    2fb2:	bf 91       	pop	r27
    2fb4:	af 91       	pop	r26
    2fb6:	9f 91       	pop	r25
    2fb8:	8f 91       	pop	r24
    2fba:	7f 91       	pop	r23
    2fbc:	6f 91       	pop	r22
    2fbe:	5f 91       	pop	r21
    2fc0:	4f 91       	pop	r20
    2fc2:	3f 91       	pop	r19
    2fc4:	2f 91       	pop	r18
    2fc6:	0f 90       	pop	r0
    2fc8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    2fcc:	0f 90       	pop	r0
    2fce:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    2fd2:	0f 90       	pop	r0
    2fd4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    2fd8:	0f 90       	pop	r0
    2fda:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2fde:	0f 90       	pop	r0
    2fe0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2fe4:	0f 90       	pop	r0
    2fe6:	1f 90       	pop	r1
    2fe8:	18 95       	reti

00002fea <__vector_124>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
    2fea:	1f 92       	push	r1
    2fec:	0f 92       	push	r0
    2fee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2ff2:	0f 92       	push	r0
    2ff4:	11 24       	eor	r1, r1
    2ff6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    2ffa:	0f 92       	push	r0
    2ffc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3000:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    3004:	0f 92       	push	r0
    3006:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    300a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    300e:	0f 92       	push	r0
    3010:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3014:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3018:	0f 92       	push	r0
    301a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    301e:	2f 93       	push	r18
    3020:	3f 93       	push	r19
    3022:	4f 93       	push	r20
    3024:	5f 93       	push	r21
    3026:	6f 93       	push	r22
    3028:	7f 93       	push	r23
    302a:	8f 93       	push	r24
    302c:	9f 93       	push	r25
    302e:	af 93       	push	r26
    3030:	bf 93       	push	r27
    3032:	ef 93       	push	r30
    3034:	ff 93       	push	r31
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
    303e:	41 e0       	ldi	r20, 0x01	; 1
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	60 eb       	ldi	r22, 0xB0	; 176
    3044:	7b e0       	ldi	r23, 0x0B	; 11
    3046:	80 e1       	ldi	r24, 0x10	; 16
    3048:	97 e2       	ldi	r25, 0x27	; 39
    304a:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
    304e:	61 e0       	ldi	r22, 0x01	; 1
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	80 e1       	ldi	r24, 0x10	; 16
    3054:	97 e2       	ldi	r25, 0x27	; 39
    3056:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <rbu8_delete_oldest>
    305a:	00 00       	nop
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	ff 91       	pop	r31
    3062:	ef 91       	pop	r30
    3064:	bf 91       	pop	r27
    3066:	af 91       	pop	r26
    3068:	9f 91       	pop	r25
    306a:	8f 91       	pop	r24
    306c:	7f 91       	pop	r23
    306e:	6f 91       	pop	r22
    3070:	5f 91       	pop	r21
    3072:	4f 91       	pop	r20
    3074:	3f 91       	pop	r19
    3076:	2f 91       	pop	r18
    3078:	0f 90       	pop	r0
    307a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    307e:	0f 90       	pop	r0
    3080:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    3084:	0f 90       	pop	r0
    3086:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    308a:	0f 90       	pop	r0
    308c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    3090:	0f 90       	pop	r0
    3092:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3096:	0f 90       	pop	r0
    3098:	1f 90       	pop	r1
    309a:	18 95       	reti

0000309c <imu_update>:
}

double imu_accel_dist()
{	
	return sqrt(bno055_linear_accel.x*bno055_linear_accel.x+ bno055_linear_accel.y*bno055_linear_accel.y +bno055_linear_accel.z*bno055_linear_accel.z)-9.8;
}
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	86 e8       	ldi	r24, 0x86	; 134
    30b2:	97 e2       	ldi	r25, 0x27	; 39
    30b4:	a8 da       	rcall	.-2736   	; 0x2606 <bno055_convert_double_linear_accel_xyz_msq>
    30b6:	82 e9       	ldi	r24, 0x92	; 146
    30b8:	97 e2       	ldi	r25, 0x27	; 39
    30ba:	13 da       	rcall	.-3034   	; 0x24e2 <bno055_convert_double_euler_hpr_deg>
    30bc:	83 eb       	ldi	r24, 0xB3	; 179
    30be:	97 e2       	ldi	r25, 0x27	; 39
    30c0:	72 db       	rcall	.-2332   	; 0x27a6 <bno055_get_accel_calib_stat>
    30c2:	89 eb       	ldi	r24, 0xB9	; 185
    30c4:	97 e2       	ldi	r25, 0x27	; 39
    30c6:	cc db       	rcall	.-2152   	; 0x2860 <bno055_get_gyro_calib_stat>
    30c8:	8a ea       	ldi	r24, 0xAA	; 170
    30ca:	97 e2       	ldi	r25, 0x27	; 39
    30cc:	16 db       	rcall	.-2516   	; 0x26fa <bno055_get_mag_calib_stat>
    30ce:	84 eb       	ldi	r24, 0xB4	; 180
    30d0:	97 e2       	ldi	r25, 0x27	; 39
    30d2:	27 dc       	rcall	.-1970   	; 0x2922 <bno055_get_sys_calib_stat>
    30d4:	80 91 a6 27 	lds	r24, 0x27A6	; 0x8027a6 <prevTime>
    30d8:	90 91 a7 27 	lds	r25, 0x27A7	; 0x8027a7 <prevTime+0x1>
    30dc:	a0 91 a8 27 	lds	r26, 0x27A8	; 0x8027a8 <prevTime+0x2>
    30e0:	b0 91 a9 27 	lds	r27, 0x27A9	; 0x8027a9 <prevTime+0x3>
    30e4:	80 93 6f 27 	sts	0x276F, r24	; 0x80276f <prevPrevTime>
    30e8:	90 93 70 27 	sts	0x2770, r25	; 0x802770 <prevPrevTime+0x1>
    30ec:	a0 93 71 27 	sts	0x2771, r26	; 0x802771 <prevPrevTime+0x2>
    30f0:	b0 93 72 27 	sts	0x2772, r27	; 0x802772 <prevPrevTime+0x3>
    30f4:	0e 94 95 30 	call	0x612a	; 0x612a <rtc_get_time>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	0e 94 88 53 	call	0xa710	; 0xa710 <__floatunsisf>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	80 93 a6 27 	sts	0x27A6, r24	; 0x8027a6 <prevTime>
    310c:	90 93 a7 27 	sts	0x27A7, r25	; 0x8027a7 <prevTime+0x1>
    3110:	a0 93 a8 27 	sts	0x27A8, r26	; 0x8027a8 <prevTime+0x2>
    3114:	b0 93 a9 27 	sts	0x27A9, r27	; 0x8027a9 <prevTime+0x3>
    3118:	80 91 af 27 	lds	r24, 0x27AF	; 0x8027af <currentAccZ>
    311c:	90 91 b0 27 	lds	r25, 0x27B0	; 0x8027b0 <currentAccZ+0x1>
    3120:	a0 91 b1 27 	lds	r26, 0x27B1	; 0x8027b1 <currentAccZ+0x2>
    3124:	b0 91 b2 27 	lds	r27, 0x27B2	; 0x8027b2 <currentAccZ+0x3>
    3128:	80 93 ab 27 	sts	0x27AB, r24	; 0x8027ab <prevAccZ>
    312c:	90 93 ac 27 	sts	0x27AC, r25	; 0x8027ac <prevAccZ+0x1>
    3130:	a0 93 ad 27 	sts	0x27AD, r26	; 0x8027ad <prevAccZ+0x2>
    3134:	b0 93 ae 27 	sts	0x27AE, r27	; 0x8027ae <prevAccZ+0x3>
    3138:	e8 d0       	rcall	.+464    	; 0x330a <imu_accel_z>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	80 93 af 27 	sts	0x27AF, r24	; 0x8027af <currentAccZ>
    3142:	90 93 b0 27 	sts	0x27B0, r25	; 0x8027b0 <currentAccZ+0x1>
    3146:	a0 93 b1 27 	sts	0x27B1, r26	; 0x8027b1 <currentAccZ+0x2>
    314a:	b0 93 b2 27 	sts	0x27B2, r27	; 0x8027b2 <currentAccZ+0x3>
    314e:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <currentVelZ>
    3152:	90 91 74 27 	lds	r25, 0x2774	; 0x802774 <currentVelZ+0x1>
    3156:	a0 91 75 27 	lds	r26, 0x2775	; 0x802775 <currentVelZ+0x2>
    315a:	b0 91 76 27 	lds	r27, 0x2776	; 0x802776 <currentVelZ+0x3>
    315e:	80 93 9e 27 	sts	0x279E, r24	; 0x80279e <prevVelZ>
    3162:	90 93 9f 27 	sts	0x279F, r25	; 0x80279f <prevVelZ+0x1>
    3166:	a0 93 a0 27 	sts	0x27A0, r26	; 0x8027a0 <prevVelZ+0x2>
    316a:	b0 93 a1 27 	sts	0x27A1, r27	; 0x8027a1 <prevVelZ+0x3>
    316e:	80 91 ab 27 	lds	r24, 0x27AB	; 0x8027ab <prevAccZ>
    3172:	90 91 ac 27 	lds	r25, 0x27AC	; 0x8027ac <prevAccZ+0x1>
    3176:	a0 91 ad 27 	lds	r26, 0x27AD	; 0x8027ad <prevAccZ+0x2>
    317a:	b0 91 ae 27 	lds	r27, 0x27AE	; 0x8027ae <prevAccZ+0x3>
    317e:	20 91 af 27 	lds	r18, 0x27AF	; 0x8027af <currentAccZ>
    3182:	30 91 b0 27 	lds	r19, 0x27B0	; 0x8027b0 <currentAccZ+0x1>
    3186:	40 91 b1 27 	lds	r20, 0x27B1	; 0x8027b1 <currentAccZ+0x2>
    318a:	50 91 b2 27 	lds	r21, 0x27B2	; 0x8027b2 <currentAccZ+0x3>
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e0       	ldi	r20, 0x00	; 0
    31a0:	50 e4       	ldi	r21, 0x40	; 64
    31a2:	bc 01       	movw	r22, r24
    31a4:	cd 01       	movw	r24, r26
    31a6:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	6c 01       	movw	r12, r24
    31b0:	7d 01       	movw	r14, r26
    31b2:	80 91 a6 27 	lds	r24, 0x27A6	; 0x8027a6 <prevTime>
    31b6:	90 91 a7 27 	lds	r25, 0x27A7	; 0x8027a7 <prevTime+0x1>
    31ba:	a0 91 a8 27 	lds	r26, 0x27A8	; 0x8027a8 <prevTime+0x2>
    31be:	b0 91 a9 27 	lds	r27, 0x27A9	; 0x8027a9 <prevTime+0x3>
    31c2:	20 91 6f 27 	lds	r18, 0x276F	; 0x80276f <prevPrevTime>
    31c6:	30 91 70 27 	lds	r19, 0x2770	; 0x802770 <prevPrevTime+0x1>
    31ca:	40 91 71 27 	lds	r20, 0x2771	; 0x802771 <prevPrevTime+0x2>
    31ce:	50 91 72 27 	lds	r21, 0x2772	; 0x802772 <prevPrevTime+0x3>
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 4c 52 	call	0xa498	; 0xa498 <__subsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9c 01       	movw	r18, r24
    31e0:	ad 01       	movw	r20, r26
    31e2:	c7 01       	movw	r24, r14
    31e4:	b6 01       	movw	r22, r12
    31e6:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	7c 01       	movw	r14, r24
    31f0:	8d 01       	movw	r16, r26
    31f2:	80 91 9e 27 	lds	r24, 0x279E	; 0x80279e <prevVelZ>
    31f6:	90 91 9f 27 	lds	r25, 0x279F	; 0x80279f <prevVelZ+0x1>
    31fa:	a0 91 a0 27 	lds	r26, 0x27A0	; 0x8027a0 <prevVelZ+0x2>
    31fe:	b0 91 a1 27 	lds	r27, 0x27A1	; 0x8027a1 <prevVelZ+0x3>
    3202:	9c 01       	movw	r18, r24
    3204:	ad 01       	movw	r20, r26
    3206:	c8 01       	movw	r24, r16
    3208:	b7 01       	movw	r22, r14
    320a:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	80 93 73 27 	sts	0x2773, r24	; 0x802773 <currentVelZ>
    3216:	90 93 74 27 	sts	0x2774, r25	; 0x802774 <currentVelZ+0x1>
    321a:	a0 93 75 27 	sts	0x2775, r26	; 0x802775 <currentVelZ+0x2>
    321e:	b0 93 76 27 	sts	0x2776, r27	; 0x802776 <currentVelZ+0x3>
    3222:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <currentPosZ>
    3226:	90 91 a3 27 	lds	r25, 0x27A3	; 0x8027a3 <currentPosZ+0x1>
    322a:	a0 91 a4 27 	lds	r26, 0x27A4	; 0x8027a4 <currentPosZ+0x2>
    322e:	b0 91 a5 27 	lds	r27, 0x27A5	; 0x8027a5 <currentPosZ+0x3>
    3232:	80 93 b5 27 	sts	0x27B5, r24	; 0x8027b5 <prevPosZ>
    3236:	90 93 b6 27 	sts	0x27B6, r25	; 0x8027b6 <prevPosZ+0x1>
    323a:	a0 93 b7 27 	sts	0x27B7, r26	; 0x8027b7 <prevPosZ+0x2>
    323e:	b0 93 b8 27 	sts	0x27B8, r27	; 0x8027b8 <prevPosZ+0x3>
    3242:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <currentVelZ>
    3246:	90 91 74 27 	lds	r25, 0x2774	; 0x802774 <currentVelZ+0x1>
    324a:	a0 91 75 27 	lds	r26, 0x2775	; 0x802775 <currentVelZ+0x2>
    324e:	b0 91 76 27 	lds	r27, 0x2776	; 0x802776 <currentVelZ+0x3>
    3252:	20 91 9e 27 	lds	r18, 0x279E	; 0x80279e <prevVelZ>
    3256:	30 91 9f 27 	lds	r19, 0x279F	; 0x80279f <prevVelZ+0x1>
    325a:	40 91 a0 27 	lds	r20, 0x27A0	; 0x8027a0 <prevVelZ+0x2>
    325e:	50 91 a1 27 	lds	r21, 0x27A1	; 0x8027a1 <prevVelZ+0x3>
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e4       	ldi	r21, 0x40	; 64
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	6c 01       	movw	r12, r24
    3284:	7d 01       	movw	r14, r26
    3286:	80 91 a6 27 	lds	r24, 0x27A6	; 0x8027a6 <prevTime>
    328a:	90 91 a7 27 	lds	r25, 0x27A7	; 0x8027a7 <prevTime+0x1>
    328e:	a0 91 a8 27 	lds	r26, 0x27A8	; 0x8027a8 <prevTime+0x2>
    3292:	b0 91 a9 27 	lds	r27, 0x27A9	; 0x8027a9 <prevTime+0x3>
    3296:	20 91 6f 27 	lds	r18, 0x276F	; 0x80276f <prevPrevTime>
    329a:	30 91 70 27 	lds	r19, 0x2770	; 0x802770 <prevPrevTime+0x1>
    329e:	40 91 71 27 	lds	r20, 0x2771	; 0x802771 <prevPrevTime+0x2>
    32a2:	50 91 72 27 	lds	r21, 0x2772	; 0x802772 <prevPrevTime+0x3>
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 4c 52 	call	0xa498	; 0xa498 <__subsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9c 01       	movw	r18, r24
    32b4:	ad 01       	movw	r20, r26
    32b6:	c7 01       	movw	r24, r14
    32b8:	b6 01       	movw	r22, r12
    32ba:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	7c 01       	movw	r14, r24
    32c4:	8d 01       	movw	r16, r26
    32c6:	80 91 b5 27 	lds	r24, 0x27B5	; 0x8027b5 <prevPosZ>
    32ca:	90 91 b6 27 	lds	r25, 0x27B6	; 0x8027b6 <prevPosZ+0x1>
    32ce:	a0 91 b7 27 	lds	r26, 0x27B7	; 0x8027b7 <prevPosZ+0x2>
    32d2:	b0 91 b8 27 	lds	r27, 0x27B8	; 0x8027b8 <prevPosZ+0x3>
    32d6:	9c 01       	movw	r18, r24
    32d8:	ad 01       	movw	r20, r26
    32da:	c8 01       	movw	r24, r16
    32dc:	b7 01       	movw	r22, r14
    32de:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	80 93 a2 27 	sts	0x27A2, r24	; 0x8027a2 <currentPosZ>
    32ea:	90 93 a3 27 	sts	0x27A3, r25	; 0x8027a3 <currentPosZ+0x1>
    32ee:	a0 93 a4 27 	sts	0x27A4, r26	; 0x8027a4 <currentPosZ+0x2>
    32f2:	b0 93 a5 27 	sts	0x27A5, r27	; 0x8027a5 <currentPosZ+0x3>
    32f6:	00 00       	nop
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	ff 90       	pop	r15
    3302:	ef 90       	pop	r14
    3304:	df 90       	pop	r13
    3306:	cf 90       	pop	r12
    3308:	08 95       	ret

0000330a <imu_accel_z>:
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	80 91 8e 27 	lds	r24, 0x278E	; 0x80278e <bno055_linear_accel+0x8>
    3316:	90 91 8f 27 	lds	r25, 0x278F	; 0x80278f <bno055_linear_accel+0x9>
    331a:	a0 91 90 27 	lds	r26, 0x2790	; 0x802790 <bno055_linear_accel+0xa>
    331e:	b0 91 91 27 	lds	r27, 0x2791	; 0x802791 <bno055_linear_accel+0xb>
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	08 95       	ret

0000332c <imu_vel_z>:


double imu_vel_z()
{
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
	return currentVelZ;
    3334:	80 91 73 27 	lds	r24, 0x2773	; 0x802773 <currentVelZ>
    3338:	90 91 74 27 	lds	r25, 0x2774	; 0x802774 <currentVelZ+0x1>
    333c:	a0 91 75 27 	lds	r26, 0x2775	; 0x802775 <currentVelZ+0x2>
    3340:	b0 91 76 27 	lds	r27, 0x2776	; 0x802776 <currentVelZ+0x3>
}
    3344:	bc 01       	movw	r22, r24
    3346:	cd 01       	movw	r24, r26
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	08 95       	ret

0000334e <imu_pos_z>:

double imu_pos_z()
{
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
	return currentPosZ;
    3356:	80 91 a2 27 	lds	r24, 0x27A2	; 0x8027a2 <currentPosZ>
    335a:	90 91 a3 27 	lds	r25, 0x27A3	; 0x8027a3 <currentPosZ+0x1>
    335e:	a0 91 a4 27 	lds	r26, 0x27A4	; 0x8027a4 <currentPosZ+0x2>
    3362:	b0 91 a5 27 	lds	r27, 0x27A5	; 0x8027a5 <currentPosZ+0x3>
}
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	08 95       	ret

00003370 <imu_roll>:




double imu_roll()
{
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.r;
    3378:	80 91 96 27 	lds	r24, 0x2796	; 0x802796 <bno055_euler+0x4>
    337c:	90 91 97 27 	lds	r25, 0x2797	; 0x802797 <bno055_euler+0x5>
    3380:	a0 91 98 27 	lds	r26, 0x2798	; 0x802798 <bno055_euler+0x6>
    3384:	b0 91 99 27 	lds	r27, 0x2799	; 0x802799 <bno055_euler+0x7>
}
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	08 95       	ret

00003392 <imu_pitch>:

double imu_pitch()
{
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.p;
    339a:	80 91 9a 27 	lds	r24, 0x279A	; 0x80279a <bno055_euler+0x8>
    339e:	90 91 9b 27 	lds	r25, 0x279B	; 0x80279b <bno055_euler+0x9>
    33a2:	a0 91 9c 27 	lds	r26, 0x279C	; 0x80279c <bno055_euler+0xa>
    33a6:	b0 91 9d 27 	lds	r27, 0x279D	; 0x80279d <bno055_euler+0xb>
}
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	08 95       	ret

000033b4 <imu_heading>:

double imu_heading()
{
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
	return bno055_euler.h;
    33bc:	80 91 92 27 	lds	r24, 0x2792	; 0x802792 <bno055_euler>
    33c0:	90 91 93 27 	lds	r25, 0x2793	; 0x802793 <bno055_euler+0x1>
    33c4:	a0 91 94 27 	lds	r26, 0x2794	; 0x802794 <bno055_euler+0x2>
    33c8:	b0 91 95 27 	lds	r27, 0x2795	; 0x802795 <bno055_euler+0x3>
}
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

000033d6 <servo_init>:

void set_servo(uint16_t dutyCycle)
{
	pwm_start(&pwm_cfg,dutyCycle);
	if(DEBUG) printf("Set Servo to duty cycle of %u\n", dutyCycle);
}
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	80 e8       	ldi	r24, 0x80	; 128
    33e0:	96 e0       	ldi	r25, 0x06	; 6
    33e2:	20 e8       	ldi	r18, 0x80	; 128
    33e4:	36 e0       	ldi	r19, 0x06	; 6
    33e6:	f9 01       	movw	r30, r18
    33e8:	21 81       	ldd	r18, Z+1	; 0x01
    33ea:	21 60       	ori	r18, 0x01	; 1
    33ec:	fc 01       	movw	r30, r24
    33ee:	21 83       	std	Z+1, r18	; 0x01
    33f0:	80 e8       	ldi	r24, 0x80	; 128
    33f2:	96 e0       	ldi	r25, 0x06	; 6
    33f4:	20 e8       	ldi	r18, 0x80	; 128
    33f6:	36 e0       	ldi	r19, 0x06	; 6
    33f8:	f9 01       	movw	r30, r18
    33fa:	25 81       	ldd	r18, Z+5	; 0x05
    33fc:	21 60       	ori	r18, 0x01	; 1
    33fe:	fc 01       	movw	r30, r24
    3400:	25 83       	std	Z+5, r18	; 0x05
    3402:	8a e8       	ldi	r24, 0x8A	; 138
    3404:	90 e2       	ldi	r25, 0x20	; 32
    3406:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
    340a:	00 00       	nop
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	08 95       	ret

00003412 <buzz_on>:



void buzz_on(void)
{
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    341a:	80 e4       	ldi	r24, 0x40	; 64
    341c:	96 e0       	ldi	r25, 0x06	; 6
    341e:	20 e4       	ldi	r18, 0x40	; 64
    3420:	36 e0       	ldi	r19, 0x06	; 6
    3422:	f9 01       	movw	r30, r18
    3424:	21 81       	ldd	r18, Z+1	; 0x01
    3426:	21 60       	ori	r18, 0x01	; 1
    3428:	fc 01       	movw	r30, r24
    342a:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET |= 0b00000001;
    342c:	80 e4       	ldi	r24, 0x40	; 64
    342e:	96 e0       	ldi	r25, 0x06	; 6
    3430:	20 e4       	ldi	r18, 0x40	; 64
    3432:	36 e0       	ldi	r19, 0x06	; 6
    3434:	f9 01       	movw	r30, r18
    3436:	25 81       	ldd	r18, Z+5	; 0x05
    3438:	21 60       	ori	r18, 0x01	; 1
    343a:	fc 01       	movw	r30, r24
    343c:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer ON\n");
    343e:	8d eb       	ldi	r24, 0xBD	; 189
    3440:	90 e2       	ldi	r25, 0x20	; 32
    3442:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
	
}
    3446:	00 00       	nop
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	08 95       	ret

0000344e <buzz_off>:
void buzz_off(void)
{
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET |= 0b00000001;
    3456:	80 e4       	ldi	r24, 0x40	; 64
    3458:	96 e0       	ldi	r25, 0x06	; 6
    345a:	20 e4       	ldi	r18, 0x40	; 64
    345c:	36 e0       	ldi	r19, 0x06	; 6
    345e:	f9 01       	movw	r30, r18
    3460:	21 81       	ldd	r18, Z+1	; 0x01
    3462:	21 60       	ori	r18, 0x01	; 1
    3464:	fc 01       	movw	r30, r24
    3466:	21 83       	std	Z+1, r18	; 0x01
	PORTC.OUTSET &= 0b11111110;
    3468:	80 e4       	ldi	r24, 0x40	; 64
    346a:	96 e0       	ldi	r25, 0x06	; 6
    346c:	20 e4       	ldi	r18, 0x40	; 64
    346e:	36 e0       	ldi	r19, 0x06	; 6
    3470:	f9 01       	movw	r30, r18
    3472:	25 81       	ldd	r18, Z+5	; 0x05
    3474:	2e 7f       	andi	r18, 0xFE	; 254
    3476:	fc 01       	movw	r30, r24
    3478:	25 83       	std	Z+5, r18	; 0x05
	
	if(DEBUG) printf("Buzzer OFF\n");
    347a:	87 ec       	ldi	r24, 0xC7	; 199
    347c:	90 e2       	ldi	r25, 0x20	; 32
    347e:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
    3482:	00 00       	nop
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	08 95       	ret

0000348a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	9c e6       	ldi	r25, 0x6C	; 108
    3496:	ac ed       	ldi	r26, 0xDC	; 220
    3498:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	df 91       	pop	r29
    34a0:	cf 91       	pop	r28
    34a2:	08 95       	ret

000034a4 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	1f 92       	push	r1
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    34ae:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    34b0:	ec df       	rcall	.-40     	; 0x348a <sysclk_get_main_hz>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	29 81       	ldd	r18, Y+1	; 0x01
    34b8:	22 2f       	mov	r18, r18
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	04 c0       	rjmp	.+8      	; 0x34c6 <sysclk_get_per4_hz+0x22>
    34be:	b6 95       	lsr	r27
    34c0:	a7 95       	ror	r26
    34c2:	97 95       	ror	r25
    34c4:	87 95       	ror	r24
    34c6:	2a 95       	dec	r18
    34c8:	d2 f7       	brpl	.-12     	; 0x34be <sysclk_get_per4_hz+0x1a>
}
    34ca:	bc 01       	movw	r22, r24
    34cc:	cd 01       	movw	r24, r26
    34ce:	0f 90       	pop	r0
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	08 95       	ret

000034d6 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    34de:	e2 df       	rcall	.-60     	; 0x34a4 <sysclk_get_per4_hz>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    34e4:	bc 01       	movw	r22, r24
    34e6:	cd 01       	movw	r24, r26
    34e8:	df 91       	pop	r29
    34ea:	cf 91       	pop	r28
    34ec:	08 95       	ret

000034ee <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    34f6:	ef df       	rcall	.-34     	; 0x34d6 <sysclk_get_per2_hz>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
}
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	08 95       	ret

00003506 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    3506:	cf 93       	push	r28
    3508:	df 93       	push	r29
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    350e:	ef df       	rcall	.-34     	; 0x34ee <sysclk_get_per_hz>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
}
    3514:	bc 01       	movw	r22, r24
    3516:	cd 01       	movw	r24, r26
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    351e:	04 c0       	rjmp	.+8      	; 0x3528 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    3520:	61 50       	subi	r22, 0x01	; 1
    3522:	71 09       	sbc	r23, r1
    3524:	81 09       	sbc	r24, r1
    3526:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    3528:	61 15       	cp	r22, r1
    352a:	71 05       	cpc	r23, r1
    352c:	81 05       	cpc	r24, r1
    352e:	91 05       	cpc	r25, r1
    3530:	b9 f7       	brne	.-18     	; 0x3520 <__portable_avr_delay_cycles+0x2>
    3532:	08 95       	ret

00003534 <spi_enable>:
/*! \brief Enables the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	1f 92       	push	r1
    353a:	1f 92       	push	r1
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	89 83       	std	Y+1, r24	; 0x01
    3542:	9a 83       	std	Y+2, r25	; 0x02
	spi->CTRL |= SPI_ENABLE_bm;
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	fc 01       	movw	r30, r24
    354a:	80 81       	ld	r24, Z
    354c:	28 2f       	mov	r18, r24
    354e:	20 64       	ori	r18, 0x40	; 64
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	9a 81       	ldd	r25, Y+2	; 0x02
    3554:	fc 01       	movw	r30, r24
    3556:	20 83       	st	Z, r18
}
    3558:	00 00       	nop
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	08 95       	ret

00003564 <spi_init_pins>:

uint8_t commands [2] = {0x48, 0x58};
uint8_t read_buffer [2*3];
	
void spi_init_pins(void)
{
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
	ioport_configure_port_pin(&PORTC, PIN1_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    356c:	43 e0       	ldi	r20, 0x03	; 3
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	62 e0       	ldi	r22, 0x02	; 2
    3572:	80 e4       	ldi	r24, 0x40	; 64
    3574:	96 e0       	ldi	r25, 0x06	; 6
    3576:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <ioport_configure_port_pin>
	
	ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_PULL_UP|IOPORT_DIR_INPUT);
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	58 e1       	ldi	r21, 0x18	; 24
    357e:	60 e1       	ldi	r22, 0x10	; 16
    3580:	80 e4       	ldi	r24, 0x40	; 64
    3582:	96 e0       	ldi	r25, 0x06	; 6
    3584:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    3588:	43 e0       	ldi	r20, 0x03	; 3
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	60 e2       	ldi	r22, 0x20	; 32
    358e:	80 e4       	ldi	r24, 0x40	; 64
    3590:	96 e0       	ldi	r25, 0x06	; 6
    3592:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT);
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	60 e4       	ldi	r22, 0x40	; 64
    359c:	80 e4       	ldi	r24, 0x40	; 64
    359e:	96 e0       	ldi	r25, 0x06	; 6
    35a0:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH|IOPORT_DIR_OUTPUT);
    35a4:	43 e0       	ldi	r20, 0x03	; 3
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e8       	ldi	r22, 0x80	; 128
    35aa:	80 e4       	ldi	r24, 0x40	; 64
    35ac:	96 e0       	ldi	r25, 0x06	; 6
    35ae:	0e 94 6b 48 	call	0x90d6	; 0x90d6 <ioport_configure_port_pin>
	
}
    35b2:	00 00       	nop
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	08 95       	ret

000035ba <spi_init_module>:

void spi_init_module(void)
{
    35ba:	cf 92       	push	r12
    35bc:	df 92       	push	r13
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	1f 92       	push	r1
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
	spi_init_pins();
    35d0:	c9 df       	rcall	.-110    	; 0x3564 <spi_init_pins>
	struct spi_device  spi_device_cong = {
    35d2:	81 e1       	ldi	r24, 0x11	; 17
    35d4:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
		
	spi_master_init(&MS5607_SPI_PORT);
    35d6:	80 ec       	ldi	r24, 0xC0	; 192
    35d8:	98 e0       	ldi	r25, 0x08	; 8
    35da:	0e 94 42 03 	call	0x684	; 0x684 <spi_master_init>
	spi_master_setup_device(&MS5607_SPI_PORT, &spi_device_cong, SPI_MODE_0, 1000000,0);
    35de:	c1 2c       	mov	r12, r1
    35e0:	d1 2c       	mov	r13, r1
    35e2:	76 01       	movw	r14, r12
    35e4:	00 e4       	ldi	r16, 0x40	; 64
    35e6:	12 e4       	ldi	r17, 0x42	; 66
    35e8:	2f e0       	ldi	r18, 0x0F	; 15
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	ce 01       	movw	r24, r28
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	bc 01       	movw	r22, r24
    35f4:	80 ec       	ldi	r24, 0xC0	; 192
    35f6:	98 e0       	ldi	r25, 0x08	; 8
    35f8:	0e 94 77 03 	call	0x6ee	; 0x6ee <spi_master_setup_device>
	spi_enable(&MS5607_SPI_PORT);
    35fc:	80 ec       	ldi	r24, 0xC0	; 192
    35fe:	98 e0       	ldi	r25, 0x08	; 8
    3600:	99 df       	rcall	.-206    	; 0x3534 <spi_enable>
	spi_write_packet(&MS5607_SPI_PORT, "0x1e", 1); //reset
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	50 e0       	ldi	r21, 0x00	; 0
    3606:	62 ed       	ldi	r22, 0xD2	; 210
    3608:	70 e2       	ldi	r23, 0x20	; 32
    360a:	80 ec       	ldi	r24, 0xC0	; 192
    360c:	98 e0       	ldi	r25, 0x08	; 8
    360e:	0e 94 c5 03 	call	0x78a	; 0x78a <spi_write_packet>
	prom_read();
    3612:	16 d0       	rcall	.+44     	; 0x3640 <prom_read>
	
	printf("spi init");
    3614:	87 ed       	ldi	r24, 0xD7	; 215
    3616:	90 e2       	ldi	r25, 0x20	; 32
    3618:	89 2f       	mov	r24, r25
    361a:	8f 93       	push	r24
    361c:	87 ed       	ldi	r24, 0xD7	; 215
    361e:	90 e2       	ldi	r25, 0x20	; 32
    3620:	8f 93       	push	r24
    3622:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <printf>
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
}
    362a:	00 00       	nop
    362c:	0f 90       	pop	r0
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	0f 91       	pop	r16
    3636:	ff 90       	pop	r15
    3638:	ef 90       	pop	r14
    363a:	df 90       	pop	r13
    363c:	cf 90       	pop	r12
    363e:	08 95       	ret

00003640 <prom_read>:

void prom_read(void)
{
    3640:	2f 92       	push	r2
    3642:	3f 92       	push	r3
    3644:	4f 92       	push	r4
    3646:	5f 92       	push	r5
    3648:	6f 92       	push	r6
    364a:	7f 92       	push	r7
    364c:	8f 92       	push	r8
    364e:	9f 92       	push	r9
    3650:	af 92       	push	r10
    3652:	bf 92       	push	r11
    3654:	cf 92       	push	r12
    3656:	df 92       	push	r13
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	a4 97       	sbiw	r28, 0x24	; 36
    366a:	cd bf       	out	0x3d, r28	; 61
    366c:	de bf       	out	0x3e, r29	; 62
	struct spi_device  spi_device_cong = {
    366e:	81 e1       	ldi	r24, 0x11	; 17
    3670:	8a 83       	std	Y+2, r24	; 0x02
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    3672:	ce 01       	movw	r24, r28
    3674:	02 96       	adiw	r24, 0x02	; 2
    3676:	bc 01       	movw	r22, r24
    3678:	80 ec       	ldi	r24, 0xC0	; 192
    367a:	98 e0       	ldi	r25, 0x08	; 8
    367c:	0e 94 3a 04 	call	0x874	; 0x874 <spi_select_device>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
    3680:	86 e0       	ldi	r24, 0x06	; 6
    3682:	ed e1       	ldi	r30, 0x1D	; 29
    3684:	f0 e2       	ldi	r31, 0x20	; 32
    3686:	de 01       	movw	r26, r28
    3688:	13 96       	adiw	r26, 0x03	; 3
    368a:	01 90       	ld	r0, Z+
    368c:	0d 92       	st	X+, r0
    368e:	8a 95       	dec	r24
    3690:	e1 f7       	brne	.-8      	; 0x368a <prom_read+0x4a>
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    3692:	19 82       	std	Y+1, r1	; 0x01
    3694:	e5 c1       	rjmp	.+970    	; 0x3a60 <prom_read+0x420>
	{
		
		spi_write_packet(&MS5607_SPI_PORT, prom_commands_c[i], 1);
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	88 2f       	mov	r24, r24
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9e 01       	movw	r18, r28
    369e:	2d 5f       	subi	r18, 0xFD	; 253
    36a0:	3f 4f       	sbci	r19, 0xFF	; 255
    36a2:	82 0f       	add	r24, r18
    36a4:	93 1f       	adc	r25, r19
    36a6:	fc 01       	movw	r30, r24
    36a8:	80 81       	ld	r24, Z
    36aa:	88 2f       	mov	r24, r24
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	41 e0       	ldi	r20, 0x01	; 1
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	bc 01       	movw	r22, r24
    36b4:	80 ec       	ldi	r24, 0xC0	; 192
    36b6:	98 e0       	ldi	r25, 0x08	; 8
    36b8:	0e 94 c5 03 	call	0x78a	; 0x78a <spi_write_packet>
		delay_ms(25);
    36bc:	24 df       	rcall	.-440    	; 0x3506 <sysclk_get_cpu_hz>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	8c 01       	movw	r16, r24
    36c4:	9d 01       	movw	r18, r26
    36c6:	40 e0       	ldi	r20, 0x00	; 0
    36c8:	50 e0       	ldi	r21, 0x00	; 0
    36ca:	ba 01       	movw	r22, r20
    36cc:	0d 8b       	std	Y+21, r16	; 0x15
    36ce:	1e 8b       	std	Y+22, r17	; 0x16
    36d0:	2f 8b       	std	Y+23, r18	; 0x17
    36d2:	38 8f       	std	Y+24, r19	; 0x18
    36d4:	49 8f       	std	Y+25, r20	; 0x19
    36d6:	5a 8f       	std	Y+26, r21	; 0x1a
    36d8:	6b 8f       	std	Y+27, r22	; 0x1b
    36da:	7c 8f       	std	Y+28, r23	; 0x1c
    36dc:	2d 88       	ldd	r2, Y+21	; 0x15
    36de:	3e 88       	ldd	r3, Y+22	; 0x16
    36e0:	4f 88       	ldd	r4, Y+23	; 0x17
    36e2:	58 8c       	ldd	r5, Y+24	; 0x18
    36e4:	69 8c       	ldd	r6, Y+25	; 0x19
    36e6:	7a 8c       	ldd	r7, Y+26	; 0x1a
    36e8:	8b 8c       	ldd	r8, Y+27	; 0x1b
    36ea:	9c 8c       	ldd	r9, Y+28	; 0x1c
    36ec:	22 2d       	mov	r18, r2
    36ee:	33 2d       	mov	r19, r3
    36f0:	44 2d       	mov	r20, r4
    36f2:	55 2d       	mov	r21, r5
    36f4:	66 2d       	mov	r22, r6
    36f6:	77 2d       	mov	r23, r7
    36f8:	88 2d       	mov	r24, r8
    36fa:	99 2d       	mov	r25, r9
    36fc:	03 e0       	ldi	r16, 0x03	; 3
    36fe:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    3702:	a2 2e       	mov	r10, r18
    3704:	b3 2e       	mov	r11, r19
    3706:	c4 2e       	mov	r12, r20
    3708:	d5 2e       	mov	r13, r21
    370a:	e6 2e       	mov	r14, r22
    370c:	f7 2e       	mov	r15, r23
    370e:	08 2f       	mov	r16, r24
    3710:	19 2f       	mov	r17, r25
    3712:	2a 2c       	mov	r2, r10
    3714:	3b 2c       	mov	r3, r11
    3716:	4c 2c       	mov	r4, r12
    3718:	5d 2c       	mov	r5, r13
    371a:	6e 2c       	mov	r6, r14
    371c:	7f 2c       	mov	r7, r15
    371e:	80 2e       	mov	r8, r16
    3720:	91 2e       	mov	r9, r17
    3722:	22 2d       	mov	r18, r2
    3724:	33 2d       	mov	r19, r3
    3726:	44 2d       	mov	r20, r4
    3728:	55 2d       	mov	r21, r5
    372a:	66 2d       	mov	r22, r6
    372c:	77 2d       	mov	r23, r7
    372e:	88 2d       	mov	r24, r8
    3730:	99 2d       	mov	r25, r9
    3732:	02 e0       	ldi	r16, 0x02	; 2
    3734:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    3738:	a2 2e       	mov	r10, r18
    373a:	b3 2e       	mov	r11, r19
    373c:	c4 2e       	mov	r12, r20
    373e:	d5 2e       	mov	r13, r21
    3740:	e6 2e       	mov	r14, r22
    3742:	f7 2e       	mov	r15, r23
    3744:	08 2f       	mov	r16, r24
    3746:	19 2f       	mov	r17, r25
    3748:	2a 2d       	mov	r18, r10
    374a:	3b 2d       	mov	r19, r11
    374c:	4c 2d       	mov	r20, r12
    374e:	5d 2d       	mov	r21, r13
    3750:	6e 2d       	mov	r22, r14
    3752:	7f 2d       	mov	r23, r15
    3754:	80 2f       	mov	r24, r16
    3756:	91 2f       	mov	r25, r17
    3758:	a2 2c       	mov	r10, r2
    375a:	b3 2c       	mov	r11, r3
    375c:	c4 2c       	mov	r12, r4
    375e:	d5 2c       	mov	r13, r5
    3760:	e6 2c       	mov	r14, r6
    3762:	f7 2c       	mov	r15, r7
    3764:	08 2d       	mov	r16, r8
    3766:	19 2d       	mov	r17, r9
    3768:	0e 94 34 5a 	call	0xb468	; 0xb468 <__subdi3>
    376c:	a2 2e       	mov	r10, r18
    376e:	b3 2e       	mov	r11, r19
    3770:	c4 2e       	mov	r12, r20
    3772:	d5 2e       	mov	r13, r21
    3774:	e6 2e       	mov	r14, r22
    3776:	f7 2e       	mov	r15, r23
    3778:	08 2f       	mov	r16, r24
    377a:	19 2f       	mov	r17, r25
    377c:	2a 2d       	mov	r18, r10
    377e:	3b 2d       	mov	r19, r11
    3780:	4c 2d       	mov	r20, r12
    3782:	5d 2d       	mov	r21, r13
    3784:	6e 2d       	mov	r22, r14
    3786:	7f 2d       	mov	r23, r15
    3788:	80 2f       	mov	r24, r16
    378a:	91 2f       	mov	r25, r17
    378c:	ad 88       	ldd	r10, Y+21	; 0x15
    378e:	be 88       	ldd	r11, Y+22	; 0x16
    3790:	cf 88       	ldd	r12, Y+23	; 0x17
    3792:	d8 8c       	ldd	r13, Y+24	; 0x18
    3794:	e9 8c       	ldd	r14, Y+25	; 0x19
    3796:	fa 8c       	ldd	r15, Y+26	; 0x1a
    3798:	0b 8d       	ldd	r16, Y+27	; 0x1b
    379a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    379c:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <__adddi3>
    37a0:	22 2e       	mov	r2, r18
    37a2:	33 2e       	mov	r3, r19
    37a4:	44 2e       	mov	r4, r20
    37a6:	55 2e       	mov	r5, r21
    37a8:	66 2e       	mov	r6, r22
    37aa:	77 2e       	mov	r7, r23
    37ac:	88 2e       	mov	r8, r24
    37ae:	99 2e       	mov	r9, r25
    37b0:	0f 2e       	mov	r0, r31
    37b2:	f6 e0       	ldi	r31, 0x06	; 6
    37b4:	af 2e       	mov	r10, r31
    37b6:	f0 2d       	mov	r31, r0
    37b8:	b1 2c       	mov	r11, r1
    37ba:	c1 2c       	mov	r12, r1
    37bc:	d1 2c       	mov	r13, r1
    37be:	e1 2c       	mov	r14, r1
    37c0:	f1 2c       	mov	r15, r1
    37c2:	00 e0       	ldi	r16, 0x00	; 0
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	22 2d       	mov	r18, r2
    37c8:	33 2d       	mov	r19, r3
    37ca:	44 2d       	mov	r20, r4
    37cc:	55 2d       	mov	r21, r5
    37ce:	66 2d       	mov	r22, r6
    37d0:	77 2d       	mov	r23, r7
    37d2:	88 2d       	mov	r24, r8
    37d4:	99 2d       	mov	r25, r9
    37d6:	0e 94 8c 59 	call	0xb318	; 0xb318 <__udivdi3>
    37da:	22 2e       	mov	r2, r18
    37dc:	33 2e       	mov	r3, r19
    37de:	44 2e       	mov	r4, r20
    37e0:	55 2e       	mov	r5, r21
    37e2:	66 2e       	mov	r6, r22
    37e4:	77 2e       	mov	r7, r23
    37e6:	88 2e       	mov	r8, r24
    37e8:	99 2e       	mov	r9, r25
    37ea:	a2 2c       	mov	r10, r2
    37ec:	b3 2c       	mov	r11, r3
    37ee:	c4 2c       	mov	r12, r4
    37f0:	d5 2c       	mov	r13, r5
    37f2:	e6 2c       	mov	r14, r6
    37f4:	f7 2c       	mov	r15, r7
    37f6:	08 2d       	mov	r16, r8
    37f8:	19 2d       	mov	r17, r9
    37fa:	2a 2d       	mov	r18, r10
    37fc:	3b 2d       	mov	r19, r11
    37fe:	4c 2d       	mov	r20, r12
    3800:	5d 2d       	mov	r21, r13
    3802:	6e 2d       	mov	r22, r14
    3804:	7f 2d       	mov	r23, r15
    3806:	80 2f       	mov	r24, r16
    3808:	91 2f       	mov	r25, r17
    380a:	29 51       	subi	r18, 0x19	; 25
    380c:	3c 4f       	sbci	r19, 0xFC	; 252
    380e:	4f 4f       	sbci	r20, 0xFF	; 255
    3810:	5f 4f       	sbci	r21, 0xFF	; 255
    3812:	6f 4f       	sbci	r22, 0xFF	; 255
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	8f 4f       	sbci	r24, 0xFF	; 255
    3818:	9f 4f       	sbci	r25, 0xFF	; 255
    381a:	a2 2e       	mov	r10, r18
    381c:	b3 2e       	mov	r11, r19
    381e:	c4 2e       	mov	r12, r20
    3820:	d5 2e       	mov	r13, r21
    3822:	e6 2e       	mov	r14, r22
    3824:	f7 2e       	mov	r15, r23
    3826:	08 2f       	mov	r16, r24
    3828:	19 2f       	mov	r17, r25
    382a:	2a 2d       	mov	r18, r10
    382c:	3b 2d       	mov	r19, r11
    382e:	4c 2d       	mov	r20, r12
    3830:	5d 2d       	mov	r21, r13
    3832:	6e 2d       	mov	r22, r14
    3834:	7f 2d       	mov	r23, r15
    3836:	80 2f       	mov	r24, r16
    3838:	91 2f       	mov	r25, r17
    383a:	0e 94 c5 53 	call	0xa78a	; 0xa78a <__floatundisf>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	4a e7       	ldi	r20, 0x7A	; 122
    3848:	54 e4       	ldi	r21, 0x44	; 68
    384a:	bc 01       	movw	r22, r24
    384c:	cd 01       	movw	r24, r26
    384e:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	bc 01       	movw	r22, r24
    3858:	cd 01       	movw	r24, r26
    385a:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixunssfdi>
    385e:	a2 2e       	mov	r10, r18
    3860:	b3 2e       	mov	r11, r19
    3862:	c4 2e       	mov	r12, r20
    3864:	d5 2e       	mov	r13, r21
    3866:	e6 2e       	mov	r14, r22
    3868:	f7 2e       	mov	r15, r23
    386a:	08 2f       	mov	r16, r24
    386c:	19 2f       	mov	r17, r25
    386e:	d6 01       	movw	r26, r12
    3870:	c5 01       	movw	r24, r10
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	53 de       	rcall	.-858    	; 0x351e <__portable_avr_delay_cycles>
		spi_read_packet(&MS5607_SPI_PORT, prom_c_read_buffer[i], 2);
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	88 2f       	mov	r24, r24
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	9e 01       	movw	r18, r28
    3880:	27 5f       	subi	r18, 0xF7	; 247
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	82 0f       	add	r24, r18
    3886:	93 1f       	adc	r25, r19
    3888:	fc 01       	movw	r30, r24
    388a:	80 81       	ld	r24, Z
    388c:	88 2f       	mov	r24, r24
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	42 e0       	ldi	r20, 0x02	; 2
    3892:	50 e0       	ldi	r21, 0x00	; 0
    3894:	bc 01       	movw	r22, r24
    3896:	80 ec       	ldi	r24, 0xC0	; 192
    3898:	98 e0       	ldi	r25, 0x08	; 8
    389a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_read_packet>
		delay_ms(25);
    389e:	33 de       	rcall	.-922    	; 0x3506 <sysclk_get_cpu_hz>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	8c 01       	movw	r16, r24
    38a6:	9d 01       	movw	r18, r26
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	ba 01       	movw	r22, r20
    38ae:	0d 8f       	std	Y+29, r16	; 0x1d
    38b0:	1e 8f       	std	Y+30, r17	; 0x1e
    38b2:	2f 8f       	std	Y+31, r18	; 0x1f
    38b4:	38 a3       	std	Y+32, r19	; 0x20
    38b6:	49 a3       	std	Y+33, r20	; 0x21
    38b8:	5a a3       	std	Y+34, r21	; 0x22
    38ba:	6b a3       	std	Y+35, r22	; 0x23
    38bc:	7c a3       	std	Y+36, r23	; 0x24
    38be:	2d 8c       	ldd	r2, Y+29	; 0x1d
    38c0:	3e 8c       	ldd	r3, Y+30	; 0x1e
    38c2:	4f 8c       	ldd	r4, Y+31	; 0x1f
    38c4:	58 a0       	ldd	r5, Y+32	; 0x20
    38c6:	69 a0       	ldd	r6, Y+33	; 0x21
    38c8:	7a a0       	ldd	r7, Y+34	; 0x22
    38ca:	8b a0       	ldd	r8, Y+35	; 0x23
    38cc:	9c a0       	ldd	r9, Y+36	; 0x24
    38ce:	22 2d       	mov	r18, r2
    38d0:	33 2d       	mov	r19, r3
    38d2:	44 2d       	mov	r20, r4
    38d4:	55 2d       	mov	r21, r5
    38d6:	66 2d       	mov	r22, r6
    38d8:	77 2d       	mov	r23, r7
    38da:	88 2d       	mov	r24, r8
    38dc:	99 2d       	mov	r25, r9
    38de:	03 e0       	ldi	r16, 0x03	; 3
    38e0:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    38e4:	a2 2e       	mov	r10, r18
    38e6:	b3 2e       	mov	r11, r19
    38e8:	c4 2e       	mov	r12, r20
    38ea:	d5 2e       	mov	r13, r21
    38ec:	e6 2e       	mov	r14, r22
    38ee:	f7 2e       	mov	r15, r23
    38f0:	08 2f       	mov	r16, r24
    38f2:	19 2f       	mov	r17, r25
    38f4:	2a 2c       	mov	r2, r10
    38f6:	3b 2c       	mov	r3, r11
    38f8:	4c 2c       	mov	r4, r12
    38fa:	5d 2c       	mov	r5, r13
    38fc:	6e 2c       	mov	r6, r14
    38fe:	7f 2c       	mov	r7, r15
    3900:	80 2e       	mov	r8, r16
    3902:	91 2e       	mov	r9, r17
    3904:	22 2d       	mov	r18, r2
    3906:	33 2d       	mov	r19, r3
    3908:	44 2d       	mov	r20, r4
    390a:	55 2d       	mov	r21, r5
    390c:	66 2d       	mov	r22, r6
    390e:	77 2d       	mov	r23, r7
    3910:	88 2d       	mov	r24, r8
    3912:	99 2d       	mov	r25, r9
    3914:	02 e0       	ldi	r16, 0x02	; 2
    3916:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    391a:	a2 2e       	mov	r10, r18
    391c:	b3 2e       	mov	r11, r19
    391e:	c4 2e       	mov	r12, r20
    3920:	d5 2e       	mov	r13, r21
    3922:	e6 2e       	mov	r14, r22
    3924:	f7 2e       	mov	r15, r23
    3926:	08 2f       	mov	r16, r24
    3928:	19 2f       	mov	r17, r25
    392a:	2a 2d       	mov	r18, r10
    392c:	3b 2d       	mov	r19, r11
    392e:	4c 2d       	mov	r20, r12
    3930:	5d 2d       	mov	r21, r13
    3932:	6e 2d       	mov	r22, r14
    3934:	7f 2d       	mov	r23, r15
    3936:	80 2f       	mov	r24, r16
    3938:	91 2f       	mov	r25, r17
    393a:	a2 2c       	mov	r10, r2
    393c:	b3 2c       	mov	r11, r3
    393e:	c4 2c       	mov	r12, r4
    3940:	d5 2c       	mov	r13, r5
    3942:	e6 2c       	mov	r14, r6
    3944:	f7 2c       	mov	r15, r7
    3946:	08 2d       	mov	r16, r8
    3948:	19 2d       	mov	r17, r9
    394a:	0e 94 34 5a 	call	0xb468	; 0xb468 <__subdi3>
    394e:	a2 2e       	mov	r10, r18
    3950:	b3 2e       	mov	r11, r19
    3952:	c4 2e       	mov	r12, r20
    3954:	d5 2e       	mov	r13, r21
    3956:	e6 2e       	mov	r14, r22
    3958:	f7 2e       	mov	r15, r23
    395a:	08 2f       	mov	r16, r24
    395c:	19 2f       	mov	r17, r25
    395e:	2a 2d       	mov	r18, r10
    3960:	3b 2d       	mov	r19, r11
    3962:	4c 2d       	mov	r20, r12
    3964:	5d 2d       	mov	r21, r13
    3966:	6e 2d       	mov	r22, r14
    3968:	7f 2d       	mov	r23, r15
    396a:	80 2f       	mov	r24, r16
    396c:	91 2f       	mov	r25, r17
    396e:	ad 8c       	ldd	r10, Y+29	; 0x1d
    3970:	be 8c       	ldd	r11, Y+30	; 0x1e
    3972:	cf 8c       	ldd	r12, Y+31	; 0x1f
    3974:	d8 a0       	ldd	r13, Y+32	; 0x20
    3976:	e9 a0       	ldd	r14, Y+33	; 0x21
    3978:	fa a0       	ldd	r15, Y+34	; 0x22
    397a:	0b a1       	ldd	r16, Y+35	; 0x23
    397c:	1c a1       	ldd	r17, Y+36	; 0x24
    397e:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <__adddi3>
    3982:	22 2e       	mov	r2, r18
    3984:	33 2e       	mov	r3, r19
    3986:	44 2e       	mov	r4, r20
    3988:	55 2e       	mov	r5, r21
    398a:	66 2e       	mov	r6, r22
    398c:	77 2e       	mov	r7, r23
    398e:	88 2e       	mov	r8, r24
    3990:	99 2e       	mov	r9, r25
    3992:	0f 2e       	mov	r0, r31
    3994:	f6 e0       	ldi	r31, 0x06	; 6
    3996:	af 2e       	mov	r10, r31
    3998:	f0 2d       	mov	r31, r0
    399a:	b1 2c       	mov	r11, r1
    399c:	c1 2c       	mov	r12, r1
    399e:	d1 2c       	mov	r13, r1
    39a0:	e1 2c       	mov	r14, r1
    39a2:	f1 2c       	mov	r15, r1
    39a4:	00 e0       	ldi	r16, 0x00	; 0
    39a6:	10 e0       	ldi	r17, 0x00	; 0
    39a8:	22 2d       	mov	r18, r2
    39aa:	33 2d       	mov	r19, r3
    39ac:	44 2d       	mov	r20, r4
    39ae:	55 2d       	mov	r21, r5
    39b0:	66 2d       	mov	r22, r6
    39b2:	77 2d       	mov	r23, r7
    39b4:	88 2d       	mov	r24, r8
    39b6:	99 2d       	mov	r25, r9
    39b8:	0e 94 8c 59 	call	0xb318	; 0xb318 <__udivdi3>
    39bc:	22 2e       	mov	r2, r18
    39be:	33 2e       	mov	r3, r19
    39c0:	44 2e       	mov	r4, r20
    39c2:	55 2e       	mov	r5, r21
    39c4:	66 2e       	mov	r6, r22
    39c6:	77 2e       	mov	r7, r23
    39c8:	88 2e       	mov	r8, r24
    39ca:	99 2e       	mov	r9, r25
    39cc:	a2 2c       	mov	r10, r2
    39ce:	b3 2c       	mov	r11, r3
    39d0:	c4 2c       	mov	r12, r4
    39d2:	d5 2c       	mov	r13, r5
    39d4:	e6 2c       	mov	r14, r6
    39d6:	f7 2c       	mov	r15, r7
    39d8:	08 2d       	mov	r16, r8
    39da:	19 2d       	mov	r17, r9
    39dc:	2a 2d       	mov	r18, r10
    39de:	3b 2d       	mov	r19, r11
    39e0:	4c 2d       	mov	r20, r12
    39e2:	5d 2d       	mov	r21, r13
    39e4:	6e 2d       	mov	r22, r14
    39e6:	7f 2d       	mov	r23, r15
    39e8:	80 2f       	mov	r24, r16
    39ea:	91 2f       	mov	r25, r17
    39ec:	29 51       	subi	r18, 0x19	; 25
    39ee:	3c 4f       	sbci	r19, 0xFC	; 252
    39f0:	4f 4f       	sbci	r20, 0xFF	; 255
    39f2:	5f 4f       	sbci	r21, 0xFF	; 255
    39f4:	6f 4f       	sbci	r22, 0xFF	; 255
    39f6:	7f 4f       	sbci	r23, 0xFF	; 255
    39f8:	8f 4f       	sbci	r24, 0xFF	; 255
    39fa:	9f 4f       	sbci	r25, 0xFF	; 255
    39fc:	a2 2e       	mov	r10, r18
    39fe:	b3 2e       	mov	r11, r19
    3a00:	c4 2e       	mov	r12, r20
    3a02:	d5 2e       	mov	r13, r21
    3a04:	e6 2e       	mov	r14, r22
    3a06:	f7 2e       	mov	r15, r23
    3a08:	08 2f       	mov	r16, r24
    3a0a:	19 2f       	mov	r17, r25
    3a0c:	2a 2d       	mov	r18, r10
    3a0e:	3b 2d       	mov	r19, r11
    3a10:	4c 2d       	mov	r20, r12
    3a12:	5d 2d       	mov	r21, r13
    3a14:	6e 2d       	mov	r22, r14
    3a16:	7f 2d       	mov	r23, r15
    3a18:	80 2f       	mov	r24, r16
    3a1a:	91 2f       	mov	r25, r17
    3a1c:	0e 94 c5 53 	call	0xa78a	; 0xa78a <__floatundisf>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	4a e7       	ldi	r20, 0x7A	; 122
    3a2a:	54 e4       	ldi	r21, 0x44	; 68
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	cd 01       	movw	r24, r26
    3a30:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	bc 01       	movw	r22, r24
    3a3a:	cd 01       	movw	r24, r26
    3a3c:	0e 94 22 53 	call	0xa644	; 0xa644 <__fixunssfdi>
    3a40:	a2 2e       	mov	r10, r18
    3a42:	b3 2e       	mov	r11, r19
    3a44:	c4 2e       	mov	r12, r20
    3a46:	d5 2e       	mov	r13, r21
    3a48:	e6 2e       	mov	r14, r22
    3a4a:	f7 2e       	mov	r15, r23
    3a4c:	08 2f       	mov	r16, r24
    3a4e:	19 2f       	mov	r17, r25
    3a50:	d6 01       	movw	r26, r12
    3a52:	c5 01       	movw	r24, r10
    3a54:	bc 01       	movw	r22, r24
    3a56:	cd 01       	movw	r24, r26
    3a58:	62 dd       	rcall	.-1340   	; 0x351e <__portable_avr_delay_cycles>
	
	uint8_t prom_commands_c [6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
	uint8_t prom_c_read_buffer [12];

	
	for(uint8_t i = 0; i <= sizeof(prom_commands_c); i++)
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	8f 5f       	subi	r24, 0xFF	; 255
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	87 30       	cpi	r24, 0x07	; 7
    3a64:	08 f4       	brcc	.+2      	; 0x3a68 <prom_read+0x428>
    3a66:	17 ce       	rjmp	.-978    	; 0x3696 <prom_read+0x56>
		
	}

	
	
	C1 = prom_c_read_buffer[0]<<8 |prom_c_read_buffer[1];
    3a68:	89 85       	ldd	r24, Y+9	; 0x09
    3a6a:	88 2f       	mov	r24, r24
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	38 2f       	mov	r19, r24
    3a70:	22 27       	eor	r18, r18
    3a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	82 2b       	or	r24, r18
    3a7a:	93 2b       	or	r25, r19
    3a7c:	80 93 ba 27 	sts	0x27BA, r24	; 0x8027ba <C1>
    3a80:	90 93 bb 27 	sts	0x27BB, r25	; 0x8027bb <C1+0x1>
	C2 = prom_c_read_buffer[2]<<8 |prom_c_read_buffer[3];
    3a84:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a86:	88 2f       	mov	r24, r24
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	38 2f       	mov	r19, r24
    3a8c:	22 27       	eor	r18, r18
    3a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a90:	88 2f       	mov	r24, r24
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	82 2b       	or	r24, r18
    3a96:	93 2b       	or	r25, r19
    3a98:	80 93 be 27 	sts	0x27BE, r24	; 0x8027be <C2>
    3a9c:	90 93 bf 27 	sts	0x27BF, r25	; 0x8027bf <C2+0x1>
	C3 = prom_c_read_buffer[4]<<8 |prom_c_read_buffer[5];
    3aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa2:	88 2f       	mov	r24, r24
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	38 2f       	mov	r19, r24
    3aa8:	22 27       	eor	r18, r18
    3aaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3aac:	88 2f       	mov	r24, r24
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	82 2b       	or	r24, r18
    3ab2:	93 2b       	or	r25, r19
    3ab4:	80 93 bc 27 	sts	0x27BC, r24	; 0x8027bc <C3>
    3ab8:	90 93 bd 27 	sts	0x27BD, r25	; 0x8027bd <C3+0x1>
	C4 = prom_c_read_buffer[6]<<8 |prom_c_read_buffer[7];
    3abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	38 2f       	mov	r19, r24
    3ac4:	22 27       	eor	r18, r18
    3ac6:	88 89       	ldd	r24, Y+16	; 0x10
    3ac8:	88 2f       	mov	r24, r24
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	82 2b       	or	r24, r18
    3ace:	93 2b       	or	r25, r19
    3ad0:	80 93 ce 27 	sts	0x27CE, r24	; 0x8027ce <C4>
    3ad4:	90 93 cf 27 	sts	0x27CF, r25	; 0x8027cf <C4+0x1>
	C5 = prom_c_read_buffer[8]<<8 |prom_c_read_buffer[9];
    3ad8:	89 89       	ldd	r24, Y+17	; 0x11
    3ada:	88 2f       	mov	r24, r24
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	38 2f       	mov	r19, r24
    3ae0:	22 27       	eor	r18, r18
    3ae2:	8a 89       	ldd	r24, Y+18	; 0x12
    3ae4:	88 2f       	mov	r24, r24
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	82 2b       	or	r24, r18
    3aea:	93 2b       	or	r25, r19
    3aec:	80 93 cc 27 	sts	0x27CC, r24	; 0x8027cc <C5>
    3af0:	90 93 cd 27 	sts	0x27CD, r25	; 0x8027cd <C5+0x1>
	C6 = prom_c_read_buffer[10]<<8 |prom_c_read_buffer[11];
    3af4:	8b 89       	ldd	r24, Y+19	; 0x13
    3af6:	88 2f       	mov	r24, r24
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	38 2f       	mov	r19, r24
    3afc:	22 27       	eor	r18, r18
    3afe:	8c 89       	ldd	r24, Y+20	; 0x14
    3b00:	88 2f       	mov	r24, r24
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	82 2b       	or	r24, r18
    3b06:	93 2b       	or	r25, r19
    3b08:	80 93 c0 27 	sts	0x27C0, r24	; 0x8027c0 <C6>
    3b0c:	90 93 c1 27 	sts	0x27C1, r25	; 0x8027c1 <C6+0x1>
	
	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    3b10:	ce 01       	movw	r24, r28
    3b12:	02 96       	adiw	r24, 0x02	; 2
    3b14:	bc 01       	movw	r22, r24
    3b16:	80 ec       	ldi	r24, 0xC0	; 192
    3b18:	98 e0       	ldi	r25, 0x08	; 8
    3b1a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_deselect_device>
	

	
}
    3b1e:	00 00       	nop
    3b20:	a4 96       	adiw	r28, 0x24	; 36
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	ff 90       	pop	r15
    3b30:	ef 90       	pop	r14
    3b32:	df 90       	pop	r13
    3b34:	cf 90       	pop	r12
    3b36:	bf 90       	pop	r11
    3b38:	af 90       	pop	r10
    3b3a:	9f 90       	pop	r9
    3b3c:	8f 90       	pop	r8
    3b3e:	7f 90       	pop	r7
    3b40:	6f 90       	pop	r6
    3b42:	5f 90       	pop	r5
    3b44:	4f 90       	pop	r4
    3b46:	3f 90       	pop	r3
    3b48:	2f 90       	pop	r2
    3b4a:	08 95       	ret

00003b4c <getPressure>:

int32_t getPressure(void)
{
    3b4c:	2f 92       	push	r2
    3b4e:	3f 92       	push	r3
    3b50:	4f 92       	push	r4
    3b52:	5f 92       	push	r5
    3b54:	6f 92       	push	r6
    3b56:	7f 92       	push	r7
    3b58:	8f 92       	push	r8
    3b5a:	9f 92       	push	r9
    3b5c:	af 92       	push	r10
    3b5e:	bf 92       	push	r11
    3b60:	cf 92       	push	r12
    3b62:	df 92       	push	r13
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	c2 54       	subi	r28, 0x42	; 66
    3b76:	d1 09       	sbc	r29, r1
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	de bf       	out	0x3e, r29	; 62

	struct spi_device  spi_device_cong = {
    3b7c:	81 e1       	ldi	r24, 0x11	; 17
    3b7e:	8a a3       	std	Y+34, r24	; 0x22
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);
    3b80:	ce 01       	movw	r24, r28
    3b82:	82 96       	adiw	r24, 0x22	; 34
    3b84:	bc 01       	movw	r22, r24
    3b86:	80 ec       	ldi	r24, 0xC0	; 192
    3b88:	98 e0       	ldi	r25, 0x08	; 8
    3b8a:	0e 94 3a 04 	call	0x874	; 0x874 <spi_select_device>

	for(uint8_t i = 0; i < sizeof(commands); i++)
    3b8e:	19 82       	std	Y+1, r1	; 0x01
    3b90:	23 c0       	rjmp	.+70     	; 0x3bd8 <getPressure+0x8c>
	{
		spi_write_packet(&MS5607_SPI_PORT, commands[i], 1);
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	88 2f       	mov	r24, r24
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	8a 5f       	subi	r24, 0xFA	; 250
    3b9a:	9f 4d       	sbci	r25, 0xDF	; 223
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 2f       	mov	r24, r24
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	41 e0       	ldi	r20, 0x01	; 1
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	bc 01       	movw	r22, r24
    3baa:	80 ec       	ldi	r24, 0xC0	; 192
    3bac:	98 e0       	ldi	r25, 0x08	; 8
    3bae:	0e 94 c5 03 	call	0x78a	; 0x78a <spi_write_packet>
		spi_read_packet(&MS5607_SPI_PORT, read_buffer[i], 3);
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	88 2f       	mov	r24, r24
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	8a 53       	subi	r24, 0x3A	; 58
    3bba:	98 4d       	sbci	r25, 0xD8	; 216
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	80 81       	ld	r24, Z
    3bc0:	88 2f       	mov	r24, r24
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	43 e0       	ldi	r20, 0x03	; 3
    3bc6:	50 e0       	ldi	r21, 0x00	; 0
    3bc8:	bc 01       	movw	r22, r24
    3bca:	80 ec       	ldi	r24, 0xC0	; 192
    3bcc:	98 e0       	ldi	r25, 0x08	; 8
    3bce:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_read_packet>
		.id = IOPORT_CREATE_PIN(PORTC,1)
	};
	
	spi_select_device(&MS5607_SPI_PORT, &spi_device_cong);

	for(uint8_t i = 0; i < sizeof(commands); i++)
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	8f 5f       	subi	r24, 0xFF	; 255
    3bd6:	89 83       	std	Y+1, r24	; 0x01
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	82 30       	cpi	r24, 0x02	; 2
    3bdc:	d0 f2       	brcs	.-76     	; 0x3b92 <getPressure+0x46>
		
	}
	
	

	spi_deselect_device(&MS5607_SPI_PORT, &spi_device_cong);
    3bde:	ce 01       	movw	r24, r28
    3be0:	82 96       	adiw	r24, 0x22	; 34
    3be2:	bc 01       	movw	r22, r24
    3be4:	80 ec       	ldi	r24, 0xC0	; 192
    3be6:	98 e0       	ldi	r25, 0x08	; 8
    3be8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <spi_deselect_device>
	uint32_t pressure_val = (uint32_t) read_buffer[0]<<16| read_buffer[1]<<8 |read_buffer[2];
    3bec:	80 91 c6 27 	lds	r24, 0x27C6	; 0x8027c6 <read_buffer>
    3bf0:	88 2f       	mov	r24, r24
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a0 e0       	ldi	r26, 0x00	; 0
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	ac 01       	movw	r20, r24
    3bfa:	33 27       	eor	r19, r19
    3bfc:	22 27       	eor	r18, r18
    3bfe:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <read_buffer+0x1>
    3c02:	88 2f       	mov	r24, r24
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	98 2f       	mov	r25, r24
    3c08:	88 27       	eor	r24, r24
    3c0a:	09 2e       	mov	r0, r25
    3c0c:	00 0c       	add	r0, r0
    3c0e:	aa 0b       	sbc	r26, r26
    3c10:	bb 0b       	sbc	r27, r27
    3c12:	28 2b       	or	r18, r24
    3c14:	39 2b       	or	r19, r25
    3c16:	4a 2b       	or	r20, r26
    3c18:	5b 2b       	or	r21, r27
    3c1a:	80 91 c8 27 	lds	r24, 0x27C8	; 0x8027c8 <read_buffer+0x2>
    3c1e:	88 2f       	mov	r24, r24
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	a0 e0       	ldi	r26, 0x00	; 0
    3c24:	b0 e0       	ldi	r27, 0x00	; 0
    3c26:	82 2b       	or	r24, r18
    3c28:	93 2b       	or	r25, r19
    3c2a:	a4 2b       	or	r26, r20
    3c2c:	b5 2b       	or	r27, r21
    3c2e:	8a 83       	std	Y+2, r24	; 0x02
    3c30:	9b 83       	std	Y+3, r25	; 0x03
    3c32:	ac 83       	std	Y+4, r26	; 0x04
    3c34:	bd 83       	std	Y+5, r27	; 0x05
	printf("%u\n",pressure_val);
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	8f 93       	push	r24
    3c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3c:	8f 93       	push	r24
    3c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c40:	8f 93       	push	r24
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	8f 93       	push	r24
    3c46:	89 eb       	ldi	r24, 0xB9	; 185
    3c48:	90 e2       	ldi	r25, 0x20	; 32
    3c4a:	89 2f       	mov	r24, r25
    3c4c:	8f 93       	push	r24
    3c4e:	89 eb       	ldi	r24, 0xB9	; 185
    3c50:	90 e2       	ldi	r25, 0x20	; 32
    3c52:	8f 93       	push	r24
    3c54:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <printf>
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
	
	D1 = (uint32_t) read_buffer[0]<<16| read_buffer[1]<<8 |read_buffer[2];
    3c64:	80 91 c6 27 	lds	r24, 0x27C6	; 0x8027c6 <read_buffer>
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	a0 e0       	ldi	r26, 0x00	; 0
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	ac 01       	movw	r20, r24
    3c72:	33 27       	eor	r19, r19
    3c74:	22 27       	eor	r18, r18
    3c76:	80 91 c7 27 	lds	r24, 0x27C7	; 0x8027c7 <read_buffer+0x1>
    3c7a:	88 2f       	mov	r24, r24
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	98 2f       	mov	r25, r24
    3c80:	88 27       	eor	r24, r24
    3c82:	09 2e       	mov	r0, r25
    3c84:	00 0c       	add	r0, r0
    3c86:	aa 0b       	sbc	r26, r26
    3c88:	bb 0b       	sbc	r27, r27
    3c8a:	28 2b       	or	r18, r24
    3c8c:	39 2b       	or	r19, r25
    3c8e:	4a 2b       	or	r20, r26
    3c90:	5b 2b       	or	r21, r27
    3c92:	80 91 c8 27 	lds	r24, 0x27C8	; 0x8027c8 <read_buffer+0x2>
    3c96:	88 2f       	mov	r24, r24
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	a0 e0       	ldi	r26, 0x00	; 0
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	82 2b       	or	r24, r18
    3ca0:	93 2b       	or	r25, r19
    3ca2:	a4 2b       	or	r26, r20
    3ca4:	b5 2b       	or	r27, r21
    3ca6:	80 93 d0 27 	sts	0x27D0, r24	; 0x8027d0 <D1>
    3caa:	90 93 d1 27 	sts	0x27D1, r25	; 0x8027d1 <D1+0x1>
    3cae:	a0 93 d2 27 	sts	0x27D2, r26	; 0x8027d2 <D1+0x2>
    3cb2:	b0 93 d3 27 	sts	0x27D3, r27	; 0x8027d3 <D1+0x3>
	D2 = (uint32_t)  read_buffer[3]<<16| read_buffer[4]<<8 |read_buffer[5];
    3cb6:	80 91 c9 27 	lds	r24, 0x27C9	; 0x8027c9 <read_buffer+0x3>
    3cba:	88 2f       	mov	r24, r24
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	a0 e0       	ldi	r26, 0x00	; 0
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	ac 01       	movw	r20, r24
    3cc4:	33 27       	eor	r19, r19
    3cc6:	22 27       	eor	r18, r18
    3cc8:	80 91 ca 27 	lds	r24, 0x27CA	; 0x8027ca <read_buffer+0x4>
    3ccc:	88 2f       	mov	r24, r24
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	98 2f       	mov	r25, r24
    3cd2:	88 27       	eor	r24, r24
    3cd4:	09 2e       	mov	r0, r25
    3cd6:	00 0c       	add	r0, r0
    3cd8:	aa 0b       	sbc	r26, r26
    3cda:	bb 0b       	sbc	r27, r27
    3cdc:	28 2b       	or	r18, r24
    3cde:	39 2b       	or	r19, r25
    3ce0:	4a 2b       	or	r20, r26
    3ce2:	5b 2b       	or	r21, r27
    3ce4:	80 91 cb 27 	lds	r24, 0x27CB	; 0x8027cb <read_buffer+0x5>
    3ce8:	88 2f       	mov	r24, r24
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	a0 e0       	ldi	r26, 0x00	; 0
    3cee:	b0 e0       	ldi	r27, 0x00	; 0
    3cf0:	82 2b       	or	r24, r18
    3cf2:	93 2b       	or	r25, r19
    3cf4:	a4 2b       	or	r26, r20
    3cf6:	b5 2b       	or	r27, r21
    3cf8:	80 93 c2 27 	sts	0x27C2, r24	; 0x8027c2 <D2>
    3cfc:	90 93 c3 27 	sts	0x27C3, r25	; 0x8027c3 <D2+0x1>
    3d00:	a0 93 c4 27 	sts	0x27C4, r26	; 0x8027c4 <D2+0x2>
    3d04:	b0 93 c5 27 	sts	0x27C5, r27	; 0x8027c5 <D2+0x3>
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
    3d08:	20 91 c2 27 	lds	r18, 0x27C2	; 0x8027c2 <D2>
    3d0c:	30 91 c3 27 	lds	r19, 0x27C3	; 0x8027c3 <D2+0x1>
    3d10:	40 91 c4 27 	lds	r20, 0x27C4	; 0x8027c4 <D2+0x2>
    3d14:	50 91 c5 27 	lds	r21, 0x27C5	; 0x8027c5 <D2+0x3>
    3d18:	80 91 cc 27 	lds	r24, 0x27CC	; 0x8027cc <C5>
    3d1c:	90 91 cd 27 	lds	r25, 0x27CD	; 0x8027cd <C5+0x1>
    3d20:	cc 01       	movw	r24, r24
    3d22:	a0 e0       	ldi	r26, 0x00	; 0
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	ba 2f       	mov	r27, r26
    3d28:	a9 2f       	mov	r26, r25
    3d2a:	98 2f       	mov	r25, r24
    3d2c:	88 27       	eor	r24, r24
    3d2e:	79 01       	movw	r14, r18
    3d30:	8a 01       	movw	r16, r20
    3d32:	e8 1a       	sub	r14, r24
    3d34:	f9 0a       	sbc	r15, r25
    3d36:	0a 0b       	sbc	r16, r26
    3d38:	1b 0b       	sbc	r17, r27
    3d3a:	d8 01       	movw	r26, r16
    3d3c:	c7 01       	movw	r24, r14
    3d3e:	8e 83       	std	Y+6, r24	; 0x06
    3d40:	9f 83       	std	Y+7, r25	; 0x07
    3d42:	a8 87       	std	Y+8, r26	; 0x08
    3d44:	b9 87       	std	Y+9, r27	; 0x09
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
    3d46:	8e 81       	ldd	r24, Y+6	; 0x06
    3d48:	9f 81       	ldd	r25, Y+7	; 0x07
    3d4a:	a8 85       	ldd	r26, Y+8	; 0x08
    3d4c:	b9 85       	ldd	r27, Y+9	; 0x09
    3d4e:	1c 01       	movw	r2, r24
    3d50:	2d 01       	movw	r4, r26
    3d52:	bb 0f       	add	r27, r27
    3d54:	88 0b       	sbc	r24, r24
    3d56:	98 2f       	mov	r25, r24
    3d58:	dc 01       	movw	r26, r24
    3d5a:	68 2e       	mov	r6, r24
    3d5c:	78 2e       	mov	r7, r24
    3d5e:	88 2e       	mov	r8, r24
    3d60:	98 2e       	mov	r9, r24
    3d62:	80 91 c0 27 	lds	r24, 0x27C0	; 0x8027c0 <C6>
    3d66:	90 91 c1 27 	lds	r25, 0x27C1	; 0x8027c1 <C6+0x1>
    3d6a:	9c 01       	movw	r18, r24
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	50 e0       	ldi	r21, 0x00	; 0
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	70 e0       	ldi	r23, 0x00	; 0
    3d74:	cb 01       	movw	r24, r22
    3d76:	a2 2e       	mov	r10, r18
    3d78:	b3 2e       	mov	r11, r19
    3d7a:	c4 2e       	mov	r12, r20
    3d7c:	d5 2e       	mov	r13, r21
    3d7e:	e6 2e       	mov	r14, r22
    3d80:	f7 2e       	mov	r15, r23
    3d82:	08 2f       	mov	r16, r24
    3d84:	19 2f       	mov	r17, r25
    3d86:	22 2d       	mov	r18, r2
    3d88:	33 2d       	mov	r19, r3
    3d8a:	44 2d       	mov	r20, r4
    3d8c:	55 2d       	mov	r21, r5
    3d8e:	66 2d       	mov	r22, r6
    3d90:	77 2d       	mov	r23, r7
    3d92:	88 2d       	mov	r24, r8
    3d94:	99 2d       	mov	r25, r9
    3d96:	0e 94 39 59 	call	0xb272	; 0xb272 <__muldi3>
    3d9a:	a2 2e       	mov	r10, r18
    3d9c:	b3 2e       	mov	r11, r19
    3d9e:	c4 2e       	mov	r12, r20
    3da0:	d5 2e       	mov	r13, r21
    3da2:	e6 2e       	mov	r14, r22
    3da4:	f7 2e       	mov	r15, r23
    3da6:	08 2f       	mov	r16, r24
    3da8:	19 2f       	mov	r17, r25
    3daa:	2a 2d       	mov	r18, r10
    3dac:	3b 2d       	mov	r19, r11
    3dae:	4c 2d       	mov	r20, r12
    3db0:	5d 2d       	mov	r21, r13
    3db2:	6e 2d       	mov	r22, r14
    3db4:	7f 2d       	mov	r23, r15
    3db6:	80 2f       	mov	r24, r16
    3db8:	91 2f       	mov	r25, r17
    3dba:	a2 2e       	mov	r10, r18
    3dbc:	b3 2e       	mov	r11, r19
    3dbe:	c4 2e       	mov	r12, r20
    3dc0:	d5 2e       	mov	r13, r21
    3dc2:	e6 2e       	mov	r14, r22
    3dc4:	f7 2e       	mov	r15, r23
    3dc6:	08 2f       	mov	r16, r24
    3dc8:	19 2f       	mov	r17, r25
    3dca:	2a 2d       	mov	r18, r10
    3dcc:	3b 2d       	mov	r19, r11
    3dce:	4c 2d       	mov	r20, r12
    3dd0:	5d 2d       	mov	r21, r13
    3dd2:	6e 2d       	mov	r22, r14
    3dd4:	7f 2d       	mov	r23, r15
    3dd6:	80 2f       	mov	r24, r16
    3dd8:	91 2f       	mov	r25, r17
    3dda:	a0 e0       	ldi	r26, 0x00	; 0
    3ddc:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <__cmpdi2_s8>
    3de0:	04 f5       	brge	.+64     	; 0x3e22 <getPressure+0x2d6>
    3de2:	2a 2d       	mov	r18, r10
    3de4:	3b 2d       	mov	r19, r11
    3de6:	4c 2d       	mov	r20, r12
    3de8:	5d 2d       	mov	r21, r13
    3dea:	6e 2d       	mov	r22, r14
    3dec:	7f 2d       	mov	r23, r15
    3dee:	80 2f       	mov	r24, r16
    3df0:	91 2f       	mov	r25, r17
    3df2:	21 50       	subi	r18, 0x01	; 1
    3df4:	31 09       	sbc	r19, r1
    3df6:	40 48       	sbci	r20, 0x80	; 128
    3df8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dfa:	6f 4f       	sbci	r22, 0xFF	; 255
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    3e00:	9f 4f       	sbci	r25, 0xFF	; 255
    3e02:	22 2e       	mov	r2, r18
    3e04:	33 2e       	mov	r3, r19
    3e06:	44 2e       	mov	r4, r20
    3e08:	55 2e       	mov	r5, r21
    3e0a:	66 2e       	mov	r6, r22
    3e0c:	77 2e       	mov	r7, r23
    3e0e:	88 2e       	mov	r8, r24
    3e10:	99 2e       	mov	r9, r25
    3e12:	a2 2c       	mov	r10, r2
    3e14:	b3 2c       	mov	r11, r3
    3e16:	c4 2c       	mov	r12, r4
    3e18:	d5 2c       	mov	r13, r5
    3e1a:	e6 2c       	mov	r14, r6
    3e1c:	f7 2c       	mov	r15, r7
    3e1e:	08 2d       	mov	r16, r8
    3e20:	19 2d       	mov	r17, r9
    3e22:	2a 2d       	mov	r18, r10
    3e24:	3b 2d       	mov	r19, r11
    3e26:	4c 2d       	mov	r20, r12
    3e28:	5d 2d       	mov	r21, r13
    3e2a:	6e 2d       	mov	r22, r14
    3e2c:	7f 2d       	mov	r23, r15
    3e2e:	80 2f       	mov	r24, r16
    3e30:	91 2f       	mov	r25, r17
    3e32:	07 e1       	ldi	r16, 0x17	; 23
    3e34:	0e 94 01 5a 	call	0xb402	; 0xb402 <__ashrdi3>
    3e38:	a2 2e       	mov	r10, r18
    3e3a:	b3 2e       	mov	r11, r19
    3e3c:	c4 2e       	mov	r12, r20
    3e3e:	d5 2e       	mov	r13, r21
    3e40:	e6 2e       	mov	r14, r22
    3e42:	f7 2e       	mov	r15, r23
    3e44:	08 2f       	mov	r16, r24
    3e46:	19 2f       	mov	r17, r25
    3e48:	2a 2d       	mov	r18, r10
    3e4a:	3b 2d       	mov	r19, r11
    3e4c:	4c 2d       	mov	r20, r12
    3e4e:	5d 2d       	mov	r21, r13
    3e50:	6e 2d       	mov	r22, r14
    3e52:	7f 2d       	mov	r23, r15
    3e54:	80 2f       	mov	r24, r16
    3e56:	91 2f       	mov	r25, r17
    3e58:	da 01       	movw	r26, r20
    3e5a:	c9 01       	movw	r24, r18
    3e5c:	80 53       	subi	r24, 0x30	; 48
    3e5e:	98 4f       	sbci	r25, 0xF8	; 248
    3e60:	af 4f       	sbci	r26, 0xFF	; 255
    3e62:	bf 4f       	sbci	r27, 0xFF	; 255
    3e64:	8a 87       	std	Y+10, r24	; 0x0a
    3e66:	9b 87       	std	Y+11, r25	; 0x0b
    3e68:	ac 87       	std	Y+12, r26	; 0x0c
    3e6a:	bd 87       	std	Y+13, r27	; 0x0d

	
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
    3e6c:	80 91 be 27 	lds	r24, 0x27BE	; 0x8027be <C2>
    3e70:	90 91 bf 27 	lds	r25, 0x27BF	; 0x8027bf <C2+0x1>
    3e74:	5c 01       	movw	r10, r24
    3e76:	c1 2c       	mov	r12, r1
    3e78:	d1 2c       	mov	r13, r1
    3e7a:	e1 2c       	mov	r14, r1
    3e7c:	f1 2c       	mov	r15, r1
    3e7e:	87 01       	movw	r16, r14
    3e80:	2a 2d       	mov	r18, r10
    3e82:	3b 2d       	mov	r19, r11
    3e84:	4c 2d       	mov	r20, r12
    3e86:	5d 2d       	mov	r21, r13
    3e88:	6e 2d       	mov	r22, r14
    3e8a:	7f 2d       	mov	r23, r15
    3e8c:	80 2f       	mov	r24, r16
    3e8e:	91 2f       	mov	r25, r17
    3e90:	01 e1       	ldi	r16, 0x11	; 17
    3e92:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    3e96:	2b a3       	std	Y+35, r18	; 0x23
    3e98:	3c a3       	std	Y+36, r19	; 0x24
    3e9a:	4d a3       	std	Y+37, r20	; 0x25
    3e9c:	5e a3       	std	Y+38, r21	; 0x26
    3e9e:	6f a3       	std	Y+39, r22	; 0x27
    3ea0:	78 a7       	std	Y+40, r23	; 0x28
    3ea2:	89 a7       	std	Y+41, r24	; 0x29
    3ea4:	9a a7       	std	Y+42, r25	; 0x2a
    3ea6:	80 91 ce 27 	lds	r24, 0x27CE	; 0x8027ce <C4>
    3eaa:	90 91 cf 27 	lds	r25, 0x27CF	; 0x8027cf <C4+0x1>
    3eae:	1c 01       	movw	r2, r24
    3eb0:	41 2c       	mov	r4, r1
    3eb2:	51 2c       	mov	r5, r1
    3eb4:	61 2c       	mov	r6, r1
    3eb6:	71 2c       	mov	r7, r1
    3eb8:	43 01       	movw	r8, r6
    3eba:	8e 81       	ldd	r24, Y+6	; 0x06
    3ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    3ebe:	a8 85       	ldd	r26, Y+8	; 0x08
    3ec0:	b9 85       	ldd	r27, Y+9	; 0x09
    3ec2:	8b a7       	std	Y+43, r24	; 0x2b
    3ec4:	9c a7       	std	Y+44, r25	; 0x2c
    3ec6:	ad a7       	std	Y+45, r26	; 0x2d
    3ec8:	be a7       	std	Y+46, r27	; 0x2e
    3eca:	bb 0f       	add	r27, r27
    3ecc:	88 0b       	sbc	r24, r24
    3ece:	98 2f       	mov	r25, r24
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	8f a7       	std	Y+47, r24	; 0x2f
    3ed4:	88 ab       	std	Y+48, r24	; 0x30
    3ed6:	89 ab       	std	Y+49, r24	; 0x31
    3ed8:	8a ab       	std	Y+50, r24	; 0x32
    3eda:	ab a4       	ldd	r10, Y+43	; 0x2b
    3edc:	bc a4       	ldd	r11, Y+44	; 0x2c
    3ede:	cd a4       	ldd	r12, Y+45	; 0x2d
    3ee0:	de a4       	ldd	r13, Y+46	; 0x2e
    3ee2:	ef a4       	ldd	r14, Y+47	; 0x2f
    3ee4:	f8 a8       	ldd	r15, Y+48	; 0x30
    3ee6:	09 a9       	ldd	r16, Y+49	; 0x31
    3ee8:	1a a9       	ldd	r17, Y+50	; 0x32
    3eea:	22 2d       	mov	r18, r2
    3eec:	33 2d       	mov	r19, r3
    3eee:	44 2d       	mov	r20, r4
    3ef0:	55 2d       	mov	r21, r5
    3ef2:	66 2d       	mov	r22, r6
    3ef4:	77 2d       	mov	r23, r7
    3ef6:	88 2d       	mov	r24, r8
    3ef8:	99 2d       	mov	r25, r9
    3efa:	0e 94 39 59 	call	0xb272	; 0xb272 <__muldi3>
    3efe:	a2 2e       	mov	r10, r18
    3f00:	b3 2e       	mov	r11, r19
    3f02:	c4 2e       	mov	r12, r20
    3f04:	d5 2e       	mov	r13, r21
    3f06:	e6 2e       	mov	r14, r22
    3f08:	f7 2e       	mov	r15, r23
    3f0a:	08 2f       	mov	r16, r24
    3f0c:	19 2f       	mov	r17, r25
    3f0e:	2a 2d       	mov	r18, r10
    3f10:	3b 2d       	mov	r19, r11
    3f12:	4c 2d       	mov	r20, r12
    3f14:	5d 2d       	mov	r21, r13
    3f16:	6e 2d       	mov	r22, r14
    3f18:	7f 2d       	mov	r23, r15
    3f1a:	80 2f       	mov	r24, r16
    3f1c:	91 2f       	mov	r25, r17
    3f1e:	a2 2e       	mov	r10, r18
    3f20:	b3 2e       	mov	r11, r19
    3f22:	c4 2e       	mov	r12, r20
    3f24:	d5 2e       	mov	r13, r21
    3f26:	e6 2e       	mov	r14, r22
    3f28:	f7 2e       	mov	r15, r23
    3f2a:	08 2f       	mov	r16, r24
    3f2c:	19 2f       	mov	r17, r25
    3f2e:	2a 2d       	mov	r18, r10
    3f30:	3b 2d       	mov	r19, r11
    3f32:	4c 2d       	mov	r20, r12
    3f34:	5d 2d       	mov	r21, r13
    3f36:	6e 2d       	mov	r22, r14
    3f38:	7f 2d       	mov	r23, r15
    3f3a:	80 2f       	mov	r24, r16
    3f3c:	91 2f       	mov	r25, r17
    3f3e:	a0 e0       	ldi	r26, 0x00	; 0
    3f40:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <__cmpdi2_s8>
    3f44:	dc f4       	brge	.+54     	; 0x3f7c <getPressure+0x430>
    3f46:	2a 2d       	mov	r18, r10
    3f48:	3b 2d       	mov	r19, r11
    3f4a:	4c 2d       	mov	r20, r12
    3f4c:	5d 2d       	mov	r21, r13
    3f4e:	6e 2d       	mov	r22, r14
    3f50:	7f 2d       	mov	r23, r15
    3f52:	80 2f       	mov	r24, r16
    3f54:	91 2f       	mov	r25, r17
    3f56:	af e3       	ldi	r26, 0x3F	; 63
    3f58:	0e 94 28 5a 	call	0xb450	; 0xb450 <__adddi3_s8>
    3f5c:	22 2e       	mov	r2, r18
    3f5e:	33 2e       	mov	r3, r19
    3f60:	44 2e       	mov	r4, r20
    3f62:	55 2e       	mov	r5, r21
    3f64:	66 2e       	mov	r6, r22
    3f66:	77 2e       	mov	r7, r23
    3f68:	88 2e       	mov	r8, r24
    3f6a:	99 2e       	mov	r9, r25
    3f6c:	a2 2c       	mov	r10, r2
    3f6e:	b3 2c       	mov	r11, r3
    3f70:	c4 2c       	mov	r12, r4
    3f72:	d5 2c       	mov	r13, r5
    3f74:	e6 2c       	mov	r14, r6
    3f76:	f7 2c       	mov	r15, r7
    3f78:	08 2d       	mov	r16, r8
    3f7a:	19 2d       	mov	r17, r9
    3f7c:	2a 2d       	mov	r18, r10
    3f7e:	3b 2d       	mov	r19, r11
    3f80:	4c 2d       	mov	r20, r12
    3f82:	5d 2d       	mov	r21, r13
    3f84:	6e 2d       	mov	r22, r14
    3f86:	7f 2d       	mov	r23, r15
    3f88:	80 2f       	mov	r24, r16
    3f8a:	91 2f       	mov	r25, r17
    3f8c:	06 e0       	ldi	r16, 0x06	; 6
    3f8e:	0e 94 01 5a 	call	0xb402	; 0xb402 <__ashrdi3>
    3f92:	a2 2e       	mov	r10, r18
    3f94:	b3 2e       	mov	r11, r19
    3f96:	c4 2e       	mov	r12, r20
    3f98:	d5 2e       	mov	r13, r21
    3f9a:	e6 2e       	mov	r14, r22
    3f9c:	f7 2e       	mov	r15, r23
    3f9e:	08 2f       	mov	r16, r24
    3fa0:	19 2f       	mov	r17, r25
    3fa2:	2a 2c       	mov	r2, r10
    3fa4:	3b 2c       	mov	r3, r11
    3fa6:	4c 2c       	mov	r4, r12
    3fa8:	5d 2c       	mov	r5, r13
    3faa:	6e 2c       	mov	r6, r14
    3fac:	7f 2c       	mov	r7, r15
    3fae:	80 2e       	mov	r8, r16
    3fb0:	91 2e       	mov	r9, r17
    3fb2:	2b a1       	ldd	r18, Y+35	; 0x23
    3fb4:	3c a1       	ldd	r19, Y+36	; 0x24
    3fb6:	4d a1       	ldd	r20, Y+37	; 0x25
    3fb8:	5e a1       	ldd	r21, Y+38	; 0x26
    3fba:	6f a1       	ldd	r22, Y+39	; 0x27
    3fbc:	78 a5       	ldd	r23, Y+40	; 0x28
    3fbe:	89 a5       	ldd	r24, Y+41	; 0x29
    3fc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fc2:	a2 2c       	mov	r10, r2
    3fc4:	b3 2c       	mov	r11, r3
    3fc6:	c4 2c       	mov	r12, r4
    3fc8:	d5 2c       	mov	r13, r5
    3fca:	e6 2c       	mov	r14, r6
    3fcc:	f7 2c       	mov	r15, r7
    3fce:	08 2d       	mov	r16, r8
    3fd0:	19 2d       	mov	r17, r9
    3fd2:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <__adddi3>
    3fd6:	2e 87       	std	Y+14, r18	; 0x0e
    3fd8:	3f 87       	std	Y+15, r19	; 0x0f
    3fda:	48 8b       	std	Y+16, r20	; 0x10
    3fdc:	59 8b       	std	Y+17, r21	; 0x11
    3fde:	6a 8b       	std	Y+18, r22	; 0x12
    3fe0:	7b 8b       	std	Y+19, r23	; 0x13
    3fe2:	8c 8b       	std	Y+20, r24	; 0x14
    3fe4:	9d 8b       	std	Y+21, r25	; 0x15
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128;
    3fe6:	80 91 ba 27 	lds	r24, 0x27BA	; 0x8027ba <C1>
    3fea:	90 91 bb 27 	lds	r25, 0x27BB	; 0x8027bb <C1+0x1>
    3fee:	5c 01       	movw	r10, r24
    3ff0:	c1 2c       	mov	r12, r1
    3ff2:	d1 2c       	mov	r13, r1
    3ff4:	e1 2c       	mov	r14, r1
    3ff6:	f1 2c       	mov	r15, r1
    3ff8:	87 01       	movw	r16, r14
    3ffa:	2a 2d       	mov	r18, r10
    3ffc:	3b 2d       	mov	r19, r11
    3ffe:	4c 2d       	mov	r20, r12
    4000:	5d 2d       	mov	r21, r13
    4002:	6e 2d       	mov	r22, r14
    4004:	7f 2d       	mov	r23, r15
    4006:	80 2f       	mov	r24, r16
    4008:	91 2f       	mov	r25, r17
    400a:	00 e1       	ldi	r16, 0x10	; 16
    400c:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    4010:	2b ab       	std	Y+51, r18	; 0x33
    4012:	3c ab       	std	Y+52, r19	; 0x34
    4014:	4d ab       	std	Y+53, r20	; 0x35
    4016:	5e ab       	std	Y+54, r21	; 0x36
    4018:	6f ab       	std	Y+55, r22	; 0x37
    401a:	78 af       	std	Y+56, r23	; 0x38
    401c:	89 af       	std	Y+57, r24	; 0x39
    401e:	9a af       	std	Y+58, r25	; 0x3a
    4020:	80 91 bc 27 	lds	r24, 0x27BC	; 0x8027bc <C3>
    4024:	90 91 bd 27 	lds	r25, 0x27BD	; 0x8027bd <C3+0x1>
    4028:	1c 01       	movw	r2, r24
    402a:	41 2c       	mov	r4, r1
    402c:	51 2c       	mov	r5, r1
    402e:	61 2c       	mov	r6, r1
    4030:	71 2c       	mov	r7, r1
    4032:	43 01       	movw	r8, r6
    4034:	8e 81       	ldd	r24, Y+6	; 0x06
    4036:	9f 81       	ldd	r25, Y+7	; 0x07
    4038:	a8 85       	ldd	r26, Y+8	; 0x08
    403a:	b9 85       	ldd	r27, Y+9	; 0x09
    403c:	8b af       	std	Y+59, r24	; 0x3b
    403e:	9c af       	std	Y+60, r25	; 0x3c
    4040:	ad af       	std	Y+61, r26	; 0x3d
    4042:	be af       	std	Y+62, r27	; 0x3e
    4044:	bb 0f       	add	r27, r27
    4046:	88 0b       	sbc	r24, r24
    4048:	98 2f       	mov	r25, r24
    404a:	dc 01       	movw	r26, r24
    404c:	8f af       	std	Y+63, r24	; 0x3f
    404e:	21 96       	adiw	r28, 0x01	; 1
    4050:	8f af       	std	Y+63, r24	; 0x3f
    4052:	21 97       	sbiw	r28, 0x01	; 1
    4054:	22 96       	adiw	r28, 0x02	; 2
    4056:	8f af       	std	Y+63, r24	; 0x3f
    4058:	22 97       	sbiw	r28, 0x02	; 2
    405a:	23 96       	adiw	r28, 0x03	; 3
    405c:	8f af       	std	Y+63, r24	; 0x3f
    405e:	23 97       	sbiw	r28, 0x03	; 3
    4060:	ab ac       	ldd	r10, Y+59	; 0x3b
    4062:	bc ac       	ldd	r11, Y+60	; 0x3c
    4064:	cd ac       	ldd	r12, Y+61	; 0x3d
    4066:	de ac       	ldd	r13, Y+62	; 0x3e
    4068:	ef ac       	ldd	r14, Y+63	; 0x3f
    406a:	21 96       	adiw	r28, 0x01	; 1
    406c:	ff ac       	ldd	r15, Y+63	; 0x3f
    406e:	21 97       	sbiw	r28, 0x01	; 1
    4070:	22 96       	adiw	r28, 0x02	; 2
    4072:	0f ad       	ldd	r16, Y+63	; 0x3f
    4074:	22 97       	sbiw	r28, 0x02	; 2
    4076:	23 96       	adiw	r28, 0x03	; 3
    4078:	1f ad       	ldd	r17, Y+63	; 0x3f
    407a:	23 97       	sbiw	r28, 0x03	; 3
    407c:	22 2d       	mov	r18, r2
    407e:	33 2d       	mov	r19, r3
    4080:	44 2d       	mov	r20, r4
    4082:	55 2d       	mov	r21, r5
    4084:	66 2d       	mov	r22, r6
    4086:	77 2d       	mov	r23, r7
    4088:	88 2d       	mov	r24, r8
    408a:	99 2d       	mov	r25, r9
    408c:	0e 94 39 59 	call	0xb272	; 0xb272 <__muldi3>
    4090:	a2 2e       	mov	r10, r18
    4092:	b3 2e       	mov	r11, r19
    4094:	c4 2e       	mov	r12, r20
    4096:	d5 2e       	mov	r13, r21
    4098:	e6 2e       	mov	r14, r22
    409a:	f7 2e       	mov	r15, r23
    409c:	08 2f       	mov	r16, r24
    409e:	19 2f       	mov	r17, r25
    40a0:	2a 2d       	mov	r18, r10
    40a2:	3b 2d       	mov	r19, r11
    40a4:	4c 2d       	mov	r20, r12
    40a6:	5d 2d       	mov	r21, r13
    40a8:	6e 2d       	mov	r22, r14
    40aa:	7f 2d       	mov	r23, r15
    40ac:	80 2f       	mov	r24, r16
    40ae:	91 2f       	mov	r25, r17
    40b0:	a2 2e       	mov	r10, r18
    40b2:	b3 2e       	mov	r11, r19
    40b4:	c4 2e       	mov	r12, r20
    40b6:	d5 2e       	mov	r13, r21
    40b8:	e6 2e       	mov	r14, r22
    40ba:	f7 2e       	mov	r15, r23
    40bc:	08 2f       	mov	r16, r24
    40be:	19 2f       	mov	r17, r25
    40c0:	2a 2d       	mov	r18, r10
    40c2:	3b 2d       	mov	r19, r11
    40c4:	4c 2d       	mov	r20, r12
    40c6:	5d 2d       	mov	r21, r13
    40c8:	6e 2d       	mov	r22, r14
    40ca:	7f 2d       	mov	r23, r15
    40cc:	80 2f       	mov	r24, r16
    40ce:	91 2f       	mov	r25, r17
    40d0:	a0 e0       	ldi	r26, 0x00	; 0
    40d2:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <__cmpdi2_s8>
    40d6:	dc f4       	brge	.+54     	; 0x410e <__stack+0x10f>
    40d8:	2a 2d       	mov	r18, r10
    40da:	3b 2d       	mov	r19, r11
    40dc:	4c 2d       	mov	r20, r12
    40de:	5d 2d       	mov	r21, r13
    40e0:	6e 2d       	mov	r22, r14
    40e2:	7f 2d       	mov	r23, r15
    40e4:	80 2f       	mov	r24, r16
    40e6:	91 2f       	mov	r25, r17
    40e8:	af e7       	ldi	r26, 0x7F	; 127
    40ea:	0e 94 28 5a 	call	0xb450	; 0xb450 <__adddi3_s8>
    40ee:	22 2e       	mov	r2, r18
    40f0:	33 2e       	mov	r3, r19
    40f2:	44 2e       	mov	r4, r20
    40f4:	55 2e       	mov	r5, r21
    40f6:	66 2e       	mov	r6, r22
    40f8:	77 2e       	mov	r7, r23
    40fa:	88 2e       	mov	r8, r24
    40fc:	99 2e       	mov	r9, r25
    40fe:	a2 2c       	mov	r10, r2
    4100:	b3 2c       	mov	r11, r3
    4102:	c4 2c       	mov	r12, r4
    4104:	d5 2c       	mov	r13, r5
    4106:	e6 2c       	mov	r14, r6
    4108:	f7 2c       	mov	r15, r7
    410a:	08 2d       	mov	r16, r8
    410c:	19 2d       	mov	r17, r9
    410e:	2a 2d       	mov	r18, r10
    4110:	3b 2d       	mov	r19, r11
    4112:	4c 2d       	mov	r20, r12
    4114:	5d 2d       	mov	r21, r13
    4116:	6e 2d       	mov	r22, r14
    4118:	7f 2d       	mov	r23, r15
    411a:	80 2f       	mov	r24, r16
    411c:	91 2f       	mov	r25, r17
    411e:	07 e0       	ldi	r16, 0x07	; 7
    4120:	0e 94 01 5a 	call	0xb402	; 0xb402 <__ashrdi3>
    4124:	a2 2e       	mov	r10, r18
    4126:	b3 2e       	mov	r11, r19
    4128:	c4 2e       	mov	r12, r20
    412a:	d5 2e       	mov	r13, r21
    412c:	e6 2e       	mov	r14, r22
    412e:	f7 2e       	mov	r15, r23
    4130:	08 2f       	mov	r16, r24
    4132:	19 2f       	mov	r17, r25
    4134:	2a 2c       	mov	r2, r10
    4136:	3b 2c       	mov	r3, r11
    4138:	4c 2c       	mov	r4, r12
    413a:	5d 2c       	mov	r5, r13
    413c:	6e 2c       	mov	r6, r14
    413e:	7f 2c       	mov	r7, r15
    4140:	80 2e       	mov	r8, r16
    4142:	91 2e       	mov	r9, r17
    4144:	2b a9       	ldd	r18, Y+51	; 0x33
    4146:	3c a9       	ldd	r19, Y+52	; 0x34
    4148:	4d a9       	ldd	r20, Y+53	; 0x35
    414a:	5e a9       	ldd	r21, Y+54	; 0x36
    414c:	6f a9       	ldd	r22, Y+55	; 0x37
    414e:	78 ad       	ldd	r23, Y+56	; 0x38
    4150:	89 ad       	ldd	r24, Y+57	; 0x39
    4152:	9a ad       	ldd	r25, Y+58	; 0x3a
    4154:	a2 2c       	mov	r10, r2
    4156:	b3 2c       	mov	r11, r3
    4158:	c4 2c       	mov	r12, r4
    415a:	d5 2c       	mov	r13, r5
    415c:	e6 2c       	mov	r14, r6
    415e:	f7 2c       	mov	r15, r7
    4160:	08 2d       	mov	r16, r8
    4162:	19 2d       	mov	r17, r9
    4164:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <__adddi3>
    4168:	2e 8b       	std	Y+22, r18	; 0x16
    416a:	3f 8b       	std	Y+23, r19	; 0x17
    416c:	48 8f       	std	Y+24, r20	; 0x18
    416e:	59 8f       	std	Y+25, r21	; 0x19
    4170:	6a 8f       	std	Y+26, r22	; 0x1a
    4172:	7b 8f       	std	Y+27, r23	; 0x1b
    4174:	8c 8f       	std	Y+28, r24	; 0x1c
    4176:	9d 8f       	std	Y+29, r25	; 0x1d
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
    4178:	80 91 d0 27 	lds	r24, 0x27D0	; 0x8027d0 <D1>
    417c:	90 91 d1 27 	lds	r25, 0x27D1	; 0x8027d1 <D1+0x1>
    4180:	a0 91 d2 27 	lds	r26, 0x27D2	; 0x8027d2 <D1+0x2>
    4184:	b0 91 d3 27 	lds	r27, 0x27D3	; 0x8027d3 <D1+0x3>
    4188:	1c 01       	movw	r2, r24
    418a:	2d 01       	movw	r4, r26
    418c:	61 2c       	mov	r6, r1
    418e:	71 2c       	mov	r7, r1
    4190:	43 01       	movw	r8, r6
    4192:	ae 88       	ldd	r10, Y+22	; 0x16
    4194:	bf 88       	ldd	r11, Y+23	; 0x17
    4196:	c8 8c       	ldd	r12, Y+24	; 0x18
    4198:	d9 8c       	ldd	r13, Y+25	; 0x19
    419a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    419c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    419e:	0c 8d       	ldd	r16, Y+28	; 0x1c
    41a0:	1d 8d       	ldd	r17, Y+29	; 0x1d
    41a2:	22 2d       	mov	r18, r2
    41a4:	33 2d       	mov	r19, r3
    41a6:	44 2d       	mov	r20, r4
    41a8:	55 2d       	mov	r21, r5
    41aa:	66 2d       	mov	r22, r6
    41ac:	77 2d       	mov	r23, r7
    41ae:	88 2d       	mov	r24, r8
    41b0:	99 2d       	mov	r25, r9
    41b2:	0e 94 39 59 	call	0xb272	; 0xb272 <__muldi3>
    41b6:	a2 2e       	mov	r10, r18
    41b8:	b3 2e       	mov	r11, r19
    41ba:	c4 2e       	mov	r12, r20
    41bc:	d5 2e       	mov	r13, r21
    41be:	e6 2e       	mov	r14, r22
    41c0:	f7 2e       	mov	r15, r23
    41c2:	08 2f       	mov	r16, r24
    41c4:	19 2f       	mov	r17, r25
    41c6:	2a 2d       	mov	r18, r10
    41c8:	3b 2d       	mov	r19, r11
    41ca:	4c 2d       	mov	r20, r12
    41cc:	5d 2d       	mov	r21, r13
    41ce:	6e 2d       	mov	r22, r14
    41d0:	7f 2d       	mov	r23, r15
    41d2:	80 2f       	mov	r24, r16
    41d4:	91 2f       	mov	r25, r17
    41d6:	a2 2e       	mov	r10, r18
    41d8:	b3 2e       	mov	r11, r19
    41da:	c4 2e       	mov	r12, r20
    41dc:	d5 2e       	mov	r13, r21
    41de:	e6 2e       	mov	r14, r22
    41e0:	f7 2e       	mov	r15, r23
    41e2:	08 2f       	mov	r16, r24
    41e4:	19 2f       	mov	r17, r25
    41e6:	2a 2d       	mov	r18, r10
    41e8:	3b 2d       	mov	r19, r11
    41ea:	4c 2d       	mov	r20, r12
    41ec:	5d 2d       	mov	r21, r13
    41ee:	6e 2d       	mov	r22, r14
    41f0:	7f 2d       	mov	r23, r15
    41f2:	80 2f       	mov	r24, r16
    41f4:	91 2f       	mov	r25, r17
    41f6:	a0 e0       	ldi	r26, 0x00	; 0
    41f8:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <__cmpdi2_s8>
    41fc:	04 f5       	brge	.+64     	; 0x423e <__stack+0x23f>
    41fe:	2a 2d       	mov	r18, r10
    4200:	3b 2d       	mov	r19, r11
    4202:	4c 2d       	mov	r20, r12
    4204:	5d 2d       	mov	r21, r13
    4206:	6e 2d       	mov	r22, r14
    4208:	7f 2d       	mov	r23, r15
    420a:	80 2f       	mov	r24, r16
    420c:	91 2f       	mov	r25, r17
    420e:	21 50       	subi	r18, 0x01	; 1
    4210:	31 09       	sbc	r19, r1
    4212:	40 4e       	sbci	r20, 0xE0	; 224
    4214:	5f 4f       	sbci	r21, 0xFF	; 255
    4216:	6f 4f       	sbci	r22, 0xFF	; 255
    4218:	7f 4f       	sbci	r23, 0xFF	; 255
    421a:	8f 4f       	sbci	r24, 0xFF	; 255
    421c:	9f 4f       	sbci	r25, 0xFF	; 255
    421e:	22 2e       	mov	r2, r18
    4220:	33 2e       	mov	r3, r19
    4222:	44 2e       	mov	r4, r20
    4224:	55 2e       	mov	r5, r21
    4226:	66 2e       	mov	r6, r22
    4228:	77 2e       	mov	r7, r23
    422a:	88 2e       	mov	r8, r24
    422c:	99 2e       	mov	r9, r25
    422e:	a2 2c       	mov	r10, r2
    4230:	b3 2c       	mov	r11, r3
    4232:	c4 2c       	mov	r12, r4
    4234:	d5 2c       	mov	r13, r5
    4236:	e6 2c       	mov	r14, r6
    4238:	f7 2c       	mov	r15, r7
    423a:	08 2d       	mov	r16, r8
    423c:	19 2d       	mov	r17, r9
    423e:	2a 2d       	mov	r18, r10
    4240:	3b 2d       	mov	r19, r11
    4242:	4c 2d       	mov	r20, r12
    4244:	5d 2d       	mov	r21, r13
    4246:	6e 2d       	mov	r22, r14
    4248:	7f 2d       	mov	r23, r15
    424a:	80 2f       	mov	r24, r16
    424c:	91 2f       	mov	r25, r17
    424e:	05 e1       	ldi	r16, 0x15	; 21
    4250:	0e 94 01 5a 	call	0xb402	; 0xb402 <__ashrdi3>
    4254:	22 2e       	mov	r2, r18
    4256:	33 2e       	mov	r3, r19
    4258:	44 2e       	mov	r4, r20
    425a:	55 2e       	mov	r5, r21
    425c:	66 2e       	mov	r6, r22
    425e:	77 2e       	mov	r7, r23
    4260:	88 2e       	mov	r8, r24
    4262:	99 2e       	mov	r9, r25
    4264:	a2 2c       	mov	r10, r2
    4266:	b3 2c       	mov	r11, r3
    4268:	c4 2c       	mov	r12, r4
    426a:	d5 2c       	mov	r13, r5
    426c:	e6 2c       	mov	r14, r6
    426e:	f7 2c       	mov	r15, r7
    4270:	08 2d       	mov	r16, r8
    4272:	19 2d       	mov	r17, r9
    4274:	2a 2d       	mov	r18, r10
    4276:	3b 2d       	mov	r19, r11
    4278:	4c 2d       	mov	r20, r12
    427a:	5d 2d       	mov	r21, r13
    427c:	6e 2d       	mov	r22, r14
    427e:	7f 2d       	mov	r23, r15
    4280:	80 2f       	mov	r24, r16
    4282:	91 2f       	mov	r25, r17
    4284:	ae 84       	ldd	r10, Y+14	; 0x0e
    4286:	bf 84       	ldd	r11, Y+15	; 0x0f
    4288:	c8 88       	ldd	r12, Y+16	; 0x10
    428a:	d9 88       	ldd	r13, Y+17	; 0x11
    428c:	ea 88       	ldd	r14, Y+18	; 0x12
    428e:	fb 88       	ldd	r15, Y+19	; 0x13
    4290:	0c 89       	ldd	r16, Y+20	; 0x14
    4292:	1d 89       	ldd	r17, Y+21	; 0x15
    4294:	0e 94 34 5a 	call	0xb468	; 0xb468 <__subdi3>
    4298:	22 2e       	mov	r2, r18
    429a:	33 2e       	mov	r3, r19
    429c:	44 2e       	mov	r4, r20
    429e:	55 2e       	mov	r5, r21
    42a0:	66 2e       	mov	r6, r22
    42a2:	77 2e       	mov	r7, r23
    42a4:	88 2e       	mov	r8, r24
    42a6:	99 2e       	mov	r9, r25
    42a8:	a2 2c       	mov	r10, r2
    42aa:	b3 2c       	mov	r11, r3
    42ac:	c4 2c       	mov	r12, r4
    42ae:	d5 2c       	mov	r13, r5
    42b0:	e6 2c       	mov	r14, r6
    42b2:	f7 2c       	mov	r15, r7
    42b4:	08 2d       	mov	r16, r8
    42b6:	19 2d       	mov	r17, r9
    42b8:	2a 2d       	mov	r18, r10
    42ba:	3b 2d       	mov	r19, r11
    42bc:	4c 2d       	mov	r20, r12
    42be:	5d 2d       	mov	r21, r13
    42c0:	6e 2d       	mov	r22, r14
    42c2:	7f 2d       	mov	r23, r15
    42c4:	80 2f       	mov	r24, r16
    42c6:	91 2f       	mov	r25, r17
    42c8:	a0 e0       	ldi	r26, 0x00	; 0
    42ca:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <__cmpdi2_s8>
    42ce:	04 f5       	brge	.+64     	; 0x4310 <__stack+0x311>
    42d0:	2a 2d       	mov	r18, r10
    42d2:	3b 2d       	mov	r19, r11
    42d4:	4c 2d       	mov	r20, r12
    42d6:	5d 2d       	mov	r21, r13
    42d8:	6e 2d       	mov	r22, r14
    42da:	7f 2d       	mov	r23, r15
    42dc:	80 2f       	mov	r24, r16
    42de:	91 2f       	mov	r25, r17
    42e0:	21 50       	subi	r18, 0x01	; 1
    42e2:	30 48       	sbci	r19, 0x80	; 128
    42e4:	4f 4f       	sbci	r20, 0xFF	; 255
    42e6:	5f 4f       	sbci	r21, 0xFF	; 255
    42e8:	6f 4f       	sbci	r22, 0xFF	; 255
    42ea:	7f 4f       	sbci	r23, 0xFF	; 255
    42ec:	8f 4f       	sbci	r24, 0xFF	; 255
    42ee:	9f 4f       	sbci	r25, 0xFF	; 255
    42f0:	22 2e       	mov	r2, r18
    42f2:	33 2e       	mov	r3, r19
    42f4:	44 2e       	mov	r4, r20
    42f6:	55 2e       	mov	r5, r21
    42f8:	66 2e       	mov	r6, r22
    42fa:	77 2e       	mov	r7, r23
    42fc:	88 2e       	mov	r8, r24
    42fe:	99 2e       	mov	r9, r25
    4300:	a2 2c       	mov	r10, r2
    4302:	b3 2c       	mov	r11, r3
    4304:	c4 2c       	mov	r12, r4
    4306:	d5 2c       	mov	r13, r5
    4308:	e6 2c       	mov	r14, r6
    430a:	f7 2c       	mov	r15, r7
    430c:	08 2d       	mov	r16, r8
    430e:	19 2d       	mov	r17, r9
    4310:	2a 2d       	mov	r18, r10
    4312:	3b 2d       	mov	r19, r11
    4314:	4c 2d       	mov	r20, r12
    4316:	5d 2d       	mov	r21, r13
    4318:	6e 2d       	mov	r22, r14
    431a:	7f 2d       	mov	r23, r15
    431c:	80 2f       	mov	r24, r16
    431e:	91 2f       	mov	r25, r17
    4320:	0f e0       	ldi	r16, 0x0F	; 15
    4322:	0e 94 01 5a 	call	0xb402	; 0xb402 <__ashrdi3>
    4326:	a2 2e       	mov	r10, r18
    4328:	b3 2e       	mov	r11, r19
    432a:	c4 2e       	mov	r12, r20
    432c:	d5 2e       	mov	r13, r21
    432e:	e6 2e       	mov	r14, r22
    4330:	f7 2e       	mov	r15, r23
    4332:	08 2f       	mov	r16, r24
    4334:	19 2f       	mov	r17, r25
    4336:	2a 2d       	mov	r18, r10
    4338:	3b 2d       	mov	r19, r11
    433a:	4c 2d       	mov	r20, r12
    433c:	5d 2d       	mov	r21, r13
    433e:	6e 2d       	mov	r22, r14
    4340:	7f 2d       	mov	r23, r15
    4342:	80 2f       	mov	r24, r16
    4344:	91 2f       	mov	r25, r17
    4346:	2e 8f       	std	Y+30, r18	; 0x1e
    4348:	3f 8f       	std	Y+31, r19	; 0x1f
    434a:	48 a3       	std	Y+32, r20	; 0x20
    434c:	59 a3       	std	Y+33, r21	; 0x21

	fprintf("%f\n", P);
    434e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4350:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4352:	29 2f       	mov	r18, r25
    4354:	2f 93       	push	r18
    4356:	8f 93       	push	r24
    4358:	80 ee       	ldi	r24, 0xE0	; 224
    435a:	90 e2       	ldi	r25, 0x20	; 32
    435c:	89 2f       	mov	r24, r25
    435e:	8f 93       	push	r24
    4360:	80 ee       	ldi	r24, 0xE0	; 224
    4362:	90 e2       	ldi	r25, 0x20	; 32
    4364:	8f 93       	push	r24
    4366:	0e 94 c3 5c 	call	0xb986	; 0xb986 <fprintf>
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
	return P;
    4372:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4374:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4376:	a8 a1       	ldd	r26, Y+32	; 0x20
    4378:	b9 a1       	ldd	r27, Y+33	; 0x21
    437a:	bc 01       	movw	r22, r24
    437c:	cd 01       	movw	r24, r26
    437e:	ce 5b       	subi	r28, 0xBE	; 190
    4380:	df 4f       	sbci	r29, 0xFF	; 255
    4382:	cd bf       	out	0x3d, r28	; 61
    4384:	de bf       	out	0x3e, r29	; 62
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	ff 90       	pop	r15
    4390:	ef 90       	pop	r14
    4392:	df 90       	pop	r13
    4394:	cf 90       	pop	r12
    4396:	bf 90       	pop	r11
    4398:	af 90       	pop	r10
    439a:	9f 90       	pop	r9
    439c:	8f 90       	pop	r8
    439e:	7f 90       	pop	r7
    43a0:	6f 90       	pop	r6
    43a2:	5f 90       	pop	r5
    43a4:	4f 90       	pop	r4
    43a6:	3f 90       	pop	r3
    43a8:	2f 90       	pop	r2
    43aa:	08 95       	ret

000043ac <tc_set_overflow_interrupt_level>:
 * \param level Overflow interrupt level
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	00 d0       	rcall	.+0      	; 0x43b2 <tc_set_overflow_interrupt_level+0x6>
    43b2:	cd b7       	in	r28, 0x3d	; 61
    43b4:	de b7       	in	r29, 0x3e	; 62
    43b6:	89 83       	std	Y+1, r24	; 0x01
    43b8:	9a 83       	std	Y+2, r25	; 0x02
    43ba:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	9a 81       	ldd	r25, Y+2	; 0x02
    43c0:	fc 01       	movw	r30, r24
    43c2:	86 81       	ldd	r24, Z+6	; 0x06
    43c4:	28 2f       	mov	r18, r24
    43c6:	2c 7f       	andi	r18, 0xFC	; 252
    43c8:	89 81       	ldd	r24, Y+1	; 0x01
    43ca:	9a 81       	ldd	r25, Y+2	; 0x02
    43cc:	fc 01       	movw	r30, r24
    43ce:	26 83       	std	Z+6, r18	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	9a 81       	ldd	r25, Y+2	; 0x02
    43d4:	fc 01       	movw	r30, r24
    43d6:	96 81       	ldd	r25, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    43d8:	8b 81       	ldd	r24, Y+3	; 0x03
    43da:	29 2f       	mov	r18, r25
    43dc:	28 2b       	or	r18, r24
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	9a 81       	ldd	r25, Y+2	; 0x02
    43e2:	fc 01       	movw	r30, r24
    43e4:	26 83       	std	Z+6, r18	; 0x06
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
}
    43e6:	00 00       	nop
    43e8:	23 96       	adiw	r28, 0x03	; 3
    43ea:	cd bf       	out	0x3d, r28	; 61
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
    43f2:	08 95       	ret

000043f4 <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	00 d0       	rcall	.+0      	; 0x43fa <tc_write_clock_source+0x6>
    43fa:	cd b7       	in	r28, 0x3d	; 61
    43fc:	de b7       	in	r29, 0x3e	; 62
    43fe:	89 83       	std	Y+1, r24	; 0x01
    4400:	9a 83       	std	Y+2, r25	; 0x02
    4402:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    4404:	89 81       	ldd	r24, Y+1	; 0x01
    4406:	9a 81       	ldd	r25, Y+2	; 0x02
    4408:	fc 01       	movw	r30, r24
    440a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    440c:	98 2f       	mov	r25, r24
    440e:	90 7f       	andi	r25, 0xF0	; 240
    4410:	8b 81       	ldd	r24, Y+3	; 0x03
    4412:	89 2b       	or	r24, r25
    4414:	28 2f       	mov	r18, r24
    4416:	89 81       	ldd	r24, Y+1	; 0x01
    4418:	9a 81       	ldd	r25, Y+2	; 0x02
    441a:	fc 01       	movw	r30, r24
    441c:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    441e:	00 00       	nop
    4420:	23 96       	adiw	r28, 0x03	; 3
    4422:	cd bf       	out	0x3d, r28	; 61
    4424:	de bf       	out	0x3e, r29	; 62
    4426:	df 91       	pop	r29
    4428:	cf 91       	pop	r28
    442a:	08 95       	ret

0000442c <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    442c:	cf 93       	push	r28
    442e:	df 93       	push	r29
    4430:	00 d0       	rcall	.+0      	; 0x4432 <tc_write_period+0x6>
    4432:	1f 92       	push	r1
    4434:	cd b7       	in	r28, 0x3d	; 61
    4436:	de b7       	in	r29, 0x3e	; 62
    4438:	89 83       	std	Y+1, r24	; 0x01
    443a:	9a 83       	std	Y+2, r25	; 0x02
    443c:	6b 83       	std	Y+3, r22	; 0x03
    443e:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    4440:	89 81       	ldd	r24, Y+1	; 0x01
    4442:	9a 81       	ldd	r25, Y+2	; 0x02
    4444:	2b 81       	ldd	r18, Y+3	; 0x03
    4446:	3c 81       	ldd	r19, Y+4	; 0x04
    4448:	fc 01       	movw	r30, r24
    444a:	26 a3       	std	Z+38, r18	; 0x26
    444c:	37 a3       	std	Z+39, r19	; 0x27
}
    444e:	00 00       	nop
    4450:	24 96       	adiw	r28, 0x04	; 4
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	de bf       	out	0x3e, r29	; 62
    4456:	df 91       	pop	r29
    4458:	cf 91       	pop	r28
    445a:	08 95       	ret

0000445c <tc_clear_overflow>:
 *
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    4460:	1f 92       	push	r1
    4462:	1f 92       	push	r1
    4464:	cd b7       	in	r28, 0x3d	; 61
    4466:	de b7       	in	r29, 0x3e	; 62
    4468:	89 83       	std	Y+1, r24	; 0x01
    446a:	9a 83       	std	Y+2, r25	; 0x02
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	9a 81       	ldd	r25, Y+2	; 0x02
    4470:	fc 01       	movw	r30, r24
    4472:	84 85       	ldd	r24, Z+12	; 0x0c
    4474:	28 2f       	mov	r18, r24
    4476:	21 60       	ori	r18, 0x01	; 1
    4478:	89 81       	ldd	r24, Y+1	; 0x01
    447a:	9a 81       	ldd	r25, Y+2	; 0x02
    447c:	fc 01       	movw	r30, r24
    447e:	24 87       	std	Z+12, r18	; 0x0c
}
    4480:	00 00       	nop
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	df 91       	pop	r29
    4488:	cf 91       	pop	r28
    448a:	08 95       	ret

0000448c <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	00 d0       	rcall	.+0      	; 0x4492 <tc_set_wgm+0x6>
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	89 83       	std	Y+1, r24	; 0x01
    4498:	9a 83       	std	Y+2, r25	; 0x02
    449a:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    449c:	89 81       	ldd	r24, Y+1	; 0x01
    449e:	9a 81       	ldd	r25, Y+2	; 0x02
    44a0:	fc 01       	movw	r30, r24
    44a2:	81 81       	ldd	r24, Z+1	; 0x01
    44a4:	98 2f       	mov	r25, r24
    44a6:	98 7f       	andi	r25, 0xF8	; 248
    44a8:	8b 81       	ldd	r24, Y+3	; 0x03
    44aa:	89 2b       	or	r24, r25
    44ac:	28 2f       	mov	r18, r24
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
    44b0:	9a 81       	ldd	r25, Y+2	; 0x02
    44b2:	fc 01       	movw	r30, r24
    44b4:	21 83       	std	Z+1, r18	; 0x01
}
    44b6:	00 00       	nop
    44b8:	23 96       	adiw	r28, 0x03	; 3
    44ba:	cd bf       	out	0x3d, r28	; 61
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	08 95       	ret

000044c4 <xbee_callback>:

static uart_device xbee_uart;
volatile extern uint8_t XbeeRx;

static void xbee_callback(void)
{
    44c4:	cf 93       	push	r28
    44c6:	df 93       	push	r29
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
	write_telem_to_xbee();
    44cc:	89 d0       	rcall	.+274    	; 0x45e0 <write_telem_to_xbee>

		tc_clear_overflow(&XBEE_TC);
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	98 e0       	ldi	r25, 0x08	; 8
    44d2:	c4 df       	rcall	.-120    	; 0x445c <tc_clear_overflow>
		
	
}
    44d4:	00 00       	nop
    44d6:	df 91       	pop	r29
    44d8:	cf 91       	pop	r28
    44da:	08 95       	ret

000044dc <xbee_init>:

void xbee_init()
{
    44dc:	cf 93       	push	r28
    44de:	df 93       	push	r29
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
	xbee_uart.Baud=XBEEBAUD;
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	92 ec       	ldi	r25, 0xC2	; 194
    44e8:	a1 e0       	ldi	r26, 0x01	; 1
    44ea:	b0 e0       	ldi	r27, 0x00	; 0
    44ec:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <xbee_uart+0x6>
    44f0:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <xbee_uart+0x7>
    44f4:	a0 93 9a 21 	sts	0x219A, r26	; 0x80219a <xbee_uart+0x8>
    44f8:	b0 93 9b 21 	sts	0x219B, r27	; 0x80219b <xbee_uart+0x9>
	xbee_uart.Port=P_XBEEPORT;
    44fc:	80 e4       	ldi	r24, 0x40	; 64
    44fe:	96 e0       	ldi	r25, 0x06	; 6
    4500:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <xbee_uart>
    4504:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <xbee_uart+0x1>
	xbee_uart.Usart=P_XBEEUART;
    4508:	80 ea       	ldi	r24, 0xA0	; 160
    450a:	98 e0       	ldi	r25, 0x08	; 8
    450c:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <xbee_uart+0x2>
    4510:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <xbee_uart+0x3>
	xbee_uart.tx=XBEETXPIN;
    4514:	88 e0       	ldi	r24, 0x08	; 8
    4516:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <xbee_uart+0x5>
	xbee_uart.rx=XBEERXPIN;
    451a:	84 e0       	ldi	r24, 0x04	; 4
    451c:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <xbee_uart+0x4>
	uart_init(&xbee_uart);
    4520:	82 e9       	ldi	r24, 0x92	; 146
    4522:	91 e2       	ldi	r25, 0x21	; 33
    4524:	0e 94 85 4b 	call	0x970a	; 0x970a <uart_init>
	XBEE_UART.CTRLA=0x14;
    4528:	80 ea       	ldi	r24, 0xA0	; 160
    452a:	98 e0       	ldi	r25, 0x08	; 8
    452c:	24 e1       	ldi	r18, 0x14	; 20
    452e:	fc 01       	movw	r30, r24
    4530:	23 83       	std	Z+3, r18	; 0x03
	if(DEBUG) printf("Xbee Initialized.\n");
    4532:	84 ee       	ldi	r24, 0xE4	; 228
    4534:	90 e2       	ldi	r25, 0x20	; 32
    4536:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
	
	tc_enable(&XBEE_TC);
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	98 e0       	ldi	r25, 0x08	; 8
    453e:	0e 94 53 40 	call	0x80a6	; 0x80a6 <tc_enable>
	tc_set_overflow_interrupt_callback(&XBEE_TC, xbee_callback);
    4542:	62 e6       	ldi	r22, 0x62	; 98
    4544:	72 e2       	ldi	r23, 0x22	; 34
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	98 e0       	ldi	r25, 0x08	; 8
    454a:	0e 94 dd 40 	call	0x81ba	; 0x81ba <tc_set_overflow_interrupt_callback>
	tc_set_wgm(&XBEE_TC, TC_WG_NORMAL);
    454e:	60 e0       	ldi	r22, 0x00	; 0
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	98 e0       	ldi	r25, 0x08	; 8
    4554:	9b df       	rcall	.-202    	; 0x448c <tc_set_wgm>
	tc_write_period(&XBEE_TC, XBEE_WRITE_INTERVAL);
    4556:	61 e1       	ldi	r22, 0x11	; 17
    4558:	7a e7       	ldi	r23, 0x7A	; 122
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	98 e0       	ldi	r25, 0x08	; 8
    455e:	66 df       	rcall	.-308    	; 0x442c <tc_write_period>
	tc_set_overflow_interrupt_level(&XBEE_TC, TC_INT_LVL_LO);
    4560:	61 e0       	ldi	r22, 0x01	; 1
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	98 e0       	ldi	r25, 0x08	; 8
    4566:	22 df       	rcall	.-444    	; 0x43ac <tc_set_overflow_interrupt_level>
	cpu_irq_enable();
    4568:	78 94       	sei
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
    456a:	61 e0       	ldi	r22, 0x01	; 1
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	98 e0       	ldi	r25, 0x08	; 8
    4570:	41 df       	rcall	.-382    	; 0x43f4 <tc_write_clock_source>
}
    4572:	00 00       	nop
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	08 95       	ret

0000457a <xbeeWrite>:

void xbeeWrite(uint8_t* data)
{	
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	1f 92       	push	r1
    4580:	1f 92       	push	r1
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	89 83       	std	Y+1, r24	; 0x01
    4588:	9a 83       	std	Y+2, r25	; 0x02
	if(blockTransmission) return NULL;
    458a:	80 91 2e 22 	lds	r24, 0x222E	; 0x80222e <blockTransmission>
    458e:	88 23       	and	r24, r24
    4590:	09 f5       	brne	.+66     	; 0x45d4 <xbeeWrite+0x5a>
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	9a 81       	ldd	r25, Y+2	; 0x02
    4596:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <strlen>
    459a:	9c 01       	movw	r18, r24
    459c:	89 81       	ldd	r24, Y+1	; 0x01
    459e:	9a 81       	ldd	r25, Y+2	; 0x02
    45a0:	a9 01       	movw	r20, r18
    45a2:	bc 01       	movw	r22, r24
    45a4:	80 ea       	ldi	r24, 0xA0	; 160
    45a6:	98 e0       	ldi	r25, 0x08	; 8
    45a8:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <usart_serial_write_packet>
	packetCount++;
    45ac:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <packetCount>
    45b0:	90 91 30 22 	lds	r25, 0x2230	; 0x802230 <packetCount+0x1>
    45b4:	a0 91 31 22 	lds	r26, 0x2231	; 0x802231 <packetCount+0x2>
    45b8:	b0 91 32 22 	lds	r27, 0x2232	; 0x802232 <packetCount+0x3>
    45bc:	01 96       	adiw	r24, 0x01	; 1
    45be:	a1 1d       	adc	r26, r1
    45c0:	b1 1d       	adc	r27, r1
    45c2:	80 93 2f 22 	sts	0x222F, r24	; 0x80222f <packetCount>
    45c6:	90 93 30 22 	sts	0x2230, r25	; 0x802230 <packetCount+0x1>
    45ca:	a0 93 31 22 	sts	0x2231, r26	; 0x802231 <packetCount+0x2>
    45ce:	b0 93 32 22 	sts	0x2232, r27	; 0x802232 <packetCount+0x3>
    45d2:	01 c0       	rjmp	.+2      	; 0x45d6 <xbeeWrite+0x5c>
	tc_write_clock_source(&XBEE_TC, TC_CLKSEL_DIV1_gc);
}

void xbeeWrite(uint8_t* data)
{	
	if(blockTransmission) return NULL;
    45d4:	00 00       	nop
	usart_serial_write_packet(P_XBEEUART, data, strlen(data));
	packetCount++;
   // if(DEBUG) printf("%s \n",(const)data);
}
    45d6:	0f 90       	pop	r0
    45d8:	0f 90       	pop	r0
    45da:	df 91       	pop	r29
    45dc:	cf 91       	pop	r28
    45de:	08 95       	ret

000045e0 <write_telem_to_xbee>:

void write_telem_to_xbee()
{
    45e0:	cf 93       	push	r28
    45e2:	df 93       	push	r29
    45e4:	cd b7       	in	r28, 0x3d	; 61
    45e6:	de b7       	in	r29, 0x3e	; 62
    45e8:	c0 54       	subi	r28, 0x40	; 64
    45ea:	d3 40       	sbci	r29, 0x03	; 3
    45ec:	cd bf       	out	0x3d, r28	; 61
    45ee:	de bf       	out	0x3e, r29	; 62
	char* telemetryString [255];
	*telemetryString = "\0";
    45f0:	83 e2       	ldi	r24, 0x23	; 35
    45f2:	90 e2       	ldi	r25, 0x20	; 32
    45f4:	8b 83       	std	Y+3, r24	; 0x03
    45f6:	9c 83       	std	Y+4, r25	; 0x04
	char* s_teamID = "2118";
    45f8:	86 ef       	ldi	r24, 0xF6	; 246
    45fa:	90 e2       	ldi	r25, 0x20	; 32
    45fc:	89 83       	std	Y+1, r24	; 0x01
    45fe:	9a 83       	std	Y+2, r25	; 0x02
	char* s_roll [10];
	char* s_spinRate [10];
	char* s_flightState [10];
	char* s_cardinalDir [10];
	
	sprintf(s_missionTime, "%i", missionTime);
    4600:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <missionTime>
    4604:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <missionTime+0x1>
    4608:	a0 91 17 22 	lds	r26, 0x2217	; 0x802217 <missionTime+0x2>
    460c:	b0 91 18 22 	lds	r27, 0x2218	; 0x802218 <missionTime+0x3>
    4610:	2b 2f       	mov	r18, r27
    4612:	2f 93       	push	r18
    4614:	2a 2f       	mov	r18, r26
    4616:	2f 93       	push	r18
    4618:	29 2f       	mov	r18, r25
    461a:	2f 93       	push	r18
    461c:	8f 93       	push	r24
    461e:	8b ef       	ldi	r24, 0xFB	; 251
    4620:	90 e2       	ldi	r25, 0x20	; 32
    4622:	89 2f       	mov	r24, r25
    4624:	8f 93       	push	r24
    4626:	8b ef       	ldi	r24, 0xFB	; 251
    4628:	90 e2       	ldi	r25, 0x20	; 32
    462a:	8f 93       	push	r24
    462c:	ce 01       	movw	r24, r28
    462e:	8f 5f       	subi	r24, 0xFF	; 255
    4630:	9d 4f       	sbci	r25, 0xFD	; 253
    4632:	29 2f       	mov	r18, r25
    4634:	2f 93       	push	r18
    4636:	8f 93       	push	r24
    4638:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    463c:	8d b7       	in	r24, 0x3d	; 61
    463e:	9e b7       	in	r25, 0x3e	; 62
    4640:	08 96       	adiw	r24, 0x08	; 8
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	de bf       	out	0x3e, r29	; 62
	sprintf(s_packetCount, "%i", packetCount);
    4646:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <packetCount>
    464a:	90 91 30 22 	lds	r25, 0x2230	; 0x802230 <packetCount+0x1>
    464e:	a0 91 31 22 	lds	r26, 0x2231	; 0x802231 <packetCount+0x2>
    4652:	b0 91 32 22 	lds	r27, 0x2232	; 0x802232 <packetCount+0x3>
    4656:	2b 2f       	mov	r18, r27
    4658:	2f 93       	push	r18
    465a:	2a 2f       	mov	r18, r26
    465c:	2f 93       	push	r18
    465e:	29 2f       	mov	r18, r25
    4660:	2f 93       	push	r18
    4662:	8f 93       	push	r24
    4664:	8b ef       	ldi	r24, 0xFB	; 251
    4666:	90 e2       	ldi	r25, 0x20	; 32
    4668:	89 2f       	mov	r24, r25
    466a:	8f 93       	push	r24
    466c:	8b ef       	ldi	r24, 0xFB	; 251
    466e:	90 e2       	ldi	r25, 0x20	; 32
    4670:	8f 93       	push	r24
    4672:	ce 01       	movw	r24, r28
    4674:	8b 5e       	subi	r24, 0xEB	; 235
    4676:	9d 4f       	sbci	r25, 0xFD	; 253
    4678:	29 2f       	mov	r18, r25
    467a:	2f 93       	push	r18
    467c:	8f 93       	push	r24
    467e:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    4682:	ed b7       	in	r30, 0x3d	; 61
    4684:	fe b7       	in	r31, 0x3e	; 62
    4686:	38 96       	adiw	r30, 0x08	; 8
    4688:	cd bf       	out	0x3d, r28	; 61
    468a:	de bf       	out	0x3e, r29	; 62
	sprintf(s_altitude, "%f", altitude);
    468c:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <altitude>
    4690:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <altitude+0x1>
    4694:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <altitude+0x2>
    4698:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <altitude+0x3>
    469c:	2b 2f       	mov	r18, r27
    469e:	2f 93       	push	r18
    46a0:	2a 2f       	mov	r18, r26
    46a2:	2f 93       	push	r18
    46a4:	29 2f       	mov	r18, r25
    46a6:	2f 93       	push	r18
    46a8:	8f 93       	push	r24
    46aa:	8e ef       	ldi	r24, 0xFE	; 254
    46ac:	90 e2       	ldi	r25, 0x20	; 32
    46ae:	89 2f       	mov	r24, r25
    46b0:	8f 93       	push	r24
    46b2:	8e ef       	ldi	r24, 0xFE	; 254
    46b4:	90 e2       	ldi	r25, 0x20	; 32
    46b6:	8f 93       	push	r24
    46b8:	ce 01       	movw	r24, r28
    46ba:	87 5d       	subi	r24, 0xD7	; 215
    46bc:	9d 4f       	sbci	r25, 0xFD	; 253
    46be:	29 2f       	mov	r18, r25
    46c0:	2f 93       	push	r18
    46c2:	8f 93       	push	r24
    46c4:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    46c8:	8d b7       	in	r24, 0x3d	; 61
    46ca:	9e b7       	in	r25, 0x3e	; 62
    46cc:	08 96       	adiw	r24, 0x08	; 8
    46ce:	cd bf       	out	0x3d, r28	; 61
    46d0:	de bf       	out	0x3e, r29	; 62
	sprintf(s_pressure, "%i",pressure);
    46d2:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <pressure>
    46d6:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <pressure+0x1>
    46da:	a0 91 1f 22 	lds	r26, 0x221F	; 0x80221f <pressure+0x2>
    46de:	b0 91 20 22 	lds	r27, 0x2220	; 0x802220 <pressure+0x3>
    46e2:	2b 2f       	mov	r18, r27
    46e4:	2f 93       	push	r18
    46e6:	2a 2f       	mov	r18, r26
    46e8:	2f 93       	push	r18
    46ea:	29 2f       	mov	r18, r25
    46ec:	2f 93       	push	r18
    46ee:	8f 93       	push	r24
    46f0:	8b ef       	ldi	r24, 0xFB	; 251
    46f2:	90 e2       	ldi	r25, 0x20	; 32
    46f4:	89 2f       	mov	r24, r25
    46f6:	8f 93       	push	r24
    46f8:	8b ef       	ldi	r24, 0xFB	; 251
    46fa:	90 e2       	ldi	r25, 0x20	; 32
    46fc:	8f 93       	push	r24
    46fe:	ce 01       	movw	r24, r28
    4700:	83 5c       	subi	r24, 0xC3	; 195
    4702:	9d 4f       	sbci	r25, 0xFD	; 253
    4704:	29 2f       	mov	r18, r25
    4706:	2f 93       	push	r18
    4708:	8f 93       	push	r24
    470a:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    470e:	ed b7       	in	r30, 0x3d	; 61
    4710:	fe b7       	in	r31, 0x3e	; 62
    4712:	38 96       	adiw	r30, 0x08	; 8
    4714:	cd bf       	out	0x3d, r28	; 61
    4716:	de bf       	out	0x3e, r29	; 62
	sprintf(s_temp, "%f", temp);
    4718:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <temp>
    471c:	90 91 12 22 	lds	r25, 0x2212	; 0x802212 <temp+0x1>
    4720:	a0 91 13 22 	lds	r26, 0x2213	; 0x802213 <temp+0x2>
    4724:	b0 91 14 22 	lds	r27, 0x2214	; 0x802214 <temp+0x3>
    4728:	2b 2f       	mov	r18, r27
    472a:	2f 93       	push	r18
    472c:	2a 2f       	mov	r18, r26
    472e:	2f 93       	push	r18
    4730:	29 2f       	mov	r18, r25
    4732:	2f 93       	push	r18
    4734:	8f 93       	push	r24
    4736:	8e ef       	ldi	r24, 0xFE	; 254
    4738:	90 e2       	ldi	r25, 0x20	; 32
    473a:	89 2f       	mov	r24, r25
    473c:	8f 93       	push	r24
    473e:	8e ef       	ldi	r24, 0xFE	; 254
    4740:	90 e2       	ldi	r25, 0x20	; 32
    4742:	8f 93       	push	r24
    4744:	ce 01       	movw	r24, r28
    4746:	8f 5a       	subi	r24, 0xAF	; 175
    4748:	9d 4f       	sbci	r25, 0xFD	; 253
    474a:	29 2f       	mov	r18, r25
    474c:	2f 93       	push	r18
    474e:	8f 93       	push	r24
    4750:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    4754:	8d b7       	in	r24, 0x3d	; 61
    4756:	9e b7       	in	r25, 0x3e	; 62
    4758:	08 96       	adiw	r24, 0x08	; 8
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	de bf       	out	0x3e, r29	; 62
	sprintf(s_voltage, "%f", voltage);
    475e:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <voltage>
    4762:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <voltage+0x1>
    4766:	a0 91 1b 22 	lds	r26, 0x221B	; 0x80221b <voltage+0x2>
    476a:	b0 91 1c 22 	lds	r27, 0x221C	; 0x80221c <voltage+0x3>
    476e:	2b 2f       	mov	r18, r27
    4770:	2f 93       	push	r18
    4772:	2a 2f       	mov	r18, r26
    4774:	2f 93       	push	r18
    4776:	29 2f       	mov	r18, r25
    4778:	2f 93       	push	r18
    477a:	8f 93       	push	r24
    477c:	8e ef       	ldi	r24, 0xFE	; 254
    477e:	90 e2       	ldi	r25, 0x20	; 32
    4780:	89 2f       	mov	r24, r25
    4782:	8f 93       	push	r24
    4784:	8e ef       	ldi	r24, 0xFE	; 254
    4786:	90 e2       	ldi	r25, 0x20	; 32
    4788:	8f 93       	push	r24
    478a:	ce 01       	movw	r24, r28
    478c:	8b 59       	subi	r24, 0x9B	; 155
    478e:	9d 4f       	sbci	r25, 0xFD	; 253
    4790:	29 2f       	mov	r18, r25
    4792:	2f 93       	push	r18
    4794:	8f 93       	push	r24
    4796:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    479a:	ed b7       	in	r30, 0x3d	; 61
    479c:	fe b7       	in	r31, 0x3e	; 62
    479e:	38 96       	adiw	r30, 0x08	; 8
    47a0:	cd bf       	out	0x3d, r28	; 61
    47a2:	de bf       	out	0x3e, r29	; 62
	sprintf(s_gpsTime, " ");
    47a4:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <usart_config.7021+0x115>
    47a8:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <usart_config.7021+0x116>
    47ac:	ce 01       	movw	r24, r28
    47ae:	87 58       	subi	r24, 0x87	; 135
    47b0:	9d 4f       	sbci	r25, 0xFD	; 253
    47b2:	fc 01       	movw	r30, r24
    47b4:	20 83       	st	Z, r18
    47b6:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLat, " ");
    47b8:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <usart_config.7021+0x115>
    47bc:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <usart_config.7021+0x116>
    47c0:	ce 01       	movw	r24, r28
    47c2:	83 57       	subi	r24, 0x73	; 115
    47c4:	9d 4f       	sbci	r25, 0xFD	; 253
    47c6:	fc 01       	movw	r30, r24
    47c8:	20 83       	st	Z, r18
    47ca:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsLong, " ");
    47cc:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <usart_config.7021+0x115>
    47d0:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <usart_config.7021+0x116>
    47d4:	ce 01       	movw	r24, r28
    47d6:	8f 55       	subi	r24, 0x5F	; 95
    47d8:	9d 4f       	sbci	r25, 0xFD	; 253
    47da:	fc 01       	movw	r30, r24
    47dc:	20 83       	st	Z, r18
    47de:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsAlt, " ");
    47e0:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <usart_config.7021+0x115>
    47e4:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <usart_config.7021+0x116>
    47e8:	ce 01       	movw	r24, r28
    47ea:	8b 54       	subi	r24, 0x4B	; 75
    47ec:	9d 4f       	sbci	r25, 0xFD	; 253
    47ee:	fc 01       	movw	r30, r24
    47f0:	20 83       	st	Z, r18
    47f2:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_gpsSats, " ");
    47f4:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <usart_config.7021+0x115>
    47f8:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <usart_config.7021+0x116>
    47fc:	ce 01       	movw	r24, r28
    47fe:	87 53       	subi	r24, 0x37	; 55
    4800:	9d 4f       	sbci	r25, 0xFD	; 253
    4802:	fc 01       	movw	r30, r24
    4804:	20 83       	st	Z, r18
    4806:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_pitch, "%f", pitch);
    4808:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <pitch>
    480c:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <pitch+0x1>
    4810:	a0 91 b2 22 	lds	r26, 0x22B2	; 0x8022b2 <pitch+0x2>
    4814:	b0 91 b3 22 	lds	r27, 0x22B3	; 0x8022b3 <pitch+0x3>
    4818:	2b 2f       	mov	r18, r27
    481a:	2f 93       	push	r18
    481c:	2a 2f       	mov	r18, r26
    481e:	2f 93       	push	r18
    4820:	29 2f       	mov	r18, r25
    4822:	2f 93       	push	r18
    4824:	8f 93       	push	r24
    4826:	8e ef       	ldi	r24, 0xFE	; 254
    4828:	90 e2       	ldi	r25, 0x20	; 32
    482a:	89 2f       	mov	r24, r25
    482c:	8f 93       	push	r24
    482e:	8e ef       	ldi	r24, 0xFE	; 254
    4830:	90 e2       	ldi	r25, 0x20	; 32
    4832:	8f 93       	push	r24
    4834:	ce 01       	movw	r24, r28
    4836:	83 52       	subi	r24, 0x23	; 35
    4838:	9d 4f       	sbci	r25, 0xFD	; 253
    483a:	29 2f       	mov	r18, r25
    483c:	2f 93       	push	r18
    483e:	8f 93       	push	r24
    4840:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    4844:	8d b7       	in	r24, 0x3d	; 61
    4846:	9e b7       	in	r25, 0x3e	; 62
    4848:	08 96       	adiw	r24, 0x08	; 8
    484a:	cd bf       	out	0x3d, r28	; 61
    484c:	de bf       	out	0x3e, r29	; 62
	sprintf(s_roll, "%f", roll);
    484e:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <roll>
    4852:	90 91 b5 22 	lds	r25, 0x22B5	; 0x8022b5 <roll+0x1>
    4856:	a0 91 b6 22 	lds	r26, 0x22B6	; 0x8022b6 <roll+0x2>
    485a:	b0 91 b7 22 	lds	r27, 0x22B7	; 0x8022b7 <roll+0x3>
    485e:	2b 2f       	mov	r18, r27
    4860:	2f 93       	push	r18
    4862:	2a 2f       	mov	r18, r26
    4864:	2f 93       	push	r18
    4866:	29 2f       	mov	r18, r25
    4868:	2f 93       	push	r18
    486a:	8f 93       	push	r24
    486c:	8e ef       	ldi	r24, 0xFE	; 254
    486e:	90 e2       	ldi	r25, 0x20	; 32
    4870:	89 2f       	mov	r24, r25
    4872:	8f 93       	push	r24
    4874:	8e ef       	ldi	r24, 0xFE	; 254
    4876:	90 e2       	ldi	r25, 0x20	; 32
    4878:	8f 93       	push	r24
    487a:	ce 01       	movw	r24, r28
    487c:	8f 50       	subi	r24, 0x0F	; 15
    487e:	9d 4f       	sbci	r25, 0xFD	; 253
    4880:	29 2f       	mov	r18, r25
    4882:	2f 93       	push	r18
    4884:	8f 93       	push	r24
    4886:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    488a:	ed b7       	in	r30, 0x3d	; 61
    488c:	fe b7       	in	r31, 0x3e	; 62
    488e:	38 96       	adiw	r30, 0x08	; 8
    4890:	cd bf       	out	0x3d, r28	; 61
    4892:	de bf       	out	0x3e, r29	; 62
	sprintf(s_spinRate, " ");
    4894:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <usart_config.7021+0x115>
    4898:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <usart_config.7021+0x116>
    489c:	ce 01       	movw	r24, r28
    489e:	8b 5f       	subi	r24, 0xFB	; 251
    48a0:	9c 4f       	sbci	r25, 0xFC	; 252
    48a2:	fc 01       	movw	r30, r24
    48a4:	20 83       	st	Z, r18
    48a6:	31 83       	std	Z+1, r19	; 0x01
	sprintf(s_flightState, "%i", flightState);
    48a8:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <flightState>
    48ac:	88 2f       	mov	r24, r24
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	29 2f       	mov	r18, r25
    48b2:	2f 93       	push	r18
    48b4:	8f 93       	push	r24
    48b6:	8b ef       	ldi	r24, 0xFB	; 251
    48b8:	90 e2       	ldi	r25, 0x20	; 32
    48ba:	89 2f       	mov	r24, r25
    48bc:	8f 93       	push	r24
    48be:	8b ef       	ldi	r24, 0xFB	; 251
    48c0:	90 e2       	ldi	r25, 0x20	; 32
    48c2:	8f 93       	push	r24
    48c4:	ce 01       	movw	r24, r28
    48c6:	87 5e       	subi	r24, 0xE7	; 231
    48c8:	9c 4f       	sbci	r25, 0xFC	; 252
    48ca:	29 2f       	mov	r18, r25
    48cc:	2f 93       	push	r18
    48ce:	8f 93       	push	r24
    48d0:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
    48da:	0f 90       	pop	r0
    48dc:	0f 90       	pop	r0
    48de:	0f 90       	pop	r0
	sprintf(s_cardinalDir, "%f", heading);
    48e0:	80 91 c0 24 	lds	r24, 0x24C0	; 0x8024c0 <heading>
    48e4:	90 91 c1 24 	lds	r25, 0x24C1	; 0x8024c1 <heading+0x1>
    48e8:	a0 91 c2 24 	lds	r26, 0x24C2	; 0x8024c2 <heading+0x2>
    48ec:	b0 91 c3 24 	lds	r27, 0x24C3	; 0x8024c3 <heading+0x3>
    48f0:	2b 2f       	mov	r18, r27
    48f2:	2f 93       	push	r18
    48f4:	2a 2f       	mov	r18, r26
    48f6:	2f 93       	push	r18
    48f8:	29 2f       	mov	r18, r25
    48fa:	2f 93       	push	r18
    48fc:	8f 93       	push	r24
    48fe:	8e ef       	ldi	r24, 0xFE	; 254
    4900:	90 e2       	ldi	r25, 0x20	; 32
    4902:	89 2f       	mov	r24, r25
    4904:	8f 93       	push	r24
    4906:	8e ef       	ldi	r24, 0xFE	; 254
    4908:	90 e2       	ldi	r25, 0x20	; 32
    490a:	8f 93       	push	r24
    490c:	ce 01       	movw	r24, r28
    490e:	83 5d       	subi	r24, 0xD3	; 211
    4910:	9c 4f       	sbci	r25, 0xFC	; 252
    4912:	29 2f       	mov	r18, r25
    4914:	2f 93       	push	r18
    4916:	8f 93       	push	r24
    4918:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    491c:	8d b7       	in	r24, 0x3d	; 61
    491e:	9e b7       	in	r25, 0x3e	; 62
    4920:	08 96       	adiw	r24, 0x08	; 8
    4922:	cd bf       	out	0x3d, r28	; 61
    4924:	de bf       	out	0x3e, r29	; 62
	
	
	sprintf(telemetryString,"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n\0",
    4926:	ce 01       	movw	r24, r28
    4928:	83 5d       	subi	r24, 0xD3	; 211
    492a:	9c 4f       	sbci	r25, 0xFC	; 252
    492c:	29 2f       	mov	r18, r25
    492e:	2f 93       	push	r18
    4930:	8f 93       	push	r24
    4932:	ce 01       	movw	r24, r28
    4934:	87 5e       	subi	r24, 0xE7	; 231
    4936:	9c 4f       	sbci	r25, 0xFC	; 252
    4938:	29 2f       	mov	r18, r25
    493a:	2f 93       	push	r18
    493c:	8f 93       	push	r24
    493e:	ce 01       	movw	r24, r28
    4940:	8b 5f       	subi	r24, 0xFB	; 251
    4942:	9c 4f       	sbci	r25, 0xFC	; 252
    4944:	29 2f       	mov	r18, r25
    4946:	2f 93       	push	r18
    4948:	8f 93       	push	r24
    494a:	ce 01       	movw	r24, r28
    494c:	8f 50       	subi	r24, 0x0F	; 15
    494e:	9d 4f       	sbci	r25, 0xFD	; 253
    4950:	29 2f       	mov	r18, r25
    4952:	2f 93       	push	r18
    4954:	8f 93       	push	r24
    4956:	ce 01       	movw	r24, r28
    4958:	83 52       	subi	r24, 0x23	; 35
    495a:	9d 4f       	sbci	r25, 0xFD	; 253
    495c:	29 2f       	mov	r18, r25
    495e:	2f 93       	push	r18
    4960:	8f 93       	push	r24
    4962:	ce 01       	movw	r24, r28
    4964:	87 53       	subi	r24, 0x37	; 55
    4966:	9d 4f       	sbci	r25, 0xFD	; 253
    4968:	29 2f       	mov	r18, r25
    496a:	2f 93       	push	r18
    496c:	8f 93       	push	r24
    496e:	ce 01       	movw	r24, r28
    4970:	8b 54       	subi	r24, 0x4B	; 75
    4972:	9d 4f       	sbci	r25, 0xFD	; 253
    4974:	29 2f       	mov	r18, r25
    4976:	2f 93       	push	r18
    4978:	8f 93       	push	r24
    497a:	ce 01       	movw	r24, r28
    497c:	8f 55       	subi	r24, 0x5F	; 95
    497e:	9d 4f       	sbci	r25, 0xFD	; 253
    4980:	29 2f       	mov	r18, r25
    4982:	2f 93       	push	r18
    4984:	8f 93       	push	r24
    4986:	ce 01       	movw	r24, r28
    4988:	83 57       	subi	r24, 0x73	; 115
    498a:	9d 4f       	sbci	r25, 0xFD	; 253
    498c:	29 2f       	mov	r18, r25
    498e:	2f 93       	push	r18
    4990:	8f 93       	push	r24
    4992:	ce 01       	movw	r24, r28
    4994:	87 58       	subi	r24, 0x87	; 135
    4996:	9d 4f       	sbci	r25, 0xFD	; 253
    4998:	29 2f       	mov	r18, r25
    499a:	2f 93       	push	r18
    499c:	8f 93       	push	r24
    499e:	ce 01       	movw	r24, r28
    49a0:	8b 59       	subi	r24, 0x9B	; 155
    49a2:	9d 4f       	sbci	r25, 0xFD	; 253
    49a4:	29 2f       	mov	r18, r25
    49a6:	2f 93       	push	r18
    49a8:	8f 93       	push	r24
    49aa:	ce 01       	movw	r24, r28
    49ac:	8f 5a       	subi	r24, 0xAF	; 175
    49ae:	9d 4f       	sbci	r25, 0xFD	; 253
    49b0:	29 2f       	mov	r18, r25
    49b2:	2f 93       	push	r18
    49b4:	8f 93       	push	r24
    49b6:	ce 01       	movw	r24, r28
    49b8:	83 5c       	subi	r24, 0xC3	; 195
    49ba:	9d 4f       	sbci	r25, 0xFD	; 253
    49bc:	29 2f       	mov	r18, r25
    49be:	2f 93       	push	r18
    49c0:	8f 93       	push	r24
    49c2:	ce 01       	movw	r24, r28
    49c4:	87 5d       	subi	r24, 0xD7	; 215
    49c6:	9d 4f       	sbci	r25, 0xFD	; 253
    49c8:	29 2f       	mov	r18, r25
    49ca:	2f 93       	push	r18
    49cc:	8f 93       	push	r24
    49ce:	ce 01       	movw	r24, r28
    49d0:	8b 5e       	subi	r24, 0xEB	; 235
    49d2:	9d 4f       	sbci	r25, 0xFD	; 253
    49d4:	29 2f       	mov	r18, r25
    49d6:	2f 93       	push	r18
    49d8:	8f 93       	push	r24
    49da:	ce 01       	movw	r24, r28
    49dc:	8f 5f       	subi	r24, 0xFF	; 255
    49de:	9d 4f       	sbci	r25, 0xFD	; 253
    49e0:	29 2f       	mov	r18, r25
    49e2:	2f 93       	push	r18
    49e4:	8f 93       	push	r24
    49e6:	8a 81       	ldd	r24, Y+2	; 0x02
    49e8:	8f 93       	push	r24
    49ea:	89 81       	ldd	r24, Y+1	; 0x01
    49ec:	8f 93       	push	r24
    49ee:	85 e2       	ldi	r24, 0x25	; 37
    49f0:	90 e2       	ldi	r25, 0x20	; 32
    49f2:	89 2f       	mov	r24, r25
    49f4:	8f 93       	push	r24
    49f6:	85 e2       	ldi	r24, 0x25	; 37
    49f8:	90 e2       	ldi	r25, 0x20	; 32
    49fa:	8f 93       	push	r24
    49fc:	ce 01       	movw	r24, r28
    49fe:	03 96       	adiw	r24, 0x03	; 3
    4a00:	29 2f       	mov	r18, r25
    4a02:	2f 93       	push	r18
    4a04:	8f 93       	push	r24
    4a06:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <sprintf>
    4a0a:	ed b7       	in	r30, 0x3d	; 61
    4a0c:	fe b7       	in	r31, 0x3e	; 62
    4a0e:	b6 96       	adiw	r30, 0x26	; 38
    4a10:	cd bf       	out	0x3d, r28	; 61
    4a12:	de bf       	out	0x3e, r29	; 62
	s_roll,
	s_spinRate,
	s_flightState,
	s_cardinalDir);
	
	xbeeWrite(telemetryString);
    4a14:	ce 01       	movw	r24, r28
    4a16:	03 96       	adiw	r24, 0x03	; 3
    4a18:	b0 dd       	rcall	.-1184   	; 0x457a <xbeeWrite>
}
    4a1a:	00 00       	nop
    4a1c:	c0 5c       	subi	r28, 0xC0	; 192
    4a1e:	dc 4f       	sbci	r29, 0xFC	; 252
    4a20:	cd bf       	out	0x3d, r28	; 61
    4a22:	de bf       	out	0x3e, r29	; 62
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	08 95       	ret

00004a2a <__vector_25>:


ISR(READ_INTURUPT)
{
    4a2a:	1f 92       	push	r1
    4a2c:	0f 92       	push	r0
    4a2e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a32:	0f 92       	push	r0
    4a34:	11 24       	eor	r1, r1
    4a36:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a3a:	0f 92       	push	r0
    4a3c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a40:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a44:	0f 92       	push	r0
    4a46:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a4a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a4e:	0f 92       	push	r0
    4a50:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a54:	8f 93       	push	r24
    4a56:	9f 93       	push	r25
    4a58:	ef 93       	push	r30
    4a5a:	ff 93       	push	r31
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
    4a60:	cd b7       	in	r28, 0x3d	; 61
    4a62:	de b7       	in	r29, 0x3e	; 62
	XbeeRx=XBEE_UART.DATA;
    4a64:	80 ea       	ldi	r24, 0xA0	; 160
    4a66:	98 e0       	ldi	r25, 0x08	; 8
    4a68:	fc 01       	movw	r30, r24
    4a6a:	80 81       	ld	r24, Z
    4a6c:	80 93 d4 27 	sts	0x27D4, r24	; 0x8027d4 <XbeeRx>
    4a70:	00 00       	nop
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	ff 91       	pop	r31
    4a78:	ef 91       	pop	r30
    4a7a:	9f 91       	pop	r25
    4a7c:	8f 91       	pop	r24
    4a7e:	0f 90       	pop	r0
    4a80:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    4a84:	0f 90       	pop	r0
    4a86:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    4a8a:	0f 90       	pop	r0
    4a8c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    4a90:	0f 90       	pop	r0
    4a92:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    4a96:	0f 90       	pop	r0
    4a98:	1f 90       	pop	r1
    4a9a:	18 95       	reti

00004a9c <rbu8_write>:
	rbu8_write(buffer, data, i);
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
    4a9c:	cf 93       	push	r28
    4a9e:	df 93       	push	r29
    4aa0:	cd b7       	in	r28, 0x3d	; 61
    4aa2:	de b7       	in	r29, 0x3e	; 62
    4aa4:	27 97       	sbiw	r28, 0x07	; 7
    4aa6:	cd bf       	out	0x3d, r28	; 61
    4aa8:	de bf       	out	0x3e, r29	; 62
    4aaa:	8a 83       	std	Y+2, r24	; 0x02
    4aac:	9b 83       	std	Y+3, r25	; 0x03
    4aae:	6c 83       	std	Y+4, r22	; 0x04
    4ab0:	7d 83       	std	Y+5, r23	; 0x05
    4ab2:	4e 83       	std	Y+6, r20	; 0x06
    4ab4:	5f 83       	std	Y+7, r21	; 0x07
	for (uint8_t i = 0; i < length; i++)
    4ab6:	19 82       	std	Y+1, r1	; 0x01
    4ab8:	65 c0       	rjmp	.+202    	; 0x4b84 <rbu8_write+0xe8>
	{
		buffer->buffer[buffer->head] = data[i]; // data can be not be access greater length-1
    4aba:	8a 81       	ldd	r24, Y+2	; 0x02
    4abc:	9b 81       	ldd	r25, Y+3	; 0x03
    4abe:	fc 01       	movw	r30, r24
    4ac0:	26 81       	ldd	r18, Z+6	; 0x06
    4ac2:	37 81       	ldd	r19, Z+7	; 0x07
    4ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac8:	fc 01       	movw	r30, r24
    4aca:	82 81       	ldd	r24, Z+2	; 0x02
    4acc:	93 81       	ldd	r25, Z+3	; 0x03
    4ace:	82 0f       	add	r24, r18
    4ad0:	93 1f       	adc	r25, r19
    4ad2:	29 81       	ldd	r18, Y+1	; 0x01
    4ad4:	22 2f       	mov	r18, r18
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	4c 81       	ldd	r20, Y+4	; 0x04
    4ada:	5d 81       	ldd	r21, Y+5	; 0x05
    4adc:	24 0f       	add	r18, r20
    4ade:	35 1f       	adc	r19, r21
    4ae0:	f9 01       	movw	r30, r18
    4ae2:	20 81       	ld	r18, Z
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	20 83       	st	Z, r18
		buffer->head++;
    4ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aea:	9b 81       	ldd	r25, Y+3	; 0x03
    4aec:	fc 01       	movw	r30, r24
    4aee:	82 81       	ldd	r24, Z+2	; 0x02
    4af0:	93 81       	ldd	r25, Z+3	; 0x03
    4af2:	9c 01       	movw	r18, r24
    4af4:	2f 5f       	subi	r18, 0xFF	; 255
    4af6:	3f 4f       	sbci	r19, 0xFF	; 255
    4af8:	8a 81       	ldd	r24, Y+2	; 0x02
    4afa:	9b 81       	ldd	r25, Y+3	; 0x03
    4afc:	fc 01       	movw	r30, r24
    4afe:	22 83       	std	Z+2, r18	; 0x02
    4b00:	33 83       	std	Z+3, r19	; 0x03
		
		if (buffer->head == buffer->array_length) //Next value to write to is beyond the end of the array
    4b02:	8a 81       	ldd	r24, Y+2	; 0x02
    4b04:	9b 81       	ldd	r25, Y+3	; 0x03
    4b06:	fc 01       	movw	r30, r24
    4b08:	22 81       	ldd	r18, Z+2	; 0x02
    4b0a:	33 81       	ldd	r19, Z+3	; 0x03
    4b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b10:	fc 01       	movw	r30, r24
    4b12:	80 81       	ld	r24, Z
    4b14:	91 81       	ldd	r25, Z+1	; 0x01
    4b16:	28 17       	cp	r18, r24
    4b18:	39 07       	cpc	r19, r25
    4b1a:	29 f4       	brne	.+10     	; 0x4b26 <rbu8_write+0x8a>
		{
			buffer->head = 0;
    4b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b20:	fc 01       	movw	r30, r24
    4b22:	12 82       	std	Z+2, r1	; 0x02
    4b24:	13 82       	std	Z+3, r1	; 0x03
		} // end if
		
		if (buffer->head == buffer->tail)
    4b26:	8a 81       	ldd	r24, Y+2	; 0x02
    4b28:	9b 81       	ldd	r25, Y+3	; 0x03
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	22 81       	ldd	r18, Z+2	; 0x02
    4b2e:	33 81       	ldd	r19, Z+3	; 0x03
    4b30:	8a 81       	ldd	r24, Y+2	; 0x02
    4b32:	9b 81       	ldd	r25, Y+3	; 0x03
    4b34:	fc 01       	movw	r30, r24
    4b36:	84 81       	ldd	r24, Z+4	; 0x04
    4b38:	95 81       	ldd	r25, Z+5	; 0x05
    4b3a:	28 17       	cp	r18, r24
    4b3c:	39 07       	cpc	r19, r25
    4b3e:	f9 f4       	brne	.+62     	; 0x4b7e <rbu8_write+0xe2>
		{
			buffer->tail++;
    4b40:	8a 81       	ldd	r24, Y+2	; 0x02
    4b42:	9b 81       	ldd	r25, Y+3	; 0x03
    4b44:	fc 01       	movw	r30, r24
    4b46:	84 81       	ldd	r24, Z+4	; 0x04
    4b48:	95 81       	ldd	r25, Z+5	; 0x05
    4b4a:	9c 01       	movw	r18, r24
    4b4c:	2f 5f       	subi	r18, 0xFF	; 255
    4b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b50:	8a 81       	ldd	r24, Y+2	; 0x02
    4b52:	9b 81       	ldd	r25, Y+3	; 0x03
    4b54:	fc 01       	movw	r30, r24
    4b56:	24 83       	std	Z+4, r18	; 0x04
    4b58:	35 83       	std	Z+5, r19	; 0x05
			
			if (buffer->tail == buffer->array_length){
    4b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b5e:	fc 01       	movw	r30, r24
    4b60:	24 81       	ldd	r18, Z+4	; 0x04
    4b62:	35 81       	ldd	r19, Z+5	; 0x05
    4b64:	8a 81       	ldd	r24, Y+2	; 0x02
    4b66:	9b 81       	ldd	r25, Y+3	; 0x03
    4b68:	fc 01       	movw	r30, r24
    4b6a:	80 81       	ld	r24, Z
    4b6c:	91 81       	ldd	r25, Z+1	; 0x01
    4b6e:	28 17       	cp	r18, r24
    4b70:	39 07       	cpc	r19, r25
    4b72:	29 f4       	brne	.+10     	; 0x4b7e <rbu8_write+0xe2>
				buffer->tail = 0;
    4b74:	8a 81       	ldd	r24, Y+2	; 0x02
    4b76:	9b 81       	ldd	r25, Y+3	; 0x03
    4b78:	fc 01       	movw	r30, r24
    4b7a:	14 82       	std	Z+4, r1	; 0x04
    4b7c:	15 82       	std	Z+5, r1	; 0x05
}
void rbu8_write(RingBufferu8_t* buffer, const uint8_t* data, uint16_t length)
/* Adds length bytes, taken from the data argument, to the end of buffer */
// Author: William Hankins
{
	for (uint8_t i = 0; i < length; i++)
    4b7e:	89 81       	ldd	r24, Y+1	; 0x01
    4b80:	8f 5f       	subi	r24, 0xFF	; 255
    4b82:	89 83       	std	Y+1, r24	; 0x01
    4b84:	89 81       	ldd	r24, Y+1	; 0x01
    4b86:	28 2f       	mov	r18, r24
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    4b8e:	28 17       	cp	r18, r24
    4b90:	39 07       	cpc	r19, r25
    4b92:	08 f4       	brcc	.+2      	; 0x4b96 <rbu8_write+0xfa>
    4b94:	92 cf       	rjmp	.-220    	; 0x4aba <rbu8_write+0x1e>
			if (buffer->tail == buffer->array_length){
				buffer->tail = 0;
			}// end if
		} // end if
	} // end for
} // end write_to_ring_buffer
    4b96:	00 00       	nop
    4b98:	27 96       	adiw	r28, 0x07	; 7
    4b9a:	cd bf       	out	0x3d, r28	; 61
    4b9c:	de bf       	out	0x3e, r29	; 62
    4b9e:	df 91       	pop	r29
    4ba0:	cf 91       	pop	r28
    4ba2:	08 95       	ret

00004ba4 <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
    4ba8:	00 d0       	rcall	.+0      	; 0x4baa <rbu8_init+0x6>
    4baa:	00 d0       	rcall	.+0      	; 0x4bac <rbu8_init+0x8>
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
    4bb0:	89 83       	std	Y+1, r24	; 0x01
    4bb2:	9a 83       	std	Y+2, r25	; 0x02
    4bb4:	6b 83       	std	Y+3, r22	; 0x03
    4bb6:	7c 83       	std	Y+4, r23	; 0x04
    4bb8:	4d 83       	std	Y+5, r20	; 0x05
    4bba:	5e 83       	std	Y+6, r21	; 0x06
	buffer->head = 0; //Beginning of array
    4bbc:	89 81       	ldd	r24, Y+1	; 0x01
    4bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	12 82       	std	Z+2, r1	; 0x02
    4bc4:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bca:	fc 01       	movw	r30, r24
    4bcc:	14 82       	std	Z+4, r1	; 0x04
    4bce:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
    4bd0:	89 81       	ldd	r24, Y+1	; 0x01
    4bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    4bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    4bd8:	fc 01       	movw	r30, r24
    4bda:	26 83       	std	Z+6, r18	; 0x06
    4bdc:	37 83       	std	Z+7, r19	; 0x07
	buffer->array_length = backing_array_length;
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	9a 81       	ldd	r25, Y+2	; 0x02
    4be2:	2d 81       	ldd	r18, Y+5	; 0x05
    4be4:	3e 81       	ldd	r19, Y+6	; 0x06
    4be6:	fc 01       	movw	r30, r24
    4be8:	20 83       	st	Z, r18
    4bea:	31 83       	std	Z+1, r19	; 0x01
}
    4bec:	00 00       	nop
    4bee:	26 96       	adiw	r28, 0x06	; 6
    4bf0:	cd bf       	out	0x3d, r28	; 61
    4bf2:	de bf       	out	0x3e, r29	; 62
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	08 95       	ret

00004bfa <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
    4bfa:	cf 93       	push	r28
    4bfc:	df 93       	push	r29
    4bfe:	cd b7       	in	r28, 0x3d	; 61
    4c00:	de b7       	in	r29, 0x3e	; 62
    4c02:	2a 97       	sbiw	r28, 0x0a	; 10
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	8d 83       	std	Y+5, r24	; 0x05
    4c0a:	9e 83       	std	Y+6, r25	; 0x06
    4c0c:	6f 83       	std	Y+7, r22	; 0x07
    4c0e:	78 87       	std	Y+8, r23	; 0x08
    4c10:	49 87       	std	Y+9, r20	; 0x09
    4c12:	5a 87       	std	Y+10, r21	; 0x0a
	uint16_t index = buffer->tail;
    4c14:	8d 81       	ldd	r24, Y+5	; 0x05
    4c16:	9e 81       	ldd	r25, Y+6	; 0x06
    4c18:	fc 01       	movw	r30, r24
    4c1a:	84 81       	ldd	r24, Z+4	; 0x04
    4c1c:	95 81       	ldd	r25, Z+5	; 0x05
    4c1e:	89 83       	std	Y+1, r24	; 0x01
    4c20:	9a 83       	std	Y+2, r25	; 0x02
	uint16_t i = 0;
    4c22:	1b 82       	std	Y+3, r1	; 0x03
    4c24:	1c 82       	std	Y+4, r1	; 0x04
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    4c26:	1b 82       	std	Y+3, r1	; 0x03
    4c28:	1c 82       	std	Y+4, r1	; 0x04
    4c2a:	2d c0       	rjmp	.+90     	; 0x4c86 <rbu8_read+0x8c>
	{

		dest[i] = buffer->buffer[index];
    4c2c:	2f 81       	ldd	r18, Y+7	; 0x07
    4c2e:	38 85       	ldd	r19, Y+8	; 0x08
    4c30:	8b 81       	ldd	r24, Y+3	; 0x03
    4c32:	9c 81       	ldd	r25, Y+4	; 0x04
    4c34:	82 0f       	add	r24, r18
    4c36:	93 1f       	adc	r25, r19
    4c38:	2d 81       	ldd	r18, Y+5	; 0x05
    4c3a:	3e 81       	ldd	r19, Y+6	; 0x06
    4c3c:	f9 01       	movw	r30, r18
    4c3e:	46 81       	ldd	r20, Z+6	; 0x06
    4c40:	57 81       	ldd	r21, Z+7	; 0x07
    4c42:	29 81       	ldd	r18, Y+1	; 0x01
    4c44:	3a 81       	ldd	r19, Y+2	; 0x02
    4c46:	24 0f       	add	r18, r20
    4c48:	35 1f       	adc	r19, r21
    4c4a:	f9 01       	movw	r30, r18
    4c4c:	20 81       	ld	r18, Z
    4c4e:	fc 01       	movw	r30, r24
    4c50:	20 83       	st	Z, r18
		if (index == buffer->array_length - 1) //Reset if we've hit the end
    4c52:	8d 81       	ldd	r24, Y+5	; 0x05
    4c54:	9e 81       	ldd	r25, Y+6	; 0x06
    4c56:	fc 01       	movw	r30, r24
    4c58:	80 81       	ld	r24, Z
    4c5a:	91 81       	ldd	r25, Z+1	; 0x01
    4c5c:	9c 01       	movw	r18, r24
    4c5e:	21 50       	subi	r18, 0x01	; 1
    4c60:	31 09       	sbc	r19, r1
    4c62:	89 81       	ldd	r24, Y+1	; 0x01
    4c64:	9a 81       	ldd	r25, Y+2	; 0x02
    4c66:	28 17       	cp	r18, r24
    4c68:	39 07       	cpc	r19, r25
    4c6a:	19 f4       	brne	.+6      	; 0x4c72 <rbu8_read+0x78>
		{
			index = 0;
    4c6c:	19 82       	std	Y+1, r1	; 0x01
    4c6e:	1a 82       	std	Y+2, r1	; 0x02
    4c70:	05 c0       	rjmp	.+10     	; 0x4c7c <rbu8_read+0x82>
		}
		else
		{
			index++;
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
    4c74:	9a 81       	ldd	r25, Y+2	; 0x02
    4c76:	01 96       	adiw	r24, 0x01	; 1
    4c78:	89 83       	std	Y+1, r24	; 0x01
    4c7a:	9a 83       	std	Y+2, r25	; 0x02
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    4c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c80:	01 96       	adiw	r24, 0x01	; 1
    4c82:	8b 83       	std	Y+3, r24	; 0x03
    4c84:	9c 83       	std	Y+4, r25	; 0x04
    4c86:	8d 81       	ldd	r24, Y+5	; 0x05
    4c88:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8a:	8c d0       	rcall	.+280    	; 0x4da4 <rbu8_length>
    4c8c:	9c 01       	movw	r18, r24
    4c8e:	89 85       	ldd	r24, Y+9	; 0x09
    4c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c92:	28 17       	cp	r18, r24
    4c94:	39 07       	cpc	r19, r25
    4c96:	20 f4       	brcc	.+8      	; 0x4ca0 <rbu8_read+0xa6>
    4c98:	8d 81       	ldd	r24, Y+5	; 0x05
    4c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c9c:	83 d0       	rcall	.+262    	; 0x4da4 <rbu8_length>
    4c9e:	02 c0       	rjmp	.+4      	; 0x4ca4 <rbu8_read+0xaa>
    4ca0:	89 85       	ldd	r24, Y+9	; 0x09
    4ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    4ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    4ca8:	28 17       	cp	r18, r24
    4caa:	39 07       	cpc	r19, r25
    4cac:	08 f4       	brcc	.+2      	; 0x4cb0 <rbu8_read+0xb6>
    4cae:	be cf       	rjmp	.-132    	; 0x4c2c <rbu8_read+0x32>
		{
			index++;
		}
		
	}
	if (length > rbu8_length(buffer))
    4cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb4:	77 d0       	rcall	.+238    	; 0x4da4 <rbu8_length>
    4cb6:	9c 01       	movw	r18, r24
    4cb8:	89 85       	ldd	r24, Y+9	; 0x09
    4cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cbc:	28 17       	cp	r18, r24
    4cbe:	39 07       	cpc	r19, r25
    4cc0:	10 f4       	brcc	.+4      	; 0x4cc6 <rbu8_read+0xcc>
		return 1;
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	01 c0       	rjmp	.+2      	; 0x4cc8 <rbu8_read+0xce>
	else
		return 0;
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
}
    4cc8:	2a 96       	adiw	r28, 0x0a	; 10
    4cca:	cd bf       	out	0x3d, r28	; 61
    4ccc:	de bf       	out	0x3e, r29	; 62
    4cce:	df 91       	pop	r29
    4cd0:	cf 91       	pop	r28
    4cd2:	08 95       	ret

00004cd4 <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	00 d0       	rcall	.+0      	; 0x4cda <rbu8_delete_oldest+0x6>
    4cda:	00 d0       	rcall	.+0      	; 0x4cdc <rbu8_delete_oldest+0x8>
    4cdc:	cd b7       	in	r28, 0x3d	; 61
    4cde:	de b7       	in	r29, 0x3e	; 62
    4ce0:	8b 83       	std	Y+3, r24	; 0x03
    4ce2:	9c 83       	std	Y+4, r25	; 0x04
    4ce4:	6d 83       	std	Y+5, r22	; 0x05
    4ce6:	7e 83       	std	Y+6, r23	; 0x06
	uint16_t move_distance = min(length, rbu8_length(buffer));
    4ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cea:	9c 81       	ldd	r25, Y+4	; 0x04
    4cec:	5b d0       	rcall	.+182    	; 0x4da4 <rbu8_length>
    4cee:	9c 01       	movw	r18, r24
    4cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf4:	82 17       	cp	r24, r18
    4cf6:	93 07       	cpc	r25, r19
    4cf8:	20 f0       	brcs	.+8      	; 0x4d02 <rbu8_delete_oldest+0x2e>
    4cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    4cfe:	52 d0       	rcall	.+164    	; 0x4da4 <rbu8_length>
    4d00:	02 c0       	rjmp	.+4      	; 0x4d06 <rbu8_delete_oldest+0x32>
    4d02:	8d 81       	ldd	r24, Y+5	; 0x05
    4d04:	9e 81       	ldd	r25, Y+6	; 0x06
    4d06:	89 83       	std	Y+1, r24	; 0x01
    4d08:	9a 83       	std	Y+2, r25	; 0x02
	if (move_distance >= rbu8_length(buffer))
    4d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0e:	4a d0       	rcall	.+148    	; 0x4da4 <rbu8_length>
    4d10:	9c 01       	movw	r18, r24
    4d12:	89 81       	ldd	r24, Y+1	; 0x01
    4d14:	9a 81       	ldd	r25, Y+2	; 0x02
    4d16:	82 17       	cp	r24, r18
    4d18:	93 07       	cpc	r25, r19
    4d1a:	20 f1       	brcs	.+72     	; 0x4d64 <rbu8_delete_oldest+0x90>
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    4d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d20:	fc 01       	movw	r30, r24
    4d22:	24 81       	ldd	r18, Z+4	; 0x04
    4d24:	35 81       	ldd	r19, Z+5	; 0x05
    4d26:	89 81       	ldd	r24, Y+1	; 0x01
    4d28:	9a 81       	ldd	r25, Y+2	; 0x02
    4d2a:	a9 01       	movw	r20, r18
    4d2c:	48 0f       	add	r20, r24
    4d2e:	59 1f       	adc	r21, r25
    4d30:	8b 81       	ldd	r24, Y+3	; 0x03
    4d32:	9c 81       	ldd	r25, Y+4	; 0x04
    4d34:	fc 01       	movw	r30, r24
    4d36:	20 81       	ld	r18, Z
    4d38:	31 81       	ldd	r19, Z+1	; 0x01
    4d3a:	ca 01       	movw	r24, r20
    4d3c:	b9 01       	movw	r22, r18
    4d3e:	0e 94 f9 58 	call	0xb1f2	; 0xb1f2 <__udivmodhi4>
    4d42:	9c 01       	movw	r18, r24
    4d44:	8b 81       	ldd	r24, Y+3	; 0x03
    4d46:	9c 81       	ldd	r25, Y+4	; 0x04
    4d48:	fc 01       	movw	r30, r24
    4d4a:	24 83       	std	Z+4, r18	; 0x04
    4d4c:	35 83       	std	Z+5, r19	; 0x05
		buffer->head = buffer->tail;
    4d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d50:	9c 81       	ldd	r25, Y+4	; 0x04
    4d52:	fc 01       	movw	r30, r24
    4d54:	24 81       	ldd	r18, Z+4	; 0x04
    4d56:	35 81       	ldd	r19, Z+5	; 0x05
    4d58:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	22 83       	std	Z+2, r18	; 0x02
    4d60:	33 83       	std	Z+3, r19	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
    4d62:	19 c0       	rjmp	.+50     	; 0x4d96 <rbu8_delete_oldest+0xc2>
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
		buffer->head = buffer->tail;
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    4d64:	8b 81       	ldd	r24, Y+3	; 0x03
    4d66:	9c 81       	ldd	r25, Y+4	; 0x04
    4d68:	fc 01       	movw	r30, r24
    4d6a:	24 81       	ldd	r18, Z+4	; 0x04
    4d6c:	35 81       	ldd	r19, Z+5	; 0x05
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	9a 81       	ldd	r25, Y+2	; 0x02
    4d72:	a9 01       	movw	r20, r18
    4d74:	48 0f       	add	r20, r24
    4d76:	59 1f       	adc	r21, r25
    4d78:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d7c:	fc 01       	movw	r30, r24
    4d7e:	20 81       	ld	r18, Z
    4d80:	31 81       	ldd	r19, Z+1	; 0x01
    4d82:	ca 01       	movw	r24, r20
    4d84:	b9 01       	movw	r22, r18
    4d86:	0e 94 f9 58 	call	0xb1f2	; 0xb1f2 <__udivmodhi4>
    4d8a:	9c 01       	movw	r18, r24
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d90:	fc 01       	movw	r30, r24
    4d92:	24 83       	std	Z+4, r18	; 0x04
    4d94:	35 83       	std	Z+5, r19	; 0x05
	}
}
    4d96:	00 00       	nop
    4d98:	26 96       	adiw	r28, 0x06	; 6
    4d9a:	cd bf       	out	0x3d, r28	; 61
    4d9c:	de bf       	out	0x3e, r29	; 62
    4d9e:	df 91       	pop	r29
    4da0:	cf 91       	pop	r28
    4da2:	08 95       	ret

00004da4 <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
    4da4:	cf 93       	push	r28
    4da6:	df 93       	push	r29
    4da8:	1f 92       	push	r1
    4daa:	1f 92       	push	r1
    4dac:	cd b7       	in	r28, 0x3d	; 61
    4dae:	de b7       	in	r29, 0x3e	; 62
    4db0:	89 83       	std	Y+1, r24	; 0x01
    4db2:	9a 83       	std	Y+2, r25	; 0x02
	if (buffer->head >= buffer->tail)
    4db4:	89 81       	ldd	r24, Y+1	; 0x01
    4db6:	9a 81       	ldd	r25, Y+2	; 0x02
    4db8:	fc 01       	movw	r30, r24
    4dba:	22 81       	ldd	r18, Z+2	; 0x02
    4dbc:	33 81       	ldd	r19, Z+3	; 0x03
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc2:	fc 01       	movw	r30, r24
    4dc4:	84 81       	ldd	r24, Z+4	; 0x04
    4dc6:	95 81       	ldd	r25, Z+5	; 0x05
    4dc8:	28 17       	cp	r18, r24
    4dca:	39 07       	cpc	r19, r25
    4dcc:	78 f0       	brcs	.+30     	; 0x4dec <rbu8_length+0x48>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
    4dce:	89 81       	ldd	r24, Y+1	; 0x01
    4dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd2:	fc 01       	movw	r30, r24
    4dd4:	22 81       	ldd	r18, Z+2	; 0x02
    4dd6:	33 81       	ldd	r19, Z+3	; 0x03
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	9a 81       	ldd	r25, Y+2	; 0x02
    4ddc:	fc 01       	movw	r30, r24
    4dde:	84 81       	ldd	r24, Z+4	; 0x04
    4de0:	95 81       	ldd	r25, Z+5	; 0x05
    4de2:	a9 01       	movw	r20, r18
    4de4:	48 1b       	sub	r20, r24
    4de6:	59 0b       	sbc	r21, r25
    4de8:	ca 01       	movw	r24, r20
    4dea:	15 c0       	rjmp	.+42     	; 0x4e16 <rbu8_length+0x72>
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	9a 81       	ldd	r25, Y+2	; 0x02
    4df0:	fc 01       	movw	r30, r24
    4df2:	20 81       	ld	r18, Z
    4df4:	31 81       	ldd	r19, Z+1	; 0x01
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfa:	fc 01       	movw	r30, r24
    4dfc:	42 81       	ldd	r20, Z+2	; 0x02
    4dfe:	53 81       	ldd	r21, Z+3	; 0x03
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
    4e02:	9a 81       	ldd	r25, Y+2	; 0x02
    4e04:	fc 01       	movw	r30, r24
    4e06:	84 81       	ldd	r24, Z+4	; 0x04
    4e08:	95 81       	ldd	r25, Z+5	; 0x05
    4e0a:	ba 01       	movw	r22, r20
    4e0c:	68 1b       	sub	r22, r24
    4e0e:	79 0b       	sbc	r23, r25
    4e10:	cb 01       	movw	r24, r22
    4e12:	82 0f       	add	r24, r18
    4e14:	93 1f       	adc	r25, r19
	}
}
    4e16:	0f 90       	pop	r0
    4e18:	0f 90       	pop	r0
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	08 95       	ret

00004e20 <sysclk_enable_peripheral_clock>:
		{
			return i;
		}
	}
	return i+1;
}
    4e20:	cf 93       	push	r28
    4e22:	df 93       	push	r29
    4e24:	1f 92       	push	r1
    4e26:	1f 92       	push	r1
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	89 83       	std	Y+1, r24	; 0x01
    4e2e:	9a 83       	std	Y+2, r25	; 0x02
    4e30:	89 81       	ldd	r24, Y+1	; 0x01
    4e32:	9a 81       	ldd	r25, Y+2	; 0x02
    4e34:	89 2b       	or	r24, r25
    4e36:	09 f4       	brne	.+2      	; 0x4e3a <sysclk_enable_peripheral_clock+0x1a>
    4e38:	67 c1       	rjmp	.+718    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4e3a:	89 81       	ldd	r24, Y+1	; 0x01
    4e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e3e:	80 3c       	cpi	r24, 0xC0	; 192
    4e40:	91 05       	cpc	r25, r1
    4e42:	29 f4       	brne	.+10     	; 0x4e4e <sysclk_enable_peripheral_clock+0x2e>
    4e44:	60 e1       	ldi	r22, 0x10	; 16
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4e4c:	5d c1       	rjmp	.+698    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
    4e50:	9a 81       	ldd	r25, Y+2	; 0x02
    4e52:	80 34       	cpi	r24, 0x40	; 64
    4e54:	94 40       	sbci	r25, 0x04	; 4
    4e56:	29 f4       	brne	.+10     	; 0x4e62 <sysclk_enable_peripheral_clock+0x42>
    4e58:	68 e0       	ldi	r22, 0x08	; 8
    4e5a:	80 e0       	ldi	r24, 0x00	; 0
    4e5c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4e60:	53 c1       	rjmp	.+678    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4e62:	89 81       	ldd	r24, Y+1	; 0x01
    4e64:	9a 81       	ldd	r25, Y+2	; 0x02
    4e66:	81 15       	cp	r24, r1
    4e68:	94 40       	sbci	r25, 0x04	; 4
    4e6a:	29 f4       	brne	.+10     	; 0x4e76 <sysclk_enable_peripheral_clock+0x56>
    4e6c:	64 e0       	ldi	r22, 0x04	; 4
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4e74:	49 c1       	rjmp	.+658    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4e76:	89 81       	ldd	r24, Y+1	; 0x01
    4e78:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7a:	80 38       	cpi	r24, 0x80	; 128
    4e7c:	91 40       	sbci	r25, 0x01	; 1
    4e7e:	29 f4       	brne	.+10     	; 0x4e8a <sysclk_enable_peripheral_clock+0x6a>
    4e80:	62 e0       	ldi	r22, 0x02	; 2
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4e88:	3f c1       	rjmp	.+638    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8e:	81 15       	cp	r24, r1
    4e90:	91 40       	sbci	r25, 0x01	; 1
    4e92:	29 f4       	brne	.+10     	; 0x4e9e <sysclk_enable_peripheral_clock+0x7e>
    4e94:	61 e0       	ldi	r22, 0x01	; 1
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4e9c:	35 c1       	rjmp	.+618    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4e9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea2:	80 38       	cpi	r24, 0x80	; 128
    4ea4:	93 40       	sbci	r25, 0x03	; 3
    4ea6:	29 f4       	brne	.+10     	; 0x4eb2 <sysclk_enable_peripheral_clock+0x92>
    4ea8:	61 e0       	ldi	r22, 0x01	; 1
    4eaa:	81 e0       	ldi	r24, 0x01	; 1
    4eac:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4eb0:	2b c1       	rjmp	.+598    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb6:	80 39       	cpi	r24, 0x90	; 144
    4eb8:	93 40       	sbci	r25, 0x03	; 3
    4eba:	29 f4       	brne	.+10     	; 0x4ec6 <sysclk_enable_peripheral_clock+0xa6>
    4ebc:	61 e0       	ldi	r22, 0x01	; 1
    4ebe:	82 e0       	ldi	r24, 0x02	; 2
    4ec0:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4ec4:	21 c1       	rjmp	.+578    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4ec6:	89 81       	ldd	r24, Y+1	; 0x01
    4ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eca:	81 15       	cp	r24, r1
    4ecc:	92 40       	sbci	r25, 0x02	; 2
    4ece:	29 f4       	brne	.+10     	; 0x4eda <sysclk_enable_peripheral_clock+0xba>
    4ed0:	62 e0       	ldi	r22, 0x02	; 2
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4ed8:	17 c1       	rjmp	.+558    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4eda:	89 81       	ldd	r24, Y+1	; 0x01
    4edc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ede:	80 34       	cpi	r24, 0x40	; 64
    4ee0:	92 40       	sbci	r25, 0x02	; 2
    4ee2:	29 f4       	brne	.+10     	; 0x4eee <sysclk_enable_peripheral_clock+0xce>
    4ee4:	62 e0       	ldi	r22, 0x02	; 2
    4ee6:	82 e0       	ldi	r24, 0x02	; 2
    4ee8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    4eec:	0d c1       	rjmp	.+538    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4eee:	89 81       	ldd	r24, Y+1	; 0x01
    4ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef2:	81 15       	cp	r24, r1
    4ef4:	93 40       	sbci	r25, 0x03	; 3
    4ef6:	21 f4       	brne	.+8      	; 0x4f00 <sysclk_enable_peripheral_clock+0xe0>
    4ef8:	64 e0       	ldi	r22, 0x04	; 4
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	fc d7       	rcall	.+4088   	; 0x5ef6 <sysclk_enable_module>
    4efe:	04 c1       	rjmp	.+520    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f00:	89 81       	ldd	r24, Y+1	; 0x01
    4f02:	9a 81       	ldd	r25, Y+2	; 0x02
    4f04:	80 32       	cpi	r24, 0x20	; 32
    4f06:	93 40       	sbci	r25, 0x03	; 3
    4f08:	21 f4       	brne	.+8      	; 0x4f12 <sysclk_enable_peripheral_clock+0xf2>
    4f0a:	64 e0       	ldi	r22, 0x04	; 4
    4f0c:	82 e0       	ldi	r24, 0x02	; 2
    4f0e:	f3 d7       	rcall	.+4070   	; 0x5ef6 <sysclk_enable_module>
    4f10:	fb c0       	rjmp	.+502    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	9a 81       	ldd	r25, Y+2	; 0x02
    4f16:	81 15       	cp	r24, r1
    4f18:	98 40       	sbci	r25, 0x08	; 8
    4f1a:	21 f4       	brne	.+8      	; 0x4f24 <sysclk_enable_peripheral_clock+0x104>
    4f1c:	61 e0       	ldi	r22, 0x01	; 1
    4f1e:	83 e0       	ldi	r24, 0x03	; 3
    4f20:	ea d7       	rcall	.+4052   	; 0x5ef6 <sysclk_enable_module>
    4f22:	f2 c0       	rjmp	.+484    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	9a 81       	ldd	r25, Y+2	; 0x02
    4f28:	81 15       	cp	r24, r1
    4f2a:	99 40       	sbci	r25, 0x09	; 9
    4f2c:	21 f4       	brne	.+8      	; 0x4f36 <sysclk_enable_peripheral_clock+0x116>
    4f2e:	61 e0       	ldi	r22, 0x01	; 1
    4f30:	84 e0       	ldi	r24, 0x04	; 4
    4f32:	e1 d7       	rcall	.+4034   	; 0x5ef6 <sysclk_enable_module>
    4f34:	e9 c0       	rjmp	.+466    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	9a 81       	ldd	r25, Y+2	; 0x02
    4f3a:	81 15       	cp	r24, r1
    4f3c:	9a 40       	sbci	r25, 0x0A	; 10
    4f3e:	21 f4       	brne	.+8      	; 0x4f48 <sysclk_enable_peripheral_clock+0x128>
    4f40:	61 e0       	ldi	r22, 0x01	; 1
    4f42:	85 e0       	ldi	r24, 0x05	; 5
    4f44:	d8 d7       	rcall	.+4016   	; 0x5ef6 <sysclk_enable_module>
    4f46:	e0 c0       	rjmp	.+448    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f48:	89 81       	ldd	r24, Y+1	; 0x01
    4f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f4c:	81 15       	cp	r24, r1
    4f4e:	9b 40       	sbci	r25, 0x0B	; 11
    4f50:	21 f4       	brne	.+8      	; 0x4f5a <sysclk_enable_peripheral_clock+0x13a>
    4f52:	61 e0       	ldi	r22, 0x01	; 1
    4f54:	86 e0       	ldi	r24, 0x06	; 6
    4f56:	cf d7       	rcall	.+3998   	; 0x5ef6 <sysclk_enable_module>
    4f58:	d7 c0       	rjmp	.+430    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f5a:	89 81       	ldd	r24, Y+1	; 0x01
    4f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5e:	80 34       	cpi	r24, 0x40	; 64
    4f60:	98 40       	sbci	r25, 0x08	; 8
    4f62:	21 f4       	brne	.+8      	; 0x4f6c <sysclk_enable_peripheral_clock+0x14c>
    4f64:	62 e0       	ldi	r22, 0x02	; 2
    4f66:	83 e0       	ldi	r24, 0x03	; 3
    4f68:	c6 d7       	rcall	.+3980   	; 0x5ef6 <sysclk_enable_module>
    4f6a:	ce c0       	rjmp	.+412    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f6c:	89 81       	ldd	r24, Y+1	; 0x01
    4f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f70:	80 34       	cpi	r24, 0x40	; 64
    4f72:	99 40       	sbci	r25, 0x09	; 9
    4f74:	21 f4       	brne	.+8      	; 0x4f7e <sysclk_enable_peripheral_clock+0x15e>
    4f76:	62 e0       	ldi	r22, 0x02	; 2
    4f78:	84 e0       	ldi	r24, 0x04	; 4
    4f7a:	bd d7       	rcall	.+3962   	; 0x5ef6 <sysclk_enable_module>
    4f7c:	c5 c0       	rjmp	.+394    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f7e:	89 81       	ldd	r24, Y+1	; 0x01
    4f80:	9a 81       	ldd	r25, Y+2	; 0x02
    4f82:	80 34       	cpi	r24, 0x40	; 64
    4f84:	9a 40       	sbci	r25, 0x0A	; 10
    4f86:	21 f4       	brne	.+8      	; 0x4f90 <sysclk_enable_peripheral_clock+0x170>
    4f88:	62 e0       	ldi	r22, 0x02	; 2
    4f8a:	85 e0       	ldi	r24, 0x05	; 5
    4f8c:	b4 d7       	rcall	.+3944   	; 0x5ef6 <sysclk_enable_module>
    4f8e:	bc c0       	rjmp	.+376    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4f90:	89 81       	ldd	r24, Y+1	; 0x01
    4f92:	9a 81       	ldd	r25, Y+2	; 0x02
    4f94:	80 34       	cpi	r24, 0x40	; 64
    4f96:	9b 40       	sbci	r25, 0x0B	; 11
    4f98:	21 f4       	brne	.+8      	; 0x4fa2 <sysclk_enable_peripheral_clock+0x182>
    4f9a:	62 e0       	ldi	r22, 0x02	; 2
    4f9c:	86 e0       	ldi	r24, 0x06	; 6
    4f9e:	ab d7       	rcall	.+3926   	; 0x5ef6 <sysclk_enable_module>
    4fa0:	b3 c0       	rjmp	.+358    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa6:	80 39       	cpi	r24, 0x90	; 144
    4fa8:	98 40       	sbci	r25, 0x08	; 8
    4faa:	21 f4       	brne	.+8      	; 0x4fb4 <sysclk_enable_peripheral_clock+0x194>
    4fac:	64 e0       	ldi	r22, 0x04	; 4
    4fae:	83 e0       	ldi	r24, 0x03	; 3
    4fb0:	a2 d7       	rcall	.+3908   	; 0x5ef6 <sysclk_enable_module>
    4fb2:	aa c0       	rjmp	.+340    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4fb4:	89 81       	ldd	r24, Y+1	; 0x01
    4fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb8:	80 39       	cpi	r24, 0x90	; 144
    4fba:	99 40       	sbci	r25, 0x09	; 9
    4fbc:	21 f4       	brne	.+8      	; 0x4fc6 <sysclk_enable_peripheral_clock+0x1a6>
    4fbe:	64 e0       	ldi	r22, 0x04	; 4
    4fc0:	84 e0       	ldi	r24, 0x04	; 4
    4fc2:	99 d7       	rcall	.+3890   	; 0x5ef6 <sysclk_enable_module>
    4fc4:	a1 c0       	rjmp	.+322    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4fc6:	89 81       	ldd	r24, Y+1	; 0x01
    4fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fca:	80 39       	cpi	r24, 0x90	; 144
    4fcc:	9a 40       	sbci	r25, 0x0A	; 10
    4fce:	21 f4       	brne	.+8      	; 0x4fd8 <sysclk_enable_peripheral_clock+0x1b8>
    4fd0:	64 e0       	ldi	r22, 0x04	; 4
    4fd2:	85 e0       	ldi	r24, 0x05	; 5
    4fd4:	90 d7       	rcall	.+3872   	; 0x5ef6 <sysclk_enable_module>
    4fd6:	98 c0       	rjmp	.+304    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4fd8:	89 81       	ldd	r24, Y+1	; 0x01
    4fda:	9a 81       	ldd	r25, Y+2	; 0x02
    4fdc:	80 39       	cpi	r24, 0x90	; 144
    4fde:	9b 40       	sbci	r25, 0x0B	; 11
    4fe0:	21 f4       	brne	.+8      	; 0x4fea <sysclk_enable_peripheral_clock+0x1ca>
    4fe2:	64 e0       	ldi	r22, 0x04	; 4
    4fe4:	86 e0       	ldi	r24, 0x06	; 6
    4fe6:	87 d7       	rcall	.+3854   	; 0x5ef6 <sysclk_enable_module>
    4fe8:	8f c0       	rjmp	.+286    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4fea:	89 81       	ldd	r24, Y+1	; 0x01
    4fec:	9a 81       	ldd	r25, Y+2	; 0x02
    4fee:	80 3c       	cpi	r24, 0xC0	; 192
    4ff0:	98 40       	sbci	r25, 0x08	; 8
    4ff2:	21 f4       	brne	.+8      	; 0x4ffc <sysclk_enable_peripheral_clock+0x1dc>
    4ff4:	68 e0       	ldi	r22, 0x08	; 8
    4ff6:	83 e0       	ldi	r24, 0x03	; 3
    4ff8:	7e d7       	rcall	.+3836   	; 0x5ef6 <sysclk_enable_module>
    4ffa:	86 c0       	rjmp	.+268    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    4ffc:	89 81       	ldd	r24, Y+1	; 0x01
    4ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    5000:	80 3c       	cpi	r24, 0xC0	; 192
    5002:	99 40       	sbci	r25, 0x09	; 9
    5004:	21 f4       	brne	.+8      	; 0x500e <sysclk_enable_peripheral_clock+0x1ee>
    5006:	68 e0       	ldi	r22, 0x08	; 8
    5008:	84 e0       	ldi	r24, 0x04	; 4
    500a:	75 d7       	rcall	.+3818   	; 0x5ef6 <sysclk_enable_module>
    500c:	7d c0       	rjmp	.+250    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    500e:	89 81       	ldd	r24, Y+1	; 0x01
    5010:	9a 81       	ldd	r25, Y+2	; 0x02
    5012:	80 3c       	cpi	r24, 0xC0	; 192
    5014:	9a 40       	sbci	r25, 0x0A	; 10
    5016:	21 f4       	brne	.+8      	; 0x5020 <sysclk_enable_peripheral_clock+0x200>
    5018:	68 e0       	ldi	r22, 0x08	; 8
    501a:	85 e0       	ldi	r24, 0x05	; 5
    501c:	6c d7       	rcall	.+3800   	; 0x5ef6 <sysclk_enable_module>
    501e:	74 c0       	rjmp	.+232    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	9a 81       	ldd	r25, Y+2	; 0x02
    5024:	80 3c       	cpi	r24, 0xC0	; 192
    5026:	9b 40       	sbci	r25, 0x0B	; 11
    5028:	21 f4       	brne	.+8      	; 0x5032 <sysclk_enable_peripheral_clock+0x212>
    502a:	68 e0       	ldi	r22, 0x08	; 8
    502c:	86 e0       	ldi	r24, 0x06	; 6
    502e:	63 d7       	rcall	.+3782   	; 0x5ef6 <sysclk_enable_module>
    5030:	6b c0       	rjmp	.+214    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    5032:	89 81       	ldd	r24, Y+1	; 0x01
    5034:	9a 81       	ldd	r25, Y+2	; 0x02
    5036:	80 3a       	cpi	r24, 0xA0	; 160
    5038:	98 40       	sbci	r25, 0x08	; 8
    503a:	21 f4       	brne	.+8      	; 0x5044 <sysclk_enable_peripheral_clock+0x224>
    503c:	60 e1       	ldi	r22, 0x10	; 16
    503e:	83 e0       	ldi	r24, 0x03	; 3
    5040:	5a d7       	rcall	.+3764   	; 0x5ef6 <sysclk_enable_module>
    5042:	62 c0       	rjmp	.+196    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    5044:	89 81       	ldd	r24, Y+1	; 0x01
    5046:	9a 81       	ldd	r25, Y+2	; 0x02
    5048:	80 3a       	cpi	r24, 0xA0	; 160
    504a:	99 40       	sbci	r25, 0x09	; 9
    504c:	21 f4       	brne	.+8      	; 0x5056 <sysclk_enable_peripheral_clock+0x236>
    504e:	60 e1       	ldi	r22, 0x10	; 16
    5050:	84 e0       	ldi	r24, 0x04	; 4
    5052:	51 d7       	rcall	.+3746   	; 0x5ef6 <sysclk_enable_module>
    5054:	59 c0       	rjmp	.+178    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    5056:	89 81       	ldd	r24, Y+1	; 0x01
    5058:	9a 81       	ldd	r25, Y+2	; 0x02
    505a:	80 3a       	cpi	r24, 0xA0	; 160
    505c:	9a 40       	sbci	r25, 0x0A	; 10
    505e:	21 f4       	brne	.+8      	; 0x5068 <sysclk_enable_peripheral_clock+0x248>
    5060:	60 e1       	ldi	r22, 0x10	; 16
    5062:	85 e0       	ldi	r24, 0x05	; 5
    5064:	48 d7       	rcall	.+3728   	; 0x5ef6 <sysclk_enable_module>
    5066:	50 c0       	rjmp	.+160    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    5068:	89 81       	ldd	r24, Y+1	; 0x01
    506a:	9a 81       	ldd	r25, Y+2	; 0x02
    506c:	80 3a       	cpi	r24, 0xA0	; 160
    506e:	9b 40       	sbci	r25, 0x0B	; 11
    5070:	21 f4       	brne	.+8      	; 0x507a <sysclk_enable_peripheral_clock+0x25a>
    5072:	60 e1       	ldi	r22, 0x10	; 16
    5074:	86 e0       	ldi	r24, 0x06	; 6
    5076:	3f d7       	rcall	.+3710   	; 0x5ef6 <sysclk_enable_module>
    5078:	47 c0       	rjmp	.+142    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    507a:	89 81       	ldd	r24, Y+1	; 0x01
    507c:	9a 81       	ldd	r25, Y+2	; 0x02
    507e:	80 3b       	cpi	r24, 0xB0	; 176
    5080:	98 40       	sbci	r25, 0x08	; 8
    5082:	21 f4       	brne	.+8      	; 0x508c <sysclk_enable_peripheral_clock+0x26c>
    5084:	60 e2       	ldi	r22, 0x20	; 32
    5086:	83 e0       	ldi	r24, 0x03	; 3
    5088:	36 d7       	rcall	.+3692   	; 0x5ef6 <sysclk_enable_module>
    508a:	3e c0       	rjmp	.+124    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    508c:	89 81       	ldd	r24, Y+1	; 0x01
    508e:	9a 81       	ldd	r25, Y+2	; 0x02
    5090:	80 3b       	cpi	r24, 0xB0	; 176
    5092:	99 40       	sbci	r25, 0x09	; 9
    5094:	21 f4       	brne	.+8      	; 0x509e <sysclk_enable_peripheral_clock+0x27e>
    5096:	60 e2       	ldi	r22, 0x20	; 32
    5098:	84 e0       	ldi	r24, 0x04	; 4
    509a:	2d d7       	rcall	.+3674   	; 0x5ef6 <sysclk_enable_module>
    509c:	35 c0       	rjmp	.+106    	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    509e:	89 81       	ldd	r24, Y+1	; 0x01
    50a0:	9a 81       	ldd	r25, Y+2	; 0x02
    50a2:	80 3b       	cpi	r24, 0xB0	; 176
    50a4:	9a 40       	sbci	r25, 0x0A	; 10
    50a6:	21 f4       	brne	.+8      	; 0x50b0 <sysclk_enable_peripheral_clock+0x290>
    50a8:	60 e2       	ldi	r22, 0x20	; 32
    50aa:	85 e0       	ldi	r24, 0x05	; 5
    50ac:	24 d7       	rcall	.+3656   	; 0x5ef6 <sysclk_enable_module>
    50ae:	2c c0       	rjmp	.+88     	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    50b0:	89 81       	ldd	r24, Y+1	; 0x01
    50b2:	9a 81       	ldd	r25, Y+2	; 0x02
    50b4:	80 3b       	cpi	r24, 0xB0	; 176
    50b6:	9b 40       	sbci	r25, 0x0B	; 11
    50b8:	21 f4       	brne	.+8      	; 0x50c2 <sysclk_enable_peripheral_clock+0x2a2>
    50ba:	60 e2       	ldi	r22, 0x20	; 32
    50bc:	86 e0       	ldi	r24, 0x06	; 6
    50be:	1b d7       	rcall	.+3638   	; 0x5ef6 <sysclk_enable_module>
    50c0:	23 c0       	rjmp	.+70     	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    50c2:	89 81       	ldd	r24, Y+1	; 0x01
    50c4:	9a 81       	ldd	r25, Y+2	; 0x02
    50c6:	80 38       	cpi	r24, 0x80	; 128
    50c8:	94 40       	sbci	r25, 0x04	; 4
    50ca:	21 f4       	brne	.+8      	; 0x50d4 <sysclk_enable_peripheral_clock+0x2b4>
    50cc:	60 e4       	ldi	r22, 0x40	; 64
    50ce:	83 e0       	ldi	r24, 0x03	; 3
    50d0:	12 d7       	rcall	.+3620   	; 0x5ef6 <sysclk_enable_module>
    50d2:	1a c0       	rjmp	.+52     	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    50d4:	89 81       	ldd	r24, Y+1	; 0x01
    50d6:	9a 81       	ldd	r25, Y+2	; 0x02
    50d8:	80 39       	cpi	r24, 0x90	; 144
    50da:	94 40       	sbci	r25, 0x04	; 4
    50dc:	21 f4       	brne	.+8      	; 0x50e6 <sysclk_enable_peripheral_clock+0x2c6>
    50de:	60 e4       	ldi	r22, 0x40	; 64
    50e0:	84 e0       	ldi	r24, 0x04	; 4
    50e2:	09 d7       	rcall	.+3602   	; 0x5ef6 <sysclk_enable_module>
    50e4:	11 c0       	rjmp	.+34     	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    50e6:	89 81       	ldd	r24, Y+1	; 0x01
    50e8:	9a 81       	ldd	r25, Y+2	; 0x02
    50ea:	80 3a       	cpi	r24, 0xA0	; 160
    50ec:	94 40       	sbci	r25, 0x04	; 4
    50ee:	21 f4       	brne	.+8      	; 0x50f8 <sysclk_enable_peripheral_clock+0x2d8>
    50f0:	60 e4       	ldi	r22, 0x40	; 64
    50f2:	85 e0       	ldi	r24, 0x05	; 5
    50f4:	00 d7       	rcall	.+3584   	; 0x5ef6 <sysclk_enable_module>
    50f6:	08 c0       	rjmp	.+16     	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	9a 81       	ldd	r25, Y+2	; 0x02
    50fc:	80 3b       	cpi	r24, 0xB0	; 176
    50fe:	94 40       	sbci	r25, 0x04	; 4
    5100:	19 f4       	brne	.+6      	; 0x5108 <sysclk_enable_peripheral_clock+0x2e8>
    5102:	60 e4       	ldi	r22, 0x40	; 64
    5104:	86 e0       	ldi	r24, 0x06	; 6
    5106:	f7 d6       	rcall	.+3566   	; 0x5ef6 <sysclk_enable_module>
    5108:	00 00       	nop
    510a:	0f 90       	pop	r0
    510c:	0f 90       	pop	r0
    510e:	df 91       	pop	r29
    5110:	cf 91       	pop	r28
    5112:	08 95       	ret

00005114 <ioport_set_pin_high>:
    5114:	cf 93       	push	r28
    5116:	df 93       	push	r29
    5118:	cd b7       	in	r28, 0x3d	; 61
    511a:	de b7       	in	r29, 0x3e	; 62
    511c:	2a 97       	sbiw	r28, 0x0a	; 10
    511e:	cd bf       	out	0x3d, r28	; 61
    5120:	de bf       	out	0x3e, r29	; 62
    5122:	8a 87       	std	Y+10, r24	; 0x0a
    5124:	8a 85       	ldd	r24, Y+10	; 0x0a
    5126:	89 83       	std	Y+1, r24	; 0x01
    5128:	81 e0       	ldi	r24, 0x01	; 1
    512a:	8a 83       	std	Y+2, r24	; 0x02
    512c:	89 81       	ldd	r24, Y+1	; 0x01
    512e:	8b 83       	std	Y+3, r24	; 0x03
    5130:	8b 81       	ldd	r24, Y+3	; 0x03
    5132:	8c 83       	std	Y+4, r24	; 0x04
    5134:	8c 81       	ldd	r24, Y+4	; 0x04
    5136:	86 95       	lsr	r24
    5138:	86 95       	lsr	r24
    513a:	86 95       	lsr	r24
    513c:	8d 83       	std	Y+5, r24	; 0x05
    513e:	8d 81       	ldd	r24, Y+5	; 0x05
    5140:	88 2f       	mov	r24, r24
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	88 0f       	add	r24, r24
    5146:	99 1f       	adc	r25, r25
    5148:	82 95       	swap	r24
    514a:	92 95       	swap	r25
    514c:	90 7f       	andi	r25, 0xF0	; 240
    514e:	98 27       	eor	r25, r24
    5150:	80 7f       	andi	r24, 0xF0	; 240
    5152:	98 27       	eor	r25, r24
    5154:	9a 5f       	subi	r25, 0xFA	; 250
    5156:	8e 83       	std	Y+6, r24	; 0x06
    5158:	9f 83       	std	Y+7, r25	; 0x07
    515a:	8a 81       	ldd	r24, Y+2	; 0x02
    515c:	88 23       	and	r24, r24
    515e:	a9 f0       	breq	.+42     	; 0x518a <ioport_set_pin_high+0x76>
    5160:	89 81       	ldd	r24, Y+1	; 0x01
    5162:	88 87       	std	Y+8, r24	; 0x08
    5164:	88 85       	ldd	r24, Y+8	; 0x08
    5166:	88 2f       	mov	r24, r24
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	9c 01       	movw	r18, r24
    516c:	27 70       	andi	r18, 0x07	; 7
    516e:	33 27       	eor	r19, r19
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	02 c0       	rjmp	.+4      	; 0x517a <ioport_set_pin_high+0x66>
    5176:	88 0f       	add	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	2a 95       	dec	r18
    517c:	e2 f7       	brpl	.-8      	; 0x5176 <ioport_set_pin_high+0x62>
    517e:	28 2f       	mov	r18, r24
    5180:	8e 81       	ldd	r24, Y+6	; 0x06
    5182:	9f 81       	ldd	r25, Y+7	; 0x07
    5184:	fc 01       	movw	r30, r24
    5186:	25 83       	std	Z+5, r18	; 0x05
    5188:	14 c0       	rjmp	.+40     	; 0x51b2 <ioport_set_pin_high+0x9e>
    518a:	89 81       	ldd	r24, Y+1	; 0x01
    518c:	89 87       	std	Y+9, r24	; 0x09
    518e:	89 85       	ldd	r24, Y+9	; 0x09
    5190:	88 2f       	mov	r24, r24
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	9c 01       	movw	r18, r24
    5196:	27 70       	andi	r18, 0x07	; 7
    5198:	33 27       	eor	r19, r19
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	02 c0       	rjmp	.+4      	; 0x51a4 <ioport_set_pin_high+0x90>
    51a0:	88 0f       	add	r24, r24
    51a2:	99 1f       	adc	r25, r25
    51a4:	2a 95       	dec	r18
    51a6:	e2 f7       	brpl	.-8      	; 0x51a0 <ioport_set_pin_high+0x8c>
    51a8:	28 2f       	mov	r18, r24
    51aa:	8e 81       	ldd	r24, Y+6	; 0x06
    51ac:	9f 81       	ldd	r25, Y+7	; 0x07
    51ae:	fc 01       	movw	r30, r24
    51b0:	26 83       	std	Z+6, r18	; 0x06
    51b2:	00 00       	nop
    51b4:	2a 96       	adiw	r28, 0x0a	; 10
    51b6:	cd bf       	out	0x3d, r28	; 61
    51b8:	de bf       	out	0x3e, r29	; 62
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	08 95       	ret

000051c0 <usart_serial_init>:
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	cd b7       	in	r28, 0x3d	; 61
    51c6:	de b7       	in	r29, 0x3e	; 62
    51c8:	2b 97       	sbiw	r28, 0x0b	; 11
    51ca:	cd bf       	out	0x3d, r28	; 61
    51cc:	de bf       	out	0x3e, r29	; 62
    51ce:	88 87       	std	Y+8, r24	; 0x08
    51d0:	99 87       	std	Y+9, r25	; 0x09
    51d2:	6a 87       	std	Y+10, r22	; 0x0a
    51d4:	7b 87       	std	Y+11, r23	; 0x0b
    51d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    51d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    51da:	fc 01       	movw	r30, r24
    51dc:	84 81       	ldd	r24, Z+4	; 0x04
    51de:	8d 83       	std	Y+5, r24	; 0x05
    51e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    51e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    51e4:	fc 01       	movw	r30, r24
    51e6:	85 81       	ldd	r24, Z+5	; 0x05
    51e8:	8e 83       	std	Y+6, r24	; 0x06
    51ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    51ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    51ee:	fc 01       	movw	r30, r24
    51f0:	86 81       	ldd	r24, Z+6	; 0x06
    51f2:	8f 83       	std	Y+7, r24	; 0x07
    51f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    51f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    51f8:	fc 01       	movw	r30, r24
    51fa:	80 81       	ld	r24, Z
    51fc:	91 81       	ldd	r25, Z+1	; 0x01
    51fe:	a2 81       	ldd	r26, Z+2	; 0x02
    5200:	b3 81       	ldd	r27, Z+3	; 0x03
    5202:	89 83       	std	Y+1, r24	; 0x01
    5204:	9a 83       	std	Y+2, r25	; 0x02
    5206:	ab 83       	std	Y+3, r26	; 0x03
    5208:	bc 83       	std	Y+4, r27	; 0x04
    520a:	88 85       	ldd	r24, Y+8	; 0x08
    520c:	99 85       	ldd	r25, Y+9	; 0x09
    520e:	80 3a       	cpi	r24, 0xA0	; 160
    5210:	98 40       	sbci	r25, 0x08	; 8
    5212:	19 f4       	brne	.+6      	; 0x521a <usart_serial_init+0x5a>
    5214:	60 e1       	ldi	r22, 0x10	; 16
    5216:	83 e0       	ldi	r24, 0x03	; 3
    5218:	6e d6       	rcall	.+3292   	; 0x5ef6 <sysclk_enable_module>
    521a:	88 85       	ldd	r24, Y+8	; 0x08
    521c:	99 85       	ldd	r25, Y+9	; 0x09
    521e:	80 3b       	cpi	r24, 0xB0	; 176
    5220:	98 40       	sbci	r25, 0x08	; 8
    5222:	19 f4       	brne	.+6      	; 0x522a <usart_serial_init+0x6a>
    5224:	60 e2       	ldi	r22, 0x20	; 32
    5226:	83 e0       	ldi	r24, 0x03	; 3
    5228:	66 d6       	rcall	.+3276   	; 0x5ef6 <sysclk_enable_module>
    522a:	88 85       	ldd	r24, Y+8	; 0x08
    522c:	99 85       	ldd	r25, Y+9	; 0x09
    522e:	80 3a       	cpi	r24, 0xA0	; 160
    5230:	99 40       	sbci	r25, 0x09	; 9
    5232:	19 f4       	brne	.+6      	; 0x523a <usart_serial_init+0x7a>
    5234:	60 e1       	ldi	r22, 0x10	; 16
    5236:	84 e0       	ldi	r24, 0x04	; 4
    5238:	5e d6       	rcall	.+3260   	; 0x5ef6 <sysclk_enable_module>
    523a:	88 85       	ldd	r24, Y+8	; 0x08
    523c:	99 85       	ldd	r25, Y+9	; 0x09
    523e:	80 3b       	cpi	r24, 0xB0	; 176
    5240:	99 40       	sbci	r25, 0x09	; 9
    5242:	19 f4       	brne	.+6      	; 0x524a <usart_serial_init+0x8a>
    5244:	60 e2       	ldi	r22, 0x20	; 32
    5246:	84 e0       	ldi	r24, 0x04	; 4
    5248:	56 d6       	rcall	.+3244   	; 0x5ef6 <sysclk_enable_module>
    524a:	88 85       	ldd	r24, Y+8	; 0x08
    524c:	99 85       	ldd	r25, Y+9	; 0x09
    524e:	80 3a       	cpi	r24, 0xA0	; 160
    5250:	9a 40       	sbci	r25, 0x0A	; 10
    5252:	19 f4       	brne	.+6      	; 0x525a <usart_serial_init+0x9a>
    5254:	60 e1       	ldi	r22, 0x10	; 16
    5256:	85 e0       	ldi	r24, 0x05	; 5
    5258:	4e d6       	rcall	.+3228   	; 0x5ef6 <sysclk_enable_module>
    525a:	88 85       	ldd	r24, Y+8	; 0x08
    525c:	99 85       	ldd	r25, Y+9	; 0x09
    525e:	80 3b       	cpi	r24, 0xB0	; 176
    5260:	9a 40       	sbci	r25, 0x0A	; 10
    5262:	19 f4       	brne	.+6      	; 0x526a <usart_serial_init+0xaa>
    5264:	60 e2       	ldi	r22, 0x20	; 32
    5266:	85 e0       	ldi	r24, 0x05	; 5
    5268:	46 d6       	rcall	.+3212   	; 0x5ef6 <sysclk_enable_module>
    526a:	88 85       	ldd	r24, Y+8	; 0x08
    526c:	99 85       	ldd	r25, Y+9	; 0x09
    526e:	80 3a       	cpi	r24, 0xA0	; 160
    5270:	9b 40       	sbci	r25, 0x0B	; 11
    5272:	19 f4       	brne	.+6      	; 0x527a <usart_serial_init+0xba>
    5274:	60 e1       	ldi	r22, 0x10	; 16
    5276:	86 e0       	ldi	r24, 0x06	; 6
    5278:	3e d6       	rcall	.+3196   	; 0x5ef6 <sysclk_enable_module>
    527a:	88 85       	ldd	r24, Y+8	; 0x08
    527c:	99 85       	ldd	r25, Y+9	; 0x09
    527e:	80 3b       	cpi	r24, 0xB0	; 176
    5280:	9b 40       	sbci	r25, 0x0B	; 11
    5282:	19 f4       	brne	.+6      	; 0x528a <usart_serial_init+0xca>
    5284:	60 e2       	ldi	r22, 0x20	; 32
    5286:	86 e0       	ldi	r24, 0x06	; 6
    5288:	36 d6       	rcall	.+3180   	; 0x5ef6 <sysclk_enable_module>
    528a:	88 85       	ldd	r24, Y+8	; 0x08
    528c:	99 85       	ldd	r25, Y+9	; 0x09
    528e:	9e 01       	movw	r18, r28
    5290:	2f 5f       	subi	r18, 0xFF	; 255
    5292:	3f 4f       	sbci	r19, 0xFF	; 255
    5294:	b9 01       	movw	r22, r18
    5296:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <usart_init_rs232>
    529a:	88 23       	and	r24, r24
    529c:	11 f0       	breq	.+4      	; 0x52a2 <usart_serial_init+0xe2>
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	01 c0       	rjmp	.+2      	; 0x52a4 <usart_serial_init+0xe4>
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	2b 96       	adiw	r28, 0x0b	; 11
    52a6:	cd bf       	out	0x3d, r28	; 61
    52a8:	de bf       	out	0x3e, r29	; 62
    52aa:	df 91       	pop	r29
    52ac:	cf 91       	pop	r28
    52ae:	08 95       	ret

000052b0 <init_GPS_pins_and_usart>:
    52b0:	cf 93       	push	r28
    52b2:	df 93       	push	r29
    52b4:	cd b7       	in	r28, 0x3d	; 61
    52b6:	de b7       	in	r29, 0x3e	; 62
    52b8:	80 ea       	ldi	r24, 0xA0	; 160
    52ba:	96 e0       	ldi	r25, 0x06	; 6
    52bc:	20 ea       	ldi	r18, 0xA0	; 160
    52be:	36 e0       	ldi	r19, 0x06	; 6
    52c0:	f9 01       	movw	r30, r18
    52c2:	20 81       	ld	r18, Z
    52c4:	20 68       	ori	r18, 0x80	; 128
    52c6:	fc 01       	movw	r30, r24
    52c8:	20 83       	st	Z, r18
    52ca:	80 ea       	ldi	r24, 0xA0	; 160
    52cc:	96 e0       	ldi	r25, 0x06	; 6
    52ce:	20 ea       	ldi	r18, 0xA0	; 160
    52d0:	36 e0       	ldi	r19, 0x06	; 6
    52d2:	f9 01       	movw	r30, r18
    52d4:	20 81       	ld	r18, Z
    52d6:	2f 7b       	andi	r18, 0xBF	; 191
    52d8:	fc 01       	movw	r30, r24
    52da:	20 83       	st	Z, r18
    52dc:	8f e2       	ldi	r24, 0x2F	; 47
    52de:	1a df       	rcall	.-460    	; 0x5114 <ioport_set_pin_high>
    52e0:	80 eb       	ldi	r24, 0xB0	; 176
    52e2:	9b e0       	ldi	r25, 0x0B	; 11
    52e4:	9d dd       	rcall	.-1222   	; 0x4e20 <sysclk_enable_peripheral_clock>
    52e6:	68 e0       	ldi	r22, 0x08	; 8
    52e8:	70 e2       	ldi	r23, 0x20	; 32
    52ea:	80 eb       	ldi	r24, 0xB0	; 176
    52ec:	9b e0       	ldi	r25, 0x0B	; 11
    52ee:	68 df       	rcall	.-304    	; 0x51c0 <usart_serial_init>
    52f0:	00 00       	nop
    52f2:	df 91       	pop	r29
    52f4:	cf 91       	pop	r28
    52f6:	08 95       	ret

000052f8 <startswith>:
    52f8:	cf 93       	push	r28
    52fa:	df 93       	push	r29
    52fc:	cd b7       	in	r28, 0x3d	; 61
    52fe:	de b7       	in	r29, 0x3e	; 62
    5300:	25 97       	sbiw	r28, 0x05	; 5
    5302:	cd bf       	out	0x3d, r28	; 61
    5304:	de bf       	out	0x3e, r29	; 62
    5306:	8a 83       	std	Y+2, r24	; 0x02
    5308:	9b 83       	std	Y+3, r25	; 0x03
    530a:	6c 83       	std	Y+4, r22	; 0x04
    530c:	7d 83       	std	Y+5, r23	; 0x05
    530e:	19 82       	std	Y+1, r1	; 0x01
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	88 2f       	mov	r24, r24
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	2c 81       	ldd	r18, Y+4	; 0x04
    5318:	3d 81       	ldd	r19, Y+5	; 0x05
    531a:	82 0f       	add	r24, r18
    531c:	93 1f       	adc	r25, r19
    531e:	fc 01       	movw	r30, r24
    5320:	80 81       	ld	r24, Z
    5322:	88 23       	and	r24, r24
    5324:	11 f4       	brne	.+4      	; 0x532a <startswith+0x32>
    5326:	81 e0       	ldi	r24, 0x01	; 1
    5328:	20 c0       	rjmp	.+64     	; 0x536a <startswith+0x72>
    532a:	89 81       	ldd	r24, Y+1	; 0x01
    532c:	88 2f       	mov	r24, r24
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	2c 81       	ldd	r18, Y+4	; 0x04
    5332:	3d 81       	ldd	r19, Y+5	; 0x05
    5334:	82 0f       	add	r24, r18
    5336:	93 1f       	adc	r25, r19
    5338:	fc 01       	movw	r30, r24
    533a:	80 81       	ld	r24, Z
    533c:	28 2f       	mov	r18, r24
    533e:	88 0f       	add	r24, r24
    5340:	33 0b       	sbc	r19, r19
    5342:	89 81       	ldd	r24, Y+1	; 0x01
    5344:	88 2f       	mov	r24, r24
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	4a 81       	ldd	r20, Y+2	; 0x02
    534a:	5b 81       	ldd	r21, Y+3	; 0x03
    534c:	84 0f       	add	r24, r20
    534e:	95 1f       	adc	r25, r21
    5350:	fc 01       	movw	r30, r24
    5352:	80 81       	ld	r24, Z
    5354:	88 2f       	mov	r24, r24
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	28 17       	cp	r18, r24
    535a:	39 07       	cpc	r19, r25
    535c:	11 f0       	breq	.+4      	; 0x5362 <startswith+0x6a>
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	04 c0       	rjmp	.+8      	; 0x536a <startswith+0x72>
    5362:	89 81       	ldd	r24, Y+1	; 0x01
    5364:	8f 5f       	subi	r24, 0xFF	; 255
    5366:	89 83       	std	Y+1, r24	; 0x01
    5368:	d3 cf       	rjmp	.-90     	; 0x5310 <startswith+0x18>
    536a:	25 96       	adiw	r28, 0x05	; 5
    536c:	cd bf       	out	0x3d, r28	; 61
    536e:	de bf       	out	0x3e, r29	; 62
    5370:	df 91       	pop	r29
    5372:	cf 91       	pop	r28
    5374:	08 95       	ret

00005376 <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    5376:	8f 92       	push	r8
    5378:	9f 92       	push	r9
    537a:	af 92       	push	r10
    537c:	bf 92       	push	r11
    537e:	cf 92       	push	r12
    5380:	df 92       	push	r13
    5382:	ef 92       	push	r14
    5384:	ff 92       	push	r15
    5386:	0f 93       	push	r16
    5388:	1f 93       	push	r17
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	cd b7       	in	r28, 0x3d	; 61
    5390:	de b7       	in	r29, 0x3e	; 62
    5392:	ed 97       	sbiw	r28, 0x3d	; 61
    5394:	cd bf       	out	0x3d, r28	; 61
    5396:	de bf       	out	0x3e, r29	; 62
    5398:	89 af       	std	Y+57, r24	; 0x39
    539a:	9a af       	std	Y+58, r25	; 0x3a
    539c:	6b af       	std	Y+59, r22	; 0x3b
    539e:	7c af       	std	Y+60, r23	; 0x3c
    53a0:	4d af       	std	Y+61, r20	; 0x3d
	int8_t countcommas=0;
    53a2:	19 82       	std	Y+1, r1	; 0x01
	GPS_data_t GPSData;
	uint8_t first_comma_position=0;
    53a4:	1b 86       	std	Y+11, r1	; 0x0b
	uint8_t second_comma_position=0;
    53a6:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t third_comma_position=0;
    53a8:	1d 86       	std	Y+13, r1	; 0x0d
	uint8_t fourth_comma_position=0;
    53aa:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t fifth_comma_position=0;
    53ac:	1f 86       	std	Y+15, r1	; 0x0f
	uint8_t comma7=0;
    53ae:	18 8a       	std	Y+16, r1	; 0x10
	uint8_t comma8=0;
    53b0:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t comma9=0;
    53b2:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t comma10=0;
    53b4:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t commab=0;
    53b6:	1c 8a       	std	Y+20, r1	; 0x14
	uint8_t commac=0;
    53b8:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t speedwritten=0;
    53ba:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t heightwritten=0;
    53bc:	1f 8a       	std	Y+23, r1	; 0x17
	uint8_t no_of_sateliiteswritten=0;
    53be:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t comma_position=0;
    53c0:	19 8e       	std	Y+25, r1	; 0x19
	int a=0;
    53c2:	1a 82       	std	Y+2, r1	; 0x02
    53c4:	1b 82       	std	Y+3, r1	; 0x03
	if (startswith(NMEA_sentence, "$GPGGA"))
    53c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    53c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    53ca:	61 e0       	ldi	r22, 0x01	; 1
    53cc:	71 e2       	ldi	r23, 0x21	; 33
    53ce:	94 df       	rcall	.-216    	; 0x52f8 <startswith>
    53d0:	88 23       	and	r24, r24
    53d2:	09 f4       	brne	.+2      	; 0x53d6 <getGPSDatafromNMEA+0x60>
    53d4:	ca c3       	rjmp	.+1940   	; 0x5b6a <getGPSDatafromNMEA+0x7f4>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    53d6:	1a 82       	std	Y+2, r1	; 0x02
    53d8:	1b 82       	std	Y+3, r1	; 0x03
    53da:	bc c3       	rjmp	.+1912   	; 0x5b54 <getGPSDatafromNMEA+0x7de>
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    53dc:	8a 81       	ldd	r24, Y+2	; 0x02
    53de:	9b 81       	ldd	r25, Y+3	; 0x03
    53e0:	2b ad       	ldd	r18, Y+59	; 0x3b
    53e2:	3c ad       	ldd	r19, Y+60	; 0x3c
    53e4:	82 0f       	add	r24, r18
    53e6:	93 1f       	adc	r25, r19
    53e8:	fc 01       	movw	r30, r24
    53ea:	80 81       	ld	r24, Z
    53ec:	8c 32       	cpi	r24, 0x2C	; 44
    53ee:	09 f0       	breq	.+2      	; 0x53f2 <getGPSDatafromNMEA+0x7c>
    53f0:	ac c3       	rjmp	.+1880   	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
			{
				//printf("gfhghhf");
				countcommas++;
    53f2:	89 81       	ldd	r24, Y+1	; 0x01
    53f4:	8f 5f       	subi	r24, 0xFF	; 255
    53f6:	89 83       	std	Y+1, r24	; 0x01
				if (countcommas == 1)
    53f8:	89 81       	ldd	r24, Y+1	; 0x01
    53fa:	81 30       	cpi	r24, 0x01	; 1
    53fc:	09 f0       	breq	.+2      	; 0x5400 <getGPSDatafromNMEA+0x8a>
    53fe:	5b c0       	rjmp	.+182    	; 0x54b6 <getGPSDatafromNMEA+0x140>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    5400:	8a 81       	ldd	r24, Y+2	; 0x02
    5402:	9b 81       	ldd	r25, Y+3	; 0x03
    5404:	01 96       	adiw	r24, 0x01	; 1
    5406:	2b ad       	ldd	r18, Y+59	; 0x3b
    5408:	3c ad       	ldd	r19, Y+60	; 0x3c
    540a:	82 0f       	add	r24, r18
    540c:	93 1f       	adc	r25, r19
    540e:	fc 01       	movw	r30, r24
    5410:	80 81       	ld	r24, Z
    5412:	88 2f       	mov	r24, r24
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	c0 97       	sbiw	r24, 0x30	; 48
    5418:	88 0f       	add	r24, r24
    541a:	98 2f       	mov	r25, r24
    541c:	99 0f       	add	r25, r25
    541e:	99 0f       	add	r25, r25
    5420:	48 2f       	mov	r20, r24
    5422:	49 0f       	add	r20, r25
    5424:	8a 81       	ldd	r24, Y+2	; 0x02
    5426:	9b 81       	ldd	r25, Y+3	; 0x03
    5428:	02 96       	adiw	r24, 0x02	; 2
    542a:	2b ad       	ldd	r18, Y+59	; 0x3b
    542c:	3c ad       	ldd	r19, Y+60	; 0x3c
    542e:	82 0f       	add	r24, r18
    5430:	93 1f       	adc	r25, r19
    5432:	fc 01       	movw	r30, r24
    5434:	80 81       	ld	r24, Z
    5436:	84 0f       	add	r24, r20
    5438:	80 53       	subi	r24, 0x30	; 48
    543a:	8c ab       	std	Y+52, r24	; 0x34
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    543c:	8a 81       	ldd	r24, Y+2	; 0x02
    543e:	9b 81       	ldd	r25, Y+3	; 0x03
    5440:	03 96       	adiw	r24, 0x03	; 3
    5442:	2b ad       	ldd	r18, Y+59	; 0x3b
    5444:	3c ad       	ldd	r19, Y+60	; 0x3c
    5446:	82 0f       	add	r24, r18
    5448:	93 1f       	adc	r25, r19
    544a:	fc 01       	movw	r30, r24
    544c:	80 81       	ld	r24, Z
    544e:	88 2f       	mov	r24, r24
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	c0 97       	sbiw	r24, 0x30	; 48
    5454:	88 0f       	add	r24, r24
    5456:	98 2f       	mov	r25, r24
    5458:	99 0f       	add	r25, r25
    545a:	99 0f       	add	r25, r25
    545c:	48 2f       	mov	r20, r24
    545e:	49 0f       	add	r20, r25
    5460:	8a 81       	ldd	r24, Y+2	; 0x02
    5462:	9b 81       	ldd	r25, Y+3	; 0x03
    5464:	04 96       	adiw	r24, 0x04	; 4
    5466:	2b ad       	ldd	r18, Y+59	; 0x3b
    5468:	3c ad       	ldd	r19, Y+60	; 0x3c
    546a:	82 0f       	add	r24, r18
    546c:	93 1f       	adc	r25, r19
    546e:	fc 01       	movw	r30, r24
    5470:	80 81       	ld	r24, Z
    5472:	84 0f       	add	r24, r20
    5474:	80 53       	subi	r24, 0x30	; 48
    5476:	8d ab       	std	Y+53, r24	; 0x35
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    5478:	8a 81       	ldd	r24, Y+2	; 0x02
    547a:	9b 81       	ldd	r25, Y+3	; 0x03
    547c:	05 96       	adiw	r24, 0x05	; 5
    547e:	2b ad       	ldd	r18, Y+59	; 0x3b
    5480:	3c ad       	ldd	r19, Y+60	; 0x3c
    5482:	82 0f       	add	r24, r18
    5484:	93 1f       	adc	r25, r19
    5486:	fc 01       	movw	r30, r24
    5488:	80 81       	ld	r24, Z
    548a:	88 2f       	mov	r24, r24
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	c0 97       	sbiw	r24, 0x30	; 48
    5490:	88 0f       	add	r24, r24
    5492:	98 2f       	mov	r25, r24
    5494:	99 0f       	add	r25, r25
    5496:	99 0f       	add	r25, r25
    5498:	48 2f       	mov	r20, r24
    549a:	49 0f       	add	r20, r25
    549c:	8a 81       	ldd	r24, Y+2	; 0x02
    549e:	9b 81       	ldd	r25, Y+3	; 0x03
    54a0:	06 96       	adiw	r24, 0x06	; 6
    54a2:	2b ad       	ldd	r18, Y+59	; 0x3b
    54a4:	3c ad       	ldd	r19, Y+60	; 0x3c
    54a6:	82 0f       	add	r24, r18
    54a8:	93 1f       	adc	r25, r19
    54aa:	fc 01       	movw	r30, r24
    54ac:	80 81       	ld	r24, Z
    54ae:	84 0f       	add	r24, r20
    54b0:	80 53       	subi	r24, 0x30	; 48
    54b2:	8e ab       	std	Y+54, r24	; 0x36
    54b4:	4a c3       	rjmp	.+1684   	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	82 30       	cpi	r24, 0x02	; 2
    54ba:	09 f0       	breq	.+2      	; 0x54be <getGPSDatafromNMEA+0x148>
    54bc:	2c c1       	rjmp	.+600    	; 0x5716 <getGPSDatafromNMEA+0x3a0>
    54be:	8a 81       	ldd	r24, Y+2	; 0x02
    54c0:	9b 81       	ldd	r25, Y+3	; 0x03
    54c2:	01 96       	adiw	r24, 0x01	; 1
    54c4:	2b ad       	ldd	r18, Y+59	; 0x3b
    54c6:	3c ad       	ldd	r19, Y+60	; 0x3c
    54c8:	82 0f       	add	r24, r18
    54ca:	93 1f       	adc	r25, r19
    54cc:	fc 01       	movw	r30, r24
    54ce:	80 81       	ld	r24, Z
    54d0:	8c 32       	cpi	r24, 0x2C	; 44
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <getGPSDatafromNMEA+0x160>
    54d4:	20 c1       	rjmp	.+576    	; 0x5716 <getGPSDatafromNMEA+0x3a0>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    54d6:	8a 81       	ldd	r24, Y+2	; 0x02
    54d8:	9b 81       	ldd	r25, Y+3	; 0x03
    54da:	01 96       	adiw	r24, 0x01	; 1
    54dc:	2b ad       	ldd	r18, Y+59	; 0x3b
    54de:	3c ad       	ldd	r19, Y+60	; 0x3c
    54e0:	82 0f       	add	r24, r18
    54e2:	93 1f       	adc	r25, r19
    54e4:	fc 01       	movw	r30, r24
    54e6:	80 81       	ld	r24, Z
    54e8:	88 2f       	mov	r24, r24
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	c0 97       	sbiw	r24, 0x30	; 48
    54ee:	88 0f       	add	r24, r24
    54f0:	99 1f       	adc	r25, r25
    54f2:	9c 01       	movw	r18, r24
    54f4:	22 0f       	add	r18, r18
    54f6:	33 1f       	adc	r19, r19
    54f8:	22 0f       	add	r18, r18
    54fa:	33 1f       	adc	r19, r19
    54fc:	28 0f       	add	r18, r24
    54fe:	39 1f       	adc	r19, r25
    5500:	8a 81       	ldd	r24, Y+2	; 0x02
    5502:	9b 81       	ldd	r25, Y+3	; 0x03
    5504:	02 96       	adiw	r24, 0x02	; 2
    5506:	4b ad       	ldd	r20, Y+59	; 0x3b
    5508:	5c ad       	ldd	r21, Y+60	; 0x3c
    550a:	84 0f       	add	r24, r20
    550c:	95 1f       	adc	r25, r21
    550e:	fc 01       	movw	r30, r24
    5510:	80 81       	ld	r24, Z
    5512:	88 2f       	mov	r24, r24
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	c0 97       	sbiw	r24, 0x30	; 48
    5518:	82 0f       	add	r24, r18
    551a:	93 1f       	adc	r25, r19
    551c:	8a 8f       	std	Y+26, r24	; 0x1a
    551e:	9b 8f       	std	Y+27, r25	; 0x1b
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    5520:	8a 81       	ldd	r24, Y+2	; 0x02
    5522:	9b 81       	ldd	r25, Y+3	; 0x03
    5524:	03 96       	adiw	r24, 0x03	; 3
    5526:	2b ad       	ldd	r18, Y+59	; 0x3b
    5528:	3c ad       	ldd	r19, Y+60	; 0x3c
    552a:	82 0f       	add	r24, r18
    552c:	93 1f       	adc	r25, r19
    552e:	fc 01       	movw	r30, r24
    5530:	80 81       	ld	r24, Z
    5532:	88 2f       	mov	r24, r24
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	c0 97       	sbiw	r24, 0x30	; 48
    5538:	09 2e       	mov	r0, r25
    553a:	00 0c       	add	r0, r0
    553c:	aa 0b       	sbc	r26, r26
    553e:	bb 0b       	sbc	r27, r27
    5540:	9c 01       	movw	r18, r24
    5542:	ad 01       	movw	r20, r26
    5544:	60 ea       	ldi	r22, 0xA0	; 160
    5546:	76 e8       	ldi	r23, 0x86	; 134
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__mulsi3>
    5550:	7b 01       	movw	r14, r22
    5552:	8c 01       	movw	r16, r24
    5554:	8a 81       	ldd	r24, Y+2	; 0x02
    5556:	9b 81       	ldd	r25, Y+3	; 0x03
    5558:	04 96       	adiw	r24, 0x04	; 4
    555a:	2b ad       	ldd	r18, Y+59	; 0x3b
    555c:	3c ad       	ldd	r19, Y+60	; 0x3c
    555e:	82 0f       	add	r24, r18
    5560:	93 1f       	adc	r25, r19
    5562:	fc 01       	movw	r30, r24
    5564:	80 81       	ld	r24, Z
    5566:	88 2f       	mov	r24, r24
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	c0 97       	sbiw	r24, 0x30	; 48
    556c:	9c 01       	movw	r18, r24
    556e:	99 0f       	add	r25, r25
    5570:	44 0b       	sbc	r20, r20
    5572:	55 0b       	sbc	r21, r21
    5574:	80 e1       	ldi	r24, 0x10	; 16
    5576:	97 e2       	ldi	r25, 0x27	; 39
    5578:	dc 01       	movw	r26, r24
    557a:	0e 94 2f 59 	call	0xb25e	; 0xb25e <__muluhisi3>
    557e:	dc 01       	movw	r26, r24
    5580:	cb 01       	movw	r24, r22
    5582:	e8 0e       	add	r14, r24
    5584:	f9 1e       	adc	r15, r25
    5586:	0a 1f       	adc	r16, r26
    5588:	1b 1f       	adc	r17, r27
    558a:	8a 81       	ldd	r24, Y+2	; 0x02
    558c:	9b 81       	ldd	r25, Y+3	; 0x03
    558e:	06 96       	adiw	r24, 0x06	; 6
    5590:	2b ad       	ldd	r18, Y+59	; 0x3b
    5592:	3c ad       	ldd	r19, Y+60	; 0x3c
    5594:	82 0f       	add	r24, r18
    5596:	93 1f       	adc	r25, r19
    5598:	fc 01       	movw	r30, r24
    559a:	80 81       	ld	r24, Z
    559c:	88 2f       	mov	r24, r24
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	c0 97       	sbiw	r24, 0x30	; 48
    55a2:	9c 01       	movw	r18, r24
    55a4:	99 0f       	add	r25, r25
    55a6:	44 0b       	sbc	r20, r20
    55a8:	55 0b       	sbc	r21, r21
    55aa:	88 ee       	ldi	r24, 0xE8	; 232
    55ac:	93 e0       	ldi	r25, 0x03	; 3
    55ae:	dc 01       	movw	r26, r24
    55b0:	0e 94 2f 59 	call	0xb25e	; 0xb25e <__muluhisi3>
    55b4:	dc 01       	movw	r26, r24
    55b6:	cb 01       	movw	r24, r22
    55b8:	e8 0e       	add	r14, r24
    55ba:	f9 1e       	adc	r15, r25
    55bc:	0a 1f       	adc	r16, r26
    55be:	1b 1f       	adc	r17, r27
    55c0:	8a 81       	ldd	r24, Y+2	; 0x02
    55c2:	9b 81       	ldd	r25, Y+3	; 0x03
    55c4:	07 96       	adiw	r24, 0x07	; 7
    55c6:	2b ad       	ldd	r18, Y+59	; 0x3b
    55c8:	3c ad       	ldd	r19, Y+60	; 0x3c
    55ca:	82 0f       	add	r24, r18
    55cc:	93 1f       	adc	r25, r19
    55ce:	fc 01       	movw	r30, r24
    55d0:	80 81       	ld	r24, Z
    55d2:	88 2f       	mov	r24, r24
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	c0 97       	sbiw	r24, 0x30	; 48
    55d8:	9c 01       	movw	r18, r24
    55da:	99 0f       	add	r25, r25
    55dc:	44 0b       	sbc	r20, r20
    55de:	55 0b       	sbc	r21, r21
    55e0:	84 e6       	ldi	r24, 0x64	; 100
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	dc 01       	movw	r26, r24
    55e6:	0e 94 2f 59 	call	0xb25e	; 0xb25e <__muluhisi3>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	a8 01       	movw	r20, r16
    55f0:	97 01       	movw	r18, r14
    55f2:	28 0f       	add	r18, r24
    55f4:	39 1f       	adc	r19, r25
    55f6:	4a 1f       	adc	r20, r26
    55f8:	5b 1f       	adc	r21, r27
    55fa:	8a 81       	ldd	r24, Y+2	; 0x02
    55fc:	9b 81       	ldd	r25, Y+3	; 0x03
    55fe:	08 96       	adiw	r24, 0x08	; 8
    5600:	6b ad       	ldd	r22, Y+59	; 0x3b
    5602:	7c ad       	ldd	r23, Y+60	; 0x3c
    5604:	86 0f       	add	r24, r22
    5606:	97 1f       	adc	r25, r23
    5608:	fc 01       	movw	r30, r24
    560a:	80 81       	ld	r24, Z
    560c:	88 2f       	mov	r24, r24
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	c0 97       	sbiw	r24, 0x30	; 48
    5612:	09 2e       	mov	r0, r25
    5614:	00 0c       	add	r0, r0
    5616:	aa 0b       	sbc	r26, r26
    5618:	bb 0b       	sbc	r27, r27
    561a:	88 0f       	add	r24, r24
    561c:	99 1f       	adc	r25, r25
    561e:	aa 1f       	adc	r26, r26
    5620:	bb 1f       	adc	r27, r27
    5622:	7c 01       	movw	r14, r24
    5624:	8d 01       	movw	r16, r26
    5626:	ee 0c       	add	r14, r14
    5628:	ff 1c       	adc	r15, r15
    562a:	00 1f       	adc	r16, r16
    562c:	11 1f       	adc	r17, r17
    562e:	ee 0c       	add	r14, r14
    5630:	ff 1c       	adc	r15, r15
    5632:	00 1f       	adc	r16, r16
    5634:	11 1f       	adc	r17, r17
    5636:	8e 0d       	add	r24, r14
    5638:	9f 1d       	adc	r25, r15
    563a:	a0 1f       	adc	r26, r16
    563c:	b1 1f       	adc	r27, r17
    563e:	28 0f       	add	r18, r24
    5640:	39 1f       	adc	r19, r25
    5642:	4a 1f       	adc	r20, r26
    5644:	5b 1f       	adc	r21, r27
    5646:	8a 81       	ldd	r24, Y+2	; 0x02
    5648:	9b 81       	ldd	r25, Y+3	; 0x03
    564a:	09 96       	adiw	r24, 0x09	; 9
    564c:	6b ad       	ldd	r22, Y+59	; 0x3b
    564e:	7c ad       	ldd	r23, Y+60	; 0x3c
    5650:	86 0f       	add	r24, r22
    5652:	97 1f       	adc	r25, r23
    5654:	fc 01       	movw	r30, r24
    5656:	80 81       	ld	r24, Z
    5658:	88 2f       	mov	r24, r24
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	c0 97       	sbiw	r24, 0x30	; 48
    565e:	09 2e       	mov	r0, r25
    5660:	00 0c       	add	r0, r0
    5662:	aa 0b       	sbc	r26, r26
    5664:	bb 0b       	sbc	r27, r27
    5666:	82 0f       	add	r24, r18
    5668:	93 1f       	adc	r25, r19
    566a:	a4 1f       	adc	r26, r20
    566c:	b5 1f       	adc	r27, r21
    566e:	8c 8f       	std	Y+28, r24	; 0x1c
    5670:	9d 8f       	std	Y+29, r25	; 0x1d
    5672:	ae 8f       	std	Y+30, r26	; 0x1e
    5674:	bf 8f       	std	Y+31, r27	; 0x1f
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    5676:	8a 81       	ldd	r24, Y+2	; 0x02
    5678:	9b 81       	ldd	r25, Y+3	; 0x03
    567a:	0b 96       	adiw	r24, 0x0b	; 11
    567c:	2b ad       	ldd	r18, Y+59	; 0x3b
    567e:	3c ad       	ldd	r19, Y+60	; 0x3c
    5680:	82 0f       	add	r24, r18
    5682:	93 1f       	adc	r25, r19
    5684:	fc 01       	movw	r30, r24
    5686:	80 81       	ld	r24, Z
    5688:	8e 34       	cpi	r24, 0x4E	; 78
    568a:	49 f4       	brne	.+18     	; 0x569e <getGPSDatafromNMEA+0x328>
    568c:	0f 2e       	mov	r0, r31
    568e:	c1 2c       	mov	r12, r1
    5690:	d1 2c       	mov	r13, r1
    5692:	f0 e8       	ldi	r31, 0x80	; 128
    5694:	ef 2e       	mov	r14, r31
    5696:	ff e3       	ldi	r31, 0x3F	; 63
    5698:	ff 2e       	mov	r15, r31
    569a:	f0 2d       	mov	r31, r0
    569c:	08 c0       	rjmp	.+16     	; 0x56ae <getGPSDatafromNMEA+0x338>
    569e:	0f 2e       	mov	r0, r31
    56a0:	c1 2c       	mov	r12, r1
    56a2:	d1 2c       	mov	r13, r1
    56a4:	f0 e8       	ldi	r31, 0x80	; 128
    56a6:	ef 2e       	mov	r14, r31
    56a8:	ff eb       	ldi	r31, 0xBF	; 191
    56aa:	ff 2e       	mov	r15, r31
    56ac:	f0 2d       	mov	r31, r0
    56ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    56b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56b2:	cc 01       	movw	r24, r24
    56b4:	a0 e0       	ldi	r26, 0x00	; 0
    56b6:	b0 e0       	ldi	r27, 0x00	; 0
    56b8:	bc 01       	movw	r22, r24
    56ba:	cd 01       	movw	r24, r26
    56bc:	0e 94 88 53 	call	0xa710	; 0xa710 <__floatunsisf>
    56c0:	4b 01       	movw	r8, r22
    56c2:	5c 01       	movw	r10, r24
    56c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    56c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    56c8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    56ca:	bf 8d       	ldd	r27, Y+31	; 0x1f
    56cc:	bc 01       	movw	r22, r24
    56ce:	cd 01       	movw	r24, r26
    56d0:	0e 94 88 53 	call	0xa710	; 0xa710 <__floatunsisf>
    56d4:	dc 01       	movw	r26, r24
    56d6:	cb 01       	movw	r24, r22
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	3c e7       	ldi	r19, 0x7C	; 124
    56dc:	42 e1       	ldi	r20, 0x12	; 18
    56de:	59 e4       	ldi	r21, 0x49	; 73
    56e0:	bc 01       	movw	r22, r24
    56e2:	cd 01       	movw	r24, r26
    56e4:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    56e8:	dc 01       	movw	r26, r24
    56ea:	cb 01       	movw	r24, r22
    56ec:	9c 01       	movw	r18, r24
    56ee:	ad 01       	movw	r20, r26
    56f0:	c5 01       	movw	r24, r10
    56f2:	b4 01       	movw	r22, r8
    56f4:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    56f8:	dc 01       	movw	r26, r24
    56fa:	cb 01       	movw	r24, r22
    56fc:	9c 01       	movw	r18, r24
    56fe:	ad 01       	movw	r20, r26
    5700:	c7 01       	movw	r24, r14
    5702:	b6 01       	movw	r22, r12
    5704:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <__mulsf3>
    5708:	dc 01       	movw	r26, r24
    570a:	cb 01       	movw	r24, r22
    570c:	89 a3       	std	Y+33, r24	; 0x21
    570e:	9a a3       	std	Y+34, r25	; 0x22
    5710:	ab a3       	std	Y+35, r26	; 0x23
    5712:	bc a3       	std	Y+36, r27	; 0x24
    5714:	1a c2       	rjmp	.+1076   	; 0x5b4a <getGPSDatafromNMEA+0x7d4>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
    5716:	89 81       	ldd	r24, Y+1	; 0x01
    5718:	82 30       	cpi	r24, 0x02	; 2
    571a:	29 f4       	brne	.+10     	; 0x5726 <getGPSDatafromNMEA+0x3b0>
				{
					GPSData.latdecimal = 0.0;
    571c:	19 a2       	std	Y+33, r1	; 0x21
    571e:	1a a2       	std	Y+34, r1	; 0x22
    5720:	1b a2       	std	Y+35, r1	; 0x23
    5722:	1c a2       	std	Y+36, r1	; 0x24
    5724:	12 c2       	rjmp	.+1060   	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    5726:	89 81       	ldd	r24, Y+1	; 0x01
    5728:	84 30       	cpi	r24, 0x04	; 4
    572a:	09 f0       	breq	.+2      	; 0x572e <getGPSDatafromNMEA+0x3b8>
    572c:	40 c1       	rjmp	.+640    	; 0x59ae <getGPSDatafromNMEA+0x638>
    572e:	8a 81       	ldd	r24, Y+2	; 0x02
    5730:	9b 81       	ldd	r25, Y+3	; 0x03
    5732:	01 96       	adiw	r24, 0x01	; 1
    5734:	2b ad       	ldd	r18, Y+59	; 0x3b
    5736:	3c ad       	ldd	r19, Y+60	; 0x3c
    5738:	82 0f       	add	r24, r18
    573a:	93 1f       	adc	r25, r19
    573c:	fc 01       	movw	r30, r24
    573e:	80 81       	ld	r24, Z
    5740:	8c 32       	cpi	r24, 0x2C	; 44
    5742:	09 f4       	brne	.+2      	; 0x5746 <getGPSDatafromNMEA+0x3d0>
    5744:	34 c1       	rjmp	.+616    	; 0x59ae <getGPSDatafromNMEA+0x638>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    5746:	8a 81       	ldd	r24, Y+2	; 0x02
    5748:	9b 81       	ldd	r25, Y+3	; 0x03
    574a:	01 96       	adiw	r24, 0x01	; 1
    574c:	2b ad       	ldd	r18, Y+59	; 0x3b
    574e:	3c ad       	ldd	r19, Y+60	; 0x3c
    5750:	82 0f       	add	r24, r18
    5752:	93 1f       	adc	r25, r19
    5754:	fc 01       	movw	r30, r24
    5756:	80 81       	ld	r24, Z
    5758:	88 2f       	mov	r24, r24
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	c0 97       	sbiw	r24, 0x30	; 48
    575e:	44 e6       	ldi	r20, 0x64	; 100
    5760:	48 9f       	mul	r20, r24
    5762:	90 01       	movw	r18, r0
    5764:	49 9f       	mul	r20, r25
    5766:	30 0d       	add	r19, r0
    5768:	11 24       	eor	r1, r1
    576a:	8a 81       	ldd	r24, Y+2	; 0x02
    576c:	9b 81       	ldd	r25, Y+3	; 0x03
    576e:	02 96       	adiw	r24, 0x02	; 2
    5770:	4b ad       	ldd	r20, Y+59	; 0x3b
    5772:	5c ad       	ldd	r21, Y+60	; 0x3c
    5774:	84 0f       	add	r24, r20
    5776:	95 1f       	adc	r25, r21
    5778:	fc 01       	movw	r30, r24
    577a:	80 81       	ld	r24, Z
    577c:	88 2f       	mov	r24, r24
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	c0 97       	sbiw	r24, 0x30	; 48
    5782:	88 0f       	add	r24, r24
    5784:	99 1f       	adc	r25, r25
    5786:	ac 01       	movw	r20, r24
    5788:	44 0f       	add	r20, r20
    578a:	55 1f       	adc	r21, r21
    578c:	44 0f       	add	r20, r20
    578e:	55 1f       	adc	r21, r21
    5790:	84 0f       	add	r24, r20
    5792:	95 1f       	adc	r25, r21
    5794:	28 0f       	add	r18, r24
    5796:	39 1f       	adc	r19, r25
    5798:	8a 81       	ldd	r24, Y+2	; 0x02
    579a:	9b 81       	ldd	r25, Y+3	; 0x03
    579c:	03 96       	adiw	r24, 0x03	; 3
    579e:	4b ad       	ldd	r20, Y+59	; 0x3b
    57a0:	5c ad       	ldd	r21, Y+60	; 0x3c
    57a2:	84 0f       	add	r24, r20
    57a4:	95 1f       	adc	r25, r21
    57a6:	fc 01       	movw	r30, r24
    57a8:	80 81       	ld	r24, Z
    57aa:	88 2f       	mov	r24, r24
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	c0 97       	sbiw	r24, 0x30	; 48
    57b0:	82 0f       	add	r24, r18
    57b2:	93 1f       	adc	r25, r19
    57b4:	8d a3       	std	Y+37, r24	; 0x25
    57b6:	9e a3       	std	Y+38, r25	; 0x26
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    57b8:	8a 81       	ldd	r24, Y+2	; 0x02
    57ba:	9b 81       	ldd	r25, Y+3	; 0x03
    57bc:	04 96       	adiw	r24, 0x04	; 4
    57be:	2b ad       	ldd	r18, Y+59	; 0x3b
    57c0:	3c ad       	ldd	r19, Y+60	; 0x3c
    57c2:	82 0f       	add	r24, r18
    57c4:	93 1f       	adc	r25, r19
    57c6:	fc 01       	movw	r30, r24
    57c8:	80 81       	ld	r24, Z
    57ca:	88 2f       	mov	r24, r24
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	c0 97       	sbiw	r24, 0x30	; 48
    57d0:	09 2e       	mov	r0, r25
    57d2:	00 0c       	add	r0, r0
    57d4:	aa 0b       	sbc	r26, r26
    57d6:	bb 0b       	sbc	r27, r27
    57d8:	9c 01       	movw	r18, r24
    57da:	ad 01       	movw	r20, r26
    57dc:	60 ea       	ldi	r22, 0xA0	; 160
    57de:	76 e8       	ldi	r23, 0x86	; 134
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__mulsi3>
    57e8:	7b 01       	movw	r14, r22
    57ea:	8c 01       	movw	r16, r24
					+ 10000l*(NMEA_sentence[a+5] - '0')
    57ec:	8a 81       	ldd	r24, Y+2	; 0x02
    57ee:	9b 81       	ldd	r25, Y+3	; 0x03
    57f0:	05 96       	adiw	r24, 0x05	; 5
    57f2:	2b ad       	ldd	r18, Y+59	; 0x3b
    57f4:	3c ad       	ldd	r19, Y+60	; 0x3c
    57f6:	82 0f       	add	r24, r18
    57f8:	93 1f       	adc	r25, r19
    57fa:	fc 01       	movw	r30, r24
    57fc:	80 81       	ld	r24, Z
    57fe:	88 2f       	mov	r24, r24
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	c0 97       	sbiw	r24, 0x30	; 48
    5804:	9c 01       	movw	r18, r24
    5806:	99 0f       	add	r25, r25
    5808:	44 0b       	sbc	r20, r20
    580a:	55 0b       	sbc	r21, r21
    580c:	80 e1       	ldi	r24, 0x10	; 16
    580e:	97 e2       	ldi	r25, 0x27	; 39
    5810:	dc 01       	movw	r26, r24
    5812:	0e 94 2f 59 	call	0xb25e	; 0xb25e <__muluhisi3>
    5816:	dc 01       	movw	r26, r24
    5818:	cb 01       	movw	r24, r22
    581a:	e8 0e       	add	r14, r24
    581c:	f9 1e       	adc	r15, r25
    581e:	0a 1f       	adc	r16, r26
    5820:	1b 1f       	adc	r17, r27
					+ 1000l*(NMEA_sentence[a+7] - '0')
    5822:	8a 81       	ldd	r24, Y+2	; 0x02
    5824:	9b 81       	ldd	r25, Y+3	; 0x03
    5826:	07 96       	adiw	r24, 0x07	; 7
    5828:	2b ad       	ldd	r18, Y+59	; 0x3b
    582a:	3c ad       	ldd	r19, Y+60	; 0x3c
    582c:	82 0f       	add	r24, r18
    582e:	93 1f       	adc	r25, r19
    5830:	fc 01       	movw	r30, r24
    5832:	80 81       	ld	r24, Z
    5834:	88 2f       	mov	r24, r24
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	c0 97       	sbiw	r24, 0x30	; 48
    583a:	9c 01       	movw	r18, r24
    583c:	99 0f       	add	r25, r25
    583e:	44 0b       	sbc	r20, r20
    5840:	55 0b       	sbc	r21, r21
    5842:	88 ee       	ldi	r24, 0xE8	; 232
    5844:	93 e0       	ldi	r25, 0x03	; 3
    5846:	dc 01       	movw	r26, r24
    5848:	0e 94 2f 59 	call	0xb25e	; 0xb25e <__muluhisi3>
    584c:	dc 01       	movw	r26, r24
    584e:	cb 01       	movw	r24, r22
    5850:	e8 0e       	add	r14, r24
    5852:	f9 1e       	adc	r15, r25
    5854:	0a 1f       	adc	r16, r26
    5856:	1b 1f       	adc	r17, r27
					+ 100l*(NMEA_sentence[a+8] - '0')
    5858:	8a 81       	ldd	r24, Y+2	; 0x02
    585a:	9b 81       	ldd	r25, Y+3	; 0x03
    585c:	08 96       	adiw	r24, 0x08	; 8
    585e:	2b ad       	ldd	r18, Y+59	; 0x3b
    5860:	3c ad       	ldd	r19, Y+60	; 0x3c
    5862:	82 0f       	add	r24, r18
    5864:	93 1f       	adc	r25, r19
    5866:	fc 01       	movw	r30, r24
    5868:	80 81       	ld	r24, Z
    586a:	88 2f       	mov	r24, r24
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	c0 97       	sbiw	r24, 0x30	; 48
    5870:	9c 01       	movw	r18, r24
    5872:	99 0f       	add	r25, r25
    5874:	44 0b       	sbc	r20, r20
    5876:	55 0b       	sbc	r21, r21
    5878:	84 e6       	ldi	r24, 0x64	; 100
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	dc 01       	movw	r26, r24
    587e:	0e 94 2f 59 	call	0xb25e	; 0xb25e <__muluhisi3>
    5882:	dc 01       	movw	r26, r24
    5884:	cb 01       	movw	r24, r22
    5886:	a8 01       	movw	r20, r16
    5888:	97 01       	movw	r18, r14
    588a:	28 0f       	add	r18, r24
    588c:	39 1f       	adc	r19, r25
    588e:	4a 1f       	adc	r20, r26
    5890:	5b 1f       	adc	r21, r27
					+ 10l*(NMEA_sentence[a+9] - '0')
    5892:	8a 81       	ldd	r24, Y+2	; 0x02
    5894:	9b 81       	ldd	r25, Y+3	; 0x03
    5896:	09 96       	adiw	r24, 0x09	; 9
    5898:	6b ad       	ldd	r22, Y+59	; 0x3b
    589a:	7c ad       	ldd	r23, Y+60	; 0x3c
    589c:	86 0f       	add	r24, r22
    589e:	97 1f       	adc	r25, r23
    58a0:	fc 01       	movw	r30, r24
    58a2:	80 81       	ld	r24, Z
    58a4:	88 2f       	mov	r24, r24
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	c0 97       	sbiw	r24, 0x30	; 48
    58aa:	09 2e       	mov	r0, r25
    58ac:	00 0c       	add	r0, r0
    58ae:	aa 0b       	sbc	r26, r26
    58b0:	bb 0b       	sbc	r27, r27
    58b2:	88 0f       	add	r24, r24
    58b4:	99 1f       	adc	r25, r25
    58b6:	aa 1f       	adc	r26, r26
    58b8:	bb 1f       	adc	r27, r27
    58ba:	7c 01       	movw	r14, r24
    58bc:	8d 01       	movw	r16, r26
    58be:	ee 0c       	add	r14, r14
    58c0:	ff 1c       	adc	r15, r15
    58c2:	00 1f       	adc	r16, r16
    58c4:	11 1f       	adc	r17, r17
    58c6:	ee 0c       	add	r14, r14
    58c8:	ff 1c       	adc	r15, r15
    58ca:	00 1f       	adc	r16, r16
    58cc:	11 1f       	adc	r17, r17
    58ce:	8e 0d       	add	r24, r14
    58d0:	9f 1d       	adc	r25, r15
    58d2:	a0 1f       	adc	r26, r16
    58d4:	b1 1f       	adc	r27, r17
    58d6:	28 0f       	add	r18, r24
    58d8:	39 1f       	adc	r19, r25
    58da:	4a 1f       	adc	r20, r26
    58dc:	5b 1f       	adc	r21, r27
					+ (NMEA_sentence[a+10] - '0');
    58de:	8a 81       	ldd	r24, Y+2	; 0x02
    58e0:	9b 81       	ldd	r25, Y+3	; 0x03
    58e2:	0a 96       	adiw	r24, 0x0a	; 10
    58e4:	6b ad       	ldd	r22, Y+59	; 0x3b
    58e6:	7c ad       	ldd	r23, Y+60	; 0x3c
    58e8:	86 0f       	add	r24, r22
    58ea:	97 1f       	adc	r25, r23
    58ec:	fc 01       	movw	r30, r24
    58ee:	80 81       	ld	r24, Z
    58f0:	88 2f       	mov	r24, r24
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	c0 97       	sbiw	r24, 0x30	; 48
    58f6:	09 2e       	mov	r0, r25
    58f8:	00 0c       	add	r0, r0
    58fa:	aa 0b       	sbc	r26, r26
    58fc:	bb 0b       	sbc	r27, r27
    58fe:	82 0f       	add	r24, r18
    5900:	93 1f       	adc	r25, r19
    5902:	a4 1f       	adc	r26, r20
    5904:	b5 1f       	adc	r27, r21
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    5906:	8f a3       	std	Y+39, r24	; 0x27
    5908:	98 a7       	std	Y+40, r25	; 0x28
    590a:	a9 a7       	std	Y+41, r26	; 0x29
    590c:	ba a7       	std	Y+42, r27	; 0x2a
					+ 1000l*(NMEA_sentence[a+7] - '0')
					+ 100l*(NMEA_sentence[a+8] - '0')
					+ 10l*(NMEA_sentence[a+9] - '0')
					+ (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    590e:	8a 81       	ldd	r24, Y+2	; 0x02
    5910:	9b 81       	ldd	r25, Y+3	; 0x03
    5912:	0c 96       	adiw	r24, 0x0c	; 12
    5914:	2b ad       	ldd	r18, Y+59	; 0x3b
    5916:	3c ad       	ldd	r19, Y+60	; 0x3c
    5918:	82 0f       	add	r24, r18
    591a:	93 1f       	adc	r25, r19
    591c:	fc 01       	movw	r30, r24
    591e:	80 81       	ld	r24, Z
    5920:	85 34       	cpi	r24, 0x45	; 69
    5922:	49 f4       	brne	.+18     	; 0x5936 <getGPSDatafromNMEA+0x5c0>
    5924:	0f 2e       	mov	r0, r31
    5926:	c1 2c       	mov	r12, r1
    5928:	d1 2c       	mov	r13, r1
    592a:	f0 e8       	ldi	r31, 0x80	; 128
    592c:	ef 2e       	mov	r14, r31
    592e:	ff e3       	ldi	r31, 0x3F	; 63
    5930:	ff 2e       	mov	r15, r31
    5932:	f0 2d       	mov	r31, r0
    5934:	08 c0       	rjmp	.+16     	; 0x5946 <getGPSDatafromNMEA+0x5d0>
    5936:	0f 2e       	mov	r0, r31
    5938:	c1 2c       	mov	r12, r1
    593a:	d1 2c       	mov	r13, r1
    593c:	f0 e8       	ldi	r31, 0x80	; 128
    593e:	ef 2e       	mov	r14, r31
    5940:	ff eb       	ldi	r31, 0xBF	; 191
    5942:	ff 2e       	mov	r15, r31
    5944:	f0 2d       	mov	r31, r0
    5946:	8d a1       	ldd	r24, Y+37	; 0x25
    5948:	9e a1       	ldd	r25, Y+38	; 0x26
    594a:	cc 01       	movw	r24, r24
    594c:	a0 e0       	ldi	r26, 0x00	; 0
    594e:	b0 e0       	ldi	r27, 0x00	; 0
    5950:	bc 01       	movw	r22, r24
    5952:	cd 01       	movw	r24, r26
    5954:	0e 94 88 53 	call	0xa710	; 0xa710 <__floatunsisf>
    5958:	4b 01       	movw	r8, r22
    595a:	5c 01       	movw	r10, r24
    595c:	8f a1       	ldd	r24, Y+39	; 0x27
    595e:	98 a5       	ldd	r25, Y+40	; 0x28
    5960:	a9 a5       	ldd	r26, Y+41	; 0x29
    5962:	ba a5       	ldd	r27, Y+42	; 0x2a
    5964:	bc 01       	movw	r22, r24
    5966:	cd 01       	movw	r24, r26
    5968:	0e 94 88 53 	call	0xa710	; 0xa710 <__floatunsisf>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	20 e0       	ldi	r18, 0x00	; 0
    5972:	3c e7       	ldi	r19, 0x7C	; 124
    5974:	42 e1       	ldi	r20, 0x12	; 18
    5976:	59 e4       	ldi	r21, 0x49	; 73
    5978:	bc 01       	movw	r22, r24
    597a:	cd 01       	movw	r24, r26
    597c:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    5980:	dc 01       	movw	r26, r24
    5982:	cb 01       	movw	r24, r22
    5984:	9c 01       	movw	r18, r24
    5986:	ad 01       	movw	r20, r26
    5988:	c5 01       	movw	r24, r10
    598a:	b4 01       	movw	r22, r8
    598c:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    5990:	dc 01       	movw	r26, r24
    5992:	cb 01       	movw	r24, r22
    5994:	9c 01       	movw	r18, r24
    5996:	ad 01       	movw	r20, r26
    5998:	c7 01       	movw	r24, r14
    599a:	b6 01       	movw	r22, r12
    599c:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <__mulsf3>
    59a0:	dc 01       	movw	r26, r24
    59a2:	cb 01       	movw	r24, r22
    59a4:	8c a7       	std	Y+44, r24	; 0x2c
    59a6:	9d a7       	std	Y+45, r25	; 0x2d
    59a8:	ae a7       	std	Y+46, r26	; 0x2e
    59aa:	bf a7       	std	Y+47, r27	; 0x2f
    59ac:	ce c0       	rjmp	.+412    	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
    59ae:	89 81       	ldd	r24, Y+1	; 0x01
    59b0:	84 30       	cpi	r24, 0x04	; 4
    59b2:	29 f4       	brne	.+10     	; 0x59be <getGPSDatafromNMEA+0x648>
				{
					GPSData.londecimal = 0.0;
    59b4:	1c a6       	std	Y+44, r1	; 0x2c
    59b6:	1d a6       	std	Y+45, r1	; 0x2d
    59b8:	1e a6       	std	Y+46, r1	; 0x2e
    59ba:	1f a6       	std	Y+47, r1	; 0x2f
    59bc:	c6 c0       	rjmp	.+396    	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 6)
    59be:	89 81       	ldd	r24, Y+1	; 0x01
    59c0:	86 30       	cpi	r24, 0x06	; 6
    59c2:	61 f4       	brne	.+24     	; 0x59dc <getGPSDatafromNMEA+0x666>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    59c4:	8a 81       	ldd	r24, Y+2	; 0x02
    59c6:	9b 81       	ldd	r25, Y+3	; 0x03
    59c8:	01 96       	adiw	r24, 0x01	; 1
    59ca:	2b ad       	ldd	r18, Y+59	; 0x3b
    59cc:	3c ad       	ldd	r19, Y+60	; 0x3c
    59ce:	82 0f       	add	r24, r18
    59d0:	93 1f       	adc	r25, r19
    59d2:	fc 01       	movw	r30, r24
    59d4:	80 81       	ld	r24, Z
    59d6:	80 53       	subi	r24, 0x30	; 48
    59d8:	8f ab       	std	Y+55, r24	; 0x37
    59da:	b7 c0       	rjmp	.+366    	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
				}
				else if (countcommas == 7)
    59dc:	89 81       	ldd	r24, Y+1	; 0x01
    59de:	87 30       	cpi	r24, 0x07	; 7
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <getGPSDatafromNMEA+0x66e>
    59e2:	b3 c0       	rjmp	.+358    	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
				{
					
					
				}
				else if (countcommas == 9)
    59e4:	89 81       	ldd	r24, Y+1	; 0x01
    59e6:	89 30       	cpi	r24, 0x09	; 9
    59e8:	09 f0       	breq	.+2      	; 0x59ec <getGPSDatafromNMEA+0x676>
    59ea:	af c0       	rjmp	.+350    	; 0x5b4a <getGPSDatafromNMEA+0x7d4>
				{
					uint8_t period_reached = 0;
    59ec:	1c 82       	std	Y+4, r1	; 0x04
					uint8_t period_counter;
					float altitude = 0;
    59ee:	1e 82       	std	Y+6, r1	; 0x06
    59f0:	1f 82       	std	Y+7, r1	; 0x07
    59f2:	18 86       	std	Y+8, r1	; 0x08
    59f4:	19 86       	std	Y+9, r1	; 0x09
					uint8_t inc = 0;
    59f6:	1a 86       	std	Y+10, r1	; 0x0a
					while (NMEA_sentence[a + inc + 1] != ',')
    59f8:	8f c0       	rjmp	.+286    	; 0x5b18 <getGPSDatafromNMEA+0x7a2>
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    59fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    59fc:	28 2f       	mov	r18, r24
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	8a 81       	ldd	r24, Y+2	; 0x02
    5a02:	9b 81       	ldd	r25, Y+3	; 0x03
    5a04:	82 0f       	add	r24, r18
    5a06:	93 1f       	adc	r25, r19
    5a08:	01 96       	adiw	r24, 0x01	; 1
    5a0a:	2b ad       	ldd	r18, Y+59	; 0x3b
    5a0c:	3c ad       	ldd	r19, Y+60	; 0x3c
    5a0e:	82 0f       	add	r24, r18
    5a10:	93 1f       	adc	r25, r19
    5a12:	fc 01       	movw	r30, r24
    5a14:	80 81       	ld	r24, Z
    5a16:	8e 32       	cpi	r24, 0x2E	; 46
    5a18:	29 f4       	brne	.+10     	; 0x5a24 <getGPSDatafromNMEA+0x6ae>
						{
							period_reached = 1;
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	8c 83       	std	Y+4, r24	; 0x04
							period_counter = 1;
    5a1e:	81 e0       	ldi	r24, 0x01	; 1
    5a20:	8d 83       	std	Y+5, r24	; 0x05
    5a22:	77 c0       	rjmp	.+238    	; 0x5b12 <getGPSDatafromNMEA+0x79c>
						}
						else if (!period_reached)
    5a24:	8c 81       	ldd	r24, Y+4	; 0x04
    5a26:	88 23       	and	r24, r24
    5a28:	d1 f5       	brne	.+116    	; 0x5a9e <getGPSDatafromNMEA+0x728>
						{
							altitude *= 10;
    5a2a:	20 e0       	ldi	r18, 0x00	; 0
    5a2c:	30 e0       	ldi	r19, 0x00	; 0
    5a2e:	40 e2       	ldi	r20, 0x20	; 32
    5a30:	51 e4       	ldi	r21, 0x41	; 65
    5a32:	6e 81       	ldd	r22, Y+6	; 0x06
    5a34:	7f 81       	ldd	r23, Y+7	; 0x07
    5a36:	88 85       	ldd	r24, Y+8	; 0x08
    5a38:	99 85       	ldd	r25, Y+9	; 0x09
    5a3a:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <__mulsf3>
    5a3e:	dc 01       	movw	r26, r24
    5a40:	cb 01       	movw	r24, r22
    5a42:	8e 83       	std	Y+6, r24	; 0x06
    5a44:	9f 83       	std	Y+7, r25	; 0x07
    5a46:	a8 87       	std	Y+8, r26	; 0x08
    5a48:	b9 87       	std	Y+9, r27	; 0x09
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    5a4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a4c:	28 2f       	mov	r18, r24
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	8a 81       	ldd	r24, Y+2	; 0x02
    5a52:	9b 81       	ldd	r25, Y+3	; 0x03
    5a54:	82 0f       	add	r24, r18
    5a56:	93 1f       	adc	r25, r19
    5a58:	01 96       	adiw	r24, 0x01	; 1
    5a5a:	2b ad       	ldd	r18, Y+59	; 0x3b
    5a5c:	3c ad       	ldd	r19, Y+60	; 0x3c
    5a5e:	82 0f       	add	r24, r18
    5a60:	93 1f       	adc	r25, r19
    5a62:	fc 01       	movw	r30, r24
    5a64:	80 81       	ld	r24, Z
    5a66:	88 2f       	mov	r24, r24
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	c0 97       	sbiw	r24, 0x30	; 48
    5a6c:	09 2e       	mov	r0, r25
    5a6e:	00 0c       	add	r0, r0
    5a70:	aa 0b       	sbc	r26, r26
    5a72:	bb 0b       	sbc	r27, r27
    5a74:	bc 01       	movw	r22, r24
    5a76:	cd 01       	movw	r24, r26
    5a78:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	cb 01       	movw	r24, r22
    5a80:	9c 01       	movw	r18, r24
    5a82:	ad 01       	movw	r20, r26
    5a84:	6e 81       	ldd	r22, Y+6	; 0x06
    5a86:	7f 81       	ldd	r23, Y+7	; 0x07
    5a88:	88 85       	ldd	r24, Y+8	; 0x08
    5a8a:	99 85       	ldd	r25, Y+9	; 0x09
    5a8c:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	8e 83       	std	Y+6, r24	; 0x06
    5a96:	9f 83       	std	Y+7, r25	; 0x07
    5a98:	a8 87       	std	Y+8, r26	; 0x08
    5a9a:	b9 87       	std	Y+9, r27	; 0x09
    5a9c:	3a c0       	rjmp	.+116    	; 0x5b12 <getGPSDatafromNMEA+0x79c>
						}
						else if (period_reached && period_counter == 1)
    5a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    5aa0:	88 23       	and	r24, r24
    5aa2:	b9 f1       	breq	.+110    	; 0x5b12 <getGPSDatafromNMEA+0x79c>
    5aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    5aa6:	81 30       	cpi	r24, 0x01	; 1
    5aa8:	a1 f5       	brne	.+104    	; 0x5b12 <getGPSDatafromNMEA+0x79c>
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    5aaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    5aac:	28 2f       	mov	r18, r24
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab4:	82 0f       	add	r24, r18
    5ab6:	93 1f       	adc	r25, r19
    5ab8:	01 96       	adiw	r24, 0x01	; 1
    5aba:	2b ad       	ldd	r18, Y+59	; 0x3b
    5abc:	3c ad       	ldd	r19, Y+60	; 0x3c
    5abe:	82 0f       	add	r24, r18
    5ac0:	93 1f       	adc	r25, r19
    5ac2:	fc 01       	movw	r30, r24
    5ac4:	80 81       	ld	r24, Z
    5ac6:	88 2f       	mov	r24, r24
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	c0 97       	sbiw	r24, 0x30	; 48
    5acc:	09 2e       	mov	r0, r25
    5ace:	00 0c       	add	r0, r0
    5ad0:	aa 0b       	sbc	r26, r26
    5ad2:	bb 0b       	sbc	r27, r27
    5ad4:	bc 01       	movw	r22, r24
    5ad6:	cd 01       	movw	r24, r26
    5ad8:	0e 94 8a 53 	call	0xa714	; 0xa714 <__floatsisf>
    5adc:	dc 01       	movw	r26, r24
    5ade:	cb 01       	movw	r24, r22
    5ae0:	20 e0       	ldi	r18, 0x00	; 0
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	40 e2       	ldi	r20, 0x20	; 32
    5ae6:	51 e4       	ldi	r21, 0x41	; 65
    5ae8:	bc 01       	movw	r22, r24
    5aea:	cd 01       	movw	r24, r26
    5aec:	0e 94 b5 52 	call	0xa56a	; 0xa56a <__divsf3>
    5af0:	dc 01       	movw	r26, r24
    5af2:	cb 01       	movw	r24, r22
    5af4:	9c 01       	movw	r18, r24
    5af6:	ad 01       	movw	r20, r26
    5af8:	6e 81       	ldd	r22, Y+6	; 0x06
    5afa:	7f 81       	ldd	r23, Y+7	; 0x07
    5afc:	88 85       	ldd	r24, Y+8	; 0x08
    5afe:	99 85       	ldd	r25, Y+9	; 0x09
    5b00:	0e 94 4d 52 	call	0xa49a	; 0xa49a <__addsf3>
    5b04:	dc 01       	movw	r26, r24
    5b06:	cb 01       	movw	r24, r22
    5b08:	8e 83       	std	Y+6, r24	; 0x06
    5b0a:	9f 83       	std	Y+7, r25	; 0x07
    5b0c:	a8 87       	std	Y+8, r26	; 0x08
    5b0e:	b9 87       	std	Y+9, r27	; 0x09
							break;
    5b10:	14 c0       	rjmp	.+40     	; 0x5b3a <getGPSDatafromNMEA+0x7c4>
						}
						
						inc++;
    5b12:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b14:	8f 5f       	subi	r24, 0xFF	; 255
    5b16:	8a 87       	std	Y+10, r24	; 0x0a
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    5b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b1a:	28 2f       	mov	r18, r24
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b20:	9b 81       	ldd	r25, Y+3	; 0x03
    5b22:	82 0f       	add	r24, r18
    5b24:	93 1f       	adc	r25, r19
    5b26:	01 96       	adiw	r24, 0x01	; 1
    5b28:	2b ad       	ldd	r18, Y+59	; 0x3b
    5b2a:	3c ad       	ldd	r19, Y+60	; 0x3c
    5b2c:	82 0f       	add	r24, r18
    5b2e:	93 1f       	adc	r25, r19
    5b30:	fc 01       	movw	r30, r24
    5b32:	80 81       	ld	r24, Z
    5b34:	8c 32       	cpi	r24, 0x2C	; 44
    5b36:	09 f0       	breq	.+2      	; 0x5b3a <getGPSDatafromNMEA+0x7c4>
    5b38:	60 cf       	rjmp	.-320    	; 0x59fa <getGPSDatafromNMEA+0x684>
							break;
						}
						
						inc++;
					}
					GPSData.altitude = altitude;
    5b3a:	8e 81       	ldd	r24, Y+6	; 0x06
    5b3c:	9f 81       	ldd	r25, Y+7	; 0x07
    5b3e:	a8 85       	ldd	r26, Y+8	; 0x08
    5b40:	b9 85       	ldd	r27, Y+9	; 0x09
    5b42:	88 ab       	std	Y+48, r24	; 0x30
    5b44:	99 ab       	std	Y+49, r25	; 0x31
    5b46:	aa ab       	std	Y+50, r26	; 0x32
    5b48:	bb ab       	std	Y+51, r27	; 0x33
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    5b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b4e:	01 96       	adiw	r24, 0x01	; 1
    5b50:	8a 83       	std	Y+2, r24	; 0x02
    5b52:	9b 83       	std	Y+3, r25	; 0x03
    5b54:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b56:	28 2f       	mov	r18, r24
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b5e:	82 17       	cp	r24, r18
    5b60:	93 07       	cpc	r25, r19
    5b62:	0c f4       	brge	.+2      	; 0x5b66 <getGPSDatafromNMEA+0x7f0>
    5b64:	3b cc       	rjmp	.-1930   	; 0x53dc <getGPSDatafromNMEA+0x66>
					//printf("Altitudes!\n");
				}
			}
			
		}
		current_sentence = SENTENCE_NONE;
    5b66:	10 92 cf 25 	sts	0x25CF, r1	; 0x8025cf <current_sentence>
	
	
	
	//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
	//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
	return GPSData;
    5b6a:	89 ad       	ldd	r24, Y+57	; 0x39
    5b6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b6e:	2f e1       	ldi	r18, 0x1F	; 31
    5b70:	fe 01       	movw	r30, r28
    5b72:	7a 96       	adiw	r30, 0x1a	; 26
    5b74:	dc 01       	movw	r26, r24
    5b76:	01 90       	ld	r0, Z+
    5b78:	0d 92       	st	X+, r0
    5b7a:	2a 95       	dec	r18
    5b7c:	e1 f7       	brne	.-8      	; 0x5b76 <getGPSDatafromNMEA+0x800>


}
    5b7e:	89 ad       	ldd	r24, Y+57	; 0x39
    5b80:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b82:	ed 96       	adiw	r28, 0x3d	; 61
    5b84:	cd bf       	out	0x3d, r28	; 61
    5b86:	de bf       	out	0x3e, r29	; 62
    5b88:	df 91       	pop	r29
    5b8a:	cf 91       	pop	r28
    5b8c:	1f 91       	pop	r17
    5b8e:	0f 91       	pop	r16
    5b90:	ff 90       	pop	r15
    5b92:	ef 90       	pop	r14
    5b94:	df 90       	pop	r13
    5b96:	cf 90       	pop	r12
    5b98:	bf 90       	pop	r11
    5b9a:	af 90       	pop	r10
    5b9c:	9f 90       	pop	r9
    5b9e:	8f 90       	pop	r8
    5ba0:	08 95       	ret

00005ba2 <newOLogInit>:
#include "uart.h"
static uart_device openLog;


void newOLogInit()//initializes the openLog uart communication interface
{
    5ba2:	cf 93       	push	r28
    5ba4:	df 93       	push	r29
    5ba6:	cd b7       	in	r28, 0x3d	; 61
    5ba8:	de b7       	in	r29, 0x3e	; 62
	//sets parameters of uart communication
	openLog.Baud=OPENLOG_BAUD;
    5baa:	80 e0       	ldi	r24, 0x00	; 0
    5bac:	92 ec       	ldi	r25, 0xC2	; 194
    5bae:	a1 e0       	ldi	r26, 0x01	; 1
    5bb0:	b0 e0       	ldi	r27, 0x00	; 0
    5bb2:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <openLog+0x6>
    5bb6:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <openLog+0x7>
    5bba:	a0 93 a4 21 	sts	0x21A4, r26	; 0x8021a4 <openLog+0x8>
    5bbe:	b0 93 a5 21 	sts	0x21A5, r27	; 0x8021a5 <openLog+0x9>
    openLog.Port=P_OPENLOG_PORT;
    5bc2:	80 e4       	ldi	r24, 0x40	; 64
    5bc4:	96 e0       	ldi	r25, 0x06	; 6
    5bc6:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <openLog>
    5bca:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <openLog+0x1>
	openLog.Usart=P_OPENLOG_UART;
    5bce:	80 ea       	ldi	r24, 0xA0	; 160
    5bd0:	98 e0       	ldi	r25, 0x08	; 8
    5bd2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <openLog+0x2>
    5bd6:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <openLog+0x3>
	openLog.tx=OPENLOG_TX_PIN;
    5bda:	88 e0       	ldi	r24, 0x08	; 8
    5bdc:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <openLog+0x5>
	openLog.rx=OPENLOG_RX_PIN;
    5be0:	84 e0       	ldi	r24, 0x04	; 4
    5be2:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <openLog+0x4>
	uart_init(&openLog);//function that initializes uart
    5be6:	8c e9       	ldi	r24, 0x9C	; 156
    5be8:	91 e2       	ldi	r25, 0x21	; 33
    5bea:	0e 94 85 4b 	call	0x970a	; 0x970a <uart_init>
	 
	if(DEBUG) printf("OpenLog Initialized\n\0");
    5bee:	88 e0       	ldi	r24, 0x08	; 8
    5bf0:	91 e2       	ldi	r25, 0x21	; 33
    5bf2:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
}
    5bf6:	00 00       	nop
    5bf8:	df 91       	pop	r29
    5bfa:	cf 91       	pop	r28
    5bfc:	08 95       	ret

00005bfe <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    5bfe:	cf 93       	push	r28
    5c00:	df 93       	push	r29
    5c02:	1f 92       	push	r1
    5c04:	cd b7       	in	r28, 0x3d	; 61
    5c06:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    5c08:	8f e3       	ldi	r24, 0x3F	; 63
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	80 81       	ld	r24, Z
    5c10:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5c12:	f8 94       	cli
	return flags;
    5c14:	89 81       	ldd	r24, Y+1	; 0x01
}
    5c16:	0f 90       	pop	r0
    5c18:	df 91       	pop	r29
    5c1a:	cf 91       	pop	r28
    5c1c:	08 95       	ret

00005c1e <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5c1e:	cf 93       	push	r28
    5c20:	df 93       	push	r29
    5c22:	1f 92       	push	r1
    5c24:	cd b7       	in	r28, 0x3d	; 61
    5c26:	de b7       	in	r29, 0x3e	; 62
    5c28:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    5c2a:	8f e3       	ldi	r24, 0x3F	; 63
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	29 81       	ldd	r18, Y+1	; 0x01
    5c30:	fc 01       	movw	r30, r24
    5c32:	20 83       	st	Z, r18
}
    5c34:	00 00       	nop
    5c36:	0f 90       	pop	r0
    5c38:	df 91       	pop	r29
    5c3a:	cf 91       	pop	r28
    5c3c:	08 95       	ret

00005c3e <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    5c3e:	cf 93       	push	r28
    5c40:	df 93       	push	r29
    5c42:	1f 92       	push	r1
    5c44:	1f 92       	push	r1
    5c46:	cd b7       	in	r28, 0x3d	; 61
    5c48:	de b7       	in	r29, 0x3e	; 62
    5c4a:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    5c4c:	d8 df       	rcall	.-80     	; 0x5bfe <cpu_irq_save>
    5c4e:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    5c50:	80 e5       	ldi	r24, 0x50	; 80
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	20 e5       	ldi	r18, 0x50	; 80
    5c56:	30 e0       	ldi	r19, 0x00	; 0
    5c58:	f9 01       	movw	r30, r18
    5c5a:	30 81       	ld	r19, Z
    5c5c:	2a 81       	ldd	r18, Y+2	; 0x02
    5c5e:	23 2b       	or	r18, r19
    5c60:	fc 01       	movw	r30, r24
    5c62:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    5c64:	89 81       	ldd	r24, Y+1	; 0x01
    5c66:	db df       	rcall	.-74     	; 0x5c1e <cpu_irq_restore>
}
    5c68:	00 00       	nop
    5c6a:	0f 90       	pop	r0
    5c6c:	0f 90       	pop	r0
    5c6e:	df 91       	pop	r29
    5c70:	cf 91       	pop	r28
    5c72:	08 95       	ret

00005c74 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    5c74:	cf 93       	push	r28
    5c76:	df 93       	push	r29
    5c78:	1f 92       	push	r1
    5c7a:	1f 92       	push	r1
    5c7c:	cd b7       	in	r28, 0x3d	; 61
    5c7e:	de b7       	in	r29, 0x3e	; 62
    5c80:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    5c82:	80 e5       	ldi	r24, 0x50	; 80
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	22 e0       	ldi	r18, 0x02	; 2
    5c88:	fc 01       	movw	r30, r24
    5c8a:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    5c8c:	b8 df       	rcall	.-144    	; 0x5bfe <cpu_irq_save>
    5c8e:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    5c90:	80 e5       	ldi	r24, 0x50	; 80
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	20 e5       	ldi	r18, 0x50	; 80
    5c96:	30 e0       	ldi	r19, 0x00	; 0
    5c98:	f9 01       	movw	r30, r18
    5c9a:	30 81       	ld	r19, Z
    5c9c:	2a 81       	ldd	r18, Y+2	; 0x02
    5c9e:	23 2b       	or	r18, r19
    5ca0:	fc 01       	movw	r30, r24
    5ca2:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	bb df       	rcall	.-138    	; 0x5c1e <cpu_irq_restore>
}
    5ca8:	00 00       	nop
    5caa:	0f 90       	pop	r0
    5cac:	0f 90       	pop	r0
    5cae:	df 91       	pop	r29
    5cb0:	cf 91       	pop	r28
    5cb2:	08 95       	ret

00005cb4 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    5cb4:	cf 93       	push	r28
    5cb6:	df 93       	push	r29
    5cb8:	1f 92       	push	r1
    5cba:	1f 92       	push	r1
    5cbc:	cd b7       	in	r28, 0x3d	; 61
    5cbe:	de b7       	in	r29, 0x3e	; 62
    5cc0:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    5cc2:	9d df       	rcall	.-198    	; 0x5bfe <cpu_irq_save>
    5cc4:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    5cc6:	80 e5       	ldi	r24, 0x50	; 80
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	20 e5       	ldi	r18, 0x50	; 80
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	f9 01       	movw	r30, r18
    5cd0:	20 81       	ld	r18, Z
    5cd2:	32 2f       	mov	r19, r18
    5cd4:	2a 81       	ldd	r18, Y+2	; 0x02
    5cd6:	20 95       	com	r18
    5cd8:	23 23       	and	r18, r19
    5cda:	fc 01       	movw	r30, r24
    5cdc:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    5cde:	89 81       	ldd	r24, Y+1	; 0x01
    5ce0:	9e df       	rcall	.-196    	; 0x5c1e <cpu_irq_restore>
}
    5ce2:	00 00       	nop
    5ce4:	0f 90       	pop	r0
    5ce6:	0f 90       	pop	r0
    5ce8:	df 91       	pop	r29
    5cea:	cf 91       	pop	r28
    5cec:	08 95       	ret

00005cee <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	1f 92       	push	r1
    5cf4:	cd b7       	in	r28, 0x3d	; 61
    5cf6:	de b7       	in	r29, 0x3e	; 62
    5cf8:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    5cfa:	89 81       	ldd	r24, Y+1	; 0x01
    5cfc:	88 30       	cpi	r24, 0x08	; 8
    5cfe:	19 f0       	breq	.+6      	; 0x5d06 <osc_enable+0x18>
		osc_enable_internal(id);
    5d00:	89 81       	ldd	r24, Y+1	; 0x01
    5d02:	9d df       	rcall	.-198    	; 0x5c3e <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
    5d04:	02 c0       	rjmp	.+4      	; 0x5d0a <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
    5d06:	89 81       	ldd	r24, Y+1	; 0x01
    5d08:	b5 df       	rcall	.-150    	; 0x5c74 <osc_enable_external>
	}
}
    5d0a:	00 00       	nop
    5d0c:	0f 90       	pop	r0
    5d0e:	df 91       	pop	r29
    5d10:	cf 91       	pop	r28
    5d12:	08 95       	ret

00005d14 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    5d14:	cf 93       	push	r28
    5d16:	df 93       	push	r29
    5d18:	1f 92       	push	r1
    5d1a:	cd b7       	in	r28, 0x3d	; 61
    5d1c:	de b7       	in	r29, 0x3e	; 62
    5d1e:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    5d20:	80 e5       	ldi	r24, 0x50	; 80
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	fc 01       	movw	r30, r24
    5d26:	91 81       	ldd	r25, Z+1	; 0x01
    5d28:	89 81       	ldd	r24, Y+1	; 0x01
    5d2a:	98 23       	and	r25, r24
    5d2c:	81 e0       	ldi	r24, 0x01	; 1
    5d2e:	99 23       	and	r25, r25
    5d30:	09 f4       	brne	.+2      	; 0x5d34 <osc_is_ready+0x20>
    5d32:	80 e0       	ldi	r24, 0x00	; 0
}
    5d34:	0f 90       	pop	r0
    5d36:	df 91       	pop	r29
    5d38:	cf 91       	pop	r28
    5d3a:	08 95       	ret

00005d3c <osc_user_calibration>:
 * \arg \c OSC_ID_RC2MHZ or \c OSC_ID_RC32MHZ.
 * \param calib The specific calibration value required:
 *
 */
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
    5d3c:	cf 93       	push	r28
    5d3e:	df 93       	push	r29
    5d40:	00 d0       	rcall	.+0      	; 0x5d42 <osc_user_calibration+0x6>
    5d42:	cd b7       	in	r28, 0x3d	; 61
    5d44:	de b7       	in	r29, 0x3e	; 62
    5d46:	89 83       	std	Y+1, r24	; 0x01
    5d48:	6a 83       	std	Y+2, r22	; 0x02
    5d4a:	7b 83       	std	Y+3, r23	; 0x03
	switch (id) {
    5d4c:	89 81       	ldd	r24, Y+1	; 0x01
    5d4e:	88 2f       	mov	r24, r24
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	81 30       	cpi	r24, 0x01	; 1
    5d54:	91 05       	cpc	r25, r1
    5d56:	19 f0       	breq	.+6      	; 0x5d5e <osc_user_calibration+0x22>
    5d58:	02 97       	sbiw	r24, 0x02	; 2
    5d5a:	81 f0       	breq	.+32     	; 0x5d7c <osc_user_calibration+0x40>
		break;
#endif

	default:
		Assert(false);
		break;
    5d5c:	1e c0       	rjmp	.+60     	; 0x5d9a <osc_user_calibration+0x5e>
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
	switch (id) {
	case OSC_ID_RC2MHZ:
#if !XMEGA_E
		DFLLRC2M.CALA=LSB(calib);
    5d5e:	88 e6       	ldi	r24, 0x68	; 104
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	9e 01       	movw	r18, r28
    5d64:	2e 5f       	subi	r18, 0xFE	; 254
    5d66:	3f 4f       	sbci	r19, 0xFF	; 255
    5d68:	f9 01       	movw	r30, r18
    5d6a:	20 81       	ld	r18, Z
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC2M.CALB=MSB(calib);
    5d70:	88 e6       	ldi	r24, 0x68	; 104
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	2b 81       	ldd	r18, Y+3	; 0x03
    5d76:	fc 01       	movw	r30, r24
    5d78:	23 83       	std	Z+3, r18	; 0x03
#endif
		break;
    5d7a:	0f c0       	rjmp	.+30     	; 0x5d9a <osc_user_calibration+0x5e>

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    5d7c:	80 e6       	ldi	r24, 0x60	; 96
    5d7e:	90 e0       	ldi	r25, 0x00	; 0
    5d80:	9e 01       	movw	r18, r28
    5d82:	2e 5f       	subi	r18, 0xFE	; 254
    5d84:	3f 4f       	sbci	r19, 0xFF	; 255
    5d86:	f9 01       	movw	r30, r18
    5d88:	20 81       	ld	r18, Z
    5d8a:	fc 01       	movw	r30, r24
    5d8c:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    5d8e:	80 e6       	ldi	r24, 0x60	; 96
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	2b 81       	ldd	r18, Y+3	; 0x03
    5d94:	fc 01       	movw	r30, r24
    5d96:	23 83       	std	Z+3, r18	; 0x03
		break;
    5d98:	00 00       	nop

	default:
		Assert(false);
		break;
	}
}
    5d9a:	00 00       	nop
    5d9c:	23 96       	adiw	r28, 0x03	; 3
    5d9e:	cd bf       	out	0x3d, r28	; 61
    5da0:	de bf       	out	0x3e, r29	; 62
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	08 95       	ret

00005da8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
    5dac:	1f 92       	push	r1
    5dae:	cd b7       	in	r28, 0x3d	; 61
    5db0:	de b7       	in	r29, 0x3e	; 62
    5db2:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    5db4:	00 00       	nop
    5db6:	89 81       	ldd	r24, Y+1	; 0x01
    5db8:	ad df       	rcall	.-166    	; 0x5d14 <osc_is_ready>
    5dba:	98 2f       	mov	r25, r24
    5dbc:	81 e0       	ldi	r24, 0x01	; 1
    5dbe:	89 27       	eor	r24, r25
    5dc0:	88 23       	and	r24, r24
    5dc2:	c9 f7       	brne	.-14     	; 0x5db6 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    5dc4:	00 00       	nop
    5dc6:	0f 90       	pop	r0
    5dc8:	df 91       	pop	r29
    5dca:	cf 91       	pop	r28
    5dcc:	08 95       	ret

00005dce <sysclk_rtcsrc_enable>:
 * \param id RTC clock source ID. Select from SYSCLK_RTCSRC_ULP,
 *           SYSCLK_RTCSRC_RCOSC, SYSCLK_RTCSRC_TOSC, SYSCLK_RTCSRC_RCOSC32,
 *           SYSCLK_RTCSRC_TOSC32 or SYSCLK_RTCSRC_EXTCLK
 */
static inline void sysclk_rtcsrc_enable(uint8_t id)
{
    5dce:	cf 93       	push	r28
    5dd0:	df 93       	push	r29
    5dd2:	1f 92       	push	r1
    5dd4:	cd b7       	in	r28, 0x3d	; 61
    5dd6:	de b7       	in	r29, 0x3e	; 62
    5dd8:	89 83       	std	Y+1, r24	; 0x01
	Assert((id & ~CLK_RTCSRC_gm) == 0);

	switch (id) {
    5dda:	89 81       	ldd	r24, Y+1	; 0x01
    5ddc:	88 2f       	mov	r24, r24
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	8a 30       	cpi	r24, 0x0A	; 10
    5de2:	91 05       	cpc	r25, r1
    5de4:	a1 f0       	breq	.+40     	; 0x5e0e <sysclk_rtcsrc_enable+0x40>
    5de6:	8b 30       	cpi	r24, 0x0B	; 11
    5de8:	91 05       	cpc	r25, r1
    5dea:	34 f4       	brge	.+12     	; 0x5df8 <sysclk_rtcsrc_enable+0x2a>
    5dec:	82 30       	cpi	r24, 0x02	; 2
    5dee:	91 05       	cpc	r25, r1
    5df0:	71 f0       	breq	.+28     	; 0x5e0e <sysclk_rtcsrc_enable+0x40>
    5df2:	04 97       	sbiw	r24, 0x04	; 4
    5df4:	39 f0       	breq	.+14     	; 0x5e04 <sysclk_rtcsrc_enable+0x36>
    5df6:	10 c0       	rjmp	.+32     	; 0x5e18 <sysclk_rtcsrc_enable+0x4a>
    5df8:	8c 30       	cpi	r24, 0x0C	; 12
    5dfa:	91 05       	cpc	r25, r1
    5dfc:	19 f0       	breq	.+6      	; 0x5e04 <sysclk_rtcsrc_enable+0x36>
    5dfe:	0e 97       	sbiw	r24, 0x0e	; 14
    5e00:	31 f0       	breq	.+12     	; 0x5e0e <sysclk_rtcsrc_enable+0x40>
    5e02:	0a c0       	rjmp	.+20     	; 0x5e18 <sysclk_rtcsrc_enable+0x4a>
	case SYSCLK_RTCSRC_RCOSC:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_RCOSC32:
#endif
		osc_enable(OSC_ID_RC32KHZ);
    5e04:	84 e0       	ldi	r24, 0x04	; 4
    5e06:	73 df       	rcall	.-282    	; 0x5cee <osc_enable>
		osc_wait_ready(OSC_ID_RC32KHZ);
    5e08:	84 e0       	ldi	r24, 0x04	; 4
    5e0a:	ce df       	rcall	.-100    	; 0x5da8 <osc_wait_ready>
	case SYSCLK_RTCSRC_TOSC:
	case SYSCLK_RTCSRC_TOSC32:
#if !XMEGA_A && !XMEGA_D
	case SYSCLK_RTCSRC_EXTCLK:
#endif
		osc_enable(OSC_ID_XOSC);
    5e0c:	05 c0       	rjmp	.+10     	; 0x5e18 <sysclk_rtcsrc_enable+0x4a>
    5e0e:	88 e0       	ldi	r24, 0x08	; 8
		osc_wait_ready(OSC_ID_XOSC);
    5e10:	6e df       	rcall	.-292    	; 0x5cee <osc_enable>
    5e12:	88 e0       	ldi	r24, 0x08	; 8
    5e14:	c9 df       	rcall	.-110    	; 0x5da8 <osc_wait_ready>
		break;
    5e16:	00 00       	nop
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    5e18:	80 e4       	ldi	r24, 0x40	; 64
    5e1a:	90 e0       	ldi	r25, 0x00	; 0
    5e1c:	29 81       	ldd	r18, Y+1	; 0x01
    5e1e:	21 60       	ori	r18, 0x01	; 1
    5e20:	fc 01       	movw	r30, r24
    5e22:	23 83       	std	Z+3, r18	; 0x03
}
    5e24:	00 00       	nop
    5e26:	0f 90       	pop	r0
    5e28:	df 91       	pop	r29
    5e2a:	cf 91       	pop	r28
    5e2c:	08 95       	ret

00005e2e <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    5e2e:	cf 93       	push	r28
    5e30:	df 93       	push	r29
    5e32:	1f 92       	push	r1
    5e34:	cd b7       	in	r28, 0x3d	; 61
    5e36:	de b7       	in	r29, 0x3e	; 62
    5e38:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    5e3a:	89 81       	ldd	r24, Y+1	; 0x01
    5e3c:	88 2f       	mov	r24, r24
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	bc 01       	movw	r22, r24
    5e42:	82 e0       	ldi	r24, 0x02	; 2
    5e44:	20 d1       	rcall	.+576    	; 0x6086 <nvm_read_byte>
}
    5e46:	0f 90       	pop	r0
    5e48:	df 91       	pop	r29
    5e4a:	cf 91       	pop	r28
    5e4c:	08 95       	ret

00005e4e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    5e4e:	0f 93       	push	r16
    5e50:	1f 93       	push	r17
    5e52:	cf 93       	push	r28
    5e54:	df 93       	push	r29
    5e56:	00 d0       	rcall	.+0      	; 0x5e58 <sysclk_init+0xa>
    5e58:	00 d0       	rcall	.+0      	; 0x5e5a <sysclk_init+0xc>
    5e5a:	cd b7       	in	r28, 0x3d	; 61
    5e5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    5e5e:	80 e7       	ldi	r24, 0x70	; 112
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	89 83       	std	Y+1, r24	; 0x01
    5e64:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    5e66:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    5e68:	1b 82       	std	Y+3, r1	; 0x03
    5e6a:	0d c0       	rjmp	.+26     	; 0x5e86 <sysclk_init+0x38>
		*(reg++) = 0xff;
    5e6c:	89 81       	ldd	r24, Y+1	; 0x01
    5e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e70:	9c 01       	movw	r18, r24
    5e72:	2f 5f       	subi	r18, 0xFF	; 255
    5e74:	3f 4f       	sbci	r19, 0xFF	; 255
    5e76:	29 83       	std	Y+1, r18	; 0x01
    5e78:	3a 83       	std	Y+2, r19	; 0x02
    5e7a:	2f ef       	ldi	r18, 0xFF	; 255
    5e7c:	fc 01       	movw	r30, r24
    5e7e:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    5e80:	8b 81       	ldd	r24, Y+3	; 0x03
    5e82:	8f 5f       	subi	r24, 0xFF	; 255
    5e84:	8b 83       	std	Y+3, r24	; 0x03
    5e86:	8b 81       	ldd	r24, Y+3	; 0x03
    5e88:	87 30       	cpi	r24, 0x07	; 7
    5e8a:	80 f3       	brcs	.-32     	; 0x5e6c <sysclk_init+0x1e>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    5e8c:	8e 01       	movw	r16, r28
    5e8e:	0b 5f       	subi	r16, 0xFB	; 251
    5e90:	1f 4f       	sbci	r17, 0xFF	; 255
    5e92:	0f 5f       	subi	r16, 0xFF	; 255
    5e94:	1f 4f       	sbci	r17, 0xFF	; 255
    5e96:	8c e1       	ldi	r24, 0x1C	; 28
    5e98:	ca df       	rcall	.-108    	; 0x5e2e <nvm_read_production_signature_row>
    5e9a:	f8 01       	movw	r30, r16
    5e9c:	80 83       	st	Z, r24
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    5e9e:	8e 01       	movw	r16, r28
    5ea0:	0b 5f       	subi	r16, 0xFB	; 251
    5ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea4:	8d e1       	ldi	r24, 0x1D	; 29
    5ea6:	c3 df       	rcall	.-122    	; 0x5e2e <nvm_read_production_signature_row>
    5ea8:	f8 01       	movw	r30, r16
    5eaa:	80 83       	st	Z, r24
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    5eac:	8d 81       	ldd	r24, Y+5	; 0x05
    5eae:	9e 81       	ldd	r25, Y+6	; 0x06
    5eb0:	01 96       	adiw	r24, 0x01	; 1
    5eb2:	21 f4       	brne	.+8      	; 0x5ebc <sysclk_init+0x6e>
		cal = 0x2340;
    5eb4:	80 e4       	ldi	r24, 0x40	; 64
    5eb6:	93 e2       	ldi	r25, 0x23	; 35
    5eb8:	8d 83       	std	Y+5, r24	; 0x05
    5eba:	9e 83       	std	Y+6, r25	; 0x06
	}
	osc_user_calibration(OSC_ID_RC32MHZ,cal);
    5ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    5ec0:	bc 01       	movw	r22, r24
    5ec2:	82 e0       	ldi	r24, 0x02	; 2
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    5ec4:	3b df       	rcall	.-394    	; 0x5d3c <osc_user_calibration>
    5ec6:	82 e0       	ldi	r24, 0x02	; 2
			osc_wait_ready(OSC_ID_RC32MHZ);
    5ec8:	12 df       	rcall	.-476    	; 0x5cee <osc_enable>
    5eca:	82 e0       	ldi	r24, 0x02	; 2
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    5ecc:	6d df       	rcall	.-294    	; 0x5da8 <osc_wait_ready>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    5ece:	00 00       	nop
    5ed0:	61 e0       	ldi	r22, 0x01	; 1
    5ed2:	80 e4       	ldi	r24, 0x40	; 64
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    5ed6:	d1 d0       	rcall	.+418    	; 0x607a <ccp_write_io>
    5ed8:	8c 81       	ldd	r24, Y+4	; 0x04
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    5eda:	88 23       	and	r24, r24
    5edc:	11 f4       	brne	.+4      	; 0x5ee2 <sysclk_init+0x94>
    5ede:	81 e0       	ldi	r24, 0x01	; 1
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
    5ee0:	e9 de       	rcall	.-558    	; 0x5cb4 <osc_disable>
    5ee2:	80 e0       	ldi	r24, 0x00	; 0
    5ee4:	74 df       	rcall	.-280    	; 0x5dce <sysclk_rtcsrc_enable>
#endif
}
    5ee6:	26 96       	adiw	r28, 0x06	; 6
    5ee8:	cd bf       	out	0x3d, r28	; 61
    5eea:	de bf       	out	0x3e, r29	; 62
    5eec:	df 91       	pop	r29
    5eee:	cf 91       	pop	r28
    5ef0:	1f 91       	pop	r17
    5ef2:	0f 91       	pop	r16
    5ef4:	08 95       	ret

00005ef6 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    5ef6:	cf 93       	push	r28
    5ef8:	df 93       	push	r29
    5efa:	00 d0       	rcall	.+0      	; 0x5efc <sysclk_enable_module+0x6>
    5efc:	cd b7       	in	r28, 0x3d	; 61
    5efe:	de b7       	in	r29, 0x3e	; 62
    5f00:	8a 83       	std	Y+2, r24	; 0x02
    5f02:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    5f04:	7c de       	rcall	.-776    	; 0x5bfe <cpu_irq_save>
    5f06:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    5f08:	8a 81       	ldd	r24, Y+2	; 0x02
    5f0a:	88 2f       	mov	r24, r24
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	80 59       	subi	r24, 0x90	; 144
    5f10:	9f 4f       	sbci	r25, 0xFF	; 255
    5f12:	2a 81       	ldd	r18, Y+2	; 0x02
    5f14:	22 2f       	mov	r18, r18
    5f16:	30 e0       	ldi	r19, 0x00	; 0
    5f18:	20 59       	subi	r18, 0x90	; 144
    5f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f1c:	f9 01       	movw	r30, r18
    5f1e:	20 81       	ld	r18, Z
    5f20:	32 2f       	mov	r19, r18
    5f22:	2b 81       	ldd	r18, Y+3	; 0x03
    5f24:	20 95       	com	r18
    5f26:	23 23       	and	r18, r19
    5f28:	fc 01       	movw	r30, r24
    5f2a:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    5f2c:	89 81       	ldd	r24, Y+1	; 0x01
    5f2e:	77 de       	rcall	.-786    	; 0x5c1e <cpu_irq_restore>
}
    5f30:	00 00       	nop
    5f32:	23 96       	adiw	r28, 0x03	; 3
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	de bf       	out	0x3e, r29	; 62
    5f38:	df 91       	pop	r29
    5f3a:	cf 91       	pop	r28
    5f3c:	08 95       	ret

00005f3e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    5f3e:	cf 93       	push	r28
    5f40:	df 93       	push	r29
    5f42:	00 d0       	rcall	.+0      	; 0x5f44 <sysclk_disable_module+0x6>
    5f44:	cd b7       	in	r28, 0x3d	; 61
    5f46:	de b7       	in	r29, 0x3e	; 62
    5f48:	8a 83       	std	Y+2, r24	; 0x02
    5f4a:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    5f4c:	58 de       	rcall	.-848    	; 0x5bfe <cpu_irq_save>
    5f4e:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    5f50:	8a 81       	ldd	r24, Y+2	; 0x02
    5f52:	88 2f       	mov	r24, r24
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	80 59       	subi	r24, 0x90	; 144
    5f58:	9f 4f       	sbci	r25, 0xFF	; 255
    5f5a:	2a 81       	ldd	r18, Y+2	; 0x02
    5f5c:	22 2f       	mov	r18, r18
    5f5e:	30 e0       	ldi	r19, 0x00	; 0
    5f60:	20 59       	subi	r18, 0x90	; 144
    5f62:	3f 4f       	sbci	r19, 0xFF	; 255
    5f64:	f9 01       	movw	r30, r18
    5f66:	30 81       	ld	r19, Z
    5f68:	2b 81       	ldd	r18, Y+3	; 0x03
    5f6a:	23 2b       	or	r18, r19
    5f6c:	fc 01       	movw	r30, r24
    5f6e:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    5f70:	89 81       	ldd	r24, Y+1	; 0x01
    5f72:	55 de       	rcall	.-854    	; 0x5c1e <cpu_irq_restore>
}
    5f74:	00 00       	nop
    5f76:	23 96       	adiw	r28, 0x03	; 3
    5f78:	cd bf       	out	0x3d, r28	; 61
    5f7a:	de bf       	out	0x3e, r29	; 62
    5f7c:	df 91       	pop	r29
    5f7e:	cf 91       	pop	r28
    5f80:	08 95       	ret

00005f82 <usart_serial_putchar>:
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
}
    5f82:	cf 93       	push	r28
    5f84:	df 93       	push	r29
    5f86:	00 d0       	rcall	.+0      	; 0x5f88 <usart_serial_putchar+0x6>
    5f88:	cd b7       	in	r28, 0x3d	; 61
    5f8a:	de b7       	in	r29, 0x3e	; 62
    5f8c:	89 83       	std	Y+1, r24	; 0x01
    5f8e:	9a 83       	std	Y+2, r25	; 0x02
    5f90:	6b 83       	std	Y+3, r22	; 0x03
    5f92:	89 81       	ldd	r24, Y+1	; 0x01
    5f94:	9a 81       	ldd	r25, Y+2	; 0x02
    5f96:	6b 81       	ldd	r22, Y+3	; 0x03
    5f98:	0e 94 75 46 	call	0x8cea	; 0x8cea <usart_putchar>
    5f9c:	23 96       	adiw	r28, 0x03	; 3
    5f9e:	cd bf       	out	0x3d, r28	; 61
    5fa0:	de bf       	out	0x3e, r29	; 62
    5fa2:	df 91       	pop	r29
    5fa4:	cf 91       	pop	r28
    5fa6:	08 95       	ret

00005fa8 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    5fa8:	cf 93       	push	r28
    5faa:	df 93       	push	r29
    5fac:	00 d0       	rcall	.+0      	; 0x5fae <usart_serial_write_packet+0x6>
    5fae:	00 d0       	rcall	.+0      	; 0x5fb0 <usart_serial_write_packet+0x8>
    5fb0:	cd b7       	in	r28, 0x3d	; 61
    5fb2:	de b7       	in	r29, 0x3e	; 62
    5fb4:	89 83       	std	Y+1, r24	; 0x01
    5fb6:	9a 83       	std	Y+2, r25	; 0x02
    5fb8:	6b 83       	std	Y+3, r22	; 0x03
    5fba:	7c 83       	std	Y+4, r23	; 0x04
    5fbc:	4d 83       	std	Y+5, r20	; 0x05
    5fbe:	5e 83       	std	Y+6, r21	; 0x06
	while (len) {
    5fc0:	12 c0       	rjmp	.+36     	; 0x5fe6 <usart_serial_write_packet+0x3e>
		usart_serial_putchar(usart, *data);
    5fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    5fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    5fc6:	fc 01       	movw	r30, r24
    5fc8:	20 81       	ld	r18, Z
    5fca:	89 81       	ldd	r24, Y+1	; 0x01
    5fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    5fce:	62 2f       	mov	r22, r18
    5fd0:	d8 df       	rcall	.-80     	; 0x5f82 <usart_serial_putchar>
		len--;
    5fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    5fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    5fd6:	01 97       	sbiw	r24, 0x01	; 1
    5fd8:	8d 83       	std	Y+5, r24	; 0x05
    5fda:	9e 83       	std	Y+6, r25	; 0x06
		data++;
    5fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    5fde:	9c 81       	ldd	r25, Y+4	; 0x04
    5fe0:	01 96       	adiw	r24, 0x01	; 1
    5fe2:	8b 83       	std	Y+3, r24	; 0x03
    5fe4:	9c 83       	std	Y+4, r25	; 0x04
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    5fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    5fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    5fea:	89 2b       	or	r24, r25
    5fec:	51 f7       	brne	.-44     	; 0x5fc2 <usart_serial_write_packet+0x1a>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
    5fee:	80 e0       	ldi	r24, 0x00	; 0
}
    5ff0:	26 96       	adiw	r28, 0x06	; 6
    5ff2:	cd bf       	out	0x3d, r28	; 61
    5ff4:	de bf       	out	0x3e, r29	; 62
    5ff6:	df 91       	pop	r29
    5ff8:	cf 91       	pop	r28
    5ffa:	08 95       	ret

00005ffc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    5ffc:	cf 93       	push	r28
    5ffe:	df 93       	push	r29
    6000:	00 d0       	rcall	.+0      	; 0x6002 <_read+0x6>
    6002:	cd b7       	in	r28, 0x3d	; 61
    6004:	de b7       	in	r29, 0x3e	; 62
    6006:	8a 83       	std	Y+2, r24	; 0x02
    6008:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    600a:	20 91 db 27 	lds	r18, 0x27DB	; 0x8027db <ptr_get>
    600e:	30 91 dc 27 	lds	r19, 0x27DC	; 0x8027dc <ptr_get+0x1>
    6012:	80 91 df 27 	lds	r24, 0x27DF	; 0x8027df <stdio_base>
    6016:	90 91 e0 27 	lds	r25, 0x27E0	; 0x8027e0 <stdio_base+0x1>
    601a:	ae 01       	movw	r20, r28
    601c:	4f 5f       	subi	r20, 0xFF	; 255
    601e:	5f 4f       	sbci	r21, 0xFF	; 255
    6020:	ba 01       	movw	r22, r20
    6022:	f9 01       	movw	r30, r18
    6024:	19 95       	eicall
	return c;
    6026:	89 81       	ldd	r24, Y+1	; 0x01
    6028:	08 2e       	mov	r0, r24
    602a:	00 0c       	add	r0, r0
    602c:	99 0b       	sbc	r25, r25
}
    602e:	23 96       	adiw	r28, 0x03	; 3
    6030:	cd bf       	out	0x3d, r28	; 61
    6032:	de bf       	out	0x3e, r29	; 62
    6034:	df 91       	pop	r29
    6036:	cf 91       	pop	r28
    6038:	08 95       	ret

0000603a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    603a:	cf 93       	push	r28
    603c:	df 93       	push	r29
    603e:	00 d0       	rcall	.+0      	; 0x6040 <_write+0x6>
    6040:	cd b7       	in	r28, 0x3d	; 61
    6042:	de b7       	in	r29, 0x3e	; 62
    6044:	89 83       	std	Y+1, r24	; 0x01
    6046:	6a 83       	std	Y+2, r22	; 0x02
    6048:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    604a:	20 91 dd 27 	lds	r18, 0x27DD	; 0x8027dd <ptr_put>
    604e:	30 91 de 27 	lds	r19, 0x27DE	; 0x8027de <ptr_put+0x1>
    6052:	80 91 df 27 	lds	r24, 0x27DF	; 0x8027df <stdio_base>
    6056:	90 91 e0 27 	lds	r25, 0x27E0	; 0x8027e0 <stdio_base+0x1>
    605a:	69 81       	ldd	r22, Y+1	; 0x01
    605c:	f9 01       	movw	r30, r18
    605e:	19 95       	eicall
    6060:	99 23       	and	r25, r25
    6062:	1c f4       	brge	.+6      	; 0x606a <_write+0x30>
		return -1;
    6064:	8f ef       	ldi	r24, 0xFF	; 255
    6066:	9f ef       	ldi	r25, 0xFF	; 255
    6068:	02 c0       	rjmp	.+4      	; 0x606e <_write+0x34>
	}
	return 1;
    606a:	81 e0       	ldi	r24, 0x01	; 1
    606c:	90 e0       	ldi	r25, 0x00	; 0
}
    606e:	23 96       	adiw	r28, 0x03	; 3
    6070:	cd bf       	out	0x3d, r28	; 61
    6072:	de bf       	out	0x3e, r29	; 62
    6074:	df 91       	pop	r29
    6076:	cf 91       	pop	r28
    6078:	08 95       	ret

0000607a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    607a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    607c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    607e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    6080:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    6082:	60 83       	st	Z, r22
	ret                             // Return to caller
    6084:	08 95       	ret

00006086 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    6086:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    608a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    608c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    608e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    6092:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    6094:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    6098:	08 95       	ret

0000609a <cpu_irq_save>:
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
}
    609a:	cf 93       	push	r28
    609c:	df 93       	push	r29
    609e:	1f 92       	push	r1
    60a0:	cd b7       	in	r28, 0x3d	; 61
    60a2:	de b7       	in	r29, 0x3e	; 62
    60a4:	8f e3       	ldi	r24, 0x3F	; 63
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	fc 01       	movw	r30, r24
    60aa:	80 81       	ld	r24, Z
    60ac:	89 83       	std	Y+1, r24	; 0x01
    60ae:	f8 94       	cli
    60b0:	89 81       	ldd	r24, Y+1	; 0x01
    60b2:	0f 90       	pop	r0
    60b4:	df 91       	pop	r29
    60b6:	cf 91       	pop	r28
    60b8:	08 95       	ret

000060ba <cpu_irq_restore>:
    60ba:	cf 93       	push	r28
    60bc:	df 93       	push	r29
    60be:	1f 92       	push	r1
    60c0:	cd b7       	in	r28, 0x3d	; 61
    60c2:	de b7       	in	r29, 0x3e	; 62
    60c4:	89 83       	std	Y+1, r24	; 0x01
    60c6:	8f e3       	ldi	r24, 0x3F	; 63
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	29 81       	ldd	r18, Y+1	; 0x01
    60cc:	fc 01       	movw	r30, r24
    60ce:	20 83       	st	Z, r18
    60d0:	00 00       	nop
    60d2:	0f 90       	pop	r0
    60d4:	df 91       	pop	r29
    60d6:	cf 91       	pop	r28
    60d8:	08 95       	ret

000060da <sleepmgr_lock_mode>:
    60da:	cf 93       	push	r28
    60dc:	df 93       	push	r29
    60de:	1f 92       	push	r1
    60e0:	1f 92       	push	r1
    60e2:	cd b7       	in	r28, 0x3d	; 61
    60e4:	de b7       	in	r29, 0x3e	; 62
    60e6:	8a 83       	std	Y+2, r24	; 0x02
    60e8:	8a 81       	ldd	r24, Y+2	; 0x02
    60ea:	88 2f       	mov	r24, r24
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	8b 52       	subi	r24, 0x2B	; 43
    60f0:	98 4d       	sbci	r25, 0xD8	; 216
    60f2:	fc 01       	movw	r30, r24
    60f4:	80 81       	ld	r24, Z
    60f6:	8f 3f       	cpi	r24, 0xFF	; 255
    60f8:	09 f4       	brne	.+2      	; 0x60fc <sleepmgr_lock_mode+0x22>
    60fa:	ff cf       	rjmp	.-2      	; 0x60fa <sleepmgr_lock_mode+0x20>
    60fc:	ce df       	rcall	.-100    	; 0x609a <cpu_irq_save>
    60fe:	89 83       	std	Y+1, r24	; 0x01
    6100:	8a 81       	ldd	r24, Y+2	; 0x02
    6102:	88 2f       	mov	r24, r24
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	9c 01       	movw	r18, r24
    6108:	2b 52       	subi	r18, 0x2B	; 43
    610a:	38 4d       	sbci	r19, 0xD8	; 216
    610c:	f9 01       	movw	r30, r18
    610e:	20 81       	ld	r18, Z
    6110:	2f 5f       	subi	r18, 0xFF	; 255
    6112:	8b 52       	subi	r24, 0x2B	; 43
    6114:	98 4d       	sbci	r25, 0xD8	; 216
    6116:	fc 01       	movw	r30, r24
    6118:	20 83       	st	Z, r18
    611a:	89 81       	ldd	r24, Y+1	; 0x01
    611c:	ce df       	rcall	.-100    	; 0x60ba <cpu_irq_restore>
    611e:	00 00       	nop
    6120:	0f 90       	pop	r0
    6122:	0f 90       	pop	r0
    6124:	df 91       	pop	r29
    6126:	cf 91       	pop	r28
    6128:	08 95       	ret

0000612a <rtc_get_time>:
    612a:	cf 93       	push	r28
    612c:	df 93       	push	r29
    612e:	cd b7       	in	r28, 0x3d	; 61
    6130:	de b7       	in	r29, 0x3e	; 62
    6132:	25 97       	sbiw	r28, 0x05	; 5
    6134:	cd bf       	out	0x3d, r28	; 61
    6136:	de bf       	out	0x3e, r29	; 62
    6138:	00 00       	nop
    613a:	80 e0       	ldi	r24, 0x00	; 0
    613c:	94 e0       	ldi	r25, 0x04	; 4
    613e:	fc 01       	movw	r30, r24
    6140:	81 81       	ldd	r24, Z+1	; 0x01
    6142:	88 2f       	mov	r24, r24
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	81 70       	andi	r24, 0x01	; 1
    6148:	99 27       	eor	r25, r25
    614a:	21 e0       	ldi	r18, 0x01	; 1
    614c:	89 2b       	or	r24, r25
    614e:	09 f4       	brne	.+2      	; 0x6152 <rtc_get_time+0x28>
    6150:	20 e0       	ldi	r18, 0x00	; 0
    6152:	22 23       	and	r18, r18
    6154:	91 f7       	brne	.-28     	; 0x613a <rtc_get_time+0x10>
    6156:	a1 df       	rcall	.-190    	; 0x609a <cpu_irq_save>
    6158:	8b 83       	std	Y+3, r24	; 0x03
    615a:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <rtc_data>
    615e:	90 91 e2 27 	lds	r25, 0x27E2	; 0x8027e2 <rtc_data+0x1>
    6162:	89 83       	std	Y+1, r24	; 0x01
    6164:	9a 83       	std	Y+2, r25	; 0x02
    6166:	80 e0       	ldi	r24, 0x00	; 0
    6168:	94 e0       	ldi	r25, 0x04	; 4
    616a:	fc 01       	movw	r30, r24
    616c:	80 85       	ldd	r24, Z+8	; 0x08
    616e:	91 85       	ldd	r25, Z+9	; 0x09
    6170:	8c 83       	std	Y+4, r24	; 0x04
    6172:	9d 83       	std	Y+5, r25	; 0x05
    6174:	8c 81       	ldd	r24, Y+4	; 0x04
    6176:	9d 81       	ldd	r25, Y+5	; 0x05
    6178:	89 2b       	or	r24, r25
    617a:	79 f4       	brne	.+30     	; 0x619a <rtc_get_time+0x70>
    617c:	80 e0       	ldi	r24, 0x00	; 0
    617e:	94 e0       	ldi	r25, 0x04	; 4
    6180:	fc 01       	movw	r30, r24
    6182:	83 81       	ldd	r24, Z+3	; 0x03
    6184:	88 2f       	mov	r24, r24
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	81 70       	andi	r24, 0x01	; 1
    618a:	99 27       	eor	r25, r25
    618c:	89 2b       	or	r24, r25
    618e:	29 f0       	breq	.+10     	; 0x619a <rtc_get_time+0x70>
    6190:	89 81       	ldd	r24, Y+1	; 0x01
    6192:	9a 81       	ldd	r25, Y+2	; 0x02
    6194:	01 96       	adiw	r24, 0x01	; 1
    6196:	89 83       	std	Y+1, r24	; 0x01
    6198:	9a 83       	std	Y+2, r25	; 0x02
    619a:	8b 81       	ldd	r24, Y+3	; 0x03
    619c:	8e df       	rcall	.-228    	; 0x60ba <cpu_irq_restore>
    619e:	89 81       	ldd	r24, Y+1	; 0x01
    61a0:	9a 81       	ldd	r25, Y+2	; 0x02
    61a2:	cc 01       	movw	r24, r24
    61a4:	a0 e0       	ldi	r26, 0x00	; 0
    61a6:	b0 e0       	ldi	r27, 0x00	; 0
    61a8:	ac 01       	movw	r20, r24
    61aa:	33 27       	eor	r19, r19
    61ac:	22 27       	eor	r18, r18
    61ae:	8c 81       	ldd	r24, Y+4	; 0x04
    61b0:	9d 81       	ldd	r25, Y+5	; 0x05
    61b2:	cc 01       	movw	r24, r24
    61b4:	a0 e0       	ldi	r26, 0x00	; 0
    61b6:	b0 e0       	ldi	r27, 0x00	; 0
    61b8:	82 2b       	or	r24, r18
    61ba:	93 2b       	or	r25, r19
    61bc:	a4 2b       	or	r26, r20
    61be:	b5 2b       	or	r27, r21
    61c0:	bc 01       	movw	r22, r24
    61c2:	cd 01       	movw	r24, r26
    61c4:	25 96       	adiw	r28, 0x05	; 5
    61c6:	cd bf       	out	0x3d, r28	; 61
    61c8:	de bf       	out	0x3e, r29	; 62
    61ca:	df 91       	pop	r29
    61cc:	cf 91       	pop	r28
    61ce:	08 95       	ret

000061d0 <rtc_init>:
 *
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
    61d0:	cf 93       	push	r28
    61d2:	df 93       	push	r29
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    61d8:	64 e0       	ldi	r22, 0x04	; 4
    61da:	80 e0       	ldi	r24, 0x00	; 0
    61dc:	8c de       	rcall	.-744    	; 0x5ef6 <sysclk_enable_module>
	RTC.PER = 0xffff;
    61de:	80 e0       	ldi	r24, 0x00	; 0
    61e0:	94 e0       	ldi	r25, 0x04	; 4
    61e2:	2f ef       	ldi	r18, 0xFF	; 255
    61e4:	3f ef       	ldi	r19, 0xFF	; 255
    61e6:	fc 01       	movw	r30, r24
    61e8:	22 87       	std	Z+10, r18	; 0x0a
    61ea:	33 87       	std	Z+11, r19	; 0x0b
	RTC.CNT = 0;
    61ec:	80 e0       	ldi	r24, 0x00	; 0
    61ee:	94 e0       	ldi	r25, 0x04	; 4
    61f0:	fc 01       	movw	r30, r24
    61f2:	10 86       	std	Z+8, r1	; 0x08
    61f4:	11 86       	std	Z+9, r1	; 0x09
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
    61f6:	83 e0       	ldi	r24, 0x03	; 3
    61f8:	70 df       	rcall	.-288    	; 0x60da <sleepmgr_lock_mode>
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    61fa:	80 e0       	ldi	r24, 0x00	; 0
    61fc:	94 e0       	ldi	r25, 0x04	; 4
    61fe:	21 e0       	ldi	r18, 0x01	; 1
    6200:	fc 01       	movw	r30, r24
    6202:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    6204:	80 e0       	ldi	r24, 0x00	; 0
    6206:	94 e0       	ldi	r25, 0x04	; 4
    6208:	27 e0       	ldi	r18, 0x07	; 7
    620a:	fc 01       	movw	r30, r24
    620c:	20 83       	st	Z, r18
}
    620e:	00 00       	nop
    6210:	df 91       	pop	r29
    6212:	cf 91       	pop	r28
    6214:	08 95       	ret

00006216 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    6216:	1f 92       	push	r1
    6218:	0f 92       	push	r0
    621a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    621e:	0f 92       	push	r0
    6220:	11 24       	eor	r1, r1
    6222:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6226:	0f 92       	push	r0
    6228:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    622c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6230:	0f 92       	push	r0
    6232:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6236:	8f 93       	push	r24
    6238:	9f 93       	push	r25
    623a:	cf 93       	push	r28
    623c:	df 93       	push	r29
    623e:	cd b7       	in	r28, 0x3d	; 61
    6240:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    6242:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <rtc_data>
    6246:	90 91 e2 27 	lds	r25, 0x27E2	; 0x8027e2 <rtc_data+0x1>
    624a:	01 96       	adiw	r24, 0x01	; 1
    624c:	80 93 e1 27 	sts	0x27E1, r24	; 0x8027e1 <rtc_data>
    6250:	90 93 e2 27 	sts	0x27E2, r25	; 0x8027e2 <rtc_data+0x1>
}
    6254:	00 00       	nop
    6256:	df 91       	pop	r29
    6258:	cf 91       	pop	r28
    625a:	9f 91       	pop	r25
    625c:	8f 91       	pop	r24
    625e:	0f 90       	pop	r0
    6260:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6264:	0f 90       	pop	r0
    6266:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    626a:	0f 90       	pop	r0
    626c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6270:	0f 90       	pop	r0
    6272:	1f 90       	pop	r1
    6274:	18 95       	reti

00006276 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    6276:	1f 92       	push	r1
    6278:	0f 92       	push	r0
    627a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    627e:	0f 92       	push	r0
    6280:	11 24       	eor	r1, r1
    6282:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6286:	0f 92       	push	r0
    6288:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    628c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6290:	0f 92       	push	r0
    6292:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6296:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    629a:	0f 92       	push	r0
    629c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    62a0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62a4:	0f 92       	push	r0
    62a6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    62aa:	2f 93       	push	r18
    62ac:	3f 93       	push	r19
    62ae:	4f 93       	push	r20
    62b0:	5f 93       	push	r21
    62b2:	6f 93       	push	r22
    62b4:	7f 93       	push	r23
    62b6:	8f 93       	push	r24
    62b8:	9f 93       	push	r25
    62ba:	af 93       	push	r26
    62bc:	bf 93       	push	r27
    62be:	ef 93       	push	r30
    62c0:	ff 93       	push	r31
    62c2:	cf 93       	push	r28
    62c4:	df 93       	push	r29
    62c6:	cd b7       	in	r28, 0x3d	; 61
    62c8:	de b7       	in	r29, 0x3e	; 62
    62ca:	28 97       	sbiw	r28, 0x08	; 8
    62cc:	cd bf       	out	0x3d, r28	; 61
    62ce:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    62d0:	20 91 e1 27 	lds	r18, 0x27E1	; 0x8027e1 <rtc_data>
    62d4:	30 91 e2 27 	lds	r19, 0x27E2	; 0x8027e2 <rtc_data+0x1>
    62d8:	80 91 e3 27 	lds	r24, 0x27E3	; 0x8027e3 <rtc_data+0x2>
    62dc:	90 91 e4 27 	lds	r25, 0x27E4	; 0x8027e4 <rtc_data+0x3>
    62e0:	28 17       	cp	r18, r24
    62e2:	39 07       	cpc	r19, r25
    62e4:	08 f4       	brcc	.+2      	; 0x62e8 <__vector_11+0x72>
    62e6:	63 c0       	rjmp	.+198    	; 0x63ae <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    62e8:	80 e0       	ldi	r24, 0x00	; 0
    62ea:	94 e0       	ldi	r25, 0x04	; 4
    62ec:	21 e0       	ldi	r18, 0x01	; 1
    62ee:	fc 01       	movw	r30, r24
    62f0:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    62f2:	80 91 e7 27 	lds	r24, 0x27E7	; 0x8027e7 <rtc_data+0x6>
    62f6:	90 91 e8 27 	lds	r25, 0x27E8	; 0x8027e8 <rtc_data+0x7>
    62fa:	89 2b       	or	r24, r25
    62fc:	09 f4       	brne	.+2      	; 0x6300 <__vector_11+0x8a>
    62fe:	57 c0       	rjmp	.+174    	; 0x63ae <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    6300:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <rtc_data>
    6304:	90 91 e2 27 	lds	r25, 0x27E2	; 0x8027e2 <rtc_data+0x1>
    6308:	cc 01       	movw	r24, r24
    630a:	a0 e0       	ldi	r26, 0x00	; 0
    630c:	b0 e0       	ldi	r27, 0x00	; 0
    630e:	ac 01       	movw	r20, r24
    6310:	33 27       	eor	r19, r19
    6312:	22 27       	eor	r18, r18
					| RTC.CNT;
    6314:	80 e0       	ldi	r24, 0x00	; 0
    6316:	94 e0       	ldi	r25, 0x04	; 4
    6318:	fc 01       	movw	r30, r24
    631a:	80 85       	ldd	r24, Z+8	; 0x08
    631c:	91 85       	ldd	r25, Z+9	; 0x09
    631e:	cc 01       	movw	r24, r24
    6320:	a0 e0       	ldi	r26, 0x00	; 0
    6322:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    6324:	82 2b       	or	r24, r18
    6326:	93 2b       	or	r25, r19
    6328:	a4 2b       	or	r26, r20
    632a:	b5 2b       	or	r27, r21
    632c:	89 83       	std	Y+1, r24	; 0x01
    632e:	9a 83       	std	Y+2, r25	; 0x02
    6330:	ab 83       	std	Y+3, r26	; 0x03
    6332:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    6334:	80 91 e3 27 	lds	r24, 0x27E3	; 0x8027e3 <rtc_data+0x2>
    6338:	90 91 e4 27 	lds	r25, 0x27E4	; 0x8027e4 <rtc_data+0x3>
    633c:	cc 01       	movw	r24, r24
    633e:	a0 e0       	ldi	r26, 0x00	; 0
    6340:	b0 e0       	ldi	r27, 0x00	; 0
    6342:	ac 01       	movw	r20, r24
    6344:	33 27       	eor	r19, r19
    6346:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    6348:	80 91 e5 27 	lds	r24, 0x27E5	; 0x8027e5 <rtc_data+0x4>
    634c:	90 91 e6 27 	lds	r25, 0x27E6	; 0x8027e6 <rtc_data+0x5>
    6350:	cc 01       	movw	r24, r24
    6352:	a0 e0       	ldi	r26, 0x00	; 0
    6354:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    6356:	82 2b       	or	r24, r18
    6358:	93 2b       	or	r25, r19
    635a:	a4 2b       	or	r26, r20
    635c:	b5 2b       	or	r27, r21
    635e:	8d 83       	std	Y+5, r24	; 0x05
    6360:	9e 83       	std	Y+6, r25	; 0x06
    6362:	af 83       	std	Y+7, r26	; 0x07
    6364:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    6366:	2d 81       	ldd	r18, Y+5	; 0x05
    6368:	3e 81       	ldd	r19, Y+6	; 0x06
    636a:	4f 81       	ldd	r20, Y+7	; 0x07
    636c:	58 85       	ldd	r21, Y+8	; 0x08
    636e:	89 81       	ldd	r24, Y+1	; 0x01
    6370:	9a 81       	ldd	r25, Y+2	; 0x02
    6372:	ab 81       	ldd	r26, Y+3	; 0x03
    6374:	bc 81       	ldd	r27, Y+4	; 0x04
    6376:	28 17       	cp	r18, r24
    6378:	39 07       	cpc	r19, r25
    637a:	4a 07       	cpc	r20, r26
    637c:	5b 07       	cpc	r21, r27
    637e:	58 f0       	brcs	.+22     	; 0x6396 <__vector_11+0x120>
				count = alarm + 1;
    6380:	8d 81       	ldd	r24, Y+5	; 0x05
    6382:	9e 81       	ldd	r25, Y+6	; 0x06
    6384:	af 81       	ldd	r26, Y+7	; 0x07
    6386:	b8 85       	ldd	r27, Y+8	; 0x08
    6388:	01 96       	adiw	r24, 0x01	; 1
    638a:	a1 1d       	adc	r26, r1
    638c:	b1 1d       	adc	r27, r1
    638e:	89 83       	std	Y+1, r24	; 0x01
    6390:	9a 83       	std	Y+2, r25	; 0x02
    6392:	ab 83       	std	Y+3, r26	; 0x03
    6394:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    6396:	20 91 e7 27 	lds	r18, 0x27E7	; 0x8027e7 <rtc_data+0x6>
    639a:	30 91 e8 27 	lds	r19, 0x27E8	; 0x8027e8 <rtc_data+0x7>
    639e:	89 81       	ldd	r24, Y+1	; 0x01
    63a0:	9a 81       	ldd	r25, Y+2	; 0x02
    63a2:	ab 81       	ldd	r26, Y+3	; 0x03
    63a4:	bc 81       	ldd	r27, Y+4	; 0x04
    63a6:	bc 01       	movw	r22, r24
    63a8:	cd 01       	movw	r24, r26
    63aa:	f9 01       	movw	r30, r18
    63ac:	19 95       	eicall
		}
	}
}
    63ae:	00 00       	nop
    63b0:	28 96       	adiw	r28, 0x08	; 8
    63b2:	cd bf       	out	0x3d, r28	; 61
    63b4:	de bf       	out	0x3e, r29	; 62
    63b6:	df 91       	pop	r29
    63b8:	cf 91       	pop	r28
    63ba:	ff 91       	pop	r31
    63bc:	ef 91       	pop	r30
    63be:	bf 91       	pop	r27
    63c0:	af 91       	pop	r26
    63c2:	9f 91       	pop	r25
    63c4:	8f 91       	pop	r24
    63c6:	7f 91       	pop	r23
    63c8:	6f 91       	pop	r22
    63ca:	5f 91       	pop	r21
    63cc:	4f 91       	pop	r20
    63ce:	3f 91       	pop	r19
    63d0:	2f 91       	pop	r18
    63d2:	0f 90       	pop	r0
    63d4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    63d8:	0f 90       	pop	r0
    63da:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    63de:	0f 90       	pop	r0
    63e0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    63e4:	0f 90       	pop	r0
    63e6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    63ea:	0f 90       	pop	r0
    63ec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    63f0:	0f 90       	pop	r0
    63f2:	1f 90       	pop	r1
    63f4:	18 95       	reti

000063f6 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    63f6:	0f 93       	push	r16
    63f8:	1f 93       	push	r17
    63fa:	cf 93       	push	r28
    63fc:	df 93       	push	r29
    63fe:	cd b7       	in	r28, 0x3d	; 61
    6400:	de b7       	in	r29, 0x3e	; 62
    6402:	60 97       	sbiw	r28, 0x10	; 16
    6404:	cd bf       	out	0x3d, r28	; 61
    6406:	de bf       	out	0x3e, r29	; 62
    6408:	8f 83       	std	Y+7, r24	; 0x07
    640a:	98 87       	std	Y+8, r25	; 0x08
    640c:	49 87       	std	Y+9, r20	; 0x09
    640e:	5a 87       	std	Y+10, r21	; 0x0a
    6410:	6b 87       	std	Y+11, r22	; 0x0b
    6412:	7c 87       	std	Y+12, r23	; 0x0c
    6414:	0d 87       	std	Y+13, r16	; 0x0d
    6416:	1e 87       	std	Y+14, r17	; 0x0e
    6418:	2f 87       	std	Y+15, r18	; 0x0f
    641a:	38 8b       	std	Y+16, r19	; 0x10

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    641c:	2d 85       	ldd	r18, Y+13	; 0x0d
    641e:	3e 85       	ldd	r19, Y+14	; 0x0e
    6420:	4f 85       	ldd	r20, Y+15	; 0x0f
    6422:	58 89       	ldd	r21, Y+16	; 0x10
    6424:	89 85       	ldd	r24, Y+9	; 0x09
    6426:	9a 85       	ldd	r25, Y+10	; 0x0a
    6428:	ab 85       	ldd	r26, Y+11	; 0x0b
    642a:	bc 85       	ldd	r27, Y+12	; 0x0c
    642c:	82 0f       	add	r24, r18
    642e:	93 1f       	adc	r25, r19
    6430:	a4 1f       	adc	r26, r20
    6432:	b5 1f       	adc	r27, r21
    6434:	01 97       	sbiw	r24, 0x01	; 1
    6436:	a1 09       	sbc	r26, r1
    6438:	b1 09       	sbc	r27, r1
    643a:	29 85       	ldd	r18, Y+9	; 0x09
    643c:	3a 85       	ldd	r19, Y+10	; 0x0a
    643e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6440:	5c 85       	ldd	r21, Y+12	; 0x0c
    6442:	bc 01       	movw	r22, r24
    6444:	cd 01       	movw	r24, r26
    6446:	0e 94 0d 59 	call	0xb21a	; 0xb21a <__udivmodsi4>
    644a:	da 01       	movw	r26, r20
    644c:	c9 01       	movw	r24, r18
    644e:	8a 83       	std	Y+2, r24	; 0x02
    6450:	9b 83       	std	Y+3, r25	; 0x03
    6452:	ac 83       	std	Y+4, r26	; 0x04
    6454:	bd 83       	std	Y+5, r27	; 0x05

	if (divisor > 128) {
    6456:	8a 81       	ldd	r24, Y+2	; 0x02
    6458:	9b 81       	ldd	r25, Y+3	; 0x03
    645a:	ac 81       	ldd	r26, Y+4	; 0x04
    645c:	bd 81       	ldd	r27, Y+5	; 0x05
    645e:	81 38       	cpi	r24, 0x81	; 129
    6460:	91 05       	cpc	r25, r1
    6462:	a1 05       	cpc	r26, r1
    6464:	b1 05       	cpc	r27, r1
    6466:	10 f0       	brcs	.+4      	; 0x646c <spi_xmega_set_baud_div+0x76>
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    6468:	8f ef       	ldi	r24, 0xFF	; 255
    646a:	35 c0       	rjmp	.+106    	; 0x64d6 <spi_xmega_set_baud_div+0xe0>

	/*
	 * We now know that the divisor is 128 or lower so move it into a 8-bit
	 * variable to make sure the following comparison is more optimized.
	 */
	divisor_8bit = divisor;
    646c:	8a 81       	ldd	r24, Y+2	; 0x02
    646e:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    6470:	8e 81       	ldd	r24, Y+6	; 0x06
    6472:	81 34       	cpi	r24, 0x41	; 65
    6474:	18 f0       	brcs	.+6      	; 0x647c <spi_xmega_set_baud_div+0x86>
		ctrl = SPI_PRESCALER_DIV128_gc;
    6476:	83 e0       	ldi	r24, 0x03	; 3
    6478:	89 83       	std	Y+1, r24	; 0x01
    647a:	1f c0       	rjmp	.+62     	; 0x64ba <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 32) {
    647c:	8e 81       	ldd	r24, Y+6	; 0x06
    647e:	81 32       	cpi	r24, 0x21	; 33
    6480:	18 f0       	brcs	.+6      	; 0x6488 <spi_xmega_set_baud_div+0x92>
		ctrl = SPI_PRESCALER_DIV64_gc;
    6482:	82 e0       	ldi	r24, 0x02	; 2
    6484:	89 83       	std	Y+1, r24	; 0x01
    6486:	19 c0       	rjmp	.+50     	; 0x64ba <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 16) {
    6488:	8e 81       	ldd	r24, Y+6	; 0x06
    648a:	81 31       	cpi	r24, 0x11	; 17
    648c:	18 f0       	brcs	.+6      	; 0x6494 <spi_xmega_set_baud_div+0x9e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    648e:	82 e8       	ldi	r24, 0x82	; 130
    6490:	89 83       	std	Y+1, r24	; 0x01
    6492:	13 c0       	rjmp	.+38     	; 0x64ba <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 8) {
    6494:	8e 81       	ldd	r24, Y+6	; 0x06
    6496:	89 30       	cpi	r24, 0x09	; 9
    6498:	18 f0       	brcs	.+6      	; 0x64a0 <spi_xmega_set_baud_div+0xaa>
		ctrl = SPI_PRESCALER_DIV16_gc;
    649a:	81 e0       	ldi	r24, 0x01	; 1
    649c:	89 83       	std	Y+1, r24	; 0x01
    649e:	0d c0       	rjmp	.+26     	; 0x64ba <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 4) {
    64a0:	8e 81       	ldd	r24, Y+6	; 0x06
    64a2:	85 30       	cpi	r24, 0x05	; 5
    64a4:	18 f0       	brcs	.+6      	; 0x64ac <spi_xmega_set_baud_div+0xb6>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    64a6:	81 e8       	ldi	r24, 0x81	; 129
    64a8:	89 83       	std	Y+1, r24	; 0x01
    64aa:	07 c0       	rjmp	.+14     	; 0x64ba <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 2) {
    64ac:	8e 81       	ldd	r24, Y+6	; 0x06
    64ae:	83 30       	cpi	r24, 0x03	; 3
    64b0:	10 f0       	brcs	.+4      	; 0x64b6 <spi_xmega_set_baud_div+0xc0>
		ctrl = SPI_PRESCALER_DIV4_gc;
    64b2:	19 82       	std	Y+1, r1	; 0x01
    64b4:	02 c0       	rjmp	.+4      	; 0x64ba <spi_xmega_set_baud_div+0xc4>
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    64b6:	80 e8       	ldi	r24, 0x80	; 128
    64b8:	89 83       	std	Y+1, r24	; 0x01
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    64ba:	8f 81       	ldd	r24, Y+7	; 0x07
    64bc:	98 85       	ldd	r25, Y+8	; 0x08
    64be:	fc 01       	movw	r30, r24
    64c0:	80 81       	ld	r24, Z
    64c2:	98 2f       	mov	r25, r24
    64c4:	9c 77       	andi	r25, 0x7C	; 124
    64c6:	89 81       	ldd	r24, Y+1	; 0x01
    64c8:	89 2b       	or	r24, r25
    64ca:	28 2f       	mov	r18, r24
    64cc:	8f 81       	ldd	r24, Y+7	; 0x07
    64ce:	98 85       	ldd	r25, Y+8	; 0x08
    64d0:	fc 01       	movw	r30, r24
    64d2:	20 83       	st	Z, r18

	return 1;
    64d4:	81 e0       	ldi	r24, 0x01	; 1
}
    64d6:	60 96       	adiw	r28, 0x10	; 16
    64d8:	cd bf       	out	0x3d, r28	; 61
    64da:	de bf       	out	0x3e, r29	; 62
    64dc:	df 91       	pop	r29
    64de:	cf 91       	pop	r28
    64e0:	1f 91       	pop	r17
    64e2:	0f 91       	pop	r16
    64e4:	08 95       	ret

000064e6 <cpu_irq_save>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    64e6:	cf 93       	push	r28
    64e8:	df 93       	push	r29
    64ea:	1f 92       	push	r1
    64ec:	cd b7       	in	r28, 0x3d	; 61
    64ee:	de b7       	in	r29, 0x3e	; 62
    64f0:	8f e3       	ldi	r24, 0x3F	; 63
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	fc 01       	movw	r30, r24
    64f6:	80 81       	ld	r24, Z
    64f8:	89 83       	std	Y+1, r24	; 0x01
    64fa:	f8 94       	cli
    64fc:	89 81       	ldd	r24, Y+1	; 0x01
    64fe:	0f 90       	pop	r0
    6500:	df 91       	pop	r29
    6502:	cf 91       	pop	r28
    6504:	08 95       	ret

00006506 <cpu_irq_restore>:
    6506:	cf 93       	push	r28
    6508:	df 93       	push	r29
    650a:	1f 92       	push	r1
    650c:	cd b7       	in	r28, 0x3d	; 61
    650e:	de b7       	in	r29, 0x3e	; 62
    6510:	89 83       	std	Y+1, r24	; 0x01
    6512:	8f e3       	ldi	r24, 0x3F	; 63
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	29 81       	ldd	r18, Y+1	; 0x01
    6518:	fc 01       	movw	r30, r24
    651a:	20 83       	st	Z, r18
    651c:	00 00       	nop
    651e:	0f 90       	pop	r0
    6520:	df 91       	pop	r29
    6522:	cf 91       	pop	r28
    6524:	08 95       	ret

00006526 <sleepmgr_lock_mode>:
    6526:	cf 93       	push	r28
    6528:	df 93       	push	r29
    652a:	1f 92       	push	r1
    652c:	1f 92       	push	r1
    652e:	cd b7       	in	r28, 0x3d	; 61
    6530:	de b7       	in	r29, 0x3e	; 62
    6532:	8a 83       	std	Y+2, r24	; 0x02
    6534:	8a 81       	ldd	r24, Y+2	; 0x02
    6536:	88 2f       	mov	r24, r24
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	8b 52       	subi	r24, 0x2B	; 43
    653c:	98 4d       	sbci	r25, 0xD8	; 216
    653e:	fc 01       	movw	r30, r24
    6540:	80 81       	ld	r24, Z
    6542:	8f 3f       	cpi	r24, 0xFF	; 255
    6544:	09 f4       	brne	.+2      	; 0x6548 <sleepmgr_lock_mode+0x22>
    6546:	ff cf       	rjmp	.-2      	; 0x6546 <sleepmgr_lock_mode+0x20>
    6548:	ce df       	rcall	.-100    	; 0x64e6 <cpu_irq_save>
    654a:	89 83       	std	Y+1, r24	; 0x01
    654c:	8a 81       	ldd	r24, Y+2	; 0x02
    654e:	88 2f       	mov	r24, r24
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	9c 01       	movw	r18, r24
    6554:	2b 52       	subi	r18, 0x2B	; 43
    6556:	38 4d       	sbci	r19, 0xD8	; 216
    6558:	f9 01       	movw	r30, r18
    655a:	20 81       	ld	r18, Z
    655c:	2f 5f       	subi	r18, 0xFF	; 255
    655e:	8b 52       	subi	r24, 0x2B	; 43
    6560:	98 4d       	sbci	r25, 0xD8	; 216
    6562:	fc 01       	movw	r30, r24
    6564:	20 83       	st	Z, r18
    6566:	89 81       	ldd	r24, Y+1	; 0x01
    6568:	ce df       	rcall	.-100    	; 0x6506 <cpu_irq_restore>
    656a:	00 00       	nop
    656c:	0f 90       	pop	r0
    656e:	0f 90       	pop	r0
    6570:	df 91       	pop	r29
    6572:	cf 91       	pop	r28
    6574:	08 95       	ret

00006576 <__vector_14>:
    6576:	1f 92       	push	r1
    6578:	0f 92       	push	r0
    657a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    657e:	0f 92       	push	r0
    6580:	11 24       	eor	r1, r1
    6582:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6586:	0f 92       	push	r0
    6588:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    658c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6590:	0f 92       	push	r0
    6592:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6596:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    659a:	0f 92       	push	r0
    659c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    65a0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    65a4:	0f 92       	push	r0
    65a6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    65aa:	2f 93       	push	r18
    65ac:	3f 93       	push	r19
    65ae:	4f 93       	push	r20
    65b0:	5f 93       	push	r21
    65b2:	6f 93       	push	r22
    65b4:	7f 93       	push	r23
    65b6:	8f 93       	push	r24
    65b8:	9f 93       	push	r25
    65ba:	af 93       	push	r26
    65bc:	bf 93       	push	r27
    65be:	ef 93       	push	r30
    65c0:	ff 93       	push	r31
    65c2:	cf 93       	push	r28
    65c4:	df 93       	push	r29
    65c6:	cd b7       	in	r28, 0x3d	; 61
    65c8:	de b7       	in	r29, 0x3e	; 62
    65ca:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <tc_tcc0_ovf_callback>
    65ce:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <tc_tcc0_ovf_callback+0x1>
    65d2:	89 2b       	or	r24, r25
    65d4:	31 f0       	breq	.+12     	; 0x65e2 <__vector_14+0x6c>
    65d6:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <tc_tcc0_ovf_callback>
    65da:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <tc_tcc0_ovf_callback+0x1>
    65de:	fc 01       	movw	r30, r24
    65e0:	19 95       	eicall
    65e2:	00 00       	nop
    65e4:	df 91       	pop	r29
    65e6:	cf 91       	pop	r28
    65e8:	ff 91       	pop	r31
    65ea:	ef 91       	pop	r30
    65ec:	bf 91       	pop	r27
    65ee:	af 91       	pop	r26
    65f0:	9f 91       	pop	r25
    65f2:	8f 91       	pop	r24
    65f4:	7f 91       	pop	r23
    65f6:	6f 91       	pop	r22
    65f8:	5f 91       	pop	r21
    65fa:	4f 91       	pop	r20
    65fc:	3f 91       	pop	r19
    65fe:	2f 91       	pop	r18
    6600:	0f 90       	pop	r0
    6602:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6606:	0f 90       	pop	r0
    6608:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    660c:	0f 90       	pop	r0
    660e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6612:	0f 90       	pop	r0
    6614:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6618:	0f 90       	pop	r0
    661a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    661e:	0f 90       	pop	r0
    6620:	1f 90       	pop	r1
    6622:	18 95       	reti

00006624 <__vector_15>:
    6624:	1f 92       	push	r1
    6626:	0f 92       	push	r0
    6628:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    662c:	0f 92       	push	r0
    662e:	11 24       	eor	r1, r1
    6630:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6634:	0f 92       	push	r0
    6636:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    663a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    663e:	0f 92       	push	r0
    6640:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6644:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6648:	0f 92       	push	r0
    664a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    664e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6652:	0f 92       	push	r0
    6654:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6658:	2f 93       	push	r18
    665a:	3f 93       	push	r19
    665c:	4f 93       	push	r20
    665e:	5f 93       	push	r21
    6660:	6f 93       	push	r22
    6662:	7f 93       	push	r23
    6664:	8f 93       	push	r24
    6666:	9f 93       	push	r25
    6668:	af 93       	push	r26
    666a:	bf 93       	push	r27
    666c:	ef 93       	push	r30
    666e:	ff 93       	push	r31
    6670:	cf 93       	push	r28
    6672:	df 93       	push	r29
    6674:	cd b7       	in	r28, 0x3d	; 61
    6676:	de b7       	in	r29, 0x3e	; 62
    6678:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <tc_tcc0_err_callback>
    667c:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <tc_tcc0_err_callback+0x1>
    6680:	89 2b       	or	r24, r25
    6682:	31 f0       	breq	.+12     	; 0x6690 <__vector_15+0x6c>
    6684:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <tc_tcc0_err_callback>
    6688:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <tc_tcc0_err_callback+0x1>
    668c:	fc 01       	movw	r30, r24
    668e:	19 95       	eicall
    6690:	00 00       	nop
    6692:	df 91       	pop	r29
    6694:	cf 91       	pop	r28
    6696:	ff 91       	pop	r31
    6698:	ef 91       	pop	r30
    669a:	bf 91       	pop	r27
    669c:	af 91       	pop	r26
    669e:	9f 91       	pop	r25
    66a0:	8f 91       	pop	r24
    66a2:	7f 91       	pop	r23
    66a4:	6f 91       	pop	r22
    66a6:	5f 91       	pop	r21
    66a8:	4f 91       	pop	r20
    66aa:	3f 91       	pop	r19
    66ac:	2f 91       	pop	r18
    66ae:	0f 90       	pop	r0
    66b0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    66b4:	0f 90       	pop	r0
    66b6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66ba:	0f 90       	pop	r0
    66bc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66c0:	0f 90       	pop	r0
    66c2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66c6:	0f 90       	pop	r0
    66c8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    66cc:	0f 90       	pop	r0
    66ce:	1f 90       	pop	r1
    66d0:	18 95       	reti

000066d2 <__vector_16>:
    66d2:	1f 92       	push	r1
    66d4:	0f 92       	push	r0
    66d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    66da:	0f 92       	push	r0
    66dc:	11 24       	eor	r1, r1
    66de:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66e2:	0f 92       	push	r0
    66e4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    66e8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66ec:	0f 92       	push	r0
    66ee:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    66f2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66f6:	0f 92       	push	r0
    66f8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    66fc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6700:	0f 92       	push	r0
    6702:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6706:	2f 93       	push	r18
    6708:	3f 93       	push	r19
    670a:	4f 93       	push	r20
    670c:	5f 93       	push	r21
    670e:	6f 93       	push	r22
    6710:	7f 93       	push	r23
    6712:	8f 93       	push	r24
    6714:	9f 93       	push	r25
    6716:	af 93       	push	r26
    6718:	bf 93       	push	r27
    671a:	ef 93       	push	r30
    671c:	ff 93       	push	r31
    671e:	cf 93       	push	r28
    6720:	df 93       	push	r29
    6722:	cd b7       	in	r28, 0x3d	; 61
    6724:	de b7       	in	r29, 0x3e	; 62
    6726:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <tc_tcc0_cca_callback>
    672a:	90 91 ab 21 	lds	r25, 0x21AB	; 0x8021ab <tc_tcc0_cca_callback+0x1>
    672e:	89 2b       	or	r24, r25
    6730:	31 f0       	breq	.+12     	; 0x673e <__vector_16+0x6c>
    6732:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <tc_tcc0_cca_callback>
    6736:	90 91 ab 21 	lds	r25, 0x21AB	; 0x8021ab <tc_tcc0_cca_callback+0x1>
    673a:	fc 01       	movw	r30, r24
    673c:	19 95       	eicall
    673e:	00 00       	nop
    6740:	df 91       	pop	r29
    6742:	cf 91       	pop	r28
    6744:	ff 91       	pop	r31
    6746:	ef 91       	pop	r30
    6748:	bf 91       	pop	r27
    674a:	af 91       	pop	r26
    674c:	9f 91       	pop	r25
    674e:	8f 91       	pop	r24
    6750:	7f 91       	pop	r23
    6752:	6f 91       	pop	r22
    6754:	5f 91       	pop	r21
    6756:	4f 91       	pop	r20
    6758:	3f 91       	pop	r19
    675a:	2f 91       	pop	r18
    675c:	0f 90       	pop	r0
    675e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6762:	0f 90       	pop	r0
    6764:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6768:	0f 90       	pop	r0
    676a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    676e:	0f 90       	pop	r0
    6770:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6774:	0f 90       	pop	r0
    6776:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    677a:	0f 90       	pop	r0
    677c:	1f 90       	pop	r1
    677e:	18 95       	reti

00006780 <__vector_17>:
    6780:	1f 92       	push	r1
    6782:	0f 92       	push	r0
    6784:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6788:	0f 92       	push	r0
    678a:	11 24       	eor	r1, r1
    678c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6790:	0f 92       	push	r0
    6792:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6796:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    679a:	0f 92       	push	r0
    679c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    67a0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    67a4:	0f 92       	push	r0
    67a6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    67aa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    67ae:	0f 92       	push	r0
    67b0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    67b4:	2f 93       	push	r18
    67b6:	3f 93       	push	r19
    67b8:	4f 93       	push	r20
    67ba:	5f 93       	push	r21
    67bc:	6f 93       	push	r22
    67be:	7f 93       	push	r23
    67c0:	8f 93       	push	r24
    67c2:	9f 93       	push	r25
    67c4:	af 93       	push	r26
    67c6:	bf 93       	push	r27
    67c8:	ef 93       	push	r30
    67ca:	ff 93       	push	r31
    67cc:	cf 93       	push	r28
    67ce:	df 93       	push	r29
    67d0:	cd b7       	in	r28, 0x3d	; 61
    67d2:	de b7       	in	r29, 0x3e	; 62
    67d4:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <tc_tcc0_ccb_callback>
    67d8:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <tc_tcc0_ccb_callback+0x1>
    67dc:	89 2b       	or	r24, r25
    67de:	31 f0       	breq	.+12     	; 0x67ec <__vector_17+0x6c>
    67e0:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <tc_tcc0_ccb_callback>
    67e4:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <tc_tcc0_ccb_callback+0x1>
    67e8:	fc 01       	movw	r30, r24
    67ea:	19 95       	eicall
    67ec:	00 00       	nop
    67ee:	df 91       	pop	r29
    67f0:	cf 91       	pop	r28
    67f2:	ff 91       	pop	r31
    67f4:	ef 91       	pop	r30
    67f6:	bf 91       	pop	r27
    67f8:	af 91       	pop	r26
    67fa:	9f 91       	pop	r25
    67fc:	8f 91       	pop	r24
    67fe:	7f 91       	pop	r23
    6800:	6f 91       	pop	r22
    6802:	5f 91       	pop	r21
    6804:	4f 91       	pop	r20
    6806:	3f 91       	pop	r19
    6808:	2f 91       	pop	r18
    680a:	0f 90       	pop	r0
    680c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6810:	0f 90       	pop	r0
    6812:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6816:	0f 90       	pop	r0
    6818:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    681c:	0f 90       	pop	r0
    681e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6822:	0f 90       	pop	r0
    6824:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6828:	0f 90       	pop	r0
    682a:	1f 90       	pop	r1
    682c:	18 95       	reti

0000682e <__vector_18>:
    682e:	1f 92       	push	r1
    6830:	0f 92       	push	r0
    6832:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6836:	0f 92       	push	r0
    6838:	11 24       	eor	r1, r1
    683a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    683e:	0f 92       	push	r0
    6840:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6844:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6848:	0f 92       	push	r0
    684a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    684e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6852:	0f 92       	push	r0
    6854:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6858:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    685c:	0f 92       	push	r0
    685e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6862:	2f 93       	push	r18
    6864:	3f 93       	push	r19
    6866:	4f 93       	push	r20
    6868:	5f 93       	push	r21
    686a:	6f 93       	push	r22
    686c:	7f 93       	push	r23
    686e:	8f 93       	push	r24
    6870:	9f 93       	push	r25
    6872:	af 93       	push	r26
    6874:	bf 93       	push	r27
    6876:	ef 93       	push	r30
    6878:	ff 93       	push	r31
    687a:	cf 93       	push	r28
    687c:	df 93       	push	r29
    687e:	cd b7       	in	r28, 0x3d	; 61
    6880:	de b7       	in	r29, 0x3e	; 62
    6882:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <tc_tcc0_ccc_callback>
    6886:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <tc_tcc0_ccc_callback+0x1>
    688a:	89 2b       	or	r24, r25
    688c:	31 f0       	breq	.+12     	; 0x689a <__vector_18+0x6c>
    688e:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <tc_tcc0_ccc_callback>
    6892:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <tc_tcc0_ccc_callback+0x1>
    6896:	fc 01       	movw	r30, r24
    6898:	19 95       	eicall
    689a:	00 00       	nop
    689c:	df 91       	pop	r29
    689e:	cf 91       	pop	r28
    68a0:	ff 91       	pop	r31
    68a2:	ef 91       	pop	r30
    68a4:	bf 91       	pop	r27
    68a6:	af 91       	pop	r26
    68a8:	9f 91       	pop	r25
    68aa:	8f 91       	pop	r24
    68ac:	7f 91       	pop	r23
    68ae:	6f 91       	pop	r22
    68b0:	5f 91       	pop	r21
    68b2:	4f 91       	pop	r20
    68b4:	3f 91       	pop	r19
    68b6:	2f 91       	pop	r18
    68b8:	0f 90       	pop	r0
    68ba:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    68be:	0f 90       	pop	r0
    68c0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    68c4:	0f 90       	pop	r0
    68c6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68ca:	0f 90       	pop	r0
    68cc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68d0:	0f 90       	pop	r0
    68d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    68d6:	0f 90       	pop	r0
    68d8:	1f 90       	pop	r1
    68da:	18 95       	reti

000068dc <__vector_19>:
    68dc:	1f 92       	push	r1
    68de:	0f 92       	push	r0
    68e0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    68e4:	0f 92       	push	r0
    68e6:	11 24       	eor	r1, r1
    68e8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68ec:	0f 92       	push	r0
    68ee:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    68f2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68f6:	0f 92       	push	r0
    68f8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    68fc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6900:	0f 92       	push	r0
    6902:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6906:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    690a:	0f 92       	push	r0
    690c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6910:	2f 93       	push	r18
    6912:	3f 93       	push	r19
    6914:	4f 93       	push	r20
    6916:	5f 93       	push	r21
    6918:	6f 93       	push	r22
    691a:	7f 93       	push	r23
    691c:	8f 93       	push	r24
    691e:	9f 93       	push	r25
    6920:	af 93       	push	r26
    6922:	bf 93       	push	r27
    6924:	ef 93       	push	r30
    6926:	ff 93       	push	r31
    6928:	cf 93       	push	r28
    692a:	df 93       	push	r29
    692c:	cd b7       	in	r28, 0x3d	; 61
    692e:	de b7       	in	r29, 0x3e	; 62
    6930:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <tc_tcc0_ccd_callback>
    6934:	90 91 b1 21 	lds	r25, 0x21B1	; 0x8021b1 <tc_tcc0_ccd_callback+0x1>
    6938:	89 2b       	or	r24, r25
    693a:	31 f0       	breq	.+12     	; 0x6948 <__vector_19+0x6c>
    693c:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <tc_tcc0_ccd_callback>
    6940:	90 91 b1 21 	lds	r25, 0x21B1	; 0x8021b1 <tc_tcc0_ccd_callback+0x1>
    6944:	fc 01       	movw	r30, r24
    6946:	19 95       	eicall
    6948:	00 00       	nop
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	ff 91       	pop	r31
    6950:	ef 91       	pop	r30
    6952:	bf 91       	pop	r27
    6954:	af 91       	pop	r26
    6956:	9f 91       	pop	r25
    6958:	8f 91       	pop	r24
    695a:	7f 91       	pop	r23
    695c:	6f 91       	pop	r22
    695e:	5f 91       	pop	r21
    6960:	4f 91       	pop	r20
    6962:	3f 91       	pop	r19
    6964:	2f 91       	pop	r18
    6966:	0f 90       	pop	r0
    6968:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    696c:	0f 90       	pop	r0
    696e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6972:	0f 90       	pop	r0
    6974:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6978:	0f 90       	pop	r0
    697a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    697e:	0f 90       	pop	r0
    6980:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6984:	0f 90       	pop	r0
    6986:	1f 90       	pop	r1
    6988:	18 95       	reti

0000698a <__vector_20>:
    698a:	1f 92       	push	r1
    698c:	0f 92       	push	r0
    698e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6992:	0f 92       	push	r0
    6994:	11 24       	eor	r1, r1
    6996:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    699a:	0f 92       	push	r0
    699c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    69a0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    69a4:	0f 92       	push	r0
    69a6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    69aa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    69ae:	0f 92       	push	r0
    69b0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    69b4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    69b8:	0f 92       	push	r0
    69ba:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    69be:	2f 93       	push	r18
    69c0:	3f 93       	push	r19
    69c2:	4f 93       	push	r20
    69c4:	5f 93       	push	r21
    69c6:	6f 93       	push	r22
    69c8:	7f 93       	push	r23
    69ca:	8f 93       	push	r24
    69cc:	9f 93       	push	r25
    69ce:	af 93       	push	r26
    69d0:	bf 93       	push	r27
    69d2:	ef 93       	push	r30
    69d4:	ff 93       	push	r31
    69d6:	cf 93       	push	r28
    69d8:	df 93       	push	r29
    69da:	cd b7       	in	r28, 0x3d	; 61
    69dc:	de b7       	in	r29, 0x3e	; 62
    69de:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <tc_tcc1_ovf_callback>
    69e2:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <tc_tcc1_ovf_callback+0x1>
    69e6:	89 2b       	or	r24, r25
    69e8:	31 f0       	breq	.+12     	; 0x69f6 <__vector_20+0x6c>
    69ea:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <tc_tcc1_ovf_callback>
    69ee:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <tc_tcc1_ovf_callback+0x1>
    69f2:	fc 01       	movw	r30, r24
    69f4:	19 95       	eicall
    69f6:	00 00       	nop
    69f8:	df 91       	pop	r29
    69fa:	cf 91       	pop	r28
    69fc:	ff 91       	pop	r31
    69fe:	ef 91       	pop	r30
    6a00:	bf 91       	pop	r27
    6a02:	af 91       	pop	r26
    6a04:	9f 91       	pop	r25
    6a06:	8f 91       	pop	r24
    6a08:	7f 91       	pop	r23
    6a0a:	6f 91       	pop	r22
    6a0c:	5f 91       	pop	r21
    6a0e:	4f 91       	pop	r20
    6a10:	3f 91       	pop	r19
    6a12:	2f 91       	pop	r18
    6a14:	0f 90       	pop	r0
    6a16:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a1a:	0f 90       	pop	r0
    6a1c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a20:	0f 90       	pop	r0
    6a22:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a26:	0f 90       	pop	r0
    6a28:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a2c:	0f 90       	pop	r0
    6a2e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6a32:	0f 90       	pop	r0
    6a34:	1f 90       	pop	r1
    6a36:	18 95       	reti

00006a38 <__vector_21>:
    6a38:	1f 92       	push	r1
    6a3a:	0f 92       	push	r0
    6a3c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6a40:	0f 92       	push	r0
    6a42:	11 24       	eor	r1, r1
    6a44:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a48:	0f 92       	push	r0
    6a4a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6a4e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a52:	0f 92       	push	r0
    6a54:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6a58:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a5c:	0f 92       	push	r0
    6a5e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6a62:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a66:	0f 92       	push	r0
    6a68:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6a6c:	2f 93       	push	r18
    6a6e:	3f 93       	push	r19
    6a70:	4f 93       	push	r20
    6a72:	5f 93       	push	r21
    6a74:	6f 93       	push	r22
    6a76:	7f 93       	push	r23
    6a78:	8f 93       	push	r24
    6a7a:	9f 93       	push	r25
    6a7c:	af 93       	push	r26
    6a7e:	bf 93       	push	r27
    6a80:	ef 93       	push	r30
    6a82:	ff 93       	push	r31
    6a84:	cf 93       	push	r28
    6a86:	df 93       	push	r29
    6a88:	cd b7       	in	r28, 0x3d	; 61
    6a8a:	de b7       	in	r29, 0x3e	; 62
    6a8c:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <tc_tcc1_err_callback>
    6a90:	90 91 b5 21 	lds	r25, 0x21B5	; 0x8021b5 <tc_tcc1_err_callback+0x1>
    6a94:	89 2b       	or	r24, r25
    6a96:	31 f0       	breq	.+12     	; 0x6aa4 <__vector_21+0x6c>
    6a98:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <tc_tcc1_err_callback>
    6a9c:	90 91 b5 21 	lds	r25, 0x21B5	; 0x8021b5 <tc_tcc1_err_callback+0x1>
    6aa0:	fc 01       	movw	r30, r24
    6aa2:	19 95       	eicall
    6aa4:	00 00       	nop
    6aa6:	df 91       	pop	r29
    6aa8:	cf 91       	pop	r28
    6aaa:	ff 91       	pop	r31
    6aac:	ef 91       	pop	r30
    6aae:	bf 91       	pop	r27
    6ab0:	af 91       	pop	r26
    6ab2:	9f 91       	pop	r25
    6ab4:	8f 91       	pop	r24
    6ab6:	7f 91       	pop	r23
    6ab8:	6f 91       	pop	r22
    6aba:	5f 91       	pop	r21
    6abc:	4f 91       	pop	r20
    6abe:	3f 91       	pop	r19
    6ac0:	2f 91       	pop	r18
    6ac2:	0f 90       	pop	r0
    6ac4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6ac8:	0f 90       	pop	r0
    6aca:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ace:	0f 90       	pop	r0
    6ad0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ad4:	0f 90       	pop	r0
    6ad6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ada:	0f 90       	pop	r0
    6adc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6ae0:	0f 90       	pop	r0
    6ae2:	1f 90       	pop	r1
    6ae4:	18 95       	reti

00006ae6 <__vector_22>:
    6ae6:	1f 92       	push	r1
    6ae8:	0f 92       	push	r0
    6aea:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6aee:	0f 92       	push	r0
    6af0:	11 24       	eor	r1, r1
    6af2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6af6:	0f 92       	push	r0
    6af8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6afc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b00:	0f 92       	push	r0
    6b02:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b06:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b0a:	0f 92       	push	r0
    6b0c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b10:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b14:	0f 92       	push	r0
    6b16:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b1a:	2f 93       	push	r18
    6b1c:	3f 93       	push	r19
    6b1e:	4f 93       	push	r20
    6b20:	5f 93       	push	r21
    6b22:	6f 93       	push	r22
    6b24:	7f 93       	push	r23
    6b26:	8f 93       	push	r24
    6b28:	9f 93       	push	r25
    6b2a:	af 93       	push	r26
    6b2c:	bf 93       	push	r27
    6b2e:	ef 93       	push	r30
    6b30:	ff 93       	push	r31
    6b32:	cf 93       	push	r28
    6b34:	df 93       	push	r29
    6b36:	cd b7       	in	r28, 0x3d	; 61
    6b38:	de b7       	in	r29, 0x3e	; 62
    6b3a:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <tc_tcc1_cca_callback>
    6b3e:	90 91 b7 21 	lds	r25, 0x21B7	; 0x8021b7 <tc_tcc1_cca_callback+0x1>
    6b42:	89 2b       	or	r24, r25
    6b44:	31 f0       	breq	.+12     	; 0x6b52 <__vector_22+0x6c>
    6b46:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <tc_tcc1_cca_callback>
    6b4a:	90 91 b7 21 	lds	r25, 0x21B7	; 0x8021b7 <tc_tcc1_cca_callback+0x1>
    6b4e:	fc 01       	movw	r30, r24
    6b50:	19 95       	eicall
    6b52:	00 00       	nop
    6b54:	df 91       	pop	r29
    6b56:	cf 91       	pop	r28
    6b58:	ff 91       	pop	r31
    6b5a:	ef 91       	pop	r30
    6b5c:	bf 91       	pop	r27
    6b5e:	af 91       	pop	r26
    6b60:	9f 91       	pop	r25
    6b62:	8f 91       	pop	r24
    6b64:	7f 91       	pop	r23
    6b66:	6f 91       	pop	r22
    6b68:	5f 91       	pop	r21
    6b6a:	4f 91       	pop	r20
    6b6c:	3f 91       	pop	r19
    6b6e:	2f 91       	pop	r18
    6b70:	0f 90       	pop	r0
    6b72:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6b76:	0f 90       	pop	r0
    6b78:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6b7c:	0f 90       	pop	r0
    6b7e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6b82:	0f 90       	pop	r0
    6b84:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6b88:	0f 90       	pop	r0
    6b8a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6b8e:	0f 90       	pop	r0
    6b90:	1f 90       	pop	r1
    6b92:	18 95       	reti

00006b94 <__vector_23>:
    6b94:	1f 92       	push	r1
    6b96:	0f 92       	push	r0
    6b98:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6b9c:	0f 92       	push	r0
    6b9e:	11 24       	eor	r1, r1
    6ba0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ba4:	0f 92       	push	r0
    6ba6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6baa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6bae:	0f 92       	push	r0
    6bb0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6bb4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6bb8:	0f 92       	push	r0
    6bba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6bbe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6bc2:	0f 92       	push	r0
    6bc4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6bc8:	2f 93       	push	r18
    6bca:	3f 93       	push	r19
    6bcc:	4f 93       	push	r20
    6bce:	5f 93       	push	r21
    6bd0:	6f 93       	push	r22
    6bd2:	7f 93       	push	r23
    6bd4:	8f 93       	push	r24
    6bd6:	9f 93       	push	r25
    6bd8:	af 93       	push	r26
    6bda:	bf 93       	push	r27
    6bdc:	ef 93       	push	r30
    6bde:	ff 93       	push	r31
    6be0:	cf 93       	push	r28
    6be2:	df 93       	push	r29
    6be4:	cd b7       	in	r28, 0x3d	; 61
    6be6:	de b7       	in	r29, 0x3e	; 62
    6be8:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <tc_tcc1_ccb_callback>
    6bec:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <tc_tcc1_ccb_callback+0x1>
    6bf0:	89 2b       	or	r24, r25
    6bf2:	31 f0       	breq	.+12     	; 0x6c00 <__vector_23+0x6c>
    6bf4:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <tc_tcc1_ccb_callback>
    6bf8:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <tc_tcc1_ccb_callback+0x1>
    6bfc:	fc 01       	movw	r30, r24
    6bfe:	19 95       	eicall
    6c00:	00 00       	nop
    6c02:	df 91       	pop	r29
    6c04:	cf 91       	pop	r28
    6c06:	ff 91       	pop	r31
    6c08:	ef 91       	pop	r30
    6c0a:	bf 91       	pop	r27
    6c0c:	af 91       	pop	r26
    6c0e:	9f 91       	pop	r25
    6c10:	8f 91       	pop	r24
    6c12:	7f 91       	pop	r23
    6c14:	6f 91       	pop	r22
    6c16:	5f 91       	pop	r21
    6c18:	4f 91       	pop	r20
    6c1a:	3f 91       	pop	r19
    6c1c:	2f 91       	pop	r18
    6c1e:	0f 90       	pop	r0
    6c20:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c24:	0f 90       	pop	r0
    6c26:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c2a:	0f 90       	pop	r0
    6c2c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c30:	0f 90       	pop	r0
    6c32:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c36:	0f 90       	pop	r0
    6c38:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6c3c:	0f 90       	pop	r0
    6c3e:	1f 90       	pop	r1
    6c40:	18 95       	reti

00006c42 <__vector_77>:
    6c42:	1f 92       	push	r1
    6c44:	0f 92       	push	r0
    6c46:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6c4a:	0f 92       	push	r0
    6c4c:	11 24       	eor	r1, r1
    6c4e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c52:	0f 92       	push	r0
    6c54:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6c58:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c5c:	0f 92       	push	r0
    6c5e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6c62:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c66:	0f 92       	push	r0
    6c68:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6c6c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c70:	0f 92       	push	r0
    6c72:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6c76:	2f 93       	push	r18
    6c78:	3f 93       	push	r19
    6c7a:	4f 93       	push	r20
    6c7c:	5f 93       	push	r21
    6c7e:	6f 93       	push	r22
    6c80:	7f 93       	push	r23
    6c82:	8f 93       	push	r24
    6c84:	9f 93       	push	r25
    6c86:	af 93       	push	r26
    6c88:	bf 93       	push	r27
    6c8a:	ef 93       	push	r30
    6c8c:	ff 93       	push	r31
    6c8e:	cf 93       	push	r28
    6c90:	df 93       	push	r29
    6c92:	cd b7       	in	r28, 0x3d	; 61
    6c94:	de b7       	in	r29, 0x3e	; 62
    6c96:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <tc_tcd0_ovf_callback>
    6c9a:	90 91 bb 21 	lds	r25, 0x21BB	; 0x8021bb <tc_tcd0_ovf_callback+0x1>
    6c9e:	89 2b       	or	r24, r25
    6ca0:	31 f0       	breq	.+12     	; 0x6cae <__vector_77+0x6c>
    6ca2:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <tc_tcd0_ovf_callback>
    6ca6:	90 91 bb 21 	lds	r25, 0x21BB	; 0x8021bb <tc_tcd0_ovf_callback+0x1>
    6caa:	fc 01       	movw	r30, r24
    6cac:	19 95       	eicall
    6cae:	00 00       	nop
    6cb0:	df 91       	pop	r29
    6cb2:	cf 91       	pop	r28
    6cb4:	ff 91       	pop	r31
    6cb6:	ef 91       	pop	r30
    6cb8:	bf 91       	pop	r27
    6cba:	af 91       	pop	r26
    6cbc:	9f 91       	pop	r25
    6cbe:	8f 91       	pop	r24
    6cc0:	7f 91       	pop	r23
    6cc2:	6f 91       	pop	r22
    6cc4:	5f 91       	pop	r21
    6cc6:	4f 91       	pop	r20
    6cc8:	3f 91       	pop	r19
    6cca:	2f 91       	pop	r18
    6ccc:	0f 90       	pop	r0
    6cce:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6cd2:	0f 90       	pop	r0
    6cd4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6cd8:	0f 90       	pop	r0
    6cda:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6cde:	0f 90       	pop	r0
    6ce0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6ce4:	0f 90       	pop	r0
    6ce6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6cea:	0f 90       	pop	r0
    6cec:	1f 90       	pop	r1
    6cee:	18 95       	reti

00006cf0 <__vector_78>:
    6cf0:	1f 92       	push	r1
    6cf2:	0f 92       	push	r0
    6cf4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6cf8:	0f 92       	push	r0
    6cfa:	11 24       	eor	r1, r1
    6cfc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d00:	0f 92       	push	r0
    6d02:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d06:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d0a:	0f 92       	push	r0
    6d0c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d10:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d14:	0f 92       	push	r0
    6d16:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d1a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6d1e:	0f 92       	push	r0
    6d20:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6d24:	2f 93       	push	r18
    6d26:	3f 93       	push	r19
    6d28:	4f 93       	push	r20
    6d2a:	5f 93       	push	r21
    6d2c:	6f 93       	push	r22
    6d2e:	7f 93       	push	r23
    6d30:	8f 93       	push	r24
    6d32:	9f 93       	push	r25
    6d34:	af 93       	push	r26
    6d36:	bf 93       	push	r27
    6d38:	ef 93       	push	r30
    6d3a:	ff 93       	push	r31
    6d3c:	cf 93       	push	r28
    6d3e:	df 93       	push	r29
    6d40:	cd b7       	in	r28, 0x3d	; 61
    6d42:	de b7       	in	r29, 0x3e	; 62
    6d44:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <tc_tcd0_err_callback>
    6d48:	90 91 bd 21 	lds	r25, 0x21BD	; 0x8021bd <tc_tcd0_err_callback+0x1>
    6d4c:	89 2b       	or	r24, r25
    6d4e:	31 f0       	breq	.+12     	; 0x6d5c <__vector_78+0x6c>
    6d50:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <tc_tcd0_err_callback>
    6d54:	90 91 bd 21 	lds	r25, 0x21BD	; 0x8021bd <tc_tcd0_err_callback+0x1>
    6d58:	fc 01       	movw	r30, r24
    6d5a:	19 95       	eicall
    6d5c:	00 00       	nop
    6d5e:	df 91       	pop	r29
    6d60:	cf 91       	pop	r28
    6d62:	ff 91       	pop	r31
    6d64:	ef 91       	pop	r30
    6d66:	bf 91       	pop	r27
    6d68:	af 91       	pop	r26
    6d6a:	9f 91       	pop	r25
    6d6c:	8f 91       	pop	r24
    6d6e:	7f 91       	pop	r23
    6d70:	6f 91       	pop	r22
    6d72:	5f 91       	pop	r21
    6d74:	4f 91       	pop	r20
    6d76:	3f 91       	pop	r19
    6d78:	2f 91       	pop	r18
    6d7a:	0f 90       	pop	r0
    6d7c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6d80:	0f 90       	pop	r0
    6d82:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6d86:	0f 90       	pop	r0
    6d88:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6d8c:	0f 90       	pop	r0
    6d8e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6d92:	0f 90       	pop	r0
    6d94:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6d98:	0f 90       	pop	r0
    6d9a:	1f 90       	pop	r1
    6d9c:	18 95       	reti

00006d9e <__vector_79>:
    6d9e:	1f 92       	push	r1
    6da0:	0f 92       	push	r0
    6da2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6da6:	0f 92       	push	r0
    6da8:	11 24       	eor	r1, r1
    6daa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6dae:	0f 92       	push	r0
    6db0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6db4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6db8:	0f 92       	push	r0
    6dba:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6dbe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6dc2:	0f 92       	push	r0
    6dc4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6dc8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6dcc:	0f 92       	push	r0
    6dce:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6dd2:	2f 93       	push	r18
    6dd4:	3f 93       	push	r19
    6dd6:	4f 93       	push	r20
    6dd8:	5f 93       	push	r21
    6dda:	6f 93       	push	r22
    6ddc:	7f 93       	push	r23
    6dde:	8f 93       	push	r24
    6de0:	9f 93       	push	r25
    6de2:	af 93       	push	r26
    6de4:	bf 93       	push	r27
    6de6:	ef 93       	push	r30
    6de8:	ff 93       	push	r31
    6dea:	cf 93       	push	r28
    6dec:	df 93       	push	r29
    6dee:	cd b7       	in	r28, 0x3d	; 61
    6df0:	de b7       	in	r29, 0x3e	; 62
    6df2:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <tc_tcd0_cca_callback>
    6df6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <tc_tcd0_cca_callback+0x1>
    6dfa:	89 2b       	or	r24, r25
    6dfc:	31 f0       	breq	.+12     	; 0x6e0a <__vector_79+0x6c>
    6dfe:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <tc_tcd0_cca_callback>
    6e02:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <tc_tcd0_cca_callback+0x1>
    6e06:	fc 01       	movw	r30, r24
    6e08:	19 95       	eicall
    6e0a:	00 00       	nop
    6e0c:	df 91       	pop	r29
    6e0e:	cf 91       	pop	r28
    6e10:	ff 91       	pop	r31
    6e12:	ef 91       	pop	r30
    6e14:	bf 91       	pop	r27
    6e16:	af 91       	pop	r26
    6e18:	9f 91       	pop	r25
    6e1a:	8f 91       	pop	r24
    6e1c:	7f 91       	pop	r23
    6e1e:	6f 91       	pop	r22
    6e20:	5f 91       	pop	r21
    6e22:	4f 91       	pop	r20
    6e24:	3f 91       	pop	r19
    6e26:	2f 91       	pop	r18
    6e28:	0f 90       	pop	r0
    6e2a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e2e:	0f 90       	pop	r0
    6e30:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e34:	0f 90       	pop	r0
    6e36:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e3a:	0f 90       	pop	r0
    6e3c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e40:	0f 90       	pop	r0
    6e42:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6e46:	0f 90       	pop	r0
    6e48:	1f 90       	pop	r1
    6e4a:	18 95       	reti

00006e4c <__vector_80>:
    6e4c:	1f 92       	push	r1
    6e4e:	0f 92       	push	r0
    6e50:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6e54:	0f 92       	push	r0
    6e56:	11 24       	eor	r1, r1
    6e58:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e5c:	0f 92       	push	r0
    6e5e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6e62:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e66:	0f 92       	push	r0
    6e68:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6e6c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e70:	0f 92       	push	r0
    6e72:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6e76:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e7a:	0f 92       	push	r0
    6e7c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6e80:	2f 93       	push	r18
    6e82:	3f 93       	push	r19
    6e84:	4f 93       	push	r20
    6e86:	5f 93       	push	r21
    6e88:	6f 93       	push	r22
    6e8a:	7f 93       	push	r23
    6e8c:	8f 93       	push	r24
    6e8e:	9f 93       	push	r25
    6e90:	af 93       	push	r26
    6e92:	bf 93       	push	r27
    6e94:	ef 93       	push	r30
    6e96:	ff 93       	push	r31
    6e98:	cf 93       	push	r28
    6e9a:	df 93       	push	r29
    6e9c:	cd b7       	in	r28, 0x3d	; 61
    6e9e:	de b7       	in	r29, 0x3e	; 62
    6ea0:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <tc_tcd0_ccb_callback>
    6ea4:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <tc_tcd0_ccb_callback+0x1>
    6ea8:	89 2b       	or	r24, r25
    6eaa:	31 f0       	breq	.+12     	; 0x6eb8 <__vector_80+0x6c>
    6eac:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <tc_tcd0_ccb_callback>
    6eb0:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <tc_tcd0_ccb_callback+0x1>
    6eb4:	fc 01       	movw	r30, r24
    6eb6:	19 95       	eicall
    6eb8:	00 00       	nop
    6eba:	df 91       	pop	r29
    6ebc:	cf 91       	pop	r28
    6ebe:	ff 91       	pop	r31
    6ec0:	ef 91       	pop	r30
    6ec2:	bf 91       	pop	r27
    6ec4:	af 91       	pop	r26
    6ec6:	9f 91       	pop	r25
    6ec8:	8f 91       	pop	r24
    6eca:	7f 91       	pop	r23
    6ecc:	6f 91       	pop	r22
    6ece:	5f 91       	pop	r21
    6ed0:	4f 91       	pop	r20
    6ed2:	3f 91       	pop	r19
    6ed4:	2f 91       	pop	r18
    6ed6:	0f 90       	pop	r0
    6ed8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6edc:	0f 90       	pop	r0
    6ede:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6ee2:	0f 90       	pop	r0
    6ee4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6ee8:	0f 90       	pop	r0
    6eea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6eee:	0f 90       	pop	r0
    6ef0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6ef4:	0f 90       	pop	r0
    6ef6:	1f 90       	pop	r1
    6ef8:	18 95       	reti

00006efa <__vector_81>:
    6efa:	1f 92       	push	r1
    6efc:	0f 92       	push	r0
    6efe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6f02:	0f 92       	push	r0
    6f04:	11 24       	eor	r1, r1
    6f06:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f0a:	0f 92       	push	r0
    6f0c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f10:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f14:	0f 92       	push	r0
    6f16:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f1a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6f1e:	0f 92       	push	r0
    6f20:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6f24:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6f28:	0f 92       	push	r0
    6f2a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6f2e:	2f 93       	push	r18
    6f30:	3f 93       	push	r19
    6f32:	4f 93       	push	r20
    6f34:	5f 93       	push	r21
    6f36:	6f 93       	push	r22
    6f38:	7f 93       	push	r23
    6f3a:	8f 93       	push	r24
    6f3c:	9f 93       	push	r25
    6f3e:	af 93       	push	r26
    6f40:	bf 93       	push	r27
    6f42:	ef 93       	push	r30
    6f44:	ff 93       	push	r31
    6f46:	cf 93       	push	r28
    6f48:	df 93       	push	r29
    6f4a:	cd b7       	in	r28, 0x3d	; 61
    6f4c:	de b7       	in	r29, 0x3e	; 62
    6f4e:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <tc_tcd0_ccc_callback>
    6f52:	90 91 c3 21 	lds	r25, 0x21C3	; 0x8021c3 <tc_tcd0_ccc_callback+0x1>
    6f56:	89 2b       	or	r24, r25
    6f58:	31 f0       	breq	.+12     	; 0x6f66 <__vector_81+0x6c>
    6f5a:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <tc_tcd0_ccc_callback>
    6f5e:	90 91 c3 21 	lds	r25, 0x21C3	; 0x8021c3 <tc_tcd0_ccc_callback+0x1>
    6f62:	fc 01       	movw	r30, r24
    6f64:	19 95       	eicall
    6f66:	00 00       	nop
    6f68:	df 91       	pop	r29
    6f6a:	cf 91       	pop	r28
    6f6c:	ff 91       	pop	r31
    6f6e:	ef 91       	pop	r30
    6f70:	bf 91       	pop	r27
    6f72:	af 91       	pop	r26
    6f74:	9f 91       	pop	r25
    6f76:	8f 91       	pop	r24
    6f78:	7f 91       	pop	r23
    6f7a:	6f 91       	pop	r22
    6f7c:	5f 91       	pop	r21
    6f7e:	4f 91       	pop	r20
    6f80:	3f 91       	pop	r19
    6f82:	2f 91       	pop	r18
    6f84:	0f 90       	pop	r0
    6f86:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6f8a:	0f 90       	pop	r0
    6f8c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6f90:	0f 90       	pop	r0
    6f92:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6f96:	0f 90       	pop	r0
    6f98:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6f9c:	0f 90       	pop	r0
    6f9e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6fa2:	0f 90       	pop	r0
    6fa4:	1f 90       	pop	r1
    6fa6:	18 95       	reti

00006fa8 <__vector_82>:
    6fa8:	1f 92       	push	r1
    6faa:	0f 92       	push	r0
    6fac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6fb0:	0f 92       	push	r0
    6fb2:	11 24       	eor	r1, r1
    6fb4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6fb8:	0f 92       	push	r0
    6fba:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6fbe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6fc2:	0f 92       	push	r0
    6fc4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6fc8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6fcc:	0f 92       	push	r0
    6fce:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6fd2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6fd6:	0f 92       	push	r0
    6fd8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6fdc:	2f 93       	push	r18
    6fde:	3f 93       	push	r19
    6fe0:	4f 93       	push	r20
    6fe2:	5f 93       	push	r21
    6fe4:	6f 93       	push	r22
    6fe6:	7f 93       	push	r23
    6fe8:	8f 93       	push	r24
    6fea:	9f 93       	push	r25
    6fec:	af 93       	push	r26
    6fee:	bf 93       	push	r27
    6ff0:	ef 93       	push	r30
    6ff2:	ff 93       	push	r31
    6ff4:	cf 93       	push	r28
    6ff6:	df 93       	push	r29
    6ff8:	cd b7       	in	r28, 0x3d	; 61
    6ffa:	de b7       	in	r29, 0x3e	; 62
    6ffc:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <tc_tcd0_ccd_callback>
    7000:	90 91 c5 21 	lds	r25, 0x21C5	; 0x8021c5 <tc_tcd0_ccd_callback+0x1>
    7004:	89 2b       	or	r24, r25
    7006:	31 f0       	breq	.+12     	; 0x7014 <__vector_82+0x6c>
    7008:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <tc_tcd0_ccd_callback>
    700c:	90 91 c5 21 	lds	r25, 0x21C5	; 0x8021c5 <tc_tcd0_ccd_callback+0x1>
    7010:	fc 01       	movw	r30, r24
    7012:	19 95       	eicall
    7014:	00 00       	nop
    7016:	df 91       	pop	r29
    7018:	cf 91       	pop	r28
    701a:	ff 91       	pop	r31
    701c:	ef 91       	pop	r30
    701e:	bf 91       	pop	r27
    7020:	af 91       	pop	r26
    7022:	9f 91       	pop	r25
    7024:	8f 91       	pop	r24
    7026:	7f 91       	pop	r23
    7028:	6f 91       	pop	r22
    702a:	5f 91       	pop	r21
    702c:	4f 91       	pop	r20
    702e:	3f 91       	pop	r19
    7030:	2f 91       	pop	r18
    7032:	0f 90       	pop	r0
    7034:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7038:	0f 90       	pop	r0
    703a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    703e:	0f 90       	pop	r0
    7040:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7044:	0f 90       	pop	r0
    7046:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    704a:	0f 90       	pop	r0
    704c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7050:	0f 90       	pop	r0
    7052:	1f 90       	pop	r1
    7054:	18 95       	reti

00007056 <__vector_83>:
    7056:	1f 92       	push	r1
    7058:	0f 92       	push	r0
    705a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    705e:	0f 92       	push	r0
    7060:	11 24       	eor	r1, r1
    7062:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7066:	0f 92       	push	r0
    7068:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    706c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7070:	0f 92       	push	r0
    7072:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7076:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    707a:	0f 92       	push	r0
    707c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7080:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7084:	0f 92       	push	r0
    7086:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    708a:	2f 93       	push	r18
    708c:	3f 93       	push	r19
    708e:	4f 93       	push	r20
    7090:	5f 93       	push	r21
    7092:	6f 93       	push	r22
    7094:	7f 93       	push	r23
    7096:	8f 93       	push	r24
    7098:	9f 93       	push	r25
    709a:	af 93       	push	r26
    709c:	bf 93       	push	r27
    709e:	ef 93       	push	r30
    70a0:	ff 93       	push	r31
    70a2:	cf 93       	push	r28
    70a4:	df 93       	push	r29
    70a6:	cd b7       	in	r28, 0x3d	; 61
    70a8:	de b7       	in	r29, 0x3e	; 62
    70aa:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <tc_tcd1_ovf_callback>
    70ae:	90 91 c7 21 	lds	r25, 0x21C7	; 0x8021c7 <tc_tcd1_ovf_callback+0x1>
    70b2:	89 2b       	or	r24, r25
    70b4:	31 f0       	breq	.+12     	; 0x70c2 <__vector_83+0x6c>
    70b6:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <tc_tcd1_ovf_callback>
    70ba:	90 91 c7 21 	lds	r25, 0x21C7	; 0x8021c7 <tc_tcd1_ovf_callback+0x1>
    70be:	fc 01       	movw	r30, r24
    70c0:	19 95       	eicall
    70c2:	00 00       	nop
    70c4:	df 91       	pop	r29
    70c6:	cf 91       	pop	r28
    70c8:	ff 91       	pop	r31
    70ca:	ef 91       	pop	r30
    70cc:	bf 91       	pop	r27
    70ce:	af 91       	pop	r26
    70d0:	9f 91       	pop	r25
    70d2:	8f 91       	pop	r24
    70d4:	7f 91       	pop	r23
    70d6:	6f 91       	pop	r22
    70d8:	5f 91       	pop	r21
    70da:	4f 91       	pop	r20
    70dc:	3f 91       	pop	r19
    70de:	2f 91       	pop	r18
    70e0:	0f 90       	pop	r0
    70e2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    70e6:	0f 90       	pop	r0
    70e8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    70ec:	0f 90       	pop	r0
    70ee:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    70f2:	0f 90       	pop	r0
    70f4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    70f8:	0f 90       	pop	r0
    70fa:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    70fe:	0f 90       	pop	r0
    7100:	1f 90       	pop	r1
    7102:	18 95       	reti

00007104 <__vector_84>:
    7104:	1f 92       	push	r1
    7106:	0f 92       	push	r0
    7108:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    710c:	0f 92       	push	r0
    710e:	11 24       	eor	r1, r1
    7110:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7114:	0f 92       	push	r0
    7116:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    711a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    711e:	0f 92       	push	r0
    7120:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7124:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7128:	0f 92       	push	r0
    712a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    712e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7132:	0f 92       	push	r0
    7134:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7138:	2f 93       	push	r18
    713a:	3f 93       	push	r19
    713c:	4f 93       	push	r20
    713e:	5f 93       	push	r21
    7140:	6f 93       	push	r22
    7142:	7f 93       	push	r23
    7144:	8f 93       	push	r24
    7146:	9f 93       	push	r25
    7148:	af 93       	push	r26
    714a:	bf 93       	push	r27
    714c:	ef 93       	push	r30
    714e:	ff 93       	push	r31
    7150:	cf 93       	push	r28
    7152:	df 93       	push	r29
    7154:	cd b7       	in	r28, 0x3d	; 61
    7156:	de b7       	in	r29, 0x3e	; 62
    7158:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <tc_tcd1_err_callback>
    715c:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <tc_tcd1_err_callback+0x1>
    7160:	89 2b       	or	r24, r25
    7162:	31 f0       	breq	.+12     	; 0x7170 <__vector_84+0x6c>
    7164:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <tc_tcd1_err_callback>
    7168:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <tc_tcd1_err_callback+0x1>
    716c:	fc 01       	movw	r30, r24
    716e:	19 95       	eicall
    7170:	00 00       	nop
    7172:	df 91       	pop	r29
    7174:	cf 91       	pop	r28
    7176:	ff 91       	pop	r31
    7178:	ef 91       	pop	r30
    717a:	bf 91       	pop	r27
    717c:	af 91       	pop	r26
    717e:	9f 91       	pop	r25
    7180:	8f 91       	pop	r24
    7182:	7f 91       	pop	r23
    7184:	6f 91       	pop	r22
    7186:	5f 91       	pop	r21
    7188:	4f 91       	pop	r20
    718a:	3f 91       	pop	r19
    718c:	2f 91       	pop	r18
    718e:	0f 90       	pop	r0
    7190:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7194:	0f 90       	pop	r0
    7196:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    719a:	0f 90       	pop	r0
    719c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    71a0:	0f 90       	pop	r0
    71a2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    71a6:	0f 90       	pop	r0
    71a8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    71ac:	0f 90       	pop	r0
    71ae:	1f 90       	pop	r1
    71b0:	18 95       	reti

000071b2 <__vector_85>:
    71b2:	1f 92       	push	r1
    71b4:	0f 92       	push	r0
    71b6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    71ba:	0f 92       	push	r0
    71bc:	11 24       	eor	r1, r1
    71be:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    71c2:	0f 92       	push	r0
    71c4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    71c8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    71cc:	0f 92       	push	r0
    71ce:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    71d2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    71d6:	0f 92       	push	r0
    71d8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    71dc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    71e0:	0f 92       	push	r0
    71e2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    71e6:	2f 93       	push	r18
    71e8:	3f 93       	push	r19
    71ea:	4f 93       	push	r20
    71ec:	5f 93       	push	r21
    71ee:	6f 93       	push	r22
    71f0:	7f 93       	push	r23
    71f2:	8f 93       	push	r24
    71f4:	9f 93       	push	r25
    71f6:	af 93       	push	r26
    71f8:	bf 93       	push	r27
    71fa:	ef 93       	push	r30
    71fc:	ff 93       	push	r31
    71fe:	cf 93       	push	r28
    7200:	df 93       	push	r29
    7202:	cd b7       	in	r28, 0x3d	; 61
    7204:	de b7       	in	r29, 0x3e	; 62
    7206:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <tc_tcd1_cca_callback>
    720a:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <tc_tcd1_cca_callback+0x1>
    720e:	89 2b       	or	r24, r25
    7210:	31 f0       	breq	.+12     	; 0x721e <__vector_85+0x6c>
    7212:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <tc_tcd1_cca_callback>
    7216:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <tc_tcd1_cca_callback+0x1>
    721a:	fc 01       	movw	r30, r24
    721c:	19 95       	eicall
    721e:	00 00       	nop
    7220:	df 91       	pop	r29
    7222:	cf 91       	pop	r28
    7224:	ff 91       	pop	r31
    7226:	ef 91       	pop	r30
    7228:	bf 91       	pop	r27
    722a:	af 91       	pop	r26
    722c:	9f 91       	pop	r25
    722e:	8f 91       	pop	r24
    7230:	7f 91       	pop	r23
    7232:	6f 91       	pop	r22
    7234:	5f 91       	pop	r21
    7236:	4f 91       	pop	r20
    7238:	3f 91       	pop	r19
    723a:	2f 91       	pop	r18
    723c:	0f 90       	pop	r0
    723e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7242:	0f 90       	pop	r0
    7244:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7248:	0f 90       	pop	r0
    724a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    724e:	0f 90       	pop	r0
    7250:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7254:	0f 90       	pop	r0
    7256:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    725a:	0f 90       	pop	r0
    725c:	1f 90       	pop	r1
    725e:	18 95       	reti

00007260 <__vector_86>:
    7260:	1f 92       	push	r1
    7262:	0f 92       	push	r0
    7264:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7268:	0f 92       	push	r0
    726a:	11 24       	eor	r1, r1
    726c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7270:	0f 92       	push	r0
    7272:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7276:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    727a:	0f 92       	push	r0
    727c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7280:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7284:	0f 92       	push	r0
    7286:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    728a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    728e:	0f 92       	push	r0
    7290:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7294:	2f 93       	push	r18
    7296:	3f 93       	push	r19
    7298:	4f 93       	push	r20
    729a:	5f 93       	push	r21
    729c:	6f 93       	push	r22
    729e:	7f 93       	push	r23
    72a0:	8f 93       	push	r24
    72a2:	9f 93       	push	r25
    72a4:	af 93       	push	r26
    72a6:	bf 93       	push	r27
    72a8:	ef 93       	push	r30
    72aa:	ff 93       	push	r31
    72ac:	cf 93       	push	r28
    72ae:	df 93       	push	r29
    72b0:	cd b7       	in	r28, 0x3d	; 61
    72b2:	de b7       	in	r29, 0x3e	; 62
    72b4:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <tc_tcd1_ccb_callback>
    72b8:	90 91 cd 21 	lds	r25, 0x21CD	; 0x8021cd <tc_tcd1_ccb_callback+0x1>
    72bc:	89 2b       	or	r24, r25
    72be:	31 f0       	breq	.+12     	; 0x72cc <__vector_86+0x6c>
    72c0:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <tc_tcd1_ccb_callback>
    72c4:	90 91 cd 21 	lds	r25, 0x21CD	; 0x8021cd <tc_tcd1_ccb_callback+0x1>
    72c8:	fc 01       	movw	r30, r24
    72ca:	19 95       	eicall
    72cc:	00 00       	nop
    72ce:	df 91       	pop	r29
    72d0:	cf 91       	pop	r28
    72d2:	ff 91       	pop	r31
    72d4:	ef 91       	pop	r30
    72d6:	bf 91       	pop	r27
    72d8:	af 91       	pop	r26
    72da:	9f 91       	pop	r25
    72dc:	8f 91       	pop	r24
    72de:	7f 91       	pop	r23
    72e0:	6f 91       	pop	r22
    72e2:	5f 91       	pop	r21
    72e4:	4f 91       	pop	r20
    72e6:	3f 91       	pop	r19
    72e8:	2f 91       	pop	r18
    72ea:	0f 90       	pop	r0
    72ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    72f0:	0f 90       	pop	r0
    72f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    72f6:	0f 90       	pop	r0
    72f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    72fc:	0f 90       	pop	r0
    72fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7302:	0f 90       	pop	r0
    7304:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7308:	0f 90       	pop	r0
    730a:	1f 90       	pop	r1
    730c:	18 95       	reti

0000730e <__vector_47>:
    730e:	1f 92       	push	r1
    7310:	0f 92       	push	r0
    7312:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7316:	0f 92       	push	r0
    7318:	11 24       	eor	r1, r1
    731a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    731e:	0f 92       	push	r0
    7320:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7324:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7328:	0f 92       	push	r0
    732a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    732e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7332:	0f 92       	push	r0
    7334:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7338:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    733c:	0f 92       	push	r0
    733e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7342:	2f 93       	push	r18
    7344:	3f 93       	push	r19
    7346:	4f 93       	push	r20
    7348:	5f 93       	push	r21
    734a:	6f 93       	push	r22
    734c:	7f 93       	push	r23
    734e:	8f 93       	push	r24
    7350:	9f 93       	push	r25
    7352:	af 93       	push	r26
    7354:	bf 93       	push	r27
    7356:	ef 93       	push	r30
    7358:	ff 93       	push	r31
    735a:	cf 93       	push	r28
    735c:	df 93       	push	r29
    735e:	cd b7       	in	r28, 0x3d	; 61
    7360:	de b7       	in	r29, 0x3e	; 62
    7362:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <tc_tce0_ovf_callback>
    7366:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <tc_tce0_ovf_callback+0x1>
    736a:	89 2b       	or	r24, r25
    736c:	31 f0       	breq	.+12     	; 0x737a <__vector_47+0x6c>
    736e:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <tc_tce0_ovf_callback>
    7372:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <tc_tce0_ovf_callback+0x1>
    7376:	fc 01       	movw	r30, r24
    7378:	19 95       	eicall
    737a:	00 00       	nop
    737c:	df 91       	pop	r29
    737e:	cf 91       	pop	r28
    7380:	ff 91       	pop	r31
    7382:	ef 91       	pop	r30
    7384:	bf 91       	pop	r27
    7386:	af 91       	pop	r26
    7388:	9f 91       	pop	r25
    738a:	8f 91       	pop	r24
    738c:	7f 91       	pop	r23
    738e:	6f 91       	pop	r22
    7390:	5f 91       	pop	r21
    7392:	4f 91       	pop	r20
    7394:	3f 91       	pop	r19
    7396:	2f 91       	pop	r18
    7398:	0f 90       	pop	r0
    739a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    739e:	0f 90       	pop	r0
    73a0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    73a4:	0f 90       	pop	r0
    73a6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    73aa:	0f 90       	pop	r0
    73ac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    73b0:	0f 90       	pop	r0
    73b2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    73b6:	0f 90       	pop	r0
    73b8:	1f 90       	pop	r1
    73ba:	18 95       	reti

000073bc <__vector_48>:
    73bc:	1f 92       	push	r1
    73be:	0f 92       	push	r0
    73c0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    73c4:	0f 92       	push	r0
    73c6:	11 24       	eor	r1, r1
    73c8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    73cc:	0f 92       	push	r0
    73ce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    73d2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    73d6:	0f 92       	push	r0
    73d8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    73dc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    73e0:	0f 92       	push	r0
    73e2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    73e6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    73ea:	0f 92       	push	r0
    73ec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    73f0:	2f 93       	push	r18
    73f2:	3f 93       	push	r19
    73f4:	4f 93       	push	r20
    73f6:	5f 93       	push	r21
    73f8:	6f 93       	push	r22
    73fa:	7f 93       	push	r23
    73fc:	8f 93       	push	r24
    73fe:	9f 93       	push	r25
    7400:	af 93       	push	r26
    7402:	bf 93       	push	r27
    7404:	ef 93       	push	r30
    7406:	ff 93       	push	r31
    7408:	cf 93       	push	r28
    740a:	df 93       	push	r29
    740c:	cd b7       	in	r28, 0x3d	; 61
    740e:	de b7       	in	r29, 0x3e	; 62
    7410:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <tc_tce0_err_callback>
    7414:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <tc_tce0_err_callback+0x1>
    7418:	89 2b       	or	r24, r25
    741a:	31 f0       	breq	.+12     	; 0x7428 <__vector_48+0x6c>
    741c:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <tc_tce0_err_callback>
    7420:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <tc_tce0_err_callback+0x1>
    7424:	fc 01       	movw	r30, r24
    7426:	19 95       	eicall
    7428:	00 00       	nop
    742a:	df 91       	pop	r29
    742c:	cf 91       	pop	r28
    742e:	ff 91       	pop	r31
    7430:	ef 91       	pop	r30
    7432:	bf 91       	pop	r27
    7434:	af 91       	pop	r26
    7436:	9f 91       	pop	r25
    7438:	8f 91       	pop	r24
    743a:	7f 91       	pop	r23
    743c:	6f 91       	pop	r22
    743e:	5f 91       	pop	r21
    7440:	4f 91       	pop	r20
    7442:	3f 91       	pop	r19
    7444:	2f 91       	pop	r18
    7446:	0f 90       	pop	r0
    7448:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    744c:	0f 90       	pop	r0
    744e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7452:	0f 90       	pop	r0
    7454:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7458:	0f 90       	pop	r0
    745a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    745e:	0f 90       	pop	r0
    7460:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7464:	0f 90       	pop	r0
    7466:	1f 90       	pop	r1
    7468:	18 95       	reti

0000746a <__vector_49>:
    746a:	1f 92       	push	r1
    746c:	0f 92       	push	r0
    746e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7472:	0f 92       	push	r0
    7474:	11 24       	eor	r1, r1
    7476:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    747a:	0f 92       	push	r0
    747c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7480:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7484:	0f 92       	push	r0
    7486:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    748a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    748e:	0f 92       	push	r0
    7490:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7494:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7498:	0f 92       	push	r0
    749a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    749e:	2f 93       	push	r18
    74a0:	3f 93       	push	r19
    74a2:	4f 93       	push	r20
    74a4:	5f 93       	push	r21
    74a6:	6f 93       	push	r22
    74a8:	7f 93       	push	r23
    74aa:	8f 93       	push	r24
    74ac:	9f 93       	push	r25
    74ae:	af 93       	push	r26
    74b0:	bf 93       	push	r27
    74b2:	ef 93       	push	r30
    74b4:	ff 93       	push	r31
    74b6:	cf 93       	push	r28
    74b8:	df 93       	push	r29
    74ba:	cd b7       	in	r28, 0x3d	; 61
    74bc:	de b7       	in	r29, 0x3e	; 62
    74be:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <tc_tce0_cca_callback>
    74c2:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <tc_tce0_cca_callback+0x1>
    74c6:	89 2b       	or	r24, r25
    74c8:	31 f0       	breq	.+12     	; 0x74d6 <__vector_49+0x6c>
    74ca:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <tc_tce0_cca_callback>
    74ce:	90 91 d3 21 	lds	r25, 0x21D3	; 0x8021d3 <tc_tce0_cca_callback+0x1>
    74d2:	fc 01       	movw	r30, r24
    74d4:	19 95       	eicall
    74d6:	00 00       	nop
    74d8:	df 91       	pop	r29
    74da:	cf 91       	pop	r28
    74dc:	ff 91       	pop	r31
    74de:	ef 91       	pop	r30
    74e0:	bf 91       	pop	r27
    74e2:	af 91       	pop	r26
    74e4:	9f 91       	pop	r25
    74e6:	8f 91       	pop	r24
    74e8:	7f 91       	pop	r23
    74ea:	6f 91       	pop	r22
    74ec:	5f 91       	pop	r21
    74ee:	4f 91       	pop	r20
    74f0:	3f 91       	pop	r19
    74f2:	2f 91       	pop	r18
    74f4:	0f 90       	pop	r0
    74f6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    74fa:	0f 90       	pop	r0
    74fc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7500:	0f 90       	pop	r0
    7502:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7506:	0f 90       	pop	r0
    7508:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    750c:	0f 90       	pop	r0
    750e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7512:	0f 90       	pop	r0
    7514:	1f 90       	pop	r1
    7516:	18 95       	reti

00007518 <__vector_50>:
    7518:	1f 92       	push	r1
    751a:	0f 92       	push	r0
    751c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7520:	0f 92       	push	r0
    7522:	11 24       	eor	r1, r1
    7524:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7528:	0f 92       	push	r0
    752a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    752e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7532:	0f 92       	push	r0
    7534:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7538:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    753c:	0f 92       	push	r0
    753e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7542:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7546:	0f 92       	push	r0
    7548:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    754c:	2f 93       	push	r18
    754e:	3f 93       	push	r19
    7550:	4f 93       	push	r20
    7552:	5f 93       	push	r21
    7554:	6f 93       	push	r22
    7556:	7f 93       	push	r23
    7558:	8f 93       	push	r24
    755a:	9f 93       	push	r25
    755c:	af 93       	push	r26
    755e:	bf 93       	push	r27
    7560:	ef 93       	push	r30
    7562:	ff 93       	push	r31
    7564:	cf 93       	push	r28
    7566:	df 93       	push	r29
    7568:	cd b7       	in	r28, 0x3d	; 61
    756a:	de b7       	in	r29, 0x3e	; 62
    756c:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <tc_tce0_ccb_callback>
    7570:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <tc_tce0_ccb_callback+0x1>
    7574:	89 2b       	or	r24, r25
    7576:	31 f0       	breq	.+12     	; 0x7584 <__vector_50+0x6c>
    7578:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <tc_tce0_ccb_callback>
    757c:	90 91 d5 21 	lds	r25, 0x21D5	; 0x8021d5 <tc_tce0_ccb_callback+0x1>
    7580:	fc 01       	movw	r30, r24
    7582:	19 95       	eicall
    7584:	00 00       	nop
    7586:	df 91       	pop	r29
    7588:	cf 91       	pop	r28
    758a:	ff 91       	pop	r31
    758c:	ef 91       	pop	r30
    758e:	bf 91       	pop	r27
    7590:	af 91       	pop	r26
    7592:	9f 91       	pop	r25
    7594:	8f 91       	pop	r24
    7596:	7f 91       	pop	r23
    7598:	6f 91       	pop	r22
    759a:	5f 91       	pop	r21
    759c:	4f 91       	pop	r20
    759e:	3f 91       	pop	r19
    75a0:	2f 91       	pop	r18
    75a2:	0f 90       	pop	r0
    75a4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75a8:	0f 90       	pop	r0
    75aa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    75ae:	0f 90       	pop	r0
    75b0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    75b4:	0f 90       	pop	r0
    75b6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    75ba:	0f 90       	pop	r0
    75bc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    75c0:	0f 90       	pop	r0
    75c2:	1f 90       	pop	r1
    75c4:	18 95       	reti

000075c6 <__vector_51>:
    75c6:	1f 92       	push	r1
    75c8:	0f 92       	push	r0
    75ca:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    75ce:	0f 92       	push	r0
    75d0:	11 24       	eor	r1, r1
    75d2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    75d6:	0f 92       	push	r0
    75d8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    75dc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    75e0:	0f 92       	push	r0
    75e2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    75e6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    75ea:	0f 92       	push	r0
    75ec:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    75f0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75f4:	0f 92       	push	r0
    75f6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    75fa:	2f 93       	push	r18
    75fc:	3f 93       	push	r19
    75fe:	4f 93       	push	r20
    7600:	5f 93       	push	r21
    7602:	6f 93       	push	r22
    7604:	7f 93       	push	r23
    7606:	8f 93       	push	r24
    7608:	9f 93       	push	r25
    760a:	af 93       	push	r26
    760c:	bf 93       	push	r27
    760e:	ef 93       	push	r30
    7610:	ff 93       	push	r31
    7612:	cf 93       	push	r28
    7614:	df 93       	push	r29
    7616:	cd b7       	in	r28, 0x3d	; 61
    7618:	de b7       	in	r29, 0x3e	; 62
    761a:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <tc_tce0_ccc_callback>
    761e:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <tc_tce0_ccc_callback+0x1>
    7622:	89 2b       	or	r24, r25
    7624:	31 f0       	breq	.+12     	; 0x7632 <__vector_51+0x6c>
    7626:	80 91 d6 21 	lds	r24, 0x21D6	; 0x8021d6 <tc_tce0_ccc_callback>
    762a:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <tc_tce0_ccc_callback+0x1>
    762e:	fc 01       	movw	r30, r24
    7630:	19 95       	eicall
    7632:	00 00       	nop
    7634:	df 91       	pop	r29
    7636:	cf 91       	pop	r28
    7638:	ff 91       	pop	r31
    763a:	ef 91       	pop	r30
    763c:	bf 91       	pop	r27
    763e:	af 91       	pop	r26
    7640:	9f 91       	pop	r25
    7642:	8f 91       	pop	r24
    7644:	7f 91       	pop	r23
    7646:	6f 91       	pop	r22
    7648:	5f 91       	pop	r21
    764a:	4f 91       	pop	r20
    764c:	3f 91       	pop	r19
    764e:	2f 91       	pop	r18
    7650:	0f 90       	pop	r0
    7652:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7656:	0f 90       	pop	r0
    7658:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    765c:	0f 90       	pop	r0
    765e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7662:	0f 90       	pop	r0
    7664:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7668:	0f 90       	pop	r0
    766a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    766e:	0f 90       	pop	r0
    7670:	1f 90       	pop	r1
    7672:	18 95       	reti

00007674 <__vector_52>:
    7674:	1f 92       	push	r1
    7676:	0f 92       	push	r0
    7678:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    767c:	0f 92       	push	r0
    767e:	11 24       	eor	r1, r1
    7680:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7684:	0f 92       	push	r0
    7686:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    768a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    768e:	0f 92       	push	r0
    7690:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7694:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7698:	0f 92       	push	r0
    769a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    769e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    76a2:	0f 92       	push	r0
    76a4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    76a8:	2f 93       	push	r18
    76aa:	3f 93       	push	r19
    76ac:	4f 93       	push	r20
    76ae:	5f 93       	push	r21
    76b0:	6f 93       	push	r22
    76b2:	7f 93       	push	r23
    76b4:	8f 93       	push	r24
    76b6:	9f 93       	push	r25
    76b8:	af 93       	push	r26
    76ba:	bf 93       	push	r27
    76bc:	ef 93       	push	r30
    76be:	ff 93       	push	r31
    76c0:	cf 93       	push	r28
    76c2:	df 93       	push	r29
    76c4:	cd b7       	in	r28, 0x3d	; 61
    76c6:	de b7       	in	r29, 0x3e	; 62
    76c8:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <tc_tce0_ccd_callback>
    76cc:	90 91 d9 21 	lds	r25, 0x21D9	; 0x8021d9 <tc_tce0_ccd_callback+0x1>
    76d0:	89 2b       	or	r24, r25
    76d2:	31 f0       	breq	.+12     	; 0x76e0 <__vector_52+0x6c>
    76d4:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <tc_tce0_ccd_callback>
    76d8:	90 91 d9 21 	lds	r25, 0x21D9	; 0x8021d9 <tc_tce0_ccd_callback+0x1>
    76dc:	fc 01       	movw	r30, r24
    76de:	19 95       	eicall
    76e0:	00 00       	nop
    76e2:	df 91       	pop	r29
    76e4:	cf 91       	pop	r28
    76e6:	ff 91       	pop	r31
    76e8:	ef 91       	pop	r30
    76ea:	bf 91       	pop	r27
    76ec:	af 91       	pop	r26
    76ee:	9f 91       	pop	r25
    76f0:	8f 91       	pop	r24
    76f2:	7f 91       	pop	r23
    76f4:	6f 91       	pop	r22
    76f6:	5f 91       	pop	r21
    76f8:	4f 91       	pop	r20
    76fa:	3f 91       	pop	r19
    76fc:	2f 91       	pop	r18
    76fe:	0f 90       	pop	r0
    7700:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7704:	0f 90       	pop	r0
    7706:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    770a:	0f 90       	pop	r0
    770c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7710:	0f 90       	pop	r0
    7712:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7716:	0f 90       	pop	r0
    7718:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    771c:	0f 90       	pop	r0
    771e:	1f 90       	pop	r1
    7720:	18 95       	reti

00007722 <__vector_53>:
    7722:	1f 92       	push	r1
    7724:	0f 92       	push	r0
    7726:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    772a:	0f 92       	push	r0
    772c:	11 24       	eor	r1, r1
    772e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7732:	0f 92       	push	r0
    7734:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7738:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    773c:	0f 92       	push	r0
    773e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7742:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7746:	0f 92       	push	r0
    7748:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    774c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7750:	0f 92       	push	r0
    7752:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7756:	2f 93       	push	r18
    7758:	3f 93       	push	r19
    775a:	4f 93       	push	r20
    775c:	5f 93       	push	r21
    775e:	6f 93       	push	r22
    7760:	7f 93       	push	r23
    7762:	8f 93       	push	r24
    7764:	9f 93       	push	r25
    7766:	af 93       	push	r26
    7768:	bf 93       	push	r27
    776a:	ef 93       	push	r30
    776c:	ff 93       	push	r31
    776e:	cf 93       	push	r28
    7770:	df 93       	push	r29
    7772:	cd b7       	in	r28, 0x3d	; 61
    7774:	de b7       	in	r29, 0x3e	; 62
    7776:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <tc_tce1_ovf_callback>
    777a:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <tc_tce1_ovf_callback+0x1>
    777e:	89 2b       	or	r24, r25
    7780:	31 f0       	breq	.+12     	; 0x778e <__vector_53+0x6c>
    7782:	80 91 da 21 	lds	r24, 0x21DA	; 0x8021da <tc_tce1_ovf_callback>
    7786:	90 91 db 21 	lds	r25, 0x21DB	; 0x8021db <tc_tce1_ovf_callback+0x1>
    778a:	fc 01       	movw	r30, r24
    778c:	19 95       	eicall
    778e:	00 00       	nop
    7790:	df 91       	pop	r29
    7792:	cf 91       	pop	r28
    7794:	ff 91       	pop	r31
    7796:	ef 91       	pop	r30
    7798:	bf 91       	pop	r27
    779a:	af 91       	pop	r26
    779c:	9f 91       	pop	r25
    779e:	8f 91       	pop	r24
    77a0:	7f 91       	pop	r23
    77a2:	6f 91       	pop	r22
    77a4:	5f 91       	pop	r21
    77a6:	4f 91       	pop	r20
    77a8:	3f 91       	pop	r19
    77aa:	2f 91       	pop	r18
    77ac:	0f 90       	pop	r0
    77ae:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    77b2:	0f 90       	pop	r0
    77b4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    77b8:	0f 90       	pop	r0
    77ba:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    77be:	0f 90       	pop	r0
    77c0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    77c4:	0f 90       	pop	r0
    77c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    77ca:	0f 90       	pop	r0
    77cc:	1f 90       	pop	r1
    77ce:	18 95       	reti

000077d0 <__vector_54>:
    77d0:	1f 92       	push	r1
    77d2:	0f 92       	push	r0
    77d4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    77d8:	0f 92       	push	r0
    77da:	11 24       	eor	r1, r1
    77dc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    77e0:	0f 92       	push	r0
    77e2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    77e6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    77ea:	0f 92       	push	r0
    77ec:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    77f0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    77f4:	0f 92       	push	r0
    77f6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    77fa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    77fe:	0f 92       	push	r0
    7800:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7804:	2f 93       	push	r18
    7806:	3f 93       	push	r19
    7808:	4f 93       	push	r20
    780a:	5f 93       	push	r21
    780c:	6f 93       	push	r22
    780e:	7f 93       	push	r23
    7810:	8f 93       	push	r24
    7812:	9f 93       	push	r25
    7814:	af 93       	push	r26
    7816:	bf 93       	push	r27
    7818:	ef 93       	push	r30
    781a:	ff 93       	push	r31
    781c:	cf 93       	push	r28
    781e:	df 93       	push	r29
    7820:	cd b7       	in	r28, 0x3d	; 61
    7822:	de b7       	in	r29, 0x3e	; 62
    7824:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <tc_tce1_err_callback>
    7828:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <tc_tce1_err_callback+0x1>
    782c:	89 2b       	or	r24, r25
    782e:	31 f0       	breq	.+12     	; 0x783c <__vector_54+0x6c>
    7830:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <tc_tce1_err_callback>
    7834:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <tc_tce1_err_callback+0x1>
    7838:	fc 01       	movw	r30, r24
    783a:	19 95       	eicall
    783c:	00 00       	nop
    783e:	df 91       	pop	r29
    7840:	cf 91       	pop	r28
    7842:	ff 91       	pop	r31
    7844:	ef 91       	pop	r30
    7846:	bf 91       	pop	r27
    7848:	af 91       	pop	r26
    784a:	9f 91       	pop	r25
    784c:	8f 91       	pop	r24
    784e:	7f 91       	pop	r23
    7850:	6f 91       	pop	r22
    7852:	5f 91       	pop	r21
    7854:	4f 91       	pop	r20
    7856:	3f 91       	pop	r19
    7858:	2f 91       	pop	r18
    785a:	0f 90       	pop	r0
    785c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7860:	0f 90       	pop	r0
    7862:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7866:	0f 90       	pop	r0
    7868:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    786c:	0f 90       	pop	r0
    786e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7872:	0f 90       	pop	r0
    7874:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7878:	0f 90       	pop	r0
    787a:	1f 90       	pop	r1
    787c:	18 95       	reti

0000787e <__vector_55>:
    787e:	1f 92       	push	r1
    7880:	0f 92       	push	r0
    7882:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7886:	0f 92       	push	r0
    7888:	11 24       	eor	r1, r1
    788a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    788e:	0f 92       	push	r0
    7890:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7894:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7898:	0f 92       	push	r0
    789a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    789e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    78a2:	0f 92       	push	r0
    78a4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    78a8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    78ac:	0f 92       	push	r0
    78ae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    78b2:	2f 93       	push	r18
    78b4:	3f 93       	push	r19
    78b6:	4f 93       	push	r20
    78b8:	5f 93       	push	r21
    78ba:	6f 93       	push	r22
    78bc:	7f 93       	push	r23
    78be:	8f 93       	push	r24
    78c0:	9f 93       	push	r25
    78c2:	af 93       	push	r26
    78c4:	bf 93       	push	r27
    78c6:	ef 93       	push	r30
    78c8:	ff 93       	push	r31
    78ca:	cf 93       	push	r28
    78cc:	df 93       	push	r29
    78ce:	cd b7       	in	r28, 0x3d	; 61
    78d0:	de b7       	in	r29, 0x3e	; 62
    78d2:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <tc_tce1_cca_callback>
    78d6:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <tc_tce1_cca_callback+0x1>
    78da:	89 2b       	or	r24, r25
    78dc:	31 f0       	breq	.+12     	; 0x78ea <__vector_55+0x6c>
    78de:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <tc_tce1_cca_callback>
    78e2:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <tc_tce1_cca_callback+0x1>
    78e6:	fc 01       	movw	r30, r24
    78e8:	19 95       	eicall
    78ea:	00 00       	nop
    78ec:	df 91       	pop	r29
    78ee:	cf 91       	pop	r28
    78f0:	ff 91       	pop	r31
    78f2:	ef 91       	pop	r30
    78f4:	bf 91       	pop	r27
    78f6:	af 91       	pop	r26
    78f8:	9f 91       	pop	r25
    78fa:	8f 91       	pop	r24
    78fc:	7f 91       	pop	r23
    78fe:	6f 91       	pop	r22
    7900:	5f 91       	pop	r21
    7902:	4f 91       	pop	r20
    7904:	3f 91       	pop	r19
    7906:	2f 91       	pop	r18
    7908:	0f 90       	pop	r0
    790a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    790e:	0f 90       	pop	r0
    7910:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7914:	0f 90       	pop	r0
    7916:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    791a:	0f 90       	pop	r0
    791c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7920:	0f 90       	pop	r0
    7922:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7926:	0f 90       	pop	r0
    7928:	1f 90       	pop	r1
    792a:	18 95       	reti

0000792c <__vector_56>:
    792c:	1f 92       	push	r1
    792e:	0f 92       	push	r0
    7930:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7934:	0f 92       	push	r0
    7936:	11 24       	eor	r1, r1
    7938:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    793c:	0f 92       	push	r0
    793e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7942:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7946:	0f 92       	push	r0
    7948:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    794c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7950:	0f 92       	push	r0
    7952:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7956:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    795a:	0f 92       	push	r0
    795c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7960:	2f 93       	push	r18
    7962:	3f 93       	push	r19
    7964:	4f 93       	push	r20
    7966:	5f 93       	push	r21
    7968:	6f 93       	push	r22
    796a:	7f 93       	push	r23
    796c:	8f 93       	push	r24
    796e:	9f 93       	push	r25
    7970:	af 93       	push	r26
    7972:	bf 93       	push	r27
    7974:	ef 93       	push	r30
    7976:	ff 93       	push	r31
    7978:	cf 93       	push	r28
    797a:	df 93       	push	r29
    797c:	cd b7       	in	r28, 0x3d	; 61
    797e:	de b7       	in	r29, 0x3e	; 62
    7980:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <tc_tce1_ccb_callback>
    7984:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <tc_tce1_ccb_callback+0x1>
    7988:	89 2b       	or	r24, r25
    798a:	31 f0       	breq	.+12     	; 0x7998 <__vector_56+0x6c>
    798c:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <tc_tce1_ccb_callback>
    7990:	90 91 e1 21 	lds	r25, 0x21E1	; 0x8021e1 <tc_tce1_ccb_callback+0x1>
    7994:	fc 01       	movw	r30, r24
    7996:	19 95       	eicall
    7998:	00 00       	nop
    799a:	df 91       	pop	r29
    799c:	cf 91       	pop	r28
    799e:	ff 91       	pop	r31
    79a0:	ef 91       	pop	r30
    79a2:	bf 91       	pop	r27
    79a4:	af 91       	pop	r26
    79a6:	9f 91       	pop	r25
    79a8:	8f 91       	pop	r24
    79aa:	7f 91       	pop	r23
    79ac:	6f 91       	pop	r22
    79ae:	5f 91       	pop	r21
    79b0:	4f 91       	pop	r20
    79b2:	3f 91       	pop	r19
    79b4:	2f 91       	pop	r18
    79b6:	0f 90       	pop	r0
    79b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    79bc:	0f 90       	pop	r0
    79be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    79c2:	0f 90       	pop	r0
    79c4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79c8:	0f 90       	pop	r0
    79ca:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79ce:	0f 90       	pop	r0
    79d0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    79d4:	0f 90       	pop	r0
    79d6:	1f 90       	pop	r1
    79d8:	18 95       	reti

000079da <__vector_108>:
    79da:	1f 92       	push	r1
    79dc:	0f 92       	push	r0
    79de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    79e2:	0f 92       	push	r0
    79e4:	11 24       	eor	r1, r1
    79e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79ea:	0f 92       	push	r0
    79ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    79f0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79f4:	0f 92       	push	r0
    79f6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    79fa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    79fe:	0f 92       	push	r0
    7a00:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a04:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a08:	0f 92       	push	r0
    7a0a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a0e:	2f 93       	push	r18
    7a10:	3f 93       	push	r19
    7a12:	4f 93       	push	r20
    7a14:	5f 93       	push	r21
    7a16:	6f 93       	push	r22
    7a18:	7f 93       	push	r23
    7a1a:	8f 93       	push	r24
    7a1c:	9f 93       	push	r25
    7a1e:	af 93       	push	r26
    7a20:	bf 93       	push	r27
    7a22:	ef 93       	push	r30
    7a24:	ff 93       	push	r31
    7a26:	cf 93       	push	r28
    7a28:	df 93       	push	r29
    7a2a:	cd b7       	in	r28, 0x3d	; 61
    7a2c:	de b7       	in	r29, 0x3e	; 62
    7a2e:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <tc_tcf0_ovf_callback>
    7a32:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <tc_tcf0_ovf_callback+0x1>
    7a36:	89 2b       	or	r24, r25
    7a38:	31 f0       	breq	.+12     	; 0x7a46 <__vector_108+0x6c>
    7a3a:	80 91 e2 21 	lds	r24, 0x21E2	; 0x8021e2 <tc_tcf0_ovf_callback>
    7a3e:	90 91 e3 21 	lds	r25, 0x21E3	; 0x8021e3 <tc_tcf0_ovf_callback+0x1>
    7a42:	fc 01       	movw	r30, r24
    7a44:	19 95       	eicall
    7a46:	00 00       	nop
    7a48:	df 91       	pop	r29
    7a4a:	cf 91       	pop	r28
    7a4c:	ff 91       	pop	r31
    7a4e:	ef 91       	pop	r30
    7a50:	bf 91       	pop	r27
    7a52:	af 91       	pop	r26
    7a54:	9f 91       	pop	r25
    7a56:	8f 91       	pop	r24
    7a58:	7f 91       	pop	r23
    7a5a:	6f 91       	pop	r22
    7a5c:	5f 91       	pop	r21
    7a5e:	4f 91       	pop	r20
    7a60:	3f 91       	pop	r19
    7a62:	2f 91       	pop	r18
    7a64:	0f 90       	pop	r0
    7a66:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7a6a:	0f 90       	pop	r0
    7a6c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7a70:	0f 90       	pop	r0
    7a72:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7a76:	0f 90       	pop	r0
    7a78:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a7c:	0f 90       	pop	r0
    7a7e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7a82:	0f 90       	pop	r0
    7a84:	1f 90       	pop	r1
    7a86:	18 95       	reti

00007a88 <__vector_109>:
    7a88:	1f 92       	push	r1
    7a8a:	0f 92       	push	r0
    7a8c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7a90:	0f 92       	push	r0
    7a92:	11 24       	eor	r1, r1
    7a94:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a98:	0f 92       	push	r0
    7a9a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7a9e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7aa2:	0f 92       	push	r0
    7aa4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7aa8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7aac:	0f 92       	push	r0
    7aae:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7ab2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7ab6:	0f 92       	push	r0
    7ab8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7abc:	2f 93       	push	r18
    7abe:	3f 93       	push	r19
    7ac0:	4f 93       	push	r20
    7ac2:	5f 93       	push	r21
    7ac4:	6f 93       	push	r22
    7ac6:	7f 93       	push	r23
    7ac8:	8f 93       	push	r24
    7aca:	9f 93       	push	r25
    7acc:	af 93       	push	r26
    7ace:	bf 93       	push	r27
    7ad0:	ef 93       	push	r30
    7ad2:	ff 93       	push	r31
    7ad4:	cf 93       	push	r28
    7ad6:	df 93       	push	r29
    7ad8:	cd b7       	in	r28, 0x3d	; 61
    7ada:	de b7       	in	r29, 0x3e	; 62
    7adc:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <tc_tcf0_err_callback>
    7ae0:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <tc_tcf0_err_callback+0x1>
    7ae4:	89 2b       	or	r24, r25
    7ae6:	31 f0       	breq	.+12     	; 0x7af4 <__vector_109+0x6c>
    7ae8:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <tc_tcf0_err_callback>
    7aec:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <tc_tcf0_err_callback+0x1>
    7af0:	fc 01       	movw	r30, r24
    7af2:	19 95       	eicall
    7af4:	00 00       	nop
    7af6:	df 91       	pop	r29
    7af8:	cf 91       	pop	r28
    7afa:	ff 91       	pop	r31
    7afc:	ef 91       	pop	r30
    7afe:	bf 91       	pop	r27
    7b00:	af 91       	pop	r26
    7b02:	9f 91       	pop	r25
    7b04:	8f 91       	pop	r24
    7b06:	7f 91       	pop	r23
    7b08:	6f 91       	pop	r22
    7b0a:	5f 91       	pop	r21
    7b0c:	4f 91       	pop	r20
    7b0e:	3f 91       	pop	r19
    7b10:	2f 91       	pop	r18
    7b12:	0f 90       	pop	r0
    7b14:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7b18:	0f 90       	pop	r0
    7b1a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7b1e:	0f 90       	pop	r0
    7b20:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7b24:	0f 90       	pop	r0
    7b26:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7b2a:	0f 90       	pop	r0
    7b2c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7b30:	0f 90       	pop	r0
    7b32:	1f 90       	pop	r1
    7b34:	18 95       	reti

00007b36 <__vector_110>:
    7b36:	1f 92       	push	r1
    7b38:	0f 92       	push	r0
    7b3a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7b3e:	0f 92       	push	r0
    7b40:	11 24       	eor	r1, r1
    7b42:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7b46:	0f 92       	push	r0
    7b48:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7b4c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7b50:	0f 92       	push	r0
    7b52:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7b56:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7b5a:	0f 92       	push	r0
    7b5c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7b60:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7b64:	0f 92       	push	r0
    7b66:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7b6a:	2f 93       	push	r18
    7b6c:	3f 93       	push	r19
    7b6e:	4f 93       	push	r20
    7b70:	5f 93       	push	r21
    7b72:	6f 93       	push	r22
    7b74:	7f 93       	push	r23
    7b76:	8f 93       	push	r24
    7b78:	9f 93       	push	r25
    7b7a:	af 93       	push	r26
    7b7c:	bf 93       	push	r27
    7b7e:	ef 93       	push	r30
    7b80:	ff 93       	push	r31
    7b82:	cf 93       	push	r28
    7b84:	df 93       	push	r29
    7b86:	cd b7       	in	r28, 0x3d	; 61
    7b88:	de b7       	in	r29, 0x3e	; 62
    7b8a:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <tc_tcf0_cca_callback>
    7b8e:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <tc_tcf0_cca_callback+0x1>
    7b92:	89 2b       	or	r24, r25
    7b94:	31 f0       	breq	.+12     	; 0x7ba2 <__vector_110+0x6c>
    7b96:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <tc_tcf0_cca_callback>
    7b9a:	90 91 e7 21 	lds	r25, 0x21E7	; 0x8021e7 <tc_tcf0_cca_callback+0x1>
    7b9e:	fc 01       	movw	r30, r24
    7ba0:	19 95       	eicall
    7ba2:	00 00       	nop
    7ba4:	df 91       	pop	r29
    7ba6:	cf 91       	pop	r28
    7ba8:	ff 91       	pop	r31
    7baa:	ef 91       	pop	r30
    7bac:	bf 91       	pop	r27
    7bae:	af 91       	pop	r26
    7bb0:	9f 91       	pop	r25
    7bb2:	8f 91       	pop	r24
    7bb4:	7f 91       	pop	r23
    7bb6:	6f 91       	pop	r22
    7bb8:	5f 91       	pop	r21
    7bba:	4f 91       	pop	r20
    7bbc:	3f 91       	pop	r19
    7bbe:	2f 91       	pop	r18
    7bc0:	0f 90       	pop	r0
    7bc2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7bc6:	0f 90       	pop	r0
    7bc8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7bcc:	0f 90       	pop	r0
    7bce:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7bd2:	0f 90       	pop	r0
    7bd4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7bd8:	0f 90       	pop	r0
    7bda:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7bde:	0f 90       	pop	r0
    7be0:	1f 90       	pop	r1
    7be2:	18 95       	reti

00007be4 <__vector_111>:
    7be4:	1f 92       	push	r1
    7be6:	0f 92       	push	r0
    7be8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7bec:	0f 92       	push	r0
    7bee:	11 24       	eor	r1, r1
    7bf0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7bf4:	0f 92       	push	r0
    7bf6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7bfa:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7bfe:	0f 92       	push	r0
    7c00:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7c04:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7c08:	0f 92       	push	r0
    7c0a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7c0e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7c12:	0f 92       	push	r0
    7c14:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7c18:	2f 93       	push	r18
    7c1a:	3f 93       	push	r19
    7c1c:	4f 93       	push	r20
    7c1e:	5f 93       	push	r21
    7c20:	6f 93       	push	r22
    7c22:	7f 93       	push	r23
    7c24:	8f 93       	push	r24
    7c26:	9f 93       	push	r25
    7c28:	af 93       	push	r26
    7c2a:	bf 93       	push	r27
    7c2c:	ef 93       	push	r30
    7c2e:	ff 93       	push	r31
    7c30:	cf 93       	push	r28
    7c32:	df 93       	push	r29
    7c34:	cd b7       	in	r28, 0x3d	; 61
    7c36:	de b7       	in	r29, 0x3e	; 62
    7c38:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <tc_tcf0_ccb_callback>
    7c3c:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <tc_tcf0_ccb_callback+0x1>
    7c40:	89 2b       	or	r24, r25
    7c42:	31 f0       	breq	.+12     	; 0x7c50 <__vector_111+0x6c>
    7c44:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <tc_tcf0_ccb_callback>
    7c48:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <tc_tcf0_ccb_callback+0x1>
    7c4c:	fc 01       	movw	r30, r24
    7c4e:	19 95       	eicall
    7c50:	00 00       	nop
    7c52:	df 91       	pop	r29
    7c54:	cf 91       	pop	r28
    7c56:	ff 91       	pop	r31
    7c58:	ef 91       	pop	r30
    7c5a:	bf 91       	pop	r27
    7c5c:	af 91       	pop	r26
    7c5e:	9f 91       	pop	r25
    7c60:	8f 91       	pop	r24
    7c62:	7f 91       	pop	r23
    7c64:	6f 91       	pop	r22
    7c66:	5f 91       	pop	r21
    7c68:	4f 91       	pop	r20
    7c6a:	3f 91       	pop	r19
    7c6c:	2f 91       	pop	r18
    7c6e:	0f 90       	pop	r0
    7c70:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7c74:	0f 90       	pop	r0
    7c76:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7c7a:	0f 90       	pop	r0
    7c7c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7c80:	0f 90       	pop	r0
    7c82:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7c86:	0f 90       	pop	r0
    7c88:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7c8c:	0f 90       	pop	r0
    7c8e:	1f 90       	pop	r1
    7c90:	18 95       	reti

00007c92 <__vector_112>:
    7c92:	1f 92       	push	r1
    7c94:	0f 92       	push	r0
    7c96:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7c9a:	0f 92       	push	r0
    7c9c:	11 24       	eor	r1, r1
    7c9e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7ca2:	0f 92       	push	r0
    7ca4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7ca8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7cac:	0f 92       	push	r0
    7cae:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7cb2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7cb6:	0f 92       	push	r0
    7cb8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7cbc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7cc0:	0f 92       	push	r0
    7cc2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7cc6:	2f 93       	push	r18
    7cc8:	3f 93       	push	r19
    7cca:	4f 93       	push	r20
    7ccc:	5f 93       	push	r21
    7cce:	6f 93       	push	r22
    7cd0:	7f 93       	push	r23
    7cd2:	8f 93       	push	r24
    7cd4:	9f 93       	push	r25
    7cd6:	af 93       	push	r26
    7cd8:	bf 93       	push	r27
    7cda:	ef 93       	push	r30
    7cdc:	ff 93       	push	r31
    7cde:	cf 93       	push	r28
    7ce0:	df 93       	push	r29
    7ce2:	cd b7       	in	r28, 0x3d	; 61
    7ce4:	de b7       	in	r29, 0x3e	; 62
    7ce6:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <tc_tcf0_ccc_callback>
    7cea:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <tc_tcf0_ccc_callback+0x1>
    7cee:	89 2b       	or	r24, r25
    7cf0:	31 f0       	breq	.+12     	; 0x7cfe <__vector_112+0x6c>
    7cf2:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <tc_tcf0_ccc_callback>
    7cf6:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <tc_tcf0_ccc_callback+0x1>
    7cfa:	fc 01       	movw	r30, r24
    7cfc:	19 95       	eicall
    7cfe:	00 00       	nop
    7d00:	df 91       	pop	r29
    7d02:	cf 91       	pop	r28
    7d04:	ff 91       	pop	r31
    7d06:	ef 91       	pop	r30
    7d08:	bf 91       	pop	r27
    7d0a:	af 91       	pop	r26
    7d0c:	9f 91       	pop	r25
    7d0e:	8f 91       	pop	r24
    7d10:	7f 91       	pop	r23
    7d12:	6f 91       	pop	r22
    7d14:	5f 91       	pop	r21
    7d16:	4f 91       	pop	r20
    7d18:	3f 91       	pop	r19
    7d1a:	2f 91       	pop	r18
    7d1c:	0f 90       	pop	r0
    7d1e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d22:	0f 90       	pop	r0
    7d24:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d28:	0f 90       	pop	r0
    7d2a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d2e:	0f 90       	pop	r0
    7d30:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d34:	0f 90       	pop	r0
    7d36:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7d3a:	0f 90       	pop	r0
    7d3c:	1f 90       	pop	r1
    7d3e:	18 95       	reti

00007d40 <__vector_113>:
    7d40:	1f 92       	push	r1
    7d42:	0f 92       	push	r0
    7d44:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7d48:	0f 92       	push	r0
    7d4a:	11 24       	eor	r1, r1
    7d4c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d50:	0f 92       	push	r0
    7d52:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7d56:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d5a:	0f 92       	push	r0
    7d5c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7d60:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d64:	0f 92       	push	r0
    7d66:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7d6a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d6e:	0f 92       	push	r0
    7d70:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7d74:	2f 93       	push	r18
    7d76:	3f 93       	push	r19
    7d78:	4f 93       	push	r20
    7d7a:	5f 93       	push	r21
    7d7c:	6f 93       	push	r22
    7d7e:	7f 93       	push	r23
    7d80:	8f 93       	push	r24
    7d82:	9f 93       	push	r25
    7d84:	af 93       	push	r26
    7d86:	bf 93       	push	r27
    7d88:	ef 93       	push	r30
    7d8a:	ff 93       	push	r31
    7d8c:	cf 93       	push	r28
    7d8e:	df 93       	push	r29
    7d90:	cd b7       	in	r28, 0x3d	; 61
    7d92:	de b7       	in	r29, 0x3e	; 62
    7d94:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <tc_tcf0_ccd_callback>
    7d98:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <tc_tcf0_ccd_callback+0x1>
    7d9c:	89 2b       	or	r24, r25
    7d9e:	31 f0       	breq	.+12     	; 0x7dac <__vector_113+0x6c>
    7da0:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <tc_tcf0_ccd_callback>
    7da4:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <tc_tcf0_ccd_callback+0x1>
    7da8:	fc 01       	movw	r30, r24
    7daa:	19 95       	eicall
    7dac:	00 00       	nop
    7dae:	df 91       	pop	r29
    7db0:	cf 91       	pop	r28
    7db2:	ff 91       	pop	r31
    7db4:	ef 91       	pop	r30
    7db6:	bf 91       	pop	r27
    7db8:	af 91       	pop	r26
    7dba:	9f 91       	pop	r25
    7dbc:	8f 91       	pop	r24
    7dbe:	7f 91       	pop	r23
    7dc0:	6f 91       	pop	r22
    7dc2:	5f 91       	pop	r21
    7dc4:	4f 91       	pop	r20
    7dc6:	3f 91       	pop	r19
    7dc8:	2f 91       	pop	r18
    7dca:	0f 90       	pop	r0
    7dcc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7dd0:	0f 90       	pop	r0
    7dd2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7dd6:	0f 90       	pop	r0
    7dd8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7ddc:	0f 90       	pop	r0
    7dde:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7de2:	0f 90       	pop	r0
    7de4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7de8:	0f 90       	pop	r0
    7dea:	1f 90       	pop	r1
    7dec:	18 95       	reti

00007dee <__vector_114>:
    7dee:	1f 92       	push	r1
    7df0:	0f 92       	push	r0
    7df2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7df6:	0f 92       	push	r0
    7df8:	11 24       	eor	r1, r1
    7dfa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7dfe:	0f 92       	push	r0
    7e00:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e04:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e08:	0f 92       	push	r0
    7e0a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e0e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e12:	0f 92       	push	r0
    7e14:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e18:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e1c:	0f 92       	push	r0
    7e1e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e22:	2f 93       	push	r18
    7e24:	3f 93       	push	r19
    7e26:	4f 93       	push	r20
    7e28:	5f 93       	push	r21
    7e2a:	6f 93       	push	r22
    7e2c:	7f 93       	push	r23
    7e2e:	8f 93       	push	r24
    7e30:	9f 93       	push	r25
    7e32:	af 93       	push	r26
    7e34:	bf 93       	push	r27
    7e36:	ef 93       	push	r30
    7e38:	ff 93       	push	r31
    7e3a:	cf 93       	push	r28
    7e3c:	df 93       	push	r29
    7e3e:	cd b7       	in	r28, 0x3d	; 61
    7e40:	de b7       	in	r29, 0x3e	; 62
    7e42:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <tc_tcf1_ovf_callback>
    7e46:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <tc_tcf1_ovf_callback+0x1>
    7e4a:	89 2b       	or	r24, r25
    7e4c:	31 f0       	breq	.+12     	; 0x7e5a <__vector_114+0x6c>
    7e4e:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <tc_tcf1_ovf_callback>
    7e52:	90 91 ef 21 	lds	r25, 0x21EF	; 0x8021ef <tc_tcf1_ovf_callback+0x1>
    7e56:	fc 01       	movw	r30, r24
    7e58:	19 95       	eicall
    7e5a:	00 00       	nop
    7e5c:	df 91       	pop	r29
    7e5e:	cf 91       	pop	r28
    7e60:	ff 91       	pop	r31
    7e62:	ef 91       	pop	r30
    7e64:	bf 91       	pop	r27
    7e66:	af 91       	pop	r26
    7e68:	9f 91       	pop	r25
    7e6a:	8f 91       	pop	r24
    7e6c:	7f 91       	pop	r23
    7e6e:	6f 91       	pop	r22
    7e70:	5f 91       	pop	r21
    7e72:	4f 91       	pop	r20
    7e74:	3f 91       	pop	r19
    7e76:	2f 91       	pop	r18
    7e78:	0f 90       	pop	r0
    7e7a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7e7e:	0f 90       	pop	r0
    7e80:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7e84:	0f 90       	pop	r0
    7e86:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7e8a:	0f 90       	pop	r0
    7e8c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7e90:	0f 90       	pop	r0
    7e92:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7e96:	0f 90       	pop	r0
    7e98:	1f 90       	pop	r1
    7e9a:	18 95       	reti

00007e9c <__vector_115>:
    7e9c:	1f 92       	push	r1
    7e9e:	0f 92       	push	r0
    7ea0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7ea4:	0f 92       	push	r0
    7ea6:	11 24       	eor	r1, r1
    7ea8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7eac:	0f 92       	push	r0
    7eae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7eb2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7eb6:	0f 92       	push	r0
    7eb8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7ebc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7ec0:	0f 92       	push	r0
    7ec2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7ec6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7eca:	0f 92       	push	r0
    7ecc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7ed0:	2f 93       	push	r18
    7ed2:	3f 93       	push	r19
    7ed4:	4f 93       	push	r20
    7ed6:	5f 93       	push	r21
    7ed8:	6f 93       	push	r22
    7eda:	7f 93       	push	r23
    7edc:	8f 93       	push	r24
    7ede:	9f 93       	push	r25
    7ee0:	af 93       	push	r26
    7ee2:	bf 93       	push	r27
    7ee4:	ef 93       	push	r30
    7ee6:	ff 93       	push	r31
    7ee8:	cf 93       	push	r28
    7eea:	df 93       	push	r29
    7eec:	cd b7       	in	r28, 0x3d	; 61
    7eee:	de b7       	in	r29, 0x3e	; 62
    7ef0:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <tc_tcf1_err_callback>
    7ef4:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <tc_tcf1_err_callback+0x1>
    7ef8:	89 2b       	or	r24, r25
    7efa:	31 f0       	breq	.+12     	; 0x7f08 <__vector_115+0x6c>
    7efc:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <tc_tcf1_err_callback>
    7f00:	90 91 f1 21 	lds	r25, 0x21F1	; 0x8021f1 <tc_tcf1_err_callback+0x1>
    7f04:	fc 01       	movw	r30, r24
    7f06:	19 95       	eicall
    7f08:	00 00       	nop
    7f0a:	df 91       	pop	r29
    7f0c:	cf 91       	pop	r28
    7f0e:	ff 91       	pop	r31
    7f10:	ef 91       	pop	r30
    7f12:	bf 91       	pop	r27
    7f14:	af 91       	pop	r26
    7f16:	9f 91       	pop	r25
    7f18:	8f 91       	pop	r24
    7f1a:	7f 91       	pop	r23
    7f1c:	6f 91       	pop	r22
    7f1e:	5f 91       	pop	r21
    7f20:	4f 91       	pop	r20
    7f22:	3f 91       	pop	r19
    7f24:	2f 91       	pop	r18
    7f26:	0f 90       	pop	r0
    7f28:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7f2c:	0f 90       	pop	r0
    7f2e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7f32:	0f 90       	pop	r0
    7f34:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7f38:	0f 90       	pop	r0
    7f3a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7f3e:	0f 90       	pop	r0
    7f40:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7f44:	0f 90       	pop	r0
    7f46:	1f 90       	pop	r1
    7f48:	18 95       	reti

00007f4a <__vector_116>:
    7f4a:	1f 92       	push	r1
    7f4c:	0f 92       	push	r0
    7f4e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7f52:	0f 92       	push	r0
    7f54:	11 24       	eor	r1, r1
    7f56:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7f5a:	0f 92       	push	r0
    7f5c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7f60:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7f64:	0f 92       	push	r0
    7f66:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7f6a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7f6e:	0f 92       	push	r0
    7f70:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7f74:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7f78:	0f 92       	push	r0
    7f7a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7f7e:	2f 93       	push	r18
    7f80:	3f 93       	push	r19
    7f82:	4f 93       	push	r20
    7f84:	5f 93       	push	r21
    7f86:	6f 93       	push	r22
    7f88:	7f 93       	push	r23
    7f8a:	8f 93       	push	r24
    7f8c:	9f 93       	push	r25
    7f8e:	af 93       	push	r26
    7f90:	bf 93       	push	r27
    7f92:	ef 93       	push	r30
    7f94:	ff 93       	push	r31
    7f96:	cf 93       	push	r28
    7f98:	df 93       	push	r29
    7f9a:	cd b7       	in	r28, 0x3d	; 61
    7f9c:	de b7       	in	r29, 0x3e	; 62
    7f9e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <tc_tcf1_cca_callback>
    7fa2:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <tc_tcf1_cca_callback+0x1>
    7fa6:	89 2b       	or	r24, r25
    7fa8:	31 f0       	breq	.+12     	; 0x7fb6 <__vector_116+0x6c>
    7faa:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <tc_tcf1_cca_callback>
    7fae:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <tc_tcf1_cca_callback+0x1>
    7fb2:	fc 01       	movw	r30, r24
    7fb4:	19 95       	eicall
    7fb6:	00 00       	nop
    7fb8:	df 91       	pop	r29
    7fba:	cf 91       	pop	r28
    7fbc:	ff 91       	pop	r31
    7fbe:	ef 91       	pop	r30
    7fc0:	bf 91       	pop	r27
    7fc2:	af 91       	pop	r26
    7fc4:	9f 91       	pop	r25
    7fc6:	8f 91       	pop	r24
    7fc8:	7f 91       	pop	r23
    7fca:	6f 91       	pop	r22
    7fcc:	5f 91       	pop	r21
    7fce:	4f 91       	pop	r20
    7fd0:	3f 91       	pop	r19
    7fd2:	2f 91       	pop	r18
    7fd4:	0f 90       	pop	r0
    7fd6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    7fda:	0f 90       	pop	r0
    7fdc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    7fe0:	0f 90       	pop	r0
    7fe2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    7fe6:	0f 90       	pop	r0
    7fe8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    7fec:	0f 90       	pop	r0
    7fee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    7ff2:	0f 90       	pop	r0
    7ff4:	1f 90       	pop	r1
    7ff6:	18 95       	reti

00007ff8 <__vector_117>:
    7ff8:	1f 92       	push	r1
    7ffa:	0f 92       	push	r0
    7ffc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    8000:	0f 92       	push	r0
    8002:	11 24       	eor	r1, r1
    8004:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8008:	0f 92       	push	r0
    800a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    800e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8012:	0f 92       	push	r0
    8014:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8018:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    801c:	0f 92       	push	r0
    801e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8022:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8026:	0f 92       	push	r0
    8028:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    802c:	2f 93       	push	r18
    802e:	3f 93       	push	r19
    8030:	4f 93       	push	r20
    8032:	5f 93       	push	r21
    8034:	6f 93       	push	r22
    8036:	7f 93       	push	r23
    8038:	8f 93       	push	r24
    803a:	9f 93       	push	r25
    803c:	af 93       	push	r26
    803e:	bf 93       	push	r27
    8040:	ef 93       	push	r30
    8042:	ff 93       	push	r31
    8044:	cf 93       	push	r28
    8046:	df 93       	push	r29
    8048:	cd b7       	in	r28, 0x3d	; 61
    804a:	de b7       	in	r29, 0x3e	; 62
    804c:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <tc_tcf1_ccb_callback>
    8050:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <tc_tcf1_ccb_callback+0x1>
    8054:	89 2b       	or	r24, r25
    8056:	31 f0       	breq	.+12     	; 0x8064 <__vector_117+0x6c>
    8058:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <tc_tcf1_ccb_callback>
    805c:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <tc_tcf1_ccb_callback+0x1>
    8060:	fc 01       	movw	r30, r24
    8062:	19 95       	eicall
    8064:	00 00       	nop
    8066:	df 91       	pop	r29
    8068:	cf 91       	pop	r28
    806a:	ff 91       	pop	r31
    806c:	ef 91       	pop	r30
    806e:	bf 91       	pop	r27
    8070:	af 91       	pop	r26
    8072:	9f 91       	pop	r25
    8074:	8f 91       	pop	r24
    8076:	7f 91       	pop	r23
    8078:	6f 91       	pop	r22
    807a:	5f 91       	pop	r21
    807c:	4f 91       	pop	r20
    807e:	3f 91       	pop	r19
    8080:	2f 91       	pop	r18
    8082:	0f 90       	pop	r0
    8084:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8088:	0f 90       	pop	r0
    808a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    808e:	0f 90       	pop	r0
    8090:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8094:	0f 90       	pop	r0
    8096:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    809a:	0f 90       	pop	r0
    809c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    80a0:	0f 90       	pop	r0
    80a2:	1f 90       	pop	r1
    80a4:	18 95       	reti

000080a6 <tc_enable>:
    80a6:	cf 93       	push	r28
    80a8:	df 93       	push	r29
    80aa:	00 d0       	rcall	.+0      	; 0x80ac <tc_enable+0x6>
    80ac:	cd b7       	in	r28, 0x3d	; 61
    80ae:	de b7       	in	r29, 0x3e	; 62
    80b0:	8a 83       	std	Y+2, r24	; 0x02
    80b2:	9b 83       	std	Y+3, r25	; 0x03
    80b4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <cpu_irq_save>
    80b8:	89 83       	std	Y+1, r24	; 0x01
    80ba:	8a 81       	ldd	r24, Y+2	; 0x02
    80bc:	9b 81       	ldd	r25, Y+3	; 0x03
    80be:	81 15       	cp	r24, r1
    80c0:	98 40       	sbci	r25, 0x08	; 8
    80c2:	49 f4       	brne	.+18     	; 0x80d6 <tc_enable+0x30>
    80c4:	61 e0       	ldi	r22, 0x01	; 1
    80c6:	83 e0       	ldi	r24, 0x03	; 3
    80c8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    80cc:	64 e0       	ldi	r22, 0x04	; 4
    80ce:	83 e0       	ldi	r24, 0x03	; 3
    80d0:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    80d4:	66 c0       	rjmp	.+204    	; 0x81a2 <tc_enable+0xfc>
    80d6:	8a 81       	ldd	r24, Y+2	; 0x02
    80d8:	9b 81       	ldd	r25, Y+3	; 0x03
    80da:	80 34       	cpi	r24, 0x40	; 64
    80dc:	98 40       	sbci	r25, 0x08	; 8
    80de:	49 f4       	brne	.+18     	; 0x80f2 <tc_enable+0x4c>
    80e0:	62 e0       	ldi	r22, 0x02	; 2
    80e2:	83 e0       	ldi	r24, 0x03	; 3
    80e4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    80e8:	64 e0       	ldi	r22, 0x04	; 4
    80ea:	83 e0       	ldi	r24, 0x03	; 3
    80ec:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    80f0:	58 c0       	rjmp	.+176    	; 0x81a2 <tc_enable+0xfc>
    80f2:	8a 81       	ldd	r24, Y+2	; 0x02
    80f4:	9b 81       	ldd	r25, Y+3	; 0x03
    80f6:	81 15       	cp	r24, r1
    80f8:	99 40       	sbci	r25, 0x09	; 9
    80fa:	49 f4       	brne	.+18     	; 0x810e <tc_enable+0x68>
    80fc:	61 e0       	ldi	r22, 0x01	; 1
    80fe:	84 e0       	ldi	r24, 0x04	; 4
    8100:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8104:	64 e0       	ldi	r22, 0x04	; 4
    8106:	84 e0       	ldi	r24, 0x04	; 4
    8108:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    810c:	4a c0       	rjmp	.+148    	; 0x81a2 <tc_enable+0xfc>
    810e:	8a 81       	ldd	r24, Y+2	; 0x02
    8110:	9b 81       	ldd	r25, Y+3	; 0x03
    8112:	80 34       	cpi	r24, 0x40	; 64
    8114:	99 40       	sbci	r25, 0x09	; 9
    8116:	49 f4       	brne	.+18     	; 0x812a <tc_enable+0x84>
    8118:	62 e0       	ldi	r22, 0x02	; 2
    811a:	84 e0       	ldi	r24, 0x04	; 4
    811c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8120:	64 e0       	ldi	r22, 0x04	; 4
    8122:	84 e0       	ldi	r24, 0x04	; 4
    8124:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8128:	3c c0       	rjmp	.+120    	; 0x81a2 <tc_enable+0xfc>
    812a:	8a 81       	ldd	r24, Y+2	; 0x02
    812c:	9b 81       	ldd	r25, Y+3	; 0x03
    812e:	81 15       	cp	r24, r1
    8130:	9a 40       	sbci	r25, 0x0A	; 10
    8132:	49 f4       	brne	.+18     	; 0x8146 <tc_enable+0xa0>
    8134:	61 e0       	ldi	r22, 0x01	; 1
    8136:	85 e0       	ldi	r24, 0x05	; 5
    8138:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    813c:	64 e0       	ldi	r22, 0x04	; 4
    813e:	85 e0       	ldi	r24, 0x05	; 5
    8140:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8144:	2e c0       	rjmp	.+92     	; 0x81a2 <tc_enable+0xfc>
    8146:	8a 81       	ldd	r24, Y+2	; 0x02
    8148:	9b 81       	ldd	r25, Y+3	; 0x03
    814a:	80 34       	cpi	r24, 0x40	; 64
    814c:	9a 40       	sbci	r25, 0x0A	; 10
    814e:	49 f4       	brne	.+18     	; 0x8162 <tc_enable+0xbc>
    8150:	62 e0       	ldi	r22, 0x02	; 2
    8152:	85 e0       	ldi	r24, 0x05	; 5
    8154:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8158:	64 e0       	ldi	r22, 0x04	; 4
    815a:	85 e0       	ldi	r24, 0x05	; 5
    815c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8160:	20 c0       	rjmp	.+64     	; 0x81a2 <tc_enable+0xfc>
    8162:	8a 81       	ldd	r24, Y+2	; 0x02
    8164:	9b 81       	ldd	r25, Y+3	; 0x03
    8166:	81 15       	cp	r24, r1
    8168:	9b 40       	sbci	r25, 0x0B	; 11
    816a:	49 f4       	brne	.+18     	; 0x817e <tc_enable+0xd8>
    816c:	61 e0       	ldi	r22, 0x01	; 1
    816e:	86 e0       	ldi	r24, 0x06	; 6
    8170:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8174:	64 e0       	ldi	r22, 0x04	; 4
    8176:	86 e0       	ldi	r24, 0x06	; 6
    8178:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    817c:	12 c0       	rjmp	.+36     	; 0x81a2 <tc_enable+0xfc>
    817e:	8a 81       	ldd	r24, Y+2	; 0x02
    8180:	9b 81       	ldd	r25, Y+3	; 0x03
    8182:	80 34       	cpi	r24, 0x40	; 64
    8184:	9b 40       	sbci	r25, 0x0B	; 11
    8186:	49 f4       	brne	.+18     	; 0x819a <tc_enable+0xf4>
    8188:	62 e0       	ldi	r22, 0x02	; 2
    818a:	86 e0       	ldi	r24, 0x06	; 6
    818c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8190:	64 e0       	ldi	r22, 0x04	; 4
    8192:	86 e0       	ldi	r24, 0x06	; 6
    8194:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8198:	04 c0       	rjmp	.+8      	; 0x81a2 <tc_enable+0xfc>
    819a:	89 81       	ldd	r24, Y+1	; 0x01
    819c:	0e 94 83 32 	call	0x6506	; 0x6506 <cpu_irq_restore>
    81a0:	06 c0       	rjmp	.+12     	; 0x81ae <tc_enable+0x108>
    81a2:	81 e0       	ldi	r24, 0x01	; 1
    81a4:	0e 94 93 32 	call	0x6526	; 0x6526 <sleepmgr_lock_mode>
    81a8:	89 81       	ldd	r24, Y+1	; 0x01
    81aa:	0e 94 83 32 	call	0x6506	; 0x6506 <cpu_irq_restore>
    81ae:	23 96       	adiw	r28, 0x03	; 3
    81b0:	cd bf       	out	0x3d, r28	; 61
    81b2:	de bf       	out	0x3e, r29	; 62
    81b4:	df 91       	pop	r29
    81b6:	cf 91       	pop	r28
    81b8:	08 95       	ret

000081ba <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
    81ba:	cf 93       	push	r28
    81bc:	df 93       	push	r29
    81be:	00 d0       	rcall	.+0      	; 0x81c0 <tc_set_overflow_interrupt_callback+0x6>
    81c0:	1f 92       	push	r1
    81c2:	cd b7       	in	r28, 0x3d	; 61
    81c4:	de b7       	in	r29, 0x3e	; 62
    81c6:	89 83       	std	Y+1, r24	; 0x01
    81c8:	9a 83       	std	Y+2, r25	; 0x02
    81ca:	6b 83       	std	Y+3, r22	; 0x03
    81cc:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    81ce:	89 81       	ldd	r24, Y+1	; 0x01
    81d0:	9a 81       	ldd	r25, Y+2	; 0x02
    81d2:	81 15       	cp	r24, r1
    81d4:	98 40       	sbci	r25, 0x08	; 8
    81d6:	39 f4       	brne	.+14     	; 0x81e6 <tc_set_overflow_interrupt_callback+0x2c>
		tc_tcc0_ovf_callback = callback;
    81d8:	8b 81       	ldd	r24, Y+3	; 0x03
    81da:	9c 81       	ldd	r25, Y+4	; 0x04
    81dc:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <tc_tcc0_ovf_callback>
    81e0:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <tc_tcc0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    81e4:	53 c0       	rjmp	.+166    	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
		tc_tcc0_ovf_callback = callback;
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    81e6:	89 81       	ldd	r24, Y+1	; 0x01
    81e8:	9a 81       	ldd	r25, Y+2	; 0x02
    81ea:	80 34       	cpi	r24, 0x40	; 64
    81ec:	98 40       	sbci	r25, 0x08	; 8
    81ee:	39 f4       	brne	.+14     	; 0x81fe <tc_set_overflow_interrupt_callback+0x44>
		tc_tcc1_ovf_callback = callback;
    81f0:	8b 81       	ldd	r24, Y+3	; 0x03
    81f2:	9c 81       	ldd	r25, Y+4	; 0x04
    81f4:	80 93 b2 21 	sts	0x21B2, r24	; 0x8021b2 <tc_tcc1_ovf_callback>
    81f8:	90 93 b3 21 	sts	0x21B3, r25	; 0x8021b3 <tc_tcc1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    81fc:	47 c0       	rjmp	.+142    	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		tc_tcc1_ovf_callback = callback;
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    81fe:	89 81       	ldd	r24, Y+1	; 0x01
    8200:	9a 81       	ldd	r25, Y+2	; 0x02
    8202:	81 15       	cp	r24, r1
    8204:	99 40       	sbci	r25, 0x09	; 9
    8206:	39 f4       	brne	.+14     	; 0x8216 <tc_set_overflow_interrupt_callback+0x5c>
		tc_tcd0_ovf_callback = callback;
    8208:	8b 81       	ldd	r24, Y+3	; 0x03
    820a:	9c 81       	ldd	r25, Y+4	; 0x04
    820c:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <tc_tcd0_ovf_callback>
    8210:	90 93 bb 21 	sts	0x21BB, r25	; 0x8021bb <tc_tcd0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    8214:	3b c0       	rjmp	.+118    	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
		tc_tcd0_ovf_callback = callback;
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    8216:	89 81       	ldd	r24, Y+1	; 0x01
    8218:	9a 81       	ldd	r25, Y+2	; 0x02
    821a:	80 34       	cpi	r24, 0x40	; 64
    821c:	99 40       	sbci	r25, 0x09	; 9
    821e:	39 f4       	brne	.+14     	; 0x822e <tc_set_overflow_interrupt_callback+0x74>
		tc_tcd1_ovf_callback = callback;
    8220:	8b 81       	ldd	r24, Y+3	; 0x03
    8222:	9c 81       	ldd	r25, Y+4	; 0x04
    8224:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <tc_tcd1_ovf_callback>
    8228:	90 93 c7 21 	sts	0x21C7, r25	; 0x8021c7 <tc_tcd1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    822c:	2f c0       	rjmp	.+94     	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    822e:	89 81       	ldd	r24, Y+1	; 0x01
    8230:	9a 81       	ldd	r25, Y+2	; 0x02
    8232:	81 15       	cp	r24, r1
    8234:	9a 40       	sbci	r25, 0x0A	; 10
    8236:	39 f4       	brne	.+14     	; 0x8246 <tc_set_overflow_interrupt_callback+0x8c>
		tc_tce0_ovf_callback = callback;
    8238:	8b 81       	ldd	r24, Y+3	; 0x03
    823a:	9c 81       	ldd	r25, Y+4	; 0x04
    823c:	80 93 ce 21 	sts	0x21CE, r24	; 0x8021ce <tc_tce0_ovf_callback>
    8240:	90 93 cf 21 	sts	0x21CF, r25	; 0x8021cf <tc_tce0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    8244:	23 c0       	rjmp	.+70     	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_ovf_callback = callback;
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    8246:	89 81       	ldd	r24, Y+1	; 0x01
    8248:	9a 81       	ldd	r25, Y+2	; 0x02
    824a:	80 34       	cpi	r24, 0x40	; 64
    824c:	9a 40       	sbci	r25, 0x0A	; 10
    824e:	39 f4       	brne	.+14     	; 0x825e <tc_set_overflow_interrupt_callback+0xa4>
		tc_tce1_ovf_callback = callback;
    8250:	8b 81       	ldd	r24, Y+3	; 0x03
    8252:	9c 81       	ldd	r25, Y+4	; 0x04
    8254:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <tc_tce1_ovf_callback>
    8258:	90 93 db 21 	sts	0x21DB, r25	; 0x8021db <tc_tce1_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    825c:	17 c0       	rjmp	.+46     	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    825e:	89 81       	ldd	r24, Y+1	; 0x01
    8260:	9a 81       	ldd	r25, Y+2	; 0x02
    8262:	81 15       	cp	r24, r1
    8264:	9b 40       	sbci	r25, 0x0B	; 11
    8266:	39 f4       	brne	.+14     	; 0x8276 <tc_set_overflow_interrupt_callback+0xbc>
		tc_tcf0_ovf_callback = callback;
    8268:	8b 81       	ldd	r24, Y+3	; 0x03
    826a:	9c 81       	ldd	r25, Y+4	; 0x04
    826c:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <tc_tcf0_ovf_callback>
    8270:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <tc_tcf0_ovf_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    8274:	0b c0       	rjmp	.+22     	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_ovf_callback = callback;
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    8276:	89 81       	ldd	r24, Y+1	; 0x01
    8278:	9a 81       	ldd	r25, Y+2	; 0x02
    827a:	80 34       	cpi	r24, 0x40	; 64
    827c:	9b 40       	sbci	r25, 0x0B	; 11
    827e:	31 f4       	brne	.+12     	; 0x828c <tc_set_overflow_interrupt_callback+0xd2>
		tc_tcf1_ovf_callback = callback;
    8280:	8b 81       	ldd	r24, Y+3	; 0x03
    8282:	9c 81       	ldd	r25, Y+4	; 0x04
    8284:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <tc_tcf1_ovf_callback>
    8288:	90 93 ef 21 	sts	0x21EF, r25	; 0x8021ef <tc_tcf1_ovf_callback+0x1>
	} else
#endif
	{}
}
    828c:	00 00       	nop
    828e:	24 96       	adiw	r28, 0x04	; 4
    8290:	cd bf       	out	0x3d, r28	; 61
    8292:	de bf       	out	0x3e, r29	; 62
    8294:	df 91       	pop	r29
    8296:	cf 91       	pop	r28
    8298:	08 95       	ret

0000829a <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    829a:	1f 92       	push	r1
    829c:	0f 92       	push	r0
    829e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    82a2:	0f 92       	push	r0
    82a4:	11 24       	eor	r1, r1
    82a6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    82aa:	0f 92       	push	r0
    82ac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    82b0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    82b4:	0f 92       	push	r0
    82b6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    82ba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    82be:	0f 92       	push	r0
    82c0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    82c4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    82c8:	0f 92       	push	r0
    82ca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    82ce:	2f 93       	push	r18
    82d0:	3f 93       	push	r19
    82d2:	4f 93       	push	r20
    82d4:	5f 93       	push	r21
    82d6:	6f 93       	push	r22
    82d8:	7f 93       	push	r23
    82da:	8f 93       	push	r24
    82dc:	9f 93       	push	r25
    82de:	af 93       	push	r26
    82e0:	bf 93       	push	r27
    82e2:	ef 93       	push	r30
    82e4:	ff 93       	push	r31
    82e6:	cf 93       	push	r28
    82e8:	df 93       	push	r29
    82ea:	cd b7       	in	r28, 0x3d	; 61
    82ec:	de b7       	in	r29, 0x3e	; 62
    82ee:	e9 d1       	rcall	.+978    	; 0x86c2 <twim_interrupt_handler>
    82f0:	00 00       	nop
    82f2:	df 91       	pop	r29
    82f4:	cf 91       	pop	r28
    82f6:	ff 91       	pop	r31
    82f8:	ef 91       	pop	r30
    82fa:	bf 91       	pop	r27
    82fc:	af 91       	pop	r26
    82fe:	9f 91       	pop	r25
    8300:	8f 91       	pop	r24
    8302:	7f 91       	pop	r23
    8304:	6f 91       	pop	r22
    8306:	5f 91       	pop	r21
    8308:	4f 91       	pop	r20
    830a:	3f 91       	pop	r19
    830c:	2f 91       	pop	r18
    830e:	0f 90       	pop	r0
    8310:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8314:	0f 90       	pop	r0
    8316:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    831a:	0f 90       	pop	r0
    831c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8320:	0f 90       	pop	r0
    8322:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8326:	0f 90       	pop	r0
    8328:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    832c:	0f 90       	pop	r0
    832e:	1f 90       	pop	r1
    8330:	18 95       	reti

00008332 <__vector_76>:
    8332:	1f 92       	push	r1
    8334:	0f 92       	push	r0
    8336:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    833a:	0f 92       	push	r0
    833c:	11 24       	eor	r1, r1
    833e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8342:	0f 92       	push	r0
    8344:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8348:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    834c:	0f 92       	push	r0
    834e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8352:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8356:	0f 92       	push	r0
    8358:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    835c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8360:	0f 92       	push	r0
    8362:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8366:	2f 93       	push	r18
    8368:	3f 93       	push	r19
    836a:	4f 93       	push	r20
    836c:	5f 93       	push	r21
    836e:	6f 93       	push	r22
    8370:	7f 93       	push	r23
    8372:	8f 93       	push	r24
    8374:	9f 93       	push	r25
    8376:	af 93       	push	r26
    8378:	bf 93       	push	r27
    837a:	ef 93       	push	r30
    837c:	ff 93       	push	r31
    837e:	cf 93       	push	r28
    8380:	df 93       	push	r29
    8382:	cd b7       	in	r28, 0x3d	; 61
    8384:	de b7       	in	r29, 0x3e	; 62
    8386:	9d d1       	rcall	.+826    	; 0x86c2 <twim_interrupt_handler>
    8388:	00 00       	nop
    838a:	df 91       	pop	r29
    838c:	cf 91       	pop	r28
    838e:	ff 91       	pop	r31
    8390:	ef 91       	pop	r30
    8392:	bf 91       	pop	r27
    8394:	af 91       	pop	r26
    8396:	9f 91       	pop	r25
    8398:	8f 91       	pop	r24
    839a:	7f 91       	pop	r23
    839c:	6f 91       	pop	r22
    839e:	5f 91       	pop	r21
    83a0:	4f 91       	pop	r20
    83a2:	3f 91       	pop	r19
    83a4:	2f 91       	pop	r18
    83a6:	0f 90       	pop	r0
    83a8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    83ac:	0f 90       	pop	r0
    83ae:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    83b2:	0f 90       	pop	r0
    83b4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    83b8:	0f 90       	pop	r0
    83ba:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    83be:	0f 90       	pop	r0
    83c0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    83c4:	0f 90       	pop	r0
    83c6:	1f 90       	pop	r1
    83c8:	18 95       	reti

000083ca <__vector_46>:
    83ca:	1f 92       	push	r1
    83cc:	0f 92       	push	r0
    83ce:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    83d2:	0f 92       	push	r0
    83d4:	11 24       	eor	r1, r1
    83d6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    83da:	0f 92       	push	r0
    83dc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    83e0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    83e4:	0f 92       	push	r0
    83e6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    83ea:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    83ee:	0f 92       	push	r0
    83f0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    83f4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    83f8:	0f 92       	push	r0
    83fa:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    83fe:	2f 93       	push	r18
    8400:	3f 93       	push	r19
    8402:	4f 93       	push	r20
    8404:	5f 93       	push	r21
    8406:	6f 93       	push	r22
    8408:	7f 93       	push	r23
    840a:	8f 93       	push	r24
    840c:	9f 93       	push	r25
    840e:	af 93       	push	r26
    8410:	bf 93       	push	r27
    8412:	ef 93       	push	r30
    8414:	ff 93       	push	r31
    8416:	cf 93       	push	r28
    8418:	df 93       	push	r29
    841a:	cd b7       	in	r28, 0x3d	; 61
    841c:	de b7       	in	r29, 0x3e	; 62
    841e:	51 d1       	rcall	.+674    	; 0x86c2 <twim_interrupt_handler>
    8420:	00 00       	nop
    8422:	df 91       	pop	r29
    8424:	cf 91       	pop	r28
    8426:	ff 91       	pop	r31
    8428:	ef 91       	pop	r30
    842a:	bf 91       	pop	r27
    842c:	af 91       	pop	r26
    842e:	9f 91       	pop	r25
    8430:	8f 91       	pop	r24
    8432:	7f 91       	pop	r23
    8434:	6f 91       	pop	r22
    8436:	5f 91       	pop	r21
    8438:	4f 91       	pop	r20
    843a:	3f 91       	pop	r19
    843c:	2f 91       	pop	r18
    843e:	0f 90       	pop	r0
    8440:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8444:	0f 90       	pop	r0
    8446:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    844a:	0f 90       	pop	r0
    844c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8450:	0f 90       	pop	r0
    8452:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8456:	0f 90       	pop	r0
    8458:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    845c:	0f 90       	pop	r0
    845e:	1f 90       	pop	r1
    8460:	18 95       	reti

00008462 <__vector_107>:
    8462:	1f 92       	push	r1
    8464:	0f 92       	push	r0
    8466:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    846a:	0f 92       	push	r0
    846c:	11 24       	eor	r1, r1
    846e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8472:	0f 92       	push	r0
    8474:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    8478:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    847c:	0f 92       	push	r0
    847e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    8482:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    8486:	0f 92       	push	r0
    8488:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    848c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8490:	0f 92       	push	r0
    8492:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    8496:	2f 93       	push	r18
    8498:	3f 93       	push	r19
    849a:	4f 93       	push	r20
    849c:	5f 93       	push	r21
    849e:	6f 93       	push	r22
    84a0:	7f 93       	push	r23
    84a2:	8f 93       	push	r24
    84a4:	9f 93       	push	r25
    84a6:	af 93       	push	r26
    84a8:	bf 93       	push	r27
    84aa:	ef 93       	push	r30
    84ac:	ff 93       	push	r31
    84ae:	cf 93       	push	r28
    84b0:	df 93       	push	r29
    84b2:	cd b7       	in	r28, 0x3d	; 61
    84b4:	de b7       	in	r29, 0x3e	; 62
    84b6:	05 d1       	rcall	.+522    	; 0x86c2 <twim_interrupt_handler>
    84b8:	00 00       	nop
    84ba:	df 91       	pop	r29
    84bc:	cf 91       	pop	r28
    84be:	ff 91       	pop	r31
    84c0:	ef 91       	pop	r30
    84c2:	bf 91       	pop	r27
    84c4:	af 91       	pop	r26
    84c6:	9f 91       	pop	r25
    84c8:	8f 91       	pop	r24
    84ca:	7f 91       	pop	r23
    84cc:	6f 91       	pop	r22
    84ce:	5f 91       	pop	r21
    84d0:	4f 91       	pop	r20
    84d2:	3f 91       	pop	r19
    84d4:	2f 91       	pop	r18
    84d6:	0f 90       	pop	r0
    84d8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    84dc:	0f 90       	pop	r0
    84de:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    84e2:	0f 90       	pop	r0
    84e4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    84e8:	0f 90       	pop	r0
    84ea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    84ee:	0f 90       	pop	r0
    84f0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    84f4:	0f 90       	pop	r0
    84f6:	1f 90       	pop	r1
    84f8:	18 95       	reti

000084fa <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    84fa:	cf 93       	push	r28
    84fc:	df 93       	push	r29
    84fe:	cd b7       	in	r28, 0x3d	; 61
    8500:	de b7       	in	r29, 0x3e	; 62
    8502:	28 97       	sbiw	r28, 0x08	; 8
    8504:	cd bf       	out	0x3d, r28	; 61
    8506:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    8508:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <transfer>
    850c:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <transfer+0x1>
    8510:	89 83       	std	Y+1, r24	; 0x01
    8512:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    8514:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <transfer+0x2>
    8518:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <transfer+0x3>
    851c:	8b 83       	std	Y+3, r24	; 0x03
    851e:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    8520:	20 91 fa 21 	lds	r18, 0x21FA	; 0x8021fa <transfer+0x4>
    8524:	30 91 fb 21 	lds	r19, 0x21FB	; 0x8021fb <transfer+0x5>
    8528:	8b 81       	ldd	r24, Y+3	; 0x03
    852a:	9c 81       	ldd	r25, Y+4	; 0x04
    852c:	fc 01       	movw	r30, r24
    852e:	84 81       	ldd	r24, Z+4	; 0x04
    8530:	95 81       	ldd	r25, Z+5	; 0x05
    8532:	28 17       	cp	r18, r24
    8534:	39 07       	cpc	r19, r25
    8536:	e4 f4       	brge	.+56     	; 0x8570 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    8538:	8b 81       	ldd	r24, Y+3	; 0x03
    853a:	9c 81       	ldd	r25, Y+4	; 0x04
    853c:	01 96       	adiw	r24, 0x01	; 1
    853e:	8d 83       	std	Y+5, r24	; 0x05
    8540:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    8542:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <transfer+0x4>
    8546:	90 91 fb 21 	lds	r25, 0x21FB	; 0x8021fb <transfer+0x5>
    854a:	9c 01       	movw	r18, r24
    854c:	2f 5f       	subi	r18, 0xFF	; 255
    854e:	3f 4f       	sbci	r19, 0xFF	; 255
    8550:	20 93 fa 21 	sts	0x21FA, r18	; 0x8021fa <transfer+0x4>
    8554:	30 93 fb 21 	sts	0x21FB, r19	; 0x8021fb <transfer+0x5>
    8558:	9c 01       	movw	r18, r24
    855a:	8d 81       	ldd	r24, Y+5	; 0x05
    855c:	9e 81       	ldd	r25, Y+6	; 0x06
    855e:	82 0f       	add	r24, r18
    8560:	93 1f       	adc	r25, r19
    8562:	fc 01       	movw	r30, r24
    8564:	20 81       	ld	r18, Z
    8566:	89 81       	ldd	r24, Y+1	; 0x01
    8568:	9a 81       	ldd	r25, Y+2	; 0x02
    856a:	fc 01       	movw	r30, r24
    856c:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    856e:	3f c0       	rjmp	.+126    	; 0x85ee <twim_write_handler+0xf4>
	if (transfer.addr_count < pkg->addr_length) {

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];

	} else if (transfer.data_count < pkg->length) {
    8570:	20 91 fc 21 	lds	r18, 0x21FC	; 0x8021fc <transfer+0x6>
    8574:	30 91 fd 21 	lds	r19, 0x21FD	; 0x8021fd <transfer+0x7>
    8578:	8b 81       	ldd	r24, Y+3	; 0x03
    857a:	9c 81       	ldd	r25, Y+4	; 0x04
    857c:	fc 01       	movw	r30, r24
    857e:	80 85       	ldd	r24, Z+8	; 0x08
    8580:	91 85       	ldd	r25, Z+9	; 0x09
    8582:	28 17       	cp	r18, r24
    8584:	39 07       	cpc	r19, r25
    8586:	60 f5       	brcc	.+88     	; 0x85e0 <twim_write_handler+0xe6>

		if (transfer.read) {
    8588:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <transfer+0x8>
    858c:	88 23       	and	r24, r24
    858e:	59 f0       	breq	.+22     	; 0x85a6 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    8590:	89 81       	ldd	r24, Y+1	; 0x01
    8592:	9a 81       	ldd	r25, Y+2	; 0x02
    8594:	fc 01       	movw	r30, r24
    8596:	86 81       	ldd	r24, Z+6	; 0x06
    8598:	28 2f       	mov	r18, r24
    859a:	21 60       	ori	r18, 0x01	; 1
    859c:	89 81       	ldd	r24, Y+1	; 0x01
    859e:	9a 81       	ldd	r25, Y+2	; 0x02
    85a0:	fc 01       	movw	r30, r24
    85a2:	26 83       	std	Z+6, r18	; 0x06
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    85a4:	24 c0       	rjmp	.+72     	; 0x85ee <twim_write_handler+0xf4>
			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;

		} else {
			const uint8_t * const data = pkg->buffer;
    85a6:	8b 81       	ldd	r24, Y+3	; 0x03
    85a8:	9c 81       	ldd	r25, Y+4	; 0x04
    85aa:	fc 01       	movw	r30, r24
    85ac:	86 81       	ldd	r24, Z+6	; 0x06
    85ae:	97 81       	ldd	r25, Z+7	; 0x07
    85b0:	8f 83       	std	Y+7, r24	; 0x07
    85b2:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    85b4:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <transfer+0x6>
    85b8:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <transfer+0x7>
    85bc:	9c 01       	movw	r18, r24
    85be:	2f 5f       	subi	r18, 0xFF	; 255
    85c0:	3f 4f       	sbci	r19, 0xFF	; 255
    85c2:	20 93 fc 21 	sts	0x21FC, r18	; 0x8021fc <transfer+0x6>
    85c6:	30 93 fd 21 	sts	0x21FD, r19	; 0x8021fd <transfer+0x7>
    85ca:	2f 81       	ldd	r18, Y+7	; 0x07
    85cc:	38 85       	ldd	r19, Y+8	; 0x08
    85ce:	82 0f       	add	r24, r18
    85d0:	93 1f       	adc	r25, r19
    85d2:	fc 01       	movw	r30, r24
    85d4:	20 81       	ld	r18, Z
    85d6:	89 81       	ldd	r24, Y+1	; 0x01
    85d8:	9a 81       	ldd	r25, Y+2	; 0x02
    85da:	fc 01       	movw	r30, r24
    85dc:	27 83       	std	Z+7, r18	; 0x07
		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = STATUS_OK;
	}
}
    85de:	07 c0       	rjmp	.+14     	; 0x85ee <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    85e0:	89 81       	ldd	r24, Y+1	; 0x01
    85e2:	9a 81       	ldd	r25, Y+2	; 0x02
    85e4:	23 e0       	ldi	r18, 0x03	; 3
    85e6:	fc 01       	movw	r30, r24
    85e8:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    85ea:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <transfer+0xa>
	}
}
    85ee:	00 00       	nop
    85f0:	28 96       	adiw	r28, 0x08	; 8
    85f2:	cd bf       	out	0x3d, r28	; 61
    85f4:	de bf       	out	0x3e, r29	; 62
    85f6:	df 91       	pop	r29
    85f8:	cf 91       	pop	r28
    85fa:	08 95       	ret

000085fc <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    85fc:	cf 93       	push	r28
    85fe:	df 93       	push	r29
    8600:	00 d0       	rcall	.+0      	; 0x8602 <twim_read_handler+0x6>
    8602:	00 d0       	rcall	.+0      	; 0x8604 <twim_read_handler+0x8>
    8604:	cd b7       	in	r28, 0x3d	; 61
    8606:	de b7       	in	r29, 0x3e	; 62
	TWI_t * const         bus = transfer.bus;
    8608:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <transfer>
    860c:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <transfer+0x1>
    8610:	89 83       	std	Y+1, r24	; 0x01
    8612:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    8614:	80 91 f8 21 	lds	r24, 0x21F8	; 0x8021f8 <transfer+0x2>
    8618:	90 91 f9 21 	lds	r25, 0x21F9	; 0x8021f9 <transfer+0x3>
    861c:	8b 83       	std	Y+3, r24	; 0x03
    861e:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    8620:	20 91 fc 21 	lds	r18, 0x21FC	; 0x8021fc <transfer+0x6>
    8624:	30 91 fd 21 	lds	r19, 0x21FD	; 0x8021fd <transfer+0x7>
    8628:	8b 81       	ldd	r24, Y+3	; 0x03
    862a:	9c 81       	ldd	r25, Y+4	; 0x04
    862c:	fc 01       	movw	r30, r24
    862e:	80 85       	ldd	r24, Z+8	; 0x08
    8630:	91 85       	ldd	r25, Z+9	; 0x09
    8632:	28 17       	cp	r18, r24
    8634:	39 07       	cpc	r19, r25
    8636:	b0 f5       	brcc	.+108    	; 0x86a4 <twim_read_handler+0xa8>

		uint8_t * const data = pkg->buffer;
    8638:	8b 81       	ldd	r24, Y+3	; 0x03
    863a:	9c 81       	ldd	r25, Y+4	; 0x04
    863c:	fc 01       	movw	r30, r24
    863e:	86 81       	ldd	r24, Z+6	; 0x06
    8640:	97 81       	ldd	r25, Z+7	; 0x07
    8642:	8d 83       	std	Y+5, r24	; 0x05
    8644:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    8646:	80 91 fc 21 	lds	r24, 0x21FC	; 0x8021fc <transfer+0x6>
    864a:	90 91 fd 21 	lds	r25, 0x21FD	; 0x8021fd <transfer+0x7>
    864e:	9c 01       	movw	r18, r24
    8650:	2f 5f       	subi	r18, 0xFF	; 255
    8652:	3f 4f       	sbci	r19, 0xFF	; 255
    8654:	20 93 fc 21 	sts	0x21FC, r18	; 0x8021fc <transfer+0x6>
    8658:	30 93 fd 21 	sts	0x21FD, r19	; 0x8021fd <transfer+0x7>
    865c:	2d 81       	ldd	r18, Y+5	; 0x05
    865e:	3e 81       	ldd	r19, Y+6	; 0x06
    8660:	82 0f       	add	r24, r18
    8662:	93 1f       	adc	r25, r19
    8664:	29 81       	ldd	r18, Y+1	; 0x01
    8666:	3a 81       	ldd	r19, Y+2	; 0x02
    8668:	f9 01       	movw	r30, r18
    866a:	27 81       	ldd	r18, Z+7	; 0x07
    866c:	fc 01       	movw	r30, r24
    866e:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    8670:	20 91 fc 21 	lds	r18, 0x21FC	; 0x8021fc <transfer+0x6>
    8674:	30 91 fd 21 	lds	r19, 0x21FD	; 0x8021fd <transfer+0x7>
    8678:	8b 81       	ldd	r24, Y+3	; 0x03
    867a:	9c 81       	ldd	r25, Y+4	; 0x04
    867c:	fc 01       	movw	r30, r24
    867e:	80 85       	ldd	r24, Z+8	; 0x08
    8680:	91 85       	ldd	r25, Z+9	; 0x09
    8682:	28 17       	cp	r18, r24
    8684:	39 07       	cpc	r19, r25
    8686:	30 f4       	brcc	.+12     	; 0x8694 <twim_read_handler+0x98>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    8688:	89 81       	ldd	r24, Y+1	; 0x01
    868a:	9a 81       	ldd	r25, Y+2	; 0x02
    868c:	22 e0       	ldi	r18, 0x02	; 2
    868e:	fc 01       	movw	r30, r24
    8690:	23 83       	std	Z+3, r18	; 0x03
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    8692:	10 c0       	rjmp	.+32     	; 0x86b4 <twim_read_handler+0xb8>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    8694:	89 81       	ldd	r24, Y+1	; 0x01
    8696:	9a 81       	ldd	r25, Y+2	; 0x02
    8698:	27 e0       	ldi	r18, 0x07	; 7
    869a:	fc 01       	movw	r30, r24
    869c:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    869e:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <transfer+0xa>
		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_NO_MEMORY;
	}
}
    86a2:	08 c0       	rjmp	.+16     	; 0x86b4 <twim_read_handler+0xb8>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    86a4:	89 81       	ldd	r24, Y+1	; 0x01
    86a6:	9a 81       	ldd	r25, Y+2	; 0x02
    86a8:	23 e0       	ldi	r18, 0x03	; 3
    86aa:	fc 01       	movw	r30, r24
    86ac:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    86ae:	89 ef       	ldi	r24, 0xF9	; 249
    86b0:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <transfer+0xa>
	}
}
    86b4:	00 00       	nop
    86b6:	26 96       	adiw	r28, 0x06	; 6
    86b8:	cd bf       	out	0x3d, r28	; 61
    86ba:	de bf       	out	0x3e, r29	; 62
    86bc:	df 91       	pop	r29
    86be:	cf 91       	pop	r28
    86c0:	08 95       	ret

000086c2 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    86c2:	cf 93       	push	r28
    86c4:	df 93       	push	r29
    86c6:	1f 92       	push	r1
    86c8:	cd b7       	in	r28, 0x3d	; 61
    86ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    86cc:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <transfer>
    86d0:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <transfer+0x1>
    86d4:	fc 01       	movw	r30, r24
    86d6:	84 81       	ldd	r24, Z+4	; 0x04
    86d8:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    86da:	89 81       	ldd	r24, Y+1	; 0x01
    86dc:	88 2f       	mov	r24, r24
    86de:	90 e0       	ldi	r25, 0x00	; 0
    86e0:	88 70       	andi	r24, 0x08	; 8
    86e2:	99 27       	eor	r25, r25
    86e4:	89 2b       	or	r24, r25
    86e6:	99 f0       	breq	.+38     	; 0x870e <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    86e8:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <transfer>
    86ec:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <transfer+0x1>
    86f0:	29 81       	ldd	r18, Y+1	; 0x01
    86f2:	28 60       	ori	r18, 0x08	; 8
    86f4:	fc 01       	movw	r30, r24
    86f6:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    86f8:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <transfer>
    86fc:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <transfer+0x1>
    8700:	23 e0       	ldi	r18, 0x03	; 3
    8702:	fc 01       	movw	r30, r24
    8704:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    8706:	86 ef       	ldi	r24, 0xF6	; 246
    8708:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    870c:	2a c0       	rjmp	.+84     	; 0x8762 <twim_interrupt_handler+0xa0>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    870e:	89 81       	ldd	r24, Y+1	; 0x01
    8710:	88 2f       	mov	r24, r24
    8712:	90 e0       	ldi	r25, 0x00	; 0
    8714:	84 70       	andi	r24, 0x04	; 4
    8716:	99 27       	eor	r25, r25
    8718:	89 2b       	or	r24, r25
    871a:	39 f4       	brne	.+14     	; 0x872a <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    871c:	89 81       	ldd	r24, Y+1	; 0x01
    871e:	88 2f       	mov	r24, r24
    8720:	90 e0       	ldi	r25, 0x00	; 0
    8722:	80 71       	andi	r24, 0x10	; 16
    8724:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    8726:	89 2b       	or	r24, r25
    8728:	59 f0       	breq	.+22     	; 0x8740 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    872a:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <transfer>
    872e:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <transfer+0x1>
    8732:	23 e0       	ldi	r18, 0x03	; 3
    8734:	fc 01       	movw	r30, r24
    8736:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    8738:	8f ef       	ldi	r24, 0xFF	; 255
    873a:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <transfer+0xa>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    873e:	11 c0       	rjmp	.+34     	; 0x8762 <twim_interrupt_handler+0xa0>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_IO_ERROR;

	} else if (master_status & TWI_MASTER_WIF_bm) {
    8740:	89 81       	ldd	r24, Y+1	; 0x01
    8742:	88 2f       	mov	r24, r24
    8744:	90 e0       	ldi	r25, 0x00	; 0
    8746:	80 74       	andi	r24, 0x40	; 64
    8748:	99 27       	eor	r25, r25
    874a:	89 2b       	or	r24, r25
    874c:	11 f0       	breq	.+4      	; 0x8752 <twim_interrupt_handler+0x90>

		twim_write_handler();
    874e:	d5 de       	rcall	.-598    	; 0x84fa <twim_write_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    8750:	08 c0       	rjmp	.+16     	; 0x8762 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    8752:	89 81       	ldd	r24, Y+1	; 0x01
    8754:	88 23       	and	r24, r24

		twim_read_handler();
    8756:	14 f4       	brge	.+4      	; 0x875c <twim_interrupt_handler+0x9a>
    8758:	51 df       	rcall	.-350    	; 0x85fc <twim_read_handler>

	} else {

		transfer.status = ERR_PROTOCOL;
	}
}
    875a:	03 c0       	rjmp	.+6      	; 0x8762 <twim_interrupt_handler+0xa0>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    875c:	8b ef       	ldi	r24, 0xFB	; 251
    875e:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <transfer+0xa>
	}
}
    8762:	00 00       	nop
    8764:	0f 90       	pop	r0
    8766:	df 91       	pop	r29
    8768:	cf 91       	pop	r28
    876a:	08 95       	ret

0000876c <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    876c:	cf 93       	push	r28
    876e:	df 93       	push	r29
    8770:	1f 92       	push	r1
    8772:	1f 92       	push	r1
    8774:	cd b7       	in	r28, 0x3d	; 61
    8776:	de b7       	in	r29, 0x3e	; 62
    8778:	89 83       	std	Y+1, r24	; 0x01
    877a:	9a 83       	std	Y+2, r25	; 0x02
    877c:	89 81       	ldd	r24, Y+1	; 0x01
    877e:	9a 81       	ldd	r25, Y+2	; 0x02
    8780:	fc 01       	movw	r30, r24
    8782:	84 81       	ldd	r24, Z+4	; 0x04
    8784:	28 2f       	mov	r18, r24
    8786:	20 61       	ori	r18, 0x10	; 16
    8788:	89 81       	ldd	r24, Y+1	; 0x01
    878a:	9a 81       	ldd	r25, Y+2	; 0x02
    878c:	fc 01       	movw	r30, r24
    878e:	24 83       	std	Z+4, r18	; 0x04
    8790:	00 00       	nop
    8792:	0f 90       	pop	r0
    8794:	0f 90       	pop	r0
    8796:	df 91       	pop	r29
    8798:	cf 91       	pop	r28
    879a:	08 95       	ret

0000879c <usart_format_set>:
    879c:	cf 93       	push	r28
    879e:	df 93       	push	r29
    87a0:	cd b7       	in	r28, 0x3d	; 61
    87a2:	de b7       	in	r29, 0x3e	; 62
    87a4:	25 97       	sbiw	r28, 0x05	; 5
    87a6:	cd bf       	out	0x3d, r28	; 61
    87a8:	de bf       	out	0x3e, r29	; 62
    87aa:	89 83       	std	Y+1, r24	; 0x01
    87ac:	9a 83       	std	Y+2, r25	; 0x02
    87ae:	6b 83       	std	Y+3, r22	; 0x03
    87b0:	4c 83       	std	Y+4, r20	; 0x04
    87b2:	2d 83       	std	Y+5, r18	; 0x05
    87b4:	9b 81       	ldd	r25, Y+3	; 0x03
    87b6:	8c 81       	ldd	r24, Y+4	; 0x04
    87b8:	89 2b       	or	r24, r25
    87ba:	98 2f       	mov	r25, r24
    87bc:	8d 81       	ldd	r24, Y+5	; 0x05
    87be:	88 23       	and	r24, r24
    87c0:	11 f0       	breq	.+4      	; 0x87c6 <usart_format_set+0x2a>
    87c2:	88 e0       	ldi	r24, 0x08	; 8
    87c4:	01 c0       	rjmp	.+2      	; 0x87c8 <usart_format_set+0x2c>
    87c6:	80 e0       	ldi	r24, 0x00	; 0
    87c8:	89 2b       	or	r24, r25
    87ca:	28 2f       	mov	r18, r24
    87cc:	89 81       	ldd	r24, Y+1	; 0x01
    87ce:	9a 81       	ldd	r25, Y+2	; 0x02
    87d0:	fc 01       	movw	r30, r24
    87d2:	25 83       	std	Z+5, r18	; 0x05
    87d4:	00 00       	nop
    87d6:	25 96       	adiw	r28, 0x05	; 5
    87d8:	cd bf       	out	0x3d, r28	; 61
    87da:	de bf       	out	0x3e, r29	; 62
    87dc:	df 91       	pop	r29
    87de:	cf 91       	pop	r28
    87e0:	08 95       	ret

000087e2 <usart_tx_enable>:
    87e2:	cf 93       	push	r28
    87e4:	df 93       	push	r29
    87e6:	1f 92       	push	r1
    87e8:	1f 92       	push	r1
    87ea:	cd b7       	in	r28, 0x3d	; 61
    87ec:	de b7       	in	r29, 0x3e	; 62
    87ee:	89 83       	std	Y+1, r24	; 0x01
    87f0:	9a 83       	std	Y+2, r25	; 0x02
    87f2:	89 81       	ldd	r24, Y+1	; 0x01
    87f4:	9a 81       	ldd	r25, Y+2	; 0x02
    87f6:	fc 01       	movw	r30, r24
    87f8:	84 81       	ldd	r24, Z+4	; 0x04
    87fa:	28 2f       	mov	r18, r24
    87fc:	28 60       	ori	r18, 0x08	; 8
    87fe:	89 81       	ldd	r24, Y+1	; 0x01
    8800:	9a 81       	ldd	r25, Y+2	; 0x02
    8802:	fc 01       	movw	r30, r24
    8804:	24 83       	std	Z+4, r18	; 0x04
    8806:	00 00       	nop
    8808:	0f 90       	pop	r0
    880a:	0f 90       	pop	r0
    880c:	df 91       	pop	r29
    880e:	cf 91       	pop	r28
    8810:	08 95       	ret

00008812 <usart_set_mode>:
    8812:	cf 93       	push	r28
    8814:	df 93       	push	r29
    8816:	00 d0       	rcall	.+0      	; 0x8818 <usart_set_mode+0x6>
    8818:	cd b7       	in	r28, 0x3d	; 61
    881a:	de b7       	in	r29, 0x3e	; 62
    881c:	89 83       	std	Y+1, r24	; 0x01
    881e:	9a 83       	std	Y+2, r25	; 0x02
    8820:	6b 83       	std	Y+3, r22	; 0x03
    8822:	89 81       	ldd	r24, Y+1	; 0x01
    8824:	9a 81       	ldd	r25, Y+2	; 0x02
    8826:	fc 01       	movw	r30, r24
    8828:	85 81       	ldd	r24, Z+5	; 0x05
    882a:	98 2f       	mov	r25, r24
    882c:	9f 73       	andi	r25, 0x3F	; 63
    882e:	8b 81       	ldd	r24, Y+3	; 0x03
    8830:	89 2b       	or	r24, r25
    8832:	28 2f       	mov	r18, r24
    8834:	89 81       	ldd	r24, Y+1	; 0x01
    8836:	9a 81       	ldd	r25, Y+2	; 0x02
    8838:	fc 01       	movw	r30, r24
    883a:	25 83       	std	Z+5, r18	; 0x05
    883c:	00 00       	nop
    883e:	23 96       	adiw	r28, 0x03	; 3
    8840:	cd bf       	out	0x3d, r28	; 61
    8842:	de bf       	out	0x3e, r29	; 62
    8844:	df 91       	pop	r29
    8846:	cf 91       	pop	r28
    8848:	08 95       	ret

0000884a <usart_data_register_is_empty>:
    884a:	cf 93       	push	r28
    884c:	df 93       	push	r29
    884e:	1f 92       	push	r1
    8850:	1f 92       	push	r1
    8852:	cd b7       	in	r28, 0x3d	; 61
    8854:	de b7       	in	r29, 0x3e	; 62
    8856:	89 83       	std	Y+1, r24	; 0x01
    8858:	9a 83       	std	Y+2, r25	; 0x02
    885a:	89 81       	ldd	r24, Y+1	; 0x01
    885c:	9a 81       	ldd	r25, Y+2	; 0x02
    885e:	fc 01       	movw	r30, r24
    8860:	81 81       	ldd	r24, Z+1	; 0x01
    8862:	88 2f       	mov	r24, r24
    8864:	90 e0       	ldi	r25, 0x00	; 0
    8866:	80 72       	andi	r24, 0x20	; 32
    8868:	99 27       	eor	r25, r25
    886a:	21 e0       	ldi	r18, 0x01	; 1
    886c:	89 2b       	or	r24, r25
    886e:	09 f4       	brne	.+2      	; 0x8872 <usart_data_register_is_empty+0x28>
    8870:	20 e0       	ldi	r18, 0x00	; 0
    8872:	82 2f       	mov	r24, r18
    8874:	0f 90       	pop	r0
    8876:	0f 90       	pop	r0
    8878:	df 91       	pop	r29
    887a:	cf 91       	pop	r28
    887c:	08 95       	ret

0000887e <usart_rx_is_complete>:
    887e:	cf 93       	push	r28
    8880:	df 93       	push	r29
    8882:	1f 92       	push	r1
    8884:	1f 92       	push	r1
    8886:	cd b7       	in	r28, 0x3d	; 61
    8888:	de b7       	in	r29, 0x3e	; 62
    888a:	89 83       	std	Y+1, r24	; 0x01
    888c:	9a 83       	std	Y+2, r25	; 0x02
    888e:	89 81       	ldd	r24, Y+1	; 0x01
    8890:	9a 81       	ldd	r25, Y+2	; 0x02
    8892:	fc 01       	movw	r30, r24
    8894:	81 81       	ldd	r24, Z+1	; 0x01
    8896:	88 2f       	mov	r24, r24
    8898:	90 e0       	ldi	r25, 0x00	; 0
    889a:	80 78       	andi	r24, 0x80	; 128
    889c:	99 27       	eor	r25, r25
    889e:	21 e0       	ldi	r18, 0x01	; 1
    88a0:	89 2b       	or	r24, r25
    88a2:	09 f4       	brne	.+2      	; 0x88a6 <usart_rx_is_complete+0x28>
    88a4:	20 e0       	ldi	r18, 0x00	; 0
    88a6:	82 2f       	mov	r24, r18
    88a8:	0f 90       	pop	r0
    88aa:	0f 90       	pop	r0
    88ac:	df 91       	pop	r29
    88ae:	cf 91       	pop	r28
    88b0:	08 95       	ret

000088b2 <sysclk_get_main_hz>:
    88b2:	cf 93       	push	r28
    88b4:	df 93       	push	r29
    88b6:	cd b7       	in	r28, 0x3d	; 61
    88b8:	de b7       	in	r29, 0x3e	; 62
    88ba:	80 e0       	ldi	r24, 0x00	; 0
    88bc:	9c e6       	ldi	r25, 0x6C	; 108
    88be:	ac ed       	ldi	r26, 0xDC	; 220
    88c0:	b2 e0       	ldi	r27, 0x02	; 2
    88c2:	bc 01       	movw	r22, r24
    88c4:	cd 01       	movw	r24, r26
    88c6:	df 91       	pop	r29
    88c8:	cf 91       	pop	r28
    88ca:	08 95       	ret

000088cc <sysclk_get_per4_hz>:
    88cc:	cf 93       	push	r28
    88ce:	df 93       	push	r29
    88d0:	1f 92       	push	r1
    88d2:	cd b7       	in	r28, 0x3d	; 61
    88d4:	de b7       	in	r29, 0x3e	; 62
    88d6:	19 82       	std	Y+1, r1	; 0x01
    88d8:	ec df       	rcall	.-40     	; 0x88b2 <sysclk_get_main_hz>
    88da:	dc 01       	movw	r26, r24
    88dc:	cb 01       	movw	r24, r22
    88de:	29 81       	ldd	r18, Y+1	; 0x01
    88e0:	22 2f       	mov	r18, r18
    88e2:	30 e0       	ldi	r19, 0x00	; 0
    88e4:	04 c0       	rjmp	.+8      	; 0x88ee <sysclk_get_per4_hz+0x22>
    88e6:	b6 95       	lsr	r27
    88e8:	a7 95       	ror	r26
    88ea:	97 95       	ror	r25
    88ec:	87 95       	ror	r24
    88ee:	2a 95       	dec	r18
    88f0:	d2 f7       	brpl	.-12     	; 0x88e6 <sysclk_get_per4_hz+0x1a>
    88f2:	bc 01       	movw	r22, r24
    88f4:	cd 01       	movw	r24, r26
    88f6:	0f 90       	pop	r0
    88f8:	df 91       	pop	r29
    88fa:	cf 91       	pop	r28
    88fc:	08 95       	ret

000088fe <sysclk_get_per2_hz>:
    88fe:	cf 93       	push	r28
    8900:	df 93       	push	r29
    8902:	cd b7       	in	r28, 0x3d	; 61
    8904:	de b7       	in	r29, 0x3e	; 62
    8906:	e2 df       	rcall	.-60     	; 0x88cc <sysclk_get_per4_hz>
    8908:	dc 01       	movw	r26, r24
    890a:	cb 01       	movw	r24, r22
    890c:	bc 01       	movw	r22, r24
    890e:	cd 01       	movw	r24, r26
    8910:	df 91       	pop	r29
    8912:	cf 91       	pop	r28
    8914:	08 95       	ret

00008916 <sysclk_get_per_hz>:
    8916:	cf 93       	push	r28
    8918:	df 93       	push	r29
    891a:	cd b7       	in	r28, 0x3d	; 61
    891c:	de b7       	in	r29, 0x3e	; 62
    891e:	ef df       	rcall	.-34     	; 0x88fe <sysclk_get_per2_hz>
    8920:	dc 01       	movw	r26, r24
    8922:	cb 01       	movw	r24, r22
    8924:	bc 01       	movw	r22, r24
    8926:	cd 01       	movw	r24, r26
    8928:	df 91       	pop	r29
    892a:	cf 91       	pop	r28
    892c:	08 95       	ret

0000892e <sysclk_enable_peripheral_clock>:
    892e:	cf 93       	push	r28
    8930:	df 93       	push	r29
    8932:	1f 92       	push	r1
    8934:	1f 92       	push	r1
    8936:	cd b7       	in	r28, 0x3d	; 61
    8938:	de b7       	in	r29, 0x3e	; 62
    893a:	89 83       	std	Y+1, r24	; 0x01
    893c:	9a 83       	std	Y+2, r25	; 0x02
    893e:	89 81       	ldd	r24, Y+1	; 0x01
    8940:	9a 81       	ldd	r25, Y+2	; 0x02
    8942:	89 2b       	or	r24, r25
    8944:	09 f4       	brne	.+2      	; 0x8948 <sysclk_enable_peripheral_clock+0x1a>
    8946:	85 c1       	rjmp	.+778    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8948:	89 81       	ldd	r24, Y+1	; 0x01
    894a:	9a 81       	ldd	r25, Y+2	; 0x02
    894c:	80 3c       	cpi	r24, 0xC0	; 192
    894e:	91 05       	cpc	r25, r1
    8950:	29 f4       	brne	.+10     	; 0x895c <sysclk_enable_peripheral_clock+0x2e>
    8952:	60 e1       	ldi	r22, 0x10	; 16
    8954:	80 e0       	ldi	r24, 0x00	; 0
    8956:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    895a:	7b c1       	rjmp	.+758    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    895c:	89 81       	ldd	r24, Y+1	; 0x01
    895e:	9a 81       	ldd	r25, Y+2	; 0x02
    8960:	80 34       	cpi	r24, 0x40	; 64
    8962:	94 40       	sbci	r25, 0x04	; 4
    8964:	29 f4       	brne	.+10     	; 0x8970 <sysclk_enable_peripheral_clock+0x42>
    8966:	68 e0       	ldi	r22, 0x08	; 8
    8968:	80 e0       	ldi	r24, 0x00	; 0
    896a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    896e:	71 c1       	rjmp	.+738    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8970:	89 81       	ldd	r24, Y+1	; 0x01
    8972:	9a 81       	ldd	r25, Y+2	; 0x02
    8974:	81 15       	cp	r24, r1
    8976:	94 40       	sbci	r25, 0x04	; 4
    8978:	29 f4       	brne	.+10     	; 0x8984 <sysclk_enable_peripheral_clock+0x56>
    897a:	64 e0       	ldi	r22, 0x04	; 4
    897c:	80 e0       	ldi	r24, 0x00	; 0
    897e:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8982:	67 c1       	rjmp	.+718    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8984:	89 81       	ldd	r24, Y+1	; 0x01
    8986:	9a 81       	ldd	r25, Y+2	; 0x02
    8988:	80 38       	cpi	r24, 0x80	; 128
    898a:	91 40       	sbci	r25, 0x01	; 1
    898c:	29 f4       	brne	.+10     	; 0x8998 <sysclk_enable_peripheral_clock+0x6a>
    898e:	62 e0       	ldi	r22, 0x02	; 2
    8990:	80 e0       	ldi	r24, 0x00	; 0
    8992:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8996:	5d c1       	rjmp	.+698    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8998:	89 81       	ldd	r24, Y+1	; 0x01
    899a:	9a 81       	ldd	r25, Y+2	; 0x02
    899c:	81 15       	cp	r24, r1
    899e:	91 40       	sbci	r25, 0x01	; 1
    89a0:	29 f4       	brne	.+10     	; 0x89ac <sysclk_enable_peripheral_clock+0x7e>
    89a2:	61 e0       	ldi	r22, 0x01	; 1
    89a4:	80 e0       	ldi	r24, 0x00	; 0
    89a6:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    89aa:	53 c1       	rjmp	.+678    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    89ac:	89 81       	ldd	r24, Y+1	; 0x01
    89ae:	9a 81       	ldd	r25, Y+2	; 0x02
    89b0:	80 38       	cpi	r24, 0x80	; 128
    89b2:	93 40       	sbci	r25, 0x03	; 3
    89b4:	29 f4       	brne	.+10     	; 0x89c0 <sysclk_enable_peripheral_clock+0x92>
    89b6:	61 e0       	ldi	r22, 0x01	; 1
    89b8:	81 e0       	ldi	r24, 0x01	; 1
    89ba:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    89be:	49 c1       	rjmp	.+658    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    89c0:	89 81       	ldd	r24, Y+1	; 0x01
    89c2:	9a 81       	ldd	r25, Y+2	; 0x02
    89c4:	80 39       	cpi	r24, 0x90	; 144
    89c6:	93 40       	sbci	r25, 0x03	; 3
    89c8:	29 f4       	brne	.+10     	; 0x89d4 <sysclk_enable_peripheral_clock+0xa6>
    89ca:	61 e0       	ldi	r22, 0x01	; 1
    89cc:	82 e0       	ldi	r24, 0x02	; 2
    89ce:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    89d2:	3f c1       	rjmp	.+638    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    89d4:	89 81       	ldd	r24, Y+1	; 0x01
    89d6:	9a 81       	ldd	r25, Y+2	; 0x02
    89d8:	81 15       	cp	r24, r1
    89da:	92 40       	sbci	r25, 0x02	; 2
    89dc:	29 f4       	brne	.+10     	; 0x89e8 <sysclk_enable_peripheral_clock+0xba>
    89de:	62 e0       	ldi	r22, 0x02	; 2
    89e0:	81 e0       	ldi	r24, 0x01	; 1
    89e2:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    89e6:	35 c1       	rjmp	.+618    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    89e8:	89 81       	ldd	r24, Y+1	; 0x01
    89ea:	9a 81       	ldd	r25, Y+2	; 0x02
    89ec:	80 34       	cpi	r24, 0x40	; 64
    89ee:	92 40       	sbci	r25, 0x02	; 2
    89f0:	29 f4       	brne	.+10     	; 0x89fc <sysclk_enable_peripheral_clock+0xce>
    89f2:	62 e0       	ldi	r22, 0x02	; 2
    89f4:	82 e0       	ldi	r24, 0x02	; 2
    89f6:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    89fa:	2b c1       	rjmp	.+598    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    89fc:	89 81       	ldd	r24, Y+1	; 0x01
    89fe:	9a 81       	ldd	r25, Y+2	; 0x02
    8a00:	81 15       	cp	r24, r1
    8a02:	93 40       	sbci	r25, 0x03	; 3
    8a04:	29 f4       	brne	.+10     	; 0x8a10 <sysclk_enable_peripheral_clock+0xe2>
    8a06:	64 e0       	ldi	r22, 0x04	; 4
    8a08:	81 e0       	ldi	r24, 0x01	; 1
    8a0a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a0e:	21 c1       	rjmp	.+578    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a10:	89 81       	ldd	r24, Y+1	; 0x01
    8a12:	9a 81       	ldd	r25, Y+2	; 0x02
    8a14:	80 32       	cpi	r24, 0x20	; 32
    8a16:	93 40       	sbci	r25, 0x03	; 3
    8a18:	29 f4       	brne	.+10     	; 0x8a24 <sysclk_enable_peripheral_clock+0xf6>
    8a1a:	64 e0       	ldi	r22, 0x04	; 4
    8a1c:	82 e0       	ldi	r24, 0x02	; 2
    8a1e:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a22:	17 c1       	rjmp	.+558    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a24:	89 81       	ldd	r24, Y+1	; 0x01
    8a26:	9a 81       	ldd	r25, Y+2	; 0x02
    8a28:	81 15       	cp	r24, r1
    8a2a:	98 40       	sbci	r25, 0x08	; 8
    8a2c:	29 f4       	brne	.+10     	; 0x8a38 <sysclk_enable_peripheral_clock+0x10a>
    8a2e:	61 e0       	ldi	r22, 0x01	; 1
    8a30:	83 e0       	ldi	r24, 0x03	; 3
    8a32:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a36:	0d c1       	rjmp	.+538    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a38:	89 81       	ldd	r24, Y+1	; 0x01
    8a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    8a3c:	81 15       	cp	r24, r1
    8a3e:	99 40       	sbci	r25, 0x09	; 9
    8a40:	29 f4       	brne	.+10     	; 0x8a4c <sysclk_enable_peripheral_clock+0x11e>
    8a42:	61 e0       	ldi	r22, 0x01	; 1
    8a44:	84 e0       	ldi	r24, 0x04	; 4
    8a46:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a4a:	03 c1       	rjmp	.+518    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a4c:	89 81       	ldd	r24, Y+1	; 0x01
    8a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    8a50:	81 15       	cp	r24, r1
    8a52:	9a 40       	sbci	r25, 0x0A	; 10
    8a54:	29 f4       	brne	.+10     	; 0x8a60 <sysclk_enable_peripheral_clock+0x132>
    8a56:	61 e0       	ldi	r22, 0x01	; 1
    8a58:	85 e0       	ldi	r24, 0x05	; 5
    8a5a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a5e:	f9 c0       	rjmp	.+498    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a60:	89 81       	ldd	r24, Y+1	; 0x01
    8a62:	9a 81       	ldd	r25, Y+2	; 0x02
    8a64:	81 15       	cp	r24, r1
    8a66:	9b 40       	sbci	r25, 0x0B	; 11
    8a68:	29 f4       	brne	.+10     	; 0x8a74 <sysclk_enable_peripheral_clock+0x146>
    8a6a:	61 e0       	ldi	r22, 0x01	; 1
    8a6c:	86 e0       	ldi	r24, 0x06	; 6
    8a6e:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a72:	ef c0       	rjmp	.+478    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a74:	89 81       	ldd	r24, Y+1	; 0x01
    8a76:	9a 81       	ldd	r25, Y+2	; 0x02
    8a78:	80 34       	cpi	r24, 0x40	; 64
    8a7a:	98 40       	sbci	r25, 0x08	; 8
    8a7c:	29 f4       	brne	.+10     	; 0x8a88 <sysclk_enable_peripheral_clock+0x15a>
    8a7e:	62 e0       	ldi	r22, 0x02	; 2
    8a80:	83 e0       	ldi	r24, 0x03	; 3
    8a82:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a86:	e5 c0       	rjmp	.+458    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a88:	89 81       	ldd	r24, Y+1	; 0x01
    8a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    8a8c:	80 34       	cpi	r24, 0x40	; 64
    8a8e:	99 40       	sbci	r25, 0x09	; 9
    8a90:	29 f4       	brne	.+10     	; 0x8a9c <sysclk_enable_peripheral_clock+0x16e>
    8a92:	62 e0       	ldi	r22, 0x02	; 2
    8a94:	84 e0       	ldi	r24, 0x04	; 4
    8a96:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8a9a:	db c0       	rjmp	.+438    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8a9c:	89 81       	ldd	r24, Y+1	; 0x01
    8a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    8aa0:	80 34       	cpi	r24, 0x40	; 64
    8aa2:	9a 40       	sbci	r25, 0x0A	; 10
    8aa4:	29 f4       	brne	.+10     	; 0x8ab0 <sysclk_enable_peripheral_clock+0x182>
    8aa6:	62 e0       	ldi	r22, 0x02	; 2
    8aa8:	85 e0       	ldi	r24, 0x05	; 5
    8aaa:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8aae:	d1 c0       	rjmp	.+418    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8ab0:	89 81       	ldd	r24, Y+1	; 0x01
    8ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ab4:	80 34       	cpi	r24, 0x40	; 64
    8ab6:	9b 40       	sbci	r25, 0x0B	; 11
    8ab8:	29 f4       	brne	.+10     	; 0x8ac4 <sysclk_enable_peripheral_clock+0x196>
    8aba:	62 e0       	ldi	r22, 0x02	; 2
    8abc:	86 e0       	ldi	r24, 0x06	; 6
    8abe:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8ac2:	c7 c0       	rjmp	.+398    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8ac4:	89 81       	ldd	r24, Y+1	; 0x01
    8ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    8ac8:	80 39       	cpi	r24, 0x90	; 144
    8aca:	98 40       	sbci	r25, 0x08	; 8
    8acc:	29 f4       	brne	.+10     	; 0x8ad8 <sysclk_enable_peripheral_clock+0x1aa>
    8ace:	64 e0       	ldi	r22, 0x04	; 4
    8ad0:	83 e0       	ldi	r24, 0x03	; 3
    8ad2:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8ad6:	bd c0       	rjmp	.+378    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8ad8:	89 81       	ldd	r24, Y+1	; 0x01
    8ada:	9a 81       	ldd	r25, Y+2	; 0x02
    8adc:	80 39       	cpi	r24, 0x90	; 144
    8ade:	99 40       	sbci	r25, 0x09	; 9
    8ae0:	29 f4       	brne	.+10     	; 0x8aec <sysclk_enable_peripheral_clock+0x1be>
    8ae2:	64 e0       	ldi	r22, 0x04	; 4
    8ae4:	84 e0       	ldi	r24, 0x04	; 4
    8ae6:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8aea:	b3 c0       	rjmp	.+358    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8aec:	89 81       	ldd	r24, Y+1	; 0x01
    8aee:	9a 81       	ldd	r25, Y+2	; 0x02
    8af0:	80 39       	cpi	r24, 0x90	; 144
    8af2:	9a 40       	sbci	r25, 0x0A	; 10
    8af4:	29 f4       	brne	.+10     	; 0x8b00 <sysclk_enable_peripheral_clock+0x1d2>
    8af6:	64 e0       	ldi	r22, 0x04	; 4
    8af8:	85 e0       	ldi	r24, 0x05	; 5
    8afa:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8afe:	a9 c0       	rjmp	.+338    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b00:	89 81       	ldd	r24, Y+1	; 0x01
    8b02:	9a 81       	ldd	r25, Y+2	; 0x02
    8b04:	80 39       	cpi	r24, 0x90	; 144
    8b06:	9b 40       	sbci	r25, 0x0B	; 11
    8b08:	29 f4       	brne	.+10     	; 0x8b14 <sysclk_enable_peripheral_clock+0x1e6>
    8b0a:	64 e0       	ldi	r22, 0x04	; 4
    8b0c:	86 e0       	ldi	r24, 0x06	; 6
    8b0e:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b12:	9f c0       	rjmp	.+318    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b14:	89 81       	ldd	r24, Y+1	; 0x01
    8b16:	9a 81       	ldd	r25, Y+2	; 0x02
    8b18:	80 3c       	cpi	r24, 0xC0	; 192
    8b1a:	98 40       	sbci	r25, 0x08	; 8
    8b1c:	29 f4       	brne	.+10     	; 0x8b28 <sysclk_enable_peripheral_clock+0x1fa>
    8b1e:	68 e0       	ldi	r22, 0x08	; 8
    8b20:	83 e0       	ldi	r24, 0x03	; 3
    8b22:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b26:	95 c0       	rjmp	.+298    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b28:	89 81       	ldd	r24, Y+1	; 0x01
    8b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    8b2c:	80 3c       	cpi	r24, 0xC0	; 192
    8b2e:	99 40       	sbci	r25, 0x09	; 9
    8b30:	29 f4       	brne	.+10     	; 0x8b3c <sysclk_enable_peripheral_clock+0x20e>
    8b32:	68 e0       	ldi	r22, 0x08	; 8
    8b34:	84 e0       	ldi	r24, 0x04	; 4
    8b36:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b3a:	8b c0       	rjmp	.+278    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b3c:	89 81       	ldd	r24, Y+1	; 0x01
    8b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    8b40:	80 3c       	cpi	r24, 0xC0	; 192
    8b42:	9a 40       	sbci	r25, 0x0A	; 10
    8b44:	29 f4       	brne	.+10     	; 0x8b50 <sysclk_enable_peripheral_clock+0x222>
    8b46:	68 e0       	ldi	r22, 0x08	; 8
    8b48:	85 e0       	ldi	r24, 0x05	; 5
    8b4a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b4e:	81 c0       	rjmp	.+258    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b50:	89 81       	ldd	r24, Y+1	; 0x01
    8b52:	9a 81       	ldd	r25, Y+2	; 0x02
    8b54:	80 3c       	cpi	r24, 0xC0	; 192
    8b56:	9b 40       	sbci	r25, 0x0B	; 11
    8b58:	29 f4       	brne	.+10     	; 0x8b64 <sysclk_enable_peripheral_clock+0x236>
    8b5a:	68 e0       	ldi	r22, 0x08	; 8
    8b5c:	86 e0       	ldi	r24, 0x06	; 6
    8b5e:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b62:	77 c0       	rjmp	.+238    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b64:	89 81       	ldd	r24, Y+1	; 0x01
    8b66:	9a 81       	ldd	r25, Y+2	; 0x02
    8b68:	80 3a       	cpi	r24, 0xA0	; 160
    8b6a:	98 40       	sbci	r25, 0x08	; 8
    8b6c:	29 f4       	brne	.+10     	; 0x8b78 <sysclk_enable_peripheral_clock+0x24a>
    8b6e:	60 e1       	ldi	r22, 0x10	; 16
    8b70:	83 e0       	ldi	r24, 0x03	; 3
    8b72:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b76:	6d c0       	rjmp	.+218    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b78:	89 81       	ldd	r24, Y+1	; 0x01
    8b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    8b7c:	80 3a       	cpi	r24, 0xA0	; 160
    8b7e:	99 40       	sbci	r25, 0x09	; 9
    8b80:	29 f4       	brne	.+10     	; 0x8b8c <sysclk_enable_peripheral_clock+0x25e>
    8b82:	60 e1       	ldi	r22, 0x10	; 16
    8b84:	84 e0       	ldi	r24, 0x04	; 4
    8b86:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b8a:	63 c0       	rjmp	.+198    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8b8c:	89 81       	ldd	r24, Y+1	; 0x01
    8b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    8b90:	80 3a       	cpi	r24, 0xA0	; 160
    8b92:	9a 40       	sbci	r25, 0x0A	; 10
    8b94:	29 f4       	brne	.+10     	; 0x8ba0 <sysclk_enable_peripheral_clock+0x272>
    8b96:	60 e1       	ldi	r22, 0x10	; 16
    8b98:	85 e0       	ldi	r24, 0x05	; 5
    8b9a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8b9e:	59 c0       	rjmp	.+178    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8ba0:	89 81       	ldd	r24, Y+1	; 0x01
    8ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ba4:	80 3a       	cpi	r24, 0xA0	; 160
    8ba6:	9b 40       	sbci	r25, 0x0B	; 11
    8ba8:	29 f4       	brne	.+10     	; 0x8bb4 <sysclk_enable_peripheral_clock+0x286>
    8baa:	60 e1       	ldi	r22, 0x10	; 16
    8bac:	86 e0       	ldi	r24, 0x06	; 6
    8bae:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8bb2:	4f c0       	rjmp	.+158    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8bb4:	89 81       	ldd	r24, Y+1	; 0x01
    8bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    8bb8:	80 3b       	cpi	r24, 0xB0	; 176
    8bba:	98 40       	sbci	r25, 0x08	; 8
    8bbc:	29 f4       	brne	.+10     	; 0x8bc8 <sysclk_enable_peripheral_clock+0x29a>
    8bbe:	60 e2       	ldi	r22, 0x20	; 32
    8bc0:	83 e0       	ldi	r24, 0x03	; 3
    8bc2:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8bc6:	45 c0       	rjmp	.+138    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8bc8:	89 81       	ldd	r24, Y+1	; 0x01
    8bca:	9a 81       	ldd	r25, Y+2	; 0x02
    8bcc:	80 3b       	cpi	r24, 0xB0	; 176
    8bce:	99 40       	sbci	r25, 0x09	; 9
    8bd0:	29 f4       	brne	.+10     	; 0x8bdc <sysclk_enable_peripheral_clock+0x2ae>
    8bd2:	60 e2       	ldi	r22, 0x20	; 32
    8bd4:	84 e0       	ldi	r24, 0x04	; 4
    8bd6:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8bda:	3b c0       	rjmp	.+118    	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8bdc:	89 81       	ldd	r24, Y+1	; 0x01
    8bde:	9a 81       	ldd	r25, Y+2	; 0x02
    8be0:	80 3b       	cpi	r24, 0xB0	; 176
    8be2:	9a 40       	sbci	r25, 0x0A	; 10
    8be4:	29 f4       	brne	.+10     	; 0x8bf0 <sysclk_enable_peripheral_clock+0x2c2>
    8be6:	60 e2       	ldi	r22, 0x20	; 32
    8be8:	85 e0       	ldi	r24, 0x05	; 5
    8bea:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8bee:	31 c0       	rjmp	.+98     	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8bf0:	89 81       	ldd	r24, Y+1	; 0x01
    8bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    8bf4:	80 3b       	cpi	r24, 0xB0	; 176
    8bf6:	9b 40       	sbci	r25, 0x0B	; 11
    8bf8:	29 f4       	brne	.+10     	; 0x8c04 <sysclk_enable_peripheral_clock+0x2d6>
    8bfa:	60 e2       	ldi	r22, 0x20	; 32
    8bfc:	86 e0       	ldi	r24, 0x06	; 6
    8bfe:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8c02:	27 c0       	rjmp	.+78     	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8c04:	89 81       	ldd	r24, Y+1	; 0x01
    8c06:	9a 81       	ldd	r25, Y+2	; 0x02
    8c08:	80 38       	cpi	r24, 0x80	; 128
    8c0a:	94 40       	sbci	r25, 0x04	; 4
    8c0c:	29 f4       	brne	.+10     	; 0x8c18 <sysclk_enable_peripheral_clock+0x2ea>
    8c0e:	60 e4       	ldi	r22, 0x40	; 64
    8c10:	83 e0       	ldi	r24, 0x03	; 3
    8c12:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8c16:	1d c0       	rjmp	.+58     	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8c18:	89 81       	ldd	r24, Y+1	; 0x01
    8c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    8c1c:	80 39       	cpi	r24, 0x90	; 144
    8c1e:	94 40       	sbci	r25, 0x04	; 4
    8c20:	29 f4       	brne	.+10     	; 0x8c2c <sysclk_enable_peripheral_clock+0x2fe>
    8c22:	60 e4       	ldi	r22, 0x40	; 64
    8c24:	84 e0       	ldi	r24, 0x04	; 4
    8c26:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8c2a:	13 c0       	rjmp	.+38     	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8c2c:	89 81       	ldd	r24, Y+1	; 0x01
    8c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    8c30:	80 3a       	cpi	r24, 0xA0	; 160
    8c32:	94 40       	sbci	r25, 0x04	; 4
    8c34:	29 f4       	brne	.+10     	; 0x8c40 <sysclk_enable_peripheral_clock+0x312>
    8c36:	60 e4       	ldi	r22, 0x40	; 64
    8c38:	85 e0       	ldi	r24, 0x05	; 5
    8c3a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8c3e:	09 c0       	rjmp	.+18     	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8c40:	89 81       	ldd	r24, Y+1	; 0x01
    8c42:	9a 81       	ldd	r25, Y+2	; 0x02
    8c44:	80 3b       	cpi	r24, 0xB0	; 176
    8c46:	94 40       	sbci	r25, 0x04	; 4
    8c48:	21 f4       	brne	.+8      	; 0x8c52 <sysclk_enable_peripheral_clock+0x324>
    8c4a:	60 e4       	ldi	r22, 0x40	; 64
    8c4c:	86 e0       	ldi	r24, 0x06	; 6
    8c4e:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    8c52:	00 00       	nop
    8c54:	0f 90       	pop	r0
    8c56:	0f 90       	pop	r0
    8c58:	df 91       	pop	r29
    8c5a:	cf 91       	pop	r28
    8c5c:	08 95       	ret

00008c5e <usart_init_rs232>:
    8c5e:	0f 93       	push	r16
    8c60:	1f 93       	push	r17
    8c62:	cf 93       	push	r28
    8c64:	df 93       	push	r29
    8c66:	cd b7       	in	r28, 0x3d	; 61
    8c68:	de b7       	in	r29, 0x3e	; 62
    8c6a:	25 97       	sbiw	r28, 0x05	; 5
    8c6c:	cd bf       	out	0x3d, r28	; 61
    8c6e:	de bf       	out	0x3e, r29	; 62
    8c70:	8a 83       	std	Y+2, r24	; 0x02
    8c72:	9b 83       	std	Y+3, r25	; 0x03
    8c74:	6c 83       	std	Y+4, r22	; 0x04
    8c76:	7d 83       	std	Y+5, r23	; 0x05
    8c78:	8a 81       	ldd	r24, Y+2	; 0x02
    8c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    8c7c:	58 de       	rcall	.-848    	; 0x892e <sysclk_enable_peripheral_clock>
    8c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    8c80:	9b 81       	ldd	r25, Y+3	; 0x03
    8c82:	60 e0       	ldi	r22, 0x00	; 0
    8c84:	c6 dd       	rcall	.-1140   	; 0x8812 <usart_set_mode>
    8c86:	8c 81       	ldd	r24, Y+4	; 0x04
    8c88:	9d 81       	ldd	r25, Y+5	; 0x05
    8c8a:	fc 01       	movw	r30, r24
    8c8c:	26 81       	ldd	r18, Z+6	; 0x06
    8c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    8c90:	9d 81       	ldd	r25, Y+5	; 0x05
    8c92:	fc 01       	movw	r30, r24
    8c94:	45 81       	ldd	r20, Z+5	; 0x05
    8c96:	8c 81       	ldd	r24, Y+4	; 0x04
    8c98:	9d 81       	ldd	r25, Y+5	; 0x05
    8c9a:	fc 01       	movw	r30, r24
    8c9c:	34 81       	ldd	r19, Z+4	; 0x04
    8c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    8ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    8ca2:	63 2f       	mov	r22, r19
    8ca4:	7b dd       	rcall	.-1290   	; 0x879c <usart_format_set>
    8ca6:	37 de       	rcall	.-914    	; 0x8916 <sysclk_get_per_hz>
    8ca8:	9b 01       	movw	r18, r22
    8caa:	ac 01       	movw	r20, r24
    8cac:	8c 81       	ldd	r24, Y+4	; 0x04
    8cae:	9d 81       	ldd	r25, Y+5	; 0x05
    8cb0:	fc 01       	movw	r30, r24
    8cb2:	80 81       	ld	r24, Z
    8cb4:	91 81       	ldd	r25, Z+1	; 0x01
    8cb6:	a2 81       	ldd	r26, Z+2	; 0x02
    8cb8:	b3 81       	ldd	r27, Z+3	; 0x03
    8cba:	ea 81       	ldd	r30, Y+2	; 0x02
    8cbc:	fb 81       	ldd	r31, Y+3	; 0x03
    8cbe:	89 01       	movw	r16, r18
    8cc0:	9a 01       	movw	r18, r20
    8cc2:	ac 01       	movw	r20, r24
    8cc4:	bd 01       	movw	r22, r26
    8cc6:	cf 01       	movw	r24, r30
    8cc8:	48 d0       	rcall	.+144    	; 0x8d5a <usart_set_baudrate>
    8cca:	89 83       	std	Y+1, r24	; 0x01
    8ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    8cce:	9b 81       	ldd	r25, Y+3	; 0x03
    8cd0:	88 dd       	rcall	.-1264   	; 0x87e2 <usart_tx_enable>
    8cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    8cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    8cd6:	4a dd       	rcall	.-1388   	; 0x876c <usart_rx_enable>
    8cd8:	89 81       	ldd	r24, Y+1	; 0x01
    8cda:	25 96       	adiw	r28, 0x05	; 5
    8cdc:	cd bf       	out	0x3d, r28	; 61
    8cde:	de bf       	out	0x3e, r29	; 62
    8ce0:	df 91       	pop	r29
    8ce2:	cf 91       	pop	r28
    8ce4:	1f 91       	pop	r17
    8ce6:	0f 91       	pop	r16
    8ce8:	08 95       	ret

00008cea <usart_putchar>:
    8cea:	cf 93       	push	r28
    8cec:	df 93       	push	r29
    8cee:	00 d0       	rcall	.+0      	; 0x8cf0 <usart_putchar+0x6>
    8cf0:	cd b7       	in	r28, 0x3d	; 61
    8cf2:	de b7       	in	r29, 0x3e	; 62
    8cf4:	89 83       	std	Y+1, r24	; 0x01
    8cf6:	9a 83       	std	Y+2, r25	; 0x02
    8cf8:	6b 83       	std	Y+3, r22	; 0x03
    8cfa:	00 00       	nop
    8cfc:	89 81       	ldd	r24, Y+1	; 0x01
    8cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    8d00:	a4 dd       	rcall	.-1208   	; 0x884a <usart_data_register_is_empty>
    8d02:	98 2f       	mov	r25, r24
    8d04:	81 e0       	ldi	r24, 0x01	; 1
    8d06:	89 27       	eor	r24, r25
    8d08:	88 23       	and	r24, r24
    8d0a:	c1 f7       	brne	.-16     	; 0x8cfc <usart_putchar+0x12>
    8d0c:	89 81       	ldd	r24, Y+1	; 0x01
    8d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    8d10:	2b 81       	ldd	r18, Y+3	; 0x03
    8d12:	fc 01       	movw	r30, r24
    8d14:	20 83       	st	Z, r18
    8d16:	80 e0       	ldi	r24, 0x00	; 0
    8d18:	90 e0       	ldi	r25, 0x00	; 0
    8d1a:	23 96       	adiw	r28, 0x03	; 3
    8d1c:	cd bf       	out	0x3d, r28	; 61
    8d1e:	de bf       	out	0x3e, r29	; 62
    8d20:	df 91       	pop	r29
    8d22:	cf 91       	pop	r28
    8d24:	08 95       	ret

00008d26 <usart_getchar>:
    8d26:	cf 93       	push	r28
    8d28:	df 93       	push	r29
    8d2a:	1f 92       	push	r1
    8d2c:	1f 92       	push	r1
    8d2e:	cd b7       	in	r28, 0x3d	; 61
    8d30:	de b7       	in	r29, 0x3e	; 62
    8d32:	89 83       	std	Y+1, r24	; 0x01
    8d34:	9a 83       	std	Y+2, r25	; 0x02
    8d36:	00 00       	nop
    8d38:	89 81       	ldd	r24, Y+1	; 0x01
    8d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d3c:	a0 dd       	rcall	.-1216   	; 0x887e <usart_rx_is_complete>
    8d3e:	98 2f       	mov	r25, r24
    8d40:	81 e0       	ldi	r24, 0x01	; 1
    8d42:	89 27       	eor	r24, r25
    8d44:	88 23       	and	r24, r24
    8d46:	c1 f7       	brne	.-16     	; 0x8d38 <usart_getchar+0x12>
    8d48:	89 81       	ldd	r24, Y+1	; 0x01
    8d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d4c:	fc 01       	movw	r30, r24
    8d4e:	80 81       	ld	r24, Z
    8d50:	0f 90       	pop	r0
    8d52:	0f 90       	pop	r0
    8d54:	df 91       	pop	r29
    8d56:	cf 91       	pop	r28
    8d58:	08 95       	ret

00008d5a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    8d5a:	ef 92       	push	r14
    8d5c:	ff 92       	push	r15
    8d5e:	0f 93       	push	r16
    8d60:	1f 93       	push	r17
    8d62:	cf 93       	push	r28
    8d64:	df 93       	push	r29
    8d66:	cd b7       	in	r28, 0x3d	; 61
    8d68:	de b7       	in	r29, 0x3e	; 62
    8d6a:	6f 97       	sbiw	r28, 0x1f	; 31
    8d6c:	cd bf       	out	0x3d, r28	; 61
    8d6e:	de bf       	out	0x3e, r29	; 62
    8d70:	8e 8b       	std	Y+22, r24	; 0x16
    8d72:	9f 8b       	std	Y+23, r25	; 0x17
    8d74:	48 8f       	std	Y+24, r20	; 0x18
    8d76:	59 8f       	std	Y+25, r21	; 0x19
    8d78:	6a 8f       	std	Y+26, r22	; 0x1a
    8d7a:	7b 8f       	std	Y+27, r23	; 0x1b
    8d7c:	0c 8f       	std	Y+28, r16	; 0x1c
    8d7e:	1d 8f       	std	Y+29, r17	; 0x1d
    8d80:	2e 8f       	std	Y+30, r18	; 0x1e
    8d82:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    8d84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8d86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8d88:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8d8a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8d8c:	68 94       	set
    8d8e:	12 f8       	bld	r1, 2
    8d90:	b6 95       	lsr	r27
    8d92:	a7 95       	ror	r26
    8d94:	97 95       	ror	r25
    8d96:	87 95       	ror	r24
    8d98:	16 94       	lsr	r1
    8d9a:	d1 f7       	brne	.-12     	; 0x8d90 <usart_set_baudrate+0x36>
    8d9c:	8e 87       	std	Y+14, r24	; 0x0e
    8d9e:	9f 87       	std	Y+15, r25	; 0x0f
    8da0:	a8 8b       	std	Y+16, r26	; 0x10
    8da2:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    8da4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8da6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8da8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8daa:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8dac:	07 2e       	mov	r0, r23
    8dae:	76 e1       	ldi	r23, 0x16	; 22
    8db0:	b6 95       	lsr	r27
    8db2:	a7 95       	ror	r26
    8db4:	97 95       	ror	r25
    8db6:	87 95       	ror	r24
    8db8:	7a 95       	dec	r23
    8dba:	d1 f7       	brne	.-12     	; 0x8db0 <usart_set_baudrate+0x56>
    8dbc:	70 2d       	mov	r23, r0
    8dbe:	8a 87       	std	Y+10, r24	; 0x0a
    8dc0:	9b 87       	std	Y+11, r25	; 0x0b
    8dc2:	ac 87       	std	Y+12, r26	; 0x0c
    8dc4:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    8dc6:	8e 89       	ldd	r24, Y+22	; 0x16
    8dc8:	9f 89       	ldd	r25, Y+23	; 0x17
    8dca:	fc 01       	movw	r30, r24
    8dcc:	84 81       	ldd	r24, Z+4	; 0x04
    8dce:	88 2f       	mov	r24, r24
    8dd0:	90 e0       	ldi	r25, 0x00	; 0
    8dd2:	84 70       	andi	r24, 0x04	; 4
    8dd4:	99 27       	eor	r25, r25
    8dd6:	89 2b       	or	r24, r25
    8dd8:	c1 f4       	brne	.+48     	; 0x8e0a <usart_set_baudrate+0xb0>
		max_rate /= 2;
    8dda:	8e 85       	ldd	r24, Y+14	; 0x0e
    8ddc:	9f 85       	ldd	r25, Y+15	; 0x0f
    8dde:	a8 89       	ldd	r26, Y+16	; 0x10
    8de0:	b9 89       	ldd	r27, Y+17	; 0x11
    8de2:	b6 95       	lsr	r27
    8de4:	a7 95       	ror	r26
    8de6:	97 95       	ror	r25
    8de8:	87 95       	ror	r24
    8dea:	8e 87       	std	Y+14, r24	; 0x0e
    8dec:	9f 87       	std	Y+15, r25	; 0x0f
    8dee:	a8 8b       	std	Y+16, r26	; 0x10
    8df0:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    8df2:	8a 85       	ldd	r24, Y+10	; 0x0a
    8df4:	9b 85       	ldd	r25, Y+11	; 0x0b
    8df6:	ac 85       	ldd	r26, Y+12	; 0x0c
    8df8:	bd 85       	ldd	r27, Y+13	; 0x0d
    8dfa:	b6 95       	lsr	r27
    8dfc:	a7 95       	ror	r26
    8dfe:	97 95       	ror	r25
    8e00:	87 95       	ror	r24
    8e02:	8a 87       	std	Y+10, r24	; 0x0a
    8e04:	9b 87       	std	Y+11, r25	; 0x0b
    8e06:	ac 87       	std	Y+12, r26	; 0x0c
    8e08:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    8e0a:	28 8d       	ldd	r18, Y+24	; 0x18
    8e0c:	39 8d       	ldd	r19, Y+25	; 0x19
    8e0e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8e10:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8e12:	8e 85       	ldd	r24, Y+14	; 0x0e
    8e14:	9f 85       	ldd	r25, Y+15	; 0x0f
    8e16:	a8 89       	ldd	r26, Y+16	; 0x10
    8e18:	b9 89       	ldd	r27, Y+17	; 0x11
    8e1a:	82 17       	cp	r24, r18
    8e1c:	93 07       	cpc	r25, r19
    8e1e:	a4 07       	cpc	r26, r20
    8e20:	b5 07       	cpc	r27, r21
    8e22:	68 f0       	brcs	.+26     	; 0x8e3e <usart_set_baudrate+0xe4>
    8e24:	28 8d       	ldd	r18, Y+24	; 0x18
    8e26:	39 8d       	ldd	r19, Y+25	; 0x19
    8e28:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8e2a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8e2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8e30:	ac 85       	ldd	r26, Y+12	; 0x0c
    8e32:	bd 85       	ldd	r27, Y+13	; 0x0d
    8e34:	28 17       	cp	r18, r24
    8e36:	39 07       	cpc	r19, r25
    8e38:	4a 07       	cpc	r20, r26
    8e3a:	5b 07       	cpc	r21, r27
    8e3c:	10 f4       	brcc	.+4      	; 0x8e42 <usart_set_baudrate+0xe8>
		return false;
    8e3e:	80 e0       	ldi	r24, 0x00	; 0
    8e40:	40 c1       	rjmp	.+640    	; 0x90c2 <usart_set_baudrate+0x368>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    8e42:	8e 89       	ldd	r24, Y+22	; 0x16
    8e44:	9f 89       	ldd	r25, Y+23	; 0x17
    8e46:	fc 01       	movw	r30, r24
    8e48:	84 81       	ldd	r24, Z+4	; 0x04
    8e4a:	88 2f       	mov	r24, r24
    8e4c:	90 e0       	ldi	r25, 0x00	; 0
    8e4e:	84 70       	andi	r24, 0x04	; 4
    8e50:	99 27       	eor	r25, r25
    8e52:	89 2b       	or	r24, r25
    8e54:	61 f4       	brne	.+24     	; 0x8e6e <usart_set_baudrate+0x114>
		baud *= 2;
    8e56:	88 8d       	ldd	r24, Y+24	; 0x18
    8e58:	99 8d       	ldd	r25, Y+25	; 0x19
    8e5a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8e5c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8e5e:	88 0f       	add	r24, r24
    8e60:	99 1f       	adc	r25, r25
    8e62:	aa 1f       	adc	r26, r26
    8e64:	bb 1f       	adc	r27, r27
    8e66:	88 8f       	std	Y+24, r24	; 0x18
    8e68:	99 8f       	std	Y+25, r25	; 0x19
    8e6a:	aa 8f       	std	Y+26, r26	; 0x1a
    8e6c:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    8e6e:	8f ef       	ldi	r24, 0xFF	; 255
    8e70:	90 e0       	ldi	r25, 0x00	; 0
    8e72:	a0 e0       	ldi	r26, 0x00	; 0
    8e74:	b0 e0       	ldi	r27, 0x00	; 0
    8e76:	8e 83       	std	Y+6, r24	; 0x06
    8e78:	9f 83       	std	Y+7, r25	; 0x07
    8e7a:	a8 87       	std	Y+8, r26	; 0x08
    8e7c:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    8e7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8e80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8e82:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8e84:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8e86:	28 8d       	ldd	r18, Y+24	; 0x18
    8e88:	39 8d       	ldd	r19, Y+25	; 0x19
    8e8a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8e8c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8e8e:	bc 01       	movw	r22, r24
    8e90:	cd 01       	movw	r24, r26
    8e92:	0e 94 0d 59 	call	0xb21a	; 0xb21a <__udivmodsi4>
    8e96:	da 01       	movw	r26, r20
    8e98:	c9 01       	movw	r24, r18
    8e9a:	8a 8b       	std	Y+18, r24	; 0x12
    8e9c:	9b 8b       	std	Y+19, r25	; 0x13
    8e9e:	ac 8b       	std	Y+20, r26	; 0x14
    8ea0:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    8ea2:	89 ef       	ldi	r24, 0xF9	; 249
    8ea4:	89 83       	std	Y+1, r24	; 0x01
    8ea6:	28 c0       	rjmp	.+80     	; 0x8ef8 <usart_set_baudrate+0x19e>
		if (ratio < limit) {
    8ea8:	2a 89       	ldd	r18, Y+18	; 0x12
    8eaa:	3b 89       	ldd	r19, Y+19	; 0x13
    8eac:	4c 89       	ldd	r20, Y+20	; 0x14
    8eae:	5d 89       	ldd	r21, Y+21	; 0x15
    8eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    8eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    8eb4:	a8 85       	ldd	r26, Y+8	; 0x08
    8eb6:	b9 85       	ldd	r27, Y+9	; 0x09
    8eb8:	28 17       	cp	r18, r24
    8eba:	39 07       	cpc	r19, r25
    8ebc:	4a 07       	cpc	r20, r26
    8ebe:	5b 07       	cpc	r21, r27
    8ec0:	f8 f0       	brcs	.+62     	; 0x8f00 <usart_set_baudrate+0x1a6>
			break;
		}

		limit <<= 1;
    8ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    8ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    8ec6:	a8 85       	ldd	r26, Y+8	; 0x08
    8ec8:	b9 85       	ldd	r27, Y+9	; 0x09
    8eca:	88 0f       	add	r24, r24
    8ecc:	99 1f       	adc	r25, r25
    8ece:	aa 1f       	adc	r26, r26
    8ed0:	bb 1f       	adc	r27, r27
    8ed2:	8e 83       	std	Y+6, r24	; 0x06
    8ed4:	9f 83       	std	Y+7, r25	; 0x07
    8ed6:	a8 87       	std	Y+8, r26	; 0x08
    8ed8:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    8eda:	89 81       	ldd	r24, Y+1	; 0x01
    8edc:	8d 3f       	cpi	r24, 0xFD	; 253
    8ede:	4c f4       	brge	.+18     	; 0x8ef2 <usart_set_baudrate+0x198>
			limit |= 1;
    8ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    8ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    8ee4:	a8 85       	ldd	r26, Y+8	; 0x08
    8ee6:	b9 85       	ldd	r27, Y+9	; 0x09
    8ee8:	81 60       	ori	r24, 0x01	; 1
    8eea:	8e 83       	std	Y+6, r24	; 0x06
    8eec:	9f 83       	std	Y+7, r25	; 0x07
    8eee:	a8 87       	std	Y+8, r26	; 0x08
    8ef0:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    8ef2:	89 81       	ldd	r24, Y+1	; 0x01
    8ef4:	8f 5f       	subi	r24, 0xFF	; 255
    8ef6:	89 83       	std	Y+1, r24	; 0x01
    8ef8:	89 81       	ldd	r24, Y+1	; 0x01
    8efa:	87 30       	cpi	r24, 0x07	; 7
    8efc:	ac f2       	brlt	.-86     	; 0x8ea8 <usart_set_baudrate+0x14e>
    8efe:	01 c0       	rjmp	.+2      	; 0x8f02 <usart_set_baudrate+0x1a8>
		if (ratio < limit) {
			break;
    8f00:	00 00       	nop
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    8f02:	89 81       	ldd	r24, Y+1	; 0x01
    8f04:	88 23       	and	r24, r24
    8f06:	0c f0       	brlt	.+2      	; 0x8f0a <usart_set_baudrate+0x1b0>
    8f08:	8a c0       	rjmp	.+276    	; 0x901e <usart_set_baudrate+0x2c4>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    8f0a:	88 8d       	ldd	r24, Y+24	; 0x18
    8f0c:	99 8d       	ldd	r25, Y+25	; 0x19
    8f0e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8f10:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8f12:	88 0f       	add	r24, r24
    8f14:	99 1f       	adc	r25, r25
    8f16:	aa 1f       	adc	r26, r26
    8f18:	bb 1f       	adc	r27, r27
    8f1a:	88 0f       	add	r24, r24
    8f1c:	99 1f       	adc	r25, r25
    8f1e:	aa 1f       	adc	r26, r26
    8f20:	bb 1f       	adc	r27, r27
    8f22:	88 0f       	add	r24, r24
    8f24:	99 1f       	adc	r25, r25
    8f26:	aa 1f       	adc	r26, r26
    8f28:	bb 1f       	adc	r27, r27
    8f2a:	9c 01       	movw	r18, r24
    8f2c:	ad 01       	movw	r20, r26
    8f2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8f30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8f32:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8f34:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8f36:	82 1b       	sub	r24, r18
    8f38:	93 0b       	sbc	r25, r19
    8f3a:	a4 0b       	sbc	r26, r20
    8f3c:	b5 0b       	sbc	r27, r21
    8f3e:	8c 8f       	std	Y+28, r24	; 0x1c
    8f40:	9d 8f       	std	Y+29, r25	; 0x1d
    8f42:	ae 8f       	std	Y+30, r26	; 0x1e
    8f44:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    8f46:	89 81       	ldd	r24, Y+1	; 0x01
    8f48:	8e 3f       	cpi	r24, 0xFE	; 254
    8f4a:	94 f5       	brge	.+100    	; 0x8fb0 <usart_set_baudrate+0x256>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    8f4c:	89 81       	ldd	r24, Y+1	; 0x01
    8f4e:	08 2e       	mov	r0, r24
    8f50:	00 0c       	add	r0, r0
    8f52:	99 0b       	sbc	r25, r25
    8f54:	2d ef       	ldi	r18, 0xFD	; 253
    8f56:	3f ef       	ldi	r19, 0xFF	; 255
    8f58:	28 1b       	sub	r18, r24
    8f5a:	39 0b       	sbc	r19, r25
    8f5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8f5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8f60:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8f62:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8f64:	7c 01       	movw	r14, r24
    8f66:	8d 01       	movw	r16, r26
    8f68:	04 c0       	rjmp	.+8      	; 0x8f72 <usart_set_baudrate+0x218>
    8f6a:	ee 0c       	add	r14, r14
    8f6c:	ff 1c       	adc	r15, r15
    8f6e:	00 1f       	adc	r16, r16
    8f70:	11 1f       	adc	r17, r17
    8f72:	2a 95       	dec	r18
    8f74:	d2 f7       	brpl	.-12     	; 0x8f6a <usart_set_baudrate+0x210>
    8f76:	a8 01       	movw	r20, r16
    8f78:	97 01       	movw	r18, r14
    8f7a:	88 8d       	ldd	r24, Y+24	; 0x18
    8f7c:	99 8d       	ldd	r25, Y+25	; 0x19
    8f7e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8f80:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8f82:	b6 95       	lsr	r27
    8f84:	a7 95       	ror	r26
    8f86:	97 95       	ror	r25
    8f88:	87 95       	ror	r24
    8f8a:	82 0f       	add	r24, r18
    8f8c:	93 1f       	adc	r25, r19
    8f8e:	a4 1f       	adc	r26, r20
    8f90:	b5 1f       	adc	r27, r21
    8f92:	28 8d       	ldd	r18, Y+24	; 0x18
    8f94:	39 8d       	ldd	r19, Y+25	; 0x19
    8f96:	4a 8d       	ldd	r20, Y+26	; 0x1a
    8f98:	5b 8d       	ldd	r21, Y+27	; 0x1b
    8f9a:	bc 01       	movw	r22, r24
    8f9c:	cd 01       	movw	r24, r26
    8f9e:	0e 94 0d 59 	call	0xb21a	; 0xb21a <__udivmodsi4>
    8fa2:	da 01       	movw	r26, r20
    8fa4:	c9 01       	movw	r24, r18
    8fa6:	8a 83       	std	Y+2, r24	; 0x02
    8fa8:	9b 83       	std	Y+3, r25	; 0x03
    8faa:	ac 83       	std	Y+4, r26	; 0x04
    8fac:	bd 83       	std	Y+5, r27	; 0x05
    8fae:	70 c0       	rjmp	.+224    	; 0x9090 <usart_set_baudrate+0x336>
		} else {
			baud <<= exp + 3;
    8fb0:	89 81       	ldd	r24, Y+1	; 0x01
    8fb2:	08 2e       	mov	r0, r24
    8fb4:	00 0c       	add	r0, r0
    8fb6:	99 0b       	sbc	r25, r25
    8fb8:	9c 01       	movw	r18, r24
    8fba:	2d 5f       	subi	r18, 0xFD	; 253
    8fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    8fbe:	88 8d       	ldd	r24, Y+24	; 0x18
    8fc0:	99 8d       	ldd	r25, Y+25	; 0x19
    8fc2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8fc4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8fc6:	04 c0       	rjmp	.+8      	; 0x8fd0 <usart_set_baudrate+0x276>
    8fc8:	88 0f       	add	r24, r24
    8fca:	99 1f       	adc	r25, r25
    8fcc:	aa 1f       	adc	r26, r26
    8fce:	bb 1f       	adc	r27, r27
    8fd0:	2a 95       	dec	r18
    8fd2:	d2 f7       	brpl	.-12     	; 0x8fc8 <usart_set_baudrate+0x26e>
    8fd4:	88 8f       	std	Y+24, r24	; 0x18
    8fd6:	99 8f       	std	Y+25, r25	; 0x19
    8fd8:	aa 8f       	std	Y+26, r26	; 0x1a
    8fda:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    8fdc:	88 8d       	ldd	r24, Y+24	; 0x18
    8fde:	99 8d       	ldd	r25, Y+25	; 0x19
    8fe0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    8fe2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    8fe4:	9c 01       	movw	r18, r24
    8fe6:	ad 01       	movw	r20, r26
    8fe8:	56 95       	lsr	r21
    8fea:	47 95       	ror	r20
    8fec:	37 95       	ror	r19
    8fee:	27 95       	ror	r18
    8ff0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8ff2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    8ff4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    8ff6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    8ff8:	82 0f       	add	r24, r18
    8ffa:	93 1f       	adc	r25, r19
    8ffc:	a4 1f       	adc	r26, r20
    8ffe:	b5 1f       	adc	r27, r21
    9000:	28 8d       	ldd	r18, Y+24	; 0x18
    9002:	39 8d       	ldd	r19, Y+25	; 0x19
    9004:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9006:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9008:	bc 01       	movw	r22, r24
    900a:	cd 01       	movw	r24, r26
    900c:	0e 94 0d 59 	call	0xb21a	; 0xb21a <__udivmodsi4>
    9010:	da 01       	movw	r26, r20
    9012:	c9 01       	movw	r24, r18
    9014:	8a 83       	std	Y+2, r24	; 0x02
    9016:	9b 83       	std	Y+3, r25	; 0x03
    9018:	ac 83       	std	Y+4, r26	; 0x04
    901a:	bd 83       	std	Y+5, r27	; 0x05
    901c:	39 c0       	rjmp	.+114    	; 0x9090 <usart_set_baudrate+0x336>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    901e:	89 81       	ldd	r24, Y+1	; 0x01
    9020:	08 2e       	mov	r0, r24
    9022:	00 0c       	add	r0, r0
    9024:	99 0b       	sbc	r25, r25
    9026:	9c 01       	movw	r18, r24
    9028:	2d 5f       	subi	r18, 0xFD	; 253
    902a:	3f 4f       	sbci	r19, 0xFF	; 255
    902c:	88 8d       	ldd	r24, Y+24	; 0x18
    902e:	99 8d       	ldd	r25, Y+25	; 0x19
    9030:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9032:	bb 8d       	ldd	r27, Y+27	; 0x1b
    9034:	04 c0       	rjmp	.+8      	; 0x903e <usart_set_baudrate+0x2e4>
    9036:	88 0f       	add	r24, r24
    9038:	99 1f       	adc	r25, r25
    903a:	aa 1f       	adc	r26, r26
    903c:	bb 1f       	adc	r27, r27
    903e:	2a 95       	dec	r18
    9040:	d2 f7       	brpl	.-12     	; 0x9036 <usart_set_baudrate+0x2dc>
    9042:	88 8f       	std	Y+24, r24	; 0x18
    9044:	99 8f       	std	Y+25, r25	; 0x19
    9046:	aa 8f       	std	Y+26, r26	; 0x1a
    9048:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    904a:	88 8d       	ldd	r24, Y+24	; 0x18
    904c:	99 8d       	ldd	r25, Y+25	; 0x19
    904e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9050:	bb 8d       	ldd	r27, Y+27	; 0x1b
    9052:	9c 01       	movw	r18, r24
    9054:	ad 01       	movw	r20, r26
    9056:	56 95       	lsr	r21
    9058:	47 95       	ror	r20
    905a:	37 95       	ror	r19
    905c:	27 95       	ror	r18
    905e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9060:	9d 8d       	ldd	r25, Y+29	; 0x1d
    9062:	ae 8d       	ldd	r26, Y+30	; 0x1e
    9064:	bf 8d       	ldd	r27, Y+31	; 0x1f
    9066:	82 0f       	add	r24, r18
    9068:	93 1f       	adc	r25, r19
    906a:	a4 1f       	adc	r26, r20
    906c:	b5 1f       	adc	r27, r21
    906e:	28 8d       	ldd	r18, Y+24	; 0x18
    9070:	39 8d       	ldd	r19, Y+25	; 0x19
    9072:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9074:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9076:	bc 01       	movw	r22, r24
    9078:	cd 01       	movw	r24, r26
    907a:	0e 94 0d 59 	call	0xb21a	; 0xb21a <__udivmodsi4>
    907e:	da 01       	movw	r26, r20
    9080:	c9 01       	movw	r24, r18
    9082:	01 97       	sbiw	r24, 0x01	; 1
    9084:	a1 09       	sbc	r26, r1
    9086:	b1 09       	sbc	r27, r1
    9088:	8a 83       	std	Y+2, r24	; 0x02
    908a:	9b 83       	std	Y+3, r25	; 0x03
    908c:	ac 83       	std	Y+4, r26	; 0x04
    908e:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    9090:	8a 81       	ldd	r24, Y+2	; 0x02
    9092:	9b 81       	ldd	r25, Y+3	; 0x03
    9094:	ac 81       	ldd	r26, Y+4	; 0x04
    9096:	bd 81       	ldd	r27, Y+5	; 0x05
    9098:	89 2f       	mov	r24, r25
    909a:	9a 2f       	mov	r25, r26
    909c:	ab 2f       	mov	r26, r27
    909e:	bb 27       	eor	r27, r27
    90a0:	98 2f       	mov	r25, r24
    90a2:	9f 70       	andi	r25, 0x0F	; 15
    90a4:	89 81       	ldd	r24, Y+1	; 0x01
    90a6:	82 95       	swap	r24
    90a8:	80 7f       	andi	r24, 0xF0	; 240
    90aa:	29 2f       	mov	r18, r25
    90ac:	28 2b       	or	r18, r24
    90ae:	8e 89       	ldd	r24, Y+22	; 0x16
    90b0:	9f 89       	ldd	r25, Y+23	; 0x17
    90b2:	fc 01       	movw	r30, r24
    90b4:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    90b6:	2a 81       	ldd	r18, Y+2	; 0x02
    90b8:	8e 89       	ldd	r24, Y+22	; 0x16
    90ba:	9f 89       	ldd	r25, Y+23	; 0x17
    90bc:	fc 01       	movw	r30, r24
    90be:	26 83       	std	Z+6, r18	; 0x06

	return true;
    90c0:	81 e0       	ldi	r24, 0x01	; 1
}
    90c2:	6f 96       	adiw	r28, 0x1f	; 31
    90c4:	cd bf       	out	0x3d, r28	; 61
    90c6:	de bf       	out	0x3e, r29	; 62
    90c8:	df 91       	pop	r29
    90ca:	cf 91       	pop	r28
    90cc:	1f 91       	pop	r17
    90ce:	0f 91       	pop	r16
    90d0:	ff 90       	pop	r15
    90d2:	ef 90       	pop	r14
    90d4:	08 95       	ret

000090d6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    90d6:	cf 93       	push	r28
    90d8:	df 93       	push	r29
    90da:	00 d0       	rcall	.+0      	; 0x90dc <ioport_configure_port_pin+0x6>
    90dc:	00 d0       	rcall	.+0      	; 0x90de <ioport_configure_port_pin+0x8>
    90de:	cd b7       	in	r28, 0x3d	; 61
    90e0:	de b7       	in	r29, 0x3e	; 62
    90e2:	8a 83       	std	Y+2, r24	; 0x02
    90e4:	9b 83       	std	Y+3, r25	; 0x03
    90e6:	6c 83       	std	Y+4, r22	; 0x04
    90e8:	4d 83       	std	Y+5, r20	; 0x05
    90ea:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    90ec:	19 82       	std	Y+1, r1	; 0x01
    90ee:	20 c0       	rjmp	.+64     	; 0x9130 <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
    90f0:	8c 81       	ldd	r24, Y+4	; 0x04
    90f2:	88 2f       	mov	r24, r24
    90f4:	90 e0       	ldi	r25, 0x00	; 0
    90f6:	29 81       	ldd	r18, Y+1	; 0x01
    90f8:	22 2f       	mov	r18, r18
    90fa:	30 e0       	ldi	r19, 0x00	; 0
    90fc:	02 c0       	rjmp	.+4      	; 0x9102 <ioport_configure_port_pin+0x2c>
    90fe:	95 95       	asr	r25
    9100:	87 95       	ror	r24
    9102:	2a 95       	dec	r18
    9104:	e2 f7       	brpl	.-8      	; 0x90fe <ioport_configure_port_pin+0x28>
    9106:	81 70       	andi	r24, 0x01	; 1
    9108:	99 27       	eor	r25, r25
    910a:	89 2b       	or	r24, r25
    910c:	71 f0       	breq	.+28     	; 0x912a <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    910e:	89 81       	ldd	r24, Y+1	; 0x01
    9110:	88 2f       	mov	r24, r24
    9112:	90 e0       	ldi	r25, 0x00	; 0
    9114:	40 96       	adiw	r24, 0x10	; 16
    9116:	2a 81       	ldd	r18, Y+2	; 0x02
    9118:	3b 81       	ldd	r19, Y+3	; 0x03
    911a:	82 0f       	add	r24, r18
    911c:	93 1f       	adc	r25, r19
    911e:	2d 81       	ldd	r18, Y+5	; 0x05
    9120:	3e 81       	ldd	r19, Y+6	; 0x06
    9122:	23 2f       	mov	r18, r19
    9124:	33 27       	eor	r19, r19
    9126:	fc 01       	movw	r30, r24
    9128:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    912a:	89 81       	ldd	r24, Y+1	; 0x01
    912c:	8f 5f       	subi	r24, 0xFF	; 255
    912e:	89 83       	std	Y+1, r24	; 0x01
    9130:	89 81       	ldd	r24, Y+1	; 0x01
    9132:	88 30       	cpi	r24, 0x08	; 8
    9134:	e8 f2       	brcs	.-70     	; 0x90f0 <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    9136:	8d 81       	ldd	r24, Y+5	; 0x05
    9138:	9e 81       	ldd	r25, Y+6	; 0x06
    913a:	81 70       	andi	r24, 0x01	; 1
    913c:	99 27       	eor	r25, r25
    913e:	89 2b       	or	r24, r25
    9140:	d1 f0       	breq	.+52     	; 0x9176 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
    9142:	8d 81       	ldd	r24, Y+5	; 0x05
    9144:	9e 81       	ldd	r25, Y+6	; 0x06
    9146:	82 70       	andi	r24, 0x02	; 2
    9148:	99 27       	eor	r25, r25
    914a:	89 2b       	or	r24, r25
    914c:	39 f0       	breq	.+14     	; 0x915c <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    914e:	8a 81       	ldd	r24, Y+2	; 0x02
    9150:	9b 81       	ldd	r25, Y+3	; 0x03
    9152:	05 96       	adiw	r24, 0x05	; 5
    9154:	2c 81       	ldd	r18, Y+4	; 0x04
    9156:	fc 01       	movw	r30, r24
    9158:	20 83       	st	Z, r18
    915a:	06 c0       	rjmp	.+12     	; 0x9168 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    915c:	8a 81       	ldd	r24, Y+2	; 0x02
    915e:	9b 81       	ldd	r25, Y+3	; 0x03
    9160:	06 96       	adiw	r24, 0x06	; 6
    9162:	2c 81       	ldd	r18, Y+4	; 0x04
    9164:	fc 01       	movw	r30, r24
    9166:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    9168:	8a 81       	ldd	r24, Y+2	; 0x02
    916a:	9b 81       	ldd	r25, Y+3	; 0x03
    916c:	01 96       	adiw	r24, 0x01	; 1
    916e:	2c 81       	ldd	r18, Y+4	; 0x04
    9170:	fc 01       	movw	r30, r24
    9172:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
    9174:	06 c0       	rjmp	.+12     	; 0x9182 <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    9176:	8a 81       	ldd	r24, Y+2	; 0x02
    9178:	9b 81       	ldd	r25, Y+3	; 0x03
    917a:	02 96       	adiw	r24, 0x02	; 2
    917c:	2c 81       	ldd	r18, Y+4	; 0x04
    917e:	fc 01       	movw	r30, r24
    9180:	20 83       	st	Z, r18
	}
}
    9182:	00 00       	nop
    9184:	26 96       	adiw	r28, 0x06	; 6
    9186:	cd bf       	out	0x3d, r28	; 61
    9188:	de bf       	out	0x3e, r29	; 62
    918a:	df 91       	pop	r29
    918c:	cf 91       	pop	r28
    918e:	08 95       	ret

00009190 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    9190:	cf 93       	push	r28
    9192:	df 93       	push	r29
    9194:	cd b7       	in	r28, 0x3d	; 61
    9196:	de b7       	in	r29, 0x3e	; 62
    9198:	27 97       	sbiw	r28, 0x07	; 7
    919a:	cd bf       	out	0x3d, r28	; 61
    919c:	de bf       	out	0x3e, r29	; 62
    919e:	8d 83       	std	Y+5, r24	; 0x05
    91a0:	6e 83       	std	Y+6, r22	; 0x06
    91a2:	7f 83       	std	Y+7, r23	; 0x07
    91a4:	8d 81       	ldd	r24, Y+5	; 0x05
    91a6:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    91a8:	89 81       	ldd	r24, Y+1	; 0x01
    91aa:	88 2f       	mov	r24, r24
    91ac:	90 e0       	ldi	r25, 0x00	; 0
    91ae:	9c 01       	movw	r18, r24
    91b0:	27 70       	andi	r18, 0x07	; 7
    91b2:	33 27       	eor	r19, r19
    91b4:	81 e0       	ldi	r24, 0x01	; 1
    91b6:	90 e0       	ldi	r25, 0x00	; 0
    91b8:	02 c0       	rjmp	.+4      	; 0x91be <ioport_configure_pin+0x2e>
    91ba:	88 0f       	add	r24, r24
    91bc:	99 1f       	adc	r25, r25
    91be:	2a 95       	dec	r18
    91c0:	e2 f7       	brpl	.-8      	; 0x91ba <ioport_configure_pin+0x2a>
    91c2:	68 2f       	mov	r22, r24
    91c4:	8d 81       	ldd	r24, Y+5	; 0x05
    91c6:	8a 83       	std	Y+2, r24	; 0x02
    91c8:	8a 81       	ldd	r24, Y+2	; 0x02
    91ca:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    91cc:	8b 81       	ldd	r24, Y+3	; 0x03
    91ce:	86 95       	lsr	r24
    91d0:	86 95       	lsr	r24
    91d2:	86 95       	lsr	r24
    91d4:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    91d6:	8c 81       	ldd	r24, Y+4	; 0x04
    91d8:	88 2f       	mov	r24, r24
    91da:	90 e0       	ldi	r25, 0x00	; 0
    91dc:	88 0f       	add	r24, r24
    91de:	99 1f       	adc	r25, r25
    91e0:	82 95       	swap	r24
    91e2:	92 95       	swap	r25
    91e4:	90 7f       	andi	r25, 0xF0	; 240
    91e6:	98 27       	eor	r25, r24
    91e8:	80 7f       	andi	r24, 0xF0	; 240
    91ea:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    91ec:	9a 5f       	subi	r25, 0xFA	; 250
    91ee:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    91f0:	8e 81       	ldd	r24, Y+6	; 0x06
    91f2:	9f 81       	ldd	r25, Y+7	; 0x07
    91f4:	ac 01       	movw	r20, r24
    91f6:	c9 01       	movw	r24, r18
    91f8:	6e df       	rcall	.-292    	; 0x90d6 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    91fa:	00 00       	nop
    91fc:	27 96       	adiw	r28, 0x07	; 7
    91fe:	cd bf       	out	0x3d, r28	; 61
    9200:	de bf       	out	0x3e, r29	; 62
    9202:	df 91       	pop	r29
    9204:	cf 91       	pop	r28
    9206:	08 95       	ret

00009208 <board_init>:
#include <board.h>
#include <conf_board.h>
#include <ioport.h>
 
void board_init(void)
{
    9208:	cf 93       	push	r28
    920a:	df 93       	push	r29
    920c:	cd b7       	in	r28, 0x3d	; 61
    920e:	de b7       	in	r29, 0x3e	; 62
	//Configure LED0
	ioport_configure_pin(LED0_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    9210:	63 e0       	ldi	r22, 0x03	; 3
    9212:	70 e0       	ldi	r23, 0x00	; 0
    9214:	83 e7       	ldi	r24, 0x73	; 115
    9216:	bc df       	rcall	.-136    	; 0x9190 <ioport_configure_pin>
	
	//Configure SW0
	ioport_configure_pin(BUTTON_0_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    9218:	60 e0       	ldi	r22, 0x00	; 0
    921a:	78 e1       	ldi	r23, 0x18	; 24
    921c:	82 e7       	ldi	r24, 0x72	; 114
    921e:	b8 df       	rcall	.-144    	; 0x9190 <ioport_configure_pin>
	#ifdef CONF_BOARD_ENABLE_USARTE0
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
		| IOPORT_INIT_HIGH);
		ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
	#endif
}
    9220:	00 00       	nop
    9222:	df 91       	pop	r29
    9224:	cf 91       	pop	r28
    9226:	08 95       	ret

00009228 <sysclk_enable_peripheral_clock>:
void uart_write(uart_device * device, uint8_t data)
{
	while(!(device->Usart->STATUS&0b00100000));//wait for transmition buffer to clear
	device->Usart->DATA=data;
	while((device->Usart->STATUS&0b01000000));//wait for data to be sent
}
    9228:	cf 93       	push	r28
    922a:	df 93       	push	r29
    922c:	1f 92       	push	r1
    922e:	1f 92       	push	r1
    9230:	cd b7       	in	r28, 0x3d	; 61
    9232:	de b7       	in	r29, 0x3e	; 62
    9234:	89 83       	std	Y+1, r24	; 0x01
    9236:	9a 83       	std	Y+2, r25	; 0x02
    9238:	89 81       	ldd	r24, Y+1	; 0x01
    923a:	9a 81       	ldd	r25, Y+2	; 0x02
    923c:	89 2b       	or	r24, r25
    923e:	09 f4       	brne	.+2      	; 0x9242 <sysclk_enable_peripheral_clock+0x1a>
    9240:	85 c1       	rjmp	.+778    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9242:	89 81       	ldd	r24, Y+1	; 0x01
    9244:	9a 81       	ldd	r25, Y+2	; 0x02
    9246:	80 3c       	cpi	r24, 0xC0	; 192
    9248:	91 05       	cpc	r25, r1
    924a:	29 f4       	brne	.+10     	; 0x9256 <sysclk_enable_peripheral_clock+0x2e>
    924c:	60 e1       	ldi	r22, 0x10	; 16
    924e:	80 e0       	ldi	r24, 0x00	; 0
    9250:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9254:	7b c1       	rjmp	.+758    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9256:	89 81       	ldd	r24, Y+1	; 0x01
    9258:	9a 81       	ldd	r25, Y+2	; 0x02
    925a:	80 34       	cpi	r24, 0x40	; 64
    925c:	94 40       	sbci	r25, 0x04	; 4
    925e:	29 f4       	brne	.+10     	; 0x926a <sysclk_enable_peripheral_clock+0x42>
    9260:	68 e0       	ldi	r22, 0x08	; 8
    9262:	80 e0       	ldi	r24, 0x00	; 0
    9264:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9268:	71 c1       	rjmp	.+738    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    926a:	89 81       	ldd	r24, Y+1	; 0x01
    926c:	9a 81       	ldd	r25, Y+2	; 0x02
    926e:	81 15       	cp	r24, r1
    9270:	94 40       	sbci	r25, 0x04	; 4
    9272:	29 f4       	brne	.+10     	; 0x927e <sysclk_enable_peripheral_clock+0x56>
    9274:	64 e0       	ldi	r22, 0x04	; 4
    9276:	80 e0       	ldi	r24, 0x00	; 0
    9278:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    927c:	67 c1       	rjmp	.+718    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    927e:	89 81       	ldd	r24, Y+1	; 0x01
    9280:	9a 81       	ldd	r25, Y+2	; 0x02
    9282:	80 38       	cpi	r24, 0x80	; 128
    9284:	91 40       	sbci	r25, 0x01	; 1
    9286:	29 f4       	brne	.+10     	; 0x9292 <sysclk_enable_peripheral_clock+0x6a>
    9288:	62 e0       	ldi	r22, 0x02	; 2
    928a:	80 e0       	ldi	r24, 0x00	; 0
    928c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9290:	5d c1       	rjmp	.+698    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9292:	89 81       	ldd	r24, Y+1	; 0x01
    9294:	9a 81       	ldd	r25, Y+2	; 0x02
    9296:	81 15       	cp	r24, r1
    9298:	91 40       	sbci	r25, 0x01	; 1
    929a:	29 f4       	brne	.+10     	; 0x92a6 <sysclk_enable_peripheral_clock+0x7e>
    929c:	61 e0       	ldi	r22, 0x01	; 1
    929e:	80 e0       	ldi	r24, 0x00	; 0
    92a0:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    92a4:	53 c1       	rjmp	.+678    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    92a6:	89 81       	ldd	r24, Y+1	; 0x01
    92a8:	9a 81       	ldd	r25, Y+2	; 0x02
    92aa:	80 38       	cpi	r24, 0x80	; 128
    92ac:	93 40       	sbci	r25, 0x03	; 3
    92ae:	29 f4       	brne	.+10     	; 0x92ba <sysclk_enable_peripheral_clock+0x92>
    92b0:	61 e0       	ldi	r22, 0x01	; 1
    92b2:	81 e0       	ldi	r24, 0x01	; 1
    92b4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    92b8:	49 c1       	rjmp	.+658    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    92ba:	89 81       	ldd	r24, Y+1	; 0x01
    92bc:	9a 81       	ldd	r25, Y+2	; 0x02
    92be:	80 39       	cpi	r24, 0x90	; 144
    92c0:	93 40       	sbci	r25, 0x03	; 3
    92c2:	29 f4       	brne	.+10     	; 0x92ce <sysclk_enable_peripheral_clock+0xa6>
    92c4:	61 e0       	ldi	r22, 0x01	; 1
    92c6:	82 e0       	ldi	r24, 0x02	; 2
    92c8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    92cc:	3f c1       	rjmp	.+638    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    92ce:	89 81       	ldd	r24, Y+1	; 0x01
    92d0:	9a 81       	ldd	r25, Y+2	; 0x02
    92d2:	81 15       	cp	r24, r1
    92d4:	92 40       	sbci	r25, 0x02	; 2
    92d6:	29 f4       	brne	.+10     	; 0x92e2 <sysclk_enable_peripheral_clock+0xba>
    92d8:	62 e0       	ldi	r22, 0x02	; 2
    92da:	81 e0       	ldi	r24, 0x01	; 1
    92dc:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    92e0:	35 c1       	rjmp	.+618    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    92e2:	89 81       	ldd	r24, Y+1	; 0x01
    92e4:	9a 81       	ldd	r25, Y+2	; 0x02
    92e6:	80 34       	cpi	r24, 0x40	; 64
    92e8:	92 40       	sbci	r25, 0x02	; 2
    92ea:	29 f4       	brne	.+10     	; 0x92f6 <sysclk_enable_peripheral_clock+0xce>
    92ec:	62 e0       	ldi	r22, 0x02	; 2
    92ee:	82 e0       	ldi	r24, 0x02	; 2
    92f0:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    92f4:	2b c1       	rjmp	.+598    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    92f6:	89 81       	ldd	r24, Y+1	; 0x01
    92f8:	9a 81       	ldd	r25, Y+2	; 0x02
    92fa:	81 15       	cp	r24, r1
    92fc:	93 40       	sbci	r25, 0x03	; 3
    92fe:	29 f4       	brne	.+10     	; 0x930a <sysclk_enable_peripheral_clock+0xe2>
    9300:	64 e0       	ldi	r22, 0x04	; 4
    9302:	81 e0       	ldi	r24, 0x01	; 1
    9304:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9308:	21 c1       	rjmp	.+578    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    930a:	89 81       	ldd	r24, Y+1	; 0x01
    930c:	9a 81       	ldd	r25, Y+2	; 0x02
    930e:	80 32       	cpi	r24, 0x20	; 32
    9310:	93 40       	sbci	r25, 0x03	; 3
    9312:	29 f4       	brne	.+10     	; 0x931e <sysclk_enable_peripheral_clock+0xf6>
    9314:	64 e0       	ldi	r22, 0x04	; 4
    9316:	82 e0       	ldi	r24, 0x02	; 2
    9318:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    931c:	17 c1       	rjmp	.+558    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    931e:	89 81       	ldd	r24, Y+1	; 0x01
    9320:	9a 81       	ldd	r25, Y+2	; 0x02
    9322:	81 15       	cp	r24, r1
    9324:	98 40       	sbci	r25, 0x08	; 8
    9326:	29 f4       	brne	.+10     	; 0x9332 <sysclk_enable_peripheral_clock+0x10a>
    9328:	61 e0       	ldi	r22, 0x01	; 1
    932a:	83 e0       	ldi	r24, 0x03	; 3
    932c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9330:	0d c1       	rjmp	.+538    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9332:	89 81       	ldd	r24, Y+1	; 0x01
    9334:	9a 81       	ldd	r25, Y+2	; 0x02
    9336:	81 15       	cp	r24, r1
    9338:	99 40       	sbci	r25, 0x09	; 9
    933a:	29 f4       	brne	.+10     	; 0x9346 <sysclk_enable_peripheral_clock+0x11e>
    933c:	61 e0       	ldi	r22, 0x01	; 1
    933e:	84 e0       	ldi	r24, 0x04	; 4
    9340:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9344:	03 c1       	rjmp	.+518    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9346:	89 81       	ldd	r24, Y+1	; 0x01
    9348:	9a 81       	ldd	r25, Y+2	; 0x02
    934a:	81 15       	cp	r24, r1
    934c:	9a 40       	sbci	r25, 0x0A	; 10
    934e:	29 f4       	brne	.+10     	; 0x935a <sysclk_enable_peripheral_clock+0x132>
    9350:	61 e0       	ldi	r22, 0x01	; 1
    9352:	85 e0       	ldi	r24, 0x05	; 5
    9354:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9358:	f9 c0       	rjmp	.+498    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    935a:	89 81       	ldd	r24, Y+1	; 0x01
    935c:	9a 81       	ldd	r25, Y+2	; 0x02
    935e:	81 15       	cp	r24, r1
    9360:	9b 40       	sbci	r25, 0x0B	; 11
    9362:	29 f4       	brne	.+10     	; 0x936e <sysclk_enable_peripheral_clock+0x146>
    9364:	61 e0       	ldi	r22, 0x01	; 1
    9366:	86 e0       	ldi	r24, 0x06	; 6
    9368:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    936c:	ef c0       	rjmp	.+478    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    936e:	89 81       	ldd	r24, Y+1	; 0x01
    9370:	9a 81       	ldd	r25, Y+2	; 0x02
    9372:	80 34       	cpi	r24, 0x40	; 64
    9374:	98 40       	sbci	r25, 0x08	; 8
    9376:	29 f4       	brne	.+10     	; 0x9382 <sysclk_enable_peripheral_clock+0x15a>
    9378:	62 e0       	ldi	r22, 0x02	; 2
    937a:	83 e0       	ldi	r24, 0x03	; 3
    937c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9380:	e5 c0       	rjmp	.+458    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9382:	89 81       	ldd	r24, Y+1	; 0x01
    9384:	9a 81       	ldd	r25, Y+2	; 0x02
    9386:	80 34       	cpi	r24, 0x40	; 64
    9388:	99 40       	sbci	r25, 0x09	; 9
    938a:	29 f4       	brne	.+10     	; 0x9396 <sysclk_enable_peripheral_clock+0x16e>
    938c:	62 e0       	ldi	r22, 0x02	; 2
    938e:	84 e0       	ldi	r24, 0x04	; 4
    9390:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9394:	db c0       	rjmp	.+438    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9396:	89 81       	ldd	r24, Y+1	; 0x01
    9398:	9a 81       	ldd	r25, Y+2	; 0x02
    939a:	80 34       	cpi	r24, 0x40	; 64
    939c:	9a 40       	sbci	r25, 0x0A	; 10
    939e:	29 f4       	brne	.+10     	; 0x93aa <sysclk_enable_peripheral_clock+0x182>
    93a0:	62 e0       	ldi	r22, 0x02	; 2
    93a2:	85 e0       	ldi	r24, 0x05	; 5
    93a4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    93a8:	d1 c0       	rjmp	.+418    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    93aa:	89 81       	ldd	r24, Y+1	; 0x01
    93ac:	9a 81       	ldd	r25, Y+2	; 0x02
    93ae:	80 34       	cpi	r24, 0x40	; 64
    93b0:	9b 40       	sbci	r25, 0x0B	; 11
    93b2:	29 f4       	brne	.+10     	; 0x93be <sysclk_enable_peripheral_clock+0x196>
    93b4:	62 e0       	ldi	r22, 0x02	; 2
    93b6:	86 e0       	ldi	r24, 0x06	; 6
    93b8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    93bc:	c7 c0       	rjmp	.+398    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    93be:	89 81       	ldd	r24, Y+1	; 0x01
    93c0:	9a 81       	ldd	r25, Y+2	; 0x02
    93c2:	80 39       	cpi	r24, 0x90	; 144
    93c4:	98 40       	sbci	r25, 0x08	; 8
    93c6:	29 f4       	brne	.+10     	; 0x93d2 <sysclk_enable_peripheral_clock+0x1aa>
    93c8:	64 e0       	ldi	r22, 0x04	; 4
    93ca:	83 e0       	ldi	r24, 0x03	; 3
    93cc:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    93d0:	bd c0       	rjmp	.+378    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    93d2:	89 81       	ldd	r24, Y+1	; 0x01
    93d4:	9a 81       	ldd	r25, Y+2	; 0x02
    93d6:	80 39       	cpi	r24, 0x90	; 144
    93d8:	99 40       	sbci	r25, 0x09	; 9
    93da:	29 f4       	brne	.+10     	; 0x93e6 <sysclk_enable_peripheral_clock+0x1be>
    93dc:	64 e0       	ldi	r22, 0x04	; 4
    93de:	84 e0       	ldi	r24, 0x04	; 4
    93e0:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    93e4:	b3 c0       	rjmp	.+358    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    93e6:	89 81       	ldd	r24, Y+1	; 0x01
    93e8:	9a 81       	ldd	r25, Y+2	; 0x02
    93ea:	80 39       	cpi	r24, 0x90	; 144
    93ec:	9a 40       	sbci	r25, 0x0A	; 10
    93ee:	29 f4       	brne	.+10     	; 0x93fa <sysclk_enable_peripheral_clock+0x1d2>
    93f0:	64 e0       	ldi	r22, 0x04	; 4
    93f2:	85 e0       	ldi	r24, 0x05	; 5
    93f4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    93f8:	a9 c0       	rjmp	.+338    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    93fa:	89 81       	ldd	r24, Y+1	; 0x01
    93fc:	9a 81       	ldd	r25, Y+2	; 0x02
    93fe:	80 39       	cpi	r24, 0x90	; 144
    9400:	9b 40       	sbci	r25, 0x0B	; 11
    9402:	29 f4       	brne	.+10     	; 0x940e <sysclk_enable_peripheral_clock+0x1e6>
    9404:	64 e0       	ldi	r22, 0x04	; 4
    9406:	86 e0       	ldi	r24, 0x06	; 6
    9408:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    940c:	9f c0       	rjmp	.+318    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    940e:	89 81       	ldd	r24, Y+1	; 0x01
    9410:	9a 81       	ldd	r25, Y+2	; 0x02
    9412:	80 3c       	cpi	r24, 0xC0	; 192
    9414:	98 40       	sbci	r25, 0x08	; 8
    9416:	29 f4       	brne	.+10     	; 0x9422 <sysclk_enable_peripheral_clock+0x1fa>
    9418:	68 e0       	ldi	r22, 0x08	; 8
    941a:	83 e0       	ldi	r24, 0x03	; 3
    941c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9420:	95 c0       	rjmp	.+298    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9422:	89 81       	ldd	r24, Y+1	; 0x01
    9424:	9a 81       	ldd	r25, Y+2	; 0x02
    9426:	80 3c       	cpi	r24, 0xC0	; 192
    9428:	99 40       	sbci	r25, 0x09	; 9
    942a:	29 f4       	brne	.+10     	; 0x9436 <sysclk_enable_peripheral_clock+0x20e>
    942c:	68 e0       	ldi	r22, 0x08	; 8
    942e:	84 e0       	ldi	r24, 0x04	; 4
    9430:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9434:	8b c0       	rjmp	.+278    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9436:	89 81       	ldd	r24, Y+1	; 0x01
    9438:	9a 81       	ldd	r25, Y+2	; 0x02
    943a:	80 3c       	cpi	r24, 0xC0	; 192
    943c:	9a 40       	sbci	r25, 0x0A	; 10
    943e:	29 f4       	brne	.+10     	; 0x944a <sysclk_enable_peripheral_clock+0x222>
    9440:	68 e0       	ldi	r22, 0x08	; 8
    9442:	85 e0       	ldi	r24, 0x05	; 5
    9444:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9448:	81 c0       	rjmp	.+258    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    944a:	89 81       	ldd	r24, Y+1	; 0x01
    944c:	9a 81       	ldd	r25, Y+2	; 0x02
    944e:	80 3c       	cpi	r24, 0xC0	; 192
    9450:	9b 40       	sbci	r25, 0x0B	; 11
    9452:	29 f4       	brne	.+10     	; 0x945e <sysclk_enable_peripheral_clock+0x236>
    9454:	68 e0       	ldi	r22, 0x08	; 8
    9456:	86 e0       	ldi	r24, 0x06	; 6
    9458:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    945c:	77 c0       	rjmp	.+238    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    945e:	89 81       	ldd	r24, Y+1	; 0x01
    9460:	9a 81       	ldd	r25, Y+2	; 0x02
    9462:	80 3a       	cpi	r24, 0xA0	; 160
    9464:	98 40       	sbci	r25, 0x08	; 8
    9466:	29 f4       	brne	.+10     	; 0x9472 <sysclk_enable_peripheral_clock+0x24a>
    9468:	60 e1       	ldi	r22, 0x10	; 16
    946a:	83 e0       	ldi	r24, 0x03	; 3
    946c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9470:	6d c0       	rjmp	.+218    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9472:	89 81       	ldd	r24, Y+1	; 0x01
    9474:	9a 81       	ldd	r25, Y+2	; 0x02
    9476:	80 3a       	cpi	r24, 0xA0	; 160
    9478:	99 40       	sbci	r25, 0x09	; 9
    947a:	29 f4       	brne	.+10     	; 0x9486 <sysclk_enable_peripheral_clock+0x25e>
    947c:	60 e1       	ldi	r22, 0x10	; 16
    947e:	84 e0       	ldi	r24, 0x04	; 4
    9480:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9484:	63 c0       	rjmp	.+198    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9486:	89 81       	ldd	r24, Y+1	; 0x01
    9488:	9a 81       	ldd	r25, Y+2	; 0x02
    948a:	80 3a       	cpi	r24, 0xA0	; 160
    948c:	9a 40       	sbci	r25, 0x0A	; 10
    948e:	29 f4       	brne	.+10     	; 0x949a <sysclk_enable_peripheral_clock+0x272>
    9490:	60 e1       	ldi	r22, 0x10	; 16
    9492:	85 e0       	ldi	r24, 0x05	; 5
    9494:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9498:	59 c0       	rjmp	.+178    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    949a:	89 81       	ldd	r24, Y+1	; 0x01
    949c:	9a 81       	ldd	r25, Y+2	; 0x02
    949e:	80 3a       	cpi	r24, 0xA0	; 160
    94a0:	9b 40       	sbci	r25, 0x0B	; 11
    94a2:	29 f4       	brne	.+10     	; 0x94ae <sysclk_enable_peripheral_clock+0x286>
    94a4:	60 e1       	ldi	r22, 0x10	; 16
    94a6:	86 e0       	ldi	r24, 0x06	; 6
    94a8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    94ac:	4f c0       	rjmp	.+158    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    94ae:	89 81       	ldd	r24, Y+1	; 0x01
    94b0:	9a 81       	ldd	r25, Y+2	; 0x02
    94b2:	80 3b       	cpi	r24, 0xB0	; 176
    94b4:	98 40       	sbci	r25, 0x08	; 8
    94b6:	29 f4       	brne	.+10     	; 0x94c2 <sysclk_enable_peripheral_clock+0x29a>
    94b8:	60 e2       	ldi	r22, 0x20	; 32
    94ba:	83 e0       	ldi	r24, 0x03	; 3
    94bc:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    94c0:	45 c0       	rjmp	.+138    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    94c2:	89 81       	ldd	r24, Y+1	; 0x01
    94c4:	9a 81       	ldd	r25, Y+2	; 0x02
    94c6:	80 3b       	cpi	r24, 0xB0	; 176
    94c8:	99 40       	sbci	r25, 0x09	; 9
    94ca:	29 f4       	brne	.+10     	; 0x94d6 <sysclk_enable_peripheral_clock+0x2ae>
    94cc:	60 e2       	ldi	r22, 0x20	; 32
    94ce:	84 e0       	ldi	r24, 0x04	; 4
    94d0:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    94d4:	3b c0       	rjmp	.+118    	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    94d6:	89 81       	ldd	r24, Y+1	; 0x01
    94d8:	9a 81       	ldd	r25, Y+2	; 0x02
    94da:	80 3b       	cpi	r24, 0xB0	; 176
    94dc:	9a 40       	sbci	r25, 0x0A	; 10
    94de:	29 f4       	brne	.+10     	; 0x94ea <sysclk_enable_peripheral_clock+0x2c2>
    94e0:	60 e2       	ldi	r22, 0x20	; 32
    94e2:	85 e0       	ldi	r24, 0x05	; 5
    94e4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    94e8:	31 c0       	rjmp	.+98     	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    94ea:	89 81       	ldd	r24, Y+1	; 0x01
    94ec:	9a 81       	ldd	r25, Y+2	; 0x02
    94ee:	80 3b       	cpi	r24, 0xB0	; 176
    94f0:	9b 40       	sbci	r25, 0x0B	; 11
    94f2:	29 f4       	brne	.+10     	; 0x94fe <sysclk_enable_peripheral_clock+0x2d6>
    94f4:	60 e2       	ldi	r22, 0x20	; 32
    94f6:	86 e0       	ldi	r24, 0x06	; 6
    94f8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    94fc:	27 c0       	rjmp	.+78     	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    94fe:	89 81       	ldd	r24, Y+1	; 0x01
    9500:	9a 81       	ldd	r25, Y+2	; 0x02
    9502:	80 38       	cpi	r24, 0x80	; 128
    9504:	94 40       	sbci	r25, 0x04	; 4
    9506:	29 f4       	brne	.+10     	; 0x9512 <sysclk_enable_peripheral_clock+0x2ea>
    9508:	60 e4       	ldi	r22, 0x40	; 64
    950a:	83 e0       	ldi	r24, 0x03	; 3
    950c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9510:	1d c0       	rjmp	.+58     	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9512:	89 81       	ldd	r24, Y+1	; 0x01
    9514:	9a 81       	ldd	r25, Y+2	; 0x02
    9516:	80 39       	cpi	r24, 0x90	; 144
    9518:	94 40       	sbci	r25, 0x04	; 4
    951a:	29 f4       	brne	.+10     	; 0x9526 <sysclk_enable_peripheral_clock+0x2fe>
    951c:	60 e4       	ldi	r22, 0x40	; 64
    951e:	84 e0       	ldi	r24, 0x04	; 4
    9520:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9524:	13 c0       	rjmp	.+38     	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9526:	89 81       	ldd	r24, Y+1	; 0x01
    9528:	9a 81       	ldd	r25, Y+2	; 0x02
    952a:	80 3a       	cpi	r24, 0xA0	; 160
    952c:	94 40       	sbci	r25, 0x04	; 4
    952e:	29 f4       	brne	.+10     	; 0x953a <sysclk_enable_peripheral_clock+0x312>
    9530:	60 e4       	ldi	r22, 0x40	; 64
    9532:	85 e0       	ldi	r24, 0x05	; 5
    9534:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9538:	09 c0       	rjmp	.+18     	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    953a:	89 81       	ldd	r24, Y+1	; 0x01
    953c:	9a 81       	ldd	r25, Y+2	; 0x02
    953e:	80 3b       	cpi	r24, 0xB0	; 176
    9540:	94 40       	sbci	r25, 0x04	; 4
    9542:	21 f4       	brne	.+8      	; 0x954c <sysclk_enable_peripheral_clock+0x324>
    9544:	60 e4       	ldi	r22, 0x40	; 64
    9546:	86 e0       	ldi	r24, 0x06	; 6
    9548:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    954c:	00 00       	nop
    954e:	0f 90       	pop	r0
    9550:	0f 90       	pop	r0
    9552:	df 91       	pop	r29
    9554:	cf 91       	pop	r28
    9556:	08 95       	ret

00009558 <usart_serial_init>:
    9558:	cf 93       	push	r28
    955a:	df 93       	push	r29
    955c:	cd b7       	in	r28, 0x3d	; 61
    955e:	de b7       	in	r29, 0x3e	; 62
    9560:	2b 97       	sbiw	r28, 0x0b	; 11
    9562:	cd bf       	out	0x3d, r28	; 61
    9564:	de bf       	out	0x3e, r29	; 62
    9566:	88 87       	std	Y+8, r24	; 0x08
    9568:	99 87       	std	Y+9, r25	; 0x09
    956a:	6a 87       	std	Y+10, r22	; 0x0a
    956c:	7b 87       	std	Y+11, r23	; 0x0b
    956e:	8a 85       	ldd	r24, Y+10	; 0x0a
    9570:	9b 85       	ldd	r25, Y+11	; 0x0b
    9572:	fc 01       	movw	r30, r24
    9574:	84 81       	ldd	r24, Z+4	; 0x04
    9576:	8d 83       	std	Y+5, r24	; 0x05
    9578:	8a 85       	ldd	r24, Y+10	; 0x0a
    957a:	9b 85       	ldd	r25, Y+11	; 0x0b
    957c:	fc 01       	movw	r30, r24
    957e:	85 81       	ldd	r24, Z+5	; 0x05
    9580:	8e 83       	std	Y+6, r24	; 0x06
    9582:	8a 85       	ldd	r24, Y+10	; 0x0a
    9584:	9b 85       	ldd	r25, Y+11	; 0x0b
    9586:	fc 01       	movw	r30, r24
    9588:	86 81       	ldd	r24, Z+6	; 0x06
    958a:	8f 83       	std	Y+7, r24	; 0x07
    958c:	8a 85       	ldd	r24, Y+10	; 0x0a
    958e:	9b 85       	ldd	r25, Y+11	; 0x0b
    9590:	fc 01       	movw	r30, r24
    9592:	80 81       	ld	r24, Z
    9594:	91 81       	ldd	r25, Z+1	; 0x01
    9596:	a2 81       	ldd	r26, Z+2	; 0x02
    9598:	b3 81       	ldd	r27, Z+3	; 0x03
    959a:	89 83       	std	Y+1, r24	; 0x01
    959c:	9a 83       	std	Y+2, r25	; 0x02
    959e:	ab 83       	std	Y+3, r26	; 0x03
    95a0:	bc 83       	std	Y+4, r27	; 0x04
    95a2:	88 85       	ldd	r24, Y+8	; 0x08
    95a4:	99 85       	ldd	r25, Y+9	; 0x09
    95a6:	80 3a       	cpi	r24, 0xA0	; 160
    95a8:	98 40       	sbci	r25, 0x08	; 8
    95aa:	21 f4       	brne	.+8      	; 0x95b4 <usart_serial_init+0x5c>
    95ac:	60 e1       	ldi	r22, 0x10	; 16
    95ae:	83 e0       	ldi	r24, 0x03	; 3
    95b0:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    95b4:	88 85       	ldd	r24, Y+8	; 0x08
    95b6:	99 85       	ldd	r25, Y+9	; 0x09
    95b8:	80 3b       	cpi	r24, 0xB0	; 176
    95ba:	98 40       	sbci	r25, 0x08	; 8
    95bc:	21 f4       	brne	.+8      	; 0x95c6 <usart_serial_init+0x6e>
    95be:	60 e2       	ldi	r22, 0x20	; 32
    95c0:	83 e0       	ldi	r24, 0x03	; 3
    95c2:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    95c6:	88 85       	ldd	r24, Y+8	; 0x08
    95c8:	99 85       	ldd	r25, Y+9	; 0x09
    95ca:	80 3a       	cpi	r24, 0xA0	; 160
    95cc:	99 40       	sbci	r25, 0x09	; 9
    95ce:	21 f4       	brne	.+8      	; 0x95d8 <usart_serial_init+0x80>
    95d0:	60 e1       	ldi	r22, 0x10	; 16
    95d2:	84 e0       	ldi	r24, 0x04	; 4
    95d4:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    95d8:	88 85       	ldd	r24, Y+8	; 0x08
    95da:	99 85       	ldd	r25, Y+9	; 0x09
    95dc:	80 3b       	cpi	r24, 0xB0	; 176
    95de:	99 40       	sbci	r25, 0x09	; 9
    95e0:	21 f4       	brne	.+8      	; 0x95ea <usart_serial_init+0x92>
    95e2:	60 e2       	ldi	r22, 0x20	; 32
    95e4:	84 e0       	ldi	r24, 0x04	; 4
    95e6:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    95ea:	88 85       	ldd	r24, Y+8	; 0x08
    95ec:	99 85       	ldd	r25, Y+9	; 0x09
    95ee:	80 3a       	cpi	r24, 0xA0	; 160
    95f0:	9a 40       	sbci	r25, 0x0A	; 10
    95f2:	21 f4       	brne	.+8      	; 0x95fc <usart_serial_init+0xa4>
    95f4:	60 e1       	ldi	r22, 0x10	; 16
    95f6:	85 e0       	ldi	r24, 0x05	; 5
    95f8:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    95fc:	88 85       	ldd	r24, Y+8	; 0x08
    95fe:	99 85       	ldd	r25, Y+9	; 0x09
    9600:	80 3b       	cpi	r24, 0xB0	; 176
    9602:	9a 40       	sbci	r25, 0x0A	; 10
    9604:	21 f4       	brne	.+8      	; 0x960e <usart_serial_init+0xb6>
    9606:	60 e2       	ldi	r22, 0x20	; 32
    9608:	85 e0       	ldi	r24, 0x05	; 5
    960a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    960e:	88 85       	ldd	r24, Y+8	; 0x08
    9610:	99 85       	ldd	r25, Y+9	; 0x09
    9612:	80 3a       	cpi	r24, 0xA0	; 160
    9614:	9b 40       	sbci	r25, 0x0B	; 11
    9616:	21 f4       	brne	.+8      	; 0x9620 <usart_serial_init+0xc8>
    9618:	60 e1       	ldi	r22, 0x10	; 16
    961a:	86 e0       	ldi	r24, 0x06	; 6
    961c:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9620:	88 85       	ldd	r24, Y+8	; 0x08
    9622:	99 85       	ldd	r25, Y+9	; 0x09
    9624:	80 3b       	cpi	r24, 0xB0	; 176
    9626:	9b 40       	sbci	r25, 0x0B	; 11
    9628:	21 f4       	brne	.+8      	; 0x9632 <usart_serial_init+0xda>
    962a:	60 e2       	ldi	r22, 0x20	; 32
    962c:	86 e0       	ldi	r24, 0x06	; 6
    962e:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <sysclk_enable_module>
    9632:	88 85       	ldd	r24, Y+8	; 0x08
    9634:	99 85       	ldd	r25, Y+9	; 0x09
    9636:	9e 01       	movw	r18, r28
    9638:	2f 5f       	subi	r18, 0xFF	; 255
    963a:	3f 4f       	sbci	r19, 0xFF	; 255
    963c:	b9 01       	movw	r22, r18
    963e:	0f db       	rcall	.-2530   	; 0x8c5e <usart_init_rs232>
    9640:	88 23       	and	r24, r24
    9642:	11 f0       	breq	.+4      	; 0x9648 <usart_serial_init+0xf0>
    9644:	81 e0       	ldi	r24, 0x01	; 1
    9646:	01 c0       	rjmp	.+2      	; 0x964a <usart_serial_init+0xf2>
    9648:	80 e0       	ldi	r24, 0x00	; 0
    964a:	2b 96       	adiw	r28, 0x0b	; 11
    964c:	cd bf       	out	0x3d, r28	; 61
    964e:	de bf       	out	0x3e, r29	; 62
    9650:	df 91       	pop	r29
    9652:	cf 91       	pop	r28
    9654:	08 95       	ret

00009656 <usart_serial_putchar>:
    9656:	cf 93       	push	r28
    9658:	df 93       	push	r29
    965a:	00 d0       	rcall	.+0      	; 0x965c <usart_serial_putchar+0x6>
    965c:	cd b7       	in	r28, 0x3d	; 61
    965e:	de b7       	in	r29, 0x3e	; 62
    9660:	89 83       	std	Y+1, r24	; 0x01
    9662:	9a 83       	std	Y+2, r25	; 0x02
    9664:	6b 83       	std	Y+3, r22	; 0x03
    9666:	89 81       	ldd	r24, Y+1	; 0x01
    9668:	9a 81       	ldd	r25, Y+2	; 0x02
    966a:	6b 81       	ldd	r22, Y+3	; 0x03
    966c:	3e db       	rcall	.-2436   	; 0x8cea <usart_putchar>
    966e:	23 96       	adiw	r28, 0x03	; 3
    9670:	cd bf       	out	0x3d, r28	; 61
    9672:	de bf       	out	0x3e, r29	; 62
    9674:	df 91       	pop	r29
    9676:	cf 91       	pop	r28
    9678:	08 95       	ret

0000967a <usart_serial_getchar>:
    967a:	cf 93       	push	r28
    967c:	df 93       	push	r29
    967e:	00 d0       	rcall	.+0      	; 0x9680 <usart_serial_getchar+0x6>
    9680:	1f 92       	push	r1
    9682:	cd b7       	in	r28, 0x3d	; 61
    9684:	de b7       	in	r29, 0x3e	; 62
    9686:	89 83       	std	Y+1, r24	; 0x01
    9688:	9a 83       	std	Y+2, r25	; 0x02
    968a:	6b 83       	std	Y+3, r22	; 0x03
    968c:	7c 83       	std	Y+4, r23	; 0x04
    968e:	89 81       	ldd	r24, Y+1	; 0x01
    9690:	9a 81       	ldd	r25, Y+2	; 0x02
    9692:	49 db       	rcall	.-2414   	; 0x8d26 <usart_getchar>
    9694:	28 2f       	mov	r18, r24
    9696:	8b 81       	ldd	r24, Y+3	; 0x03
    9698:	9c 81       	ldd	r25, Y+4	; 0x04
    969a:	fc 01       	movw	r30, r24
    969c:	20 83       	st	Z, r18
    969e:	00 00       	nop
    96a0:	24 96       	adiw	r28, 0x04	; 4
    96a2:	cd bf       	out	0x3d, r28	; 61
    96a4:	de bf       	out	0x3e, r29	; 62
    96a6:	df 91       	pop	r29
    96a8:	cf 91       	pop	r28
    96aa:	08 95       	ret

000096ac <stdio_serial_init>:
    96ac:	cf 93       	push	r28
    96ae:	df 93       	push	r29
    96b0:	00 d0       	rcall	.+0      	; 0x96b2 <stdio_serial_init+0x6>
    96b2:	1f 92       	push	r1
    96b4:	cd b7       	in	r28, 0x3d	; 61
    96b6:	de b7       	in	r29, 0x3e	; 62
    96b8:	89 83       	std	Y+1, r24	; 0x01
    96ba:	9a 83       	std	Y+2, r25	; 0x02
    96bc:	6b 83       	std	Y+3, r22	; 0x03
    96be:	7c 83       	std	Y+4, r23	; 0x04
    96c0:	89 81       	ldd	r24, Y+1	; 0x01
    96c2:	9a 81       	ldd	r25, Y+2	; 0x02
    96c4:	80 93 df 27 	sts	0x27DF, r24	; 0x8027df <stdio_base>
    96c8:	90 93 e0 27 	sts	0x27E0, r25	; 0x8027e0 <stdio_base+0x1>
    96cc:	8b e2       	ldi	r24, 0x2B	; 43
    96ce:	9b e4       	ldi	r25, 0x4B	; 75
    96d0:	80 93 dd 27 	sts	0x27DD, r24	; 0x8027dd <ptr_put>
    96d4:	90 93 de 27 	sts	0x27DE, r25	; 0x8027de <ptr_put+0x1>
    96d8:	8d e3       	ldi	r24, 0x3D	; 61
    96da:	9b e4       	ldi	r25, 0x4B	; 75
    96dc:	80 93 db 27 	sts	0x27DB, r24	; 0x8027db <ptr_get>
    96e0:	90 93 dc 27 	sts	0x27DC, r25	; 0x8027dc <ptr_get+0x1>
    96e4:	2b 81       	ldd	r18, Y+3	; 0x03
    96e6:	3c 81       	ldd	r19, Y+4	; 0x04
    96e8:	89 81       	ldd	r24, Y+1	; 0x01
    96ea:	9a 81       	ldd	r25, Y+2	; 0x02
    96ec:	b9 01       	movw	r22, r18
    96ee:	34 df       	rcall	.-408    	; 0x9558 <usart_serial_init>
    96f0:	6e ef       	ldi	r22, 0xFE	; 254
    96f2:	7f e2       	ldi	r23, 0x2F	; 47
    96f4:	8d e1       	ldi	r24, 0x1D	; 29
    96f6:	90 e3       	ldi	r25, 0x30	; 48
    96f8:	0e 94 79 5c 	call	0xb8f2	; 0xb8f2 <fdevopen>
    96fc:	00 00       	nop
    96fe:	24 96       	adiw	r28, 0x04	; 4
    9700:	cd bf       	out	0x3d, r28	; 61
    9702:	de bf       	out	0x3e, r29	; 62
    9704:	df 91       	pop	r29
    9706:	cf 91       	pop	r28
    9708:	08 95       	ret

0000970a <uart_init>:
    970a:	cf 93       	push	r28
    970c:	df 93       	push	r29
    970e:	1f 92       	push	r1
    9710:	1f 92       	push	r1
    9712:	cd b7       	in	r28, 0x3d	; 61
    9714:	de b7       	in	r29, 0x3e	; 62
    9716:	89 83       	std	Y+1, r24	; 0x01
    9718:	9a 83       	std	Y+2, r25	; 0x02
    971a:	89 81       	ldd	r24, Y+1	; 0x01
    971c:	9a 81       	ldd	r25, Y+2	; 0x02
    971e:	fc 01       	movw	r30, r24
    9720:	86 81       	ldd	r24, Z+6	; 0x06
    9722:	97 81       	ldd	r25, Z+7	; 0x07
    9724:	a0 85       	ldd	r26, Z+8	; 0x08
    9726:	b1 85       	ldd	r27, Z+9	; 0x09
    9728:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <usart_options.6991>
    972c:	90 93 10 20 	sts	0x2010, r25	; 0x802010 <usart_options.6991+0x1>
    9730:	a0 93 11 20 	sts	0x2011, r26	; 0x802011 <usart_options.6991+0x2>
    9734:	b0 93 12 20 	sts	0x2012, r27	; 0x802012 <usart_options.6991+0x3>
    9738:	89 81       	ldd	r24, Y+1	; 0x01
    973a:	9a 81       	ldd	r25, Y+2	; 0x02
    973c:	fc 01       	movw	r30, r24
    973e:	80 81       	ld	r24, Z
    9740:	91 81       	ldd	r25, Z+1	; 0x01
    9742:	29 81       	ldd	r18, Y+1	; 0x01
    9744:	3a 81       	ldd	r19, Y+2	; 0x02
    9746:	f9 01       	movw	r30, r18
    9748:	20 81       	ld	r18, Z
    974a:	31 81       	ldd	r19, Z+1	; 0x01
    974c:	f9 01       	movw	r30, r18
    974e:	40 81       	ld	r20, Z
    9750:	29 81       	ldd	r18, Y+1	; 0x01
    9752:	3a 81       	ldd	r19, Y+2	; 0x02
    9754:	f9 01       	movw	r30, r18
    9756:	25 81       	ldd	r18, Z+5	; 0x05
    9758:	24 2b       	or	r18, r20
    975a:	fc 01       	movw	r30, r24
    975c:	20 83       	st	Z, r18
    975e:	89 81       	ldd	r24, Y+1	; 0x01
    9760:	9a 81       	ldd	r25, Y+2	; 0x02
    9762:	fc 01       	movw	r30, r24
    9764:	80 81       	ld	r24, Z
    9766:	91 81       	ldd	r25, Z+1	; 0x01
    9768:	29 81       	ldd	r18, Y+1	; 0x01
    976a:	3a 81       	ldd	r19, Y+2	; 0x02
    976c:	f9 01       	movw	r30, r18
    976e:	20 81       	ld	r18, Z
    9770:	31 81       	ldd	r19, Z+1	; 0x01
    9772:	f9 01       	movw	r30, r18
    9774:	44 81       	ldd	r20, Z+4	; 0x04
    9776:	29 81       	ldd	r18, Y+1	; 0x01
    9778:	3a 81       	ldd	r19, Y+2	; 0x02
    977a:	f9 01       	movw	r30, r18
    977c:	25 81       	ldd	r18, Z+5	; 0x05
    977e:	24 2b       	or	r18, r20
    9780:	fc 01       	movw	r30, r24
    9782:	24 83       	std	Z+4, r18	; 0x04
    9784:	89 81       	ldd	r24, Y+1	; 0x01
    9786:	9a 81       	ldd	r25, Y+2	; 0x02
    9788:	fc 01       	movw	r30, r24
    978a:	80 81       	ld	r24, Z
    978c:	91 81       	ldd	r25, Z+1	; 0x01
    978e:	29 81       	ldd	r18, Y+1	; 0x01
    9790:	3a 81       	ldd	r19, Y+2	; 0x02
    9792:	f9 01       	movw	r30, r18
    9794:	20 81       	ld	r18, Z
    9796:	31 81       	ldd	r19, Z+1	; 0x01
    9798:	f9 01       	movw	r30, r18
    979a:	20 81       	ld	r18, Z
    979c:	42 2f       	mov	r20, r18
    979e:	29 81       	ldd	r18, Y+1	; 0x01
    97a0:	3a 81       	ldd	r19, Y+2	; 0x02
    97a2:	f9 01       	movw	r30, r18
    97a4:	24 81       	ldd	r18, Z+4	; 0x04
    97a6:	20 95       	com	r18
    97a8:	24 23       	and	r18, r20
    97aa:	fc 01       	movw	r30, r24
    97ac:	20 83       	st	Z, r18
    97ae:	89 81       	ldd	r24, Y+1	; 0x01
    97b0:	9a 81       	ldd	r25, Y+2	; 0x02
    97b2:	fc 01       	movw	r30, r24
    97b4:	82 81       	ldd	r24, Z+2	; 0x02
    97b6:	93 81       	ldd	r25, Z+3	; 0x03
    97b8:	37 dd       	rcall	.-1426   	; 0x9228 <sysclk_enable_peripheral_clock>
    97ba:	89 81       	ldd	r24, Y+1	; 0x01
    97bc:	9a 81       	ldd	r25, Y+2	; 0x02
    97be:	fc 01       	movw	r30, r24
    97c0:	82 81       	ldd	r24, Z+2	; 0x02
    97c2:	93 81       	ldd	r25, Z+3	; 0x03
    97c4:	6f e0       	ldi	r22, 0x0F	; 15
    97c6:	70 e2       	ldi	r23, 0x20	; 32
    97c8:	c7 de       	rcall	.-626    	; 0x9558 <usart_serial_init>
    97ca:	00 00       	nop
    97cc:	0f 90       	pop	r0
    97ce:	0f 90       	pop	r0
    97d0:	df 91       	pop	r29
    97d2:	cf 91       	pop	r28
    97d4:	08 95       	ret

000097d6 <uart_terminal_init>:

void uart_terminal_init()
{
    97d6:	cf 93       	push	r28
    97d8:	df 93       	push	r29
    97da:	cd b7       	in	r28, 0x3d	; 61
    97dc:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(UART_TERMINAL_SERIAL);	// enable the USART's clock
    97de:	80 ea       	ldi	r24, 0xA0	; 160
    97e0:	9a e0       	ldi	r25, 0x0A	; 10
    97e2:	22 dd       	rcall	.-1468   	; 0x9228 <sysclk_enable_peripheral_clock>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    97e4:	80 e8       	ldi	r24, 0x80	; 128
    97e6:	96 e0       	ldi	r25, 0x06	; 6
    97e8:	20 e8       	ldi	r18, 0x80	; 128
    97ea:	36 e0       	ldi	r19, 0x06	; 6
    97ec:	f9 01       	movw	r30, r18
    97ee:	20 81       	ld	r18, Z
    97f0:	28 60       	ori	r18, 0x08	; 8
    97f2:	fc 01       	movw	r30, r24
    97f4:	20 83       	st	Z, r18
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf
    97f6:	66 e1       	ldi	r22, 0x16	; 22
    97f8:	70 e2       	ldi	r23, 0x20	; 32
    97fa:	80 ea       	ldi	r24, 0xA0	; 160
    97fc:	9a e0       	ldi	r25, 0x0A	; 10
    97fe:	56 df       	rcall	.-340    	; 0x96ac <stdio_serial_init>
	
	
	if(DEBUG) {
		printf("\n\n\n\n\nCansat DaiAtlas Initializing...\n");
    9800:	81 e3       	ldi	r24, 0x31	; 49
    9802:	91 e2       	ldi	r25, 0x21	; 33
    9804:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
		printf("UART Initialized\n");
    9808:	86 e5       	ldi	r24, 0x56	; 86
    980a:	91 e2       	ldi	r25, 0x21	; 33
    980c:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
	}
}
    9810:	00 00       	nop
    9812:	df 91       	pop	r29
    9814:	cf 91       	pop	r28
    9816:	08 95       	ret

00009818 <sysclk_get_main_hz>:
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
}
    9818:	cf 93       	push	r28
    981a:	df 93       	push	r29
    981c:	cd b7       	in	r28, 0x3d	; 61
    981e:	de b7       	in	r29, 0x3e	; 62
    9820:	80 e0       	ldi	r24, 0x00	; 0
    9822:	9c e6       	ldi	r25, 0x6C	; 108
    9824:	ac ed       	ldi	r26, 0xDC	; 220
    9826:	b2 e0       	ldi	r27, 0x02	; 2
    9828:	bc 01       	movw	r22, r24
    982a:	cd 01       	movw	r24, r26
    982c:	df 91       	pop	r29
    982e:	cf 91       	pop	r28
    9830:	08 95       	ret

00009832 <sysclk_get_per4_hz>:
    9832:	cf 93       	push	r28
    9834:	df 93       	push	r29
    9836:	1f 92       	push	r1
    9838:	cd b7       	in	r28, 0x3d	; 61
    983a:	de b7       	in	r29, 0x3e	; 62
    983c:	19 82       	std	Y+1, r1	; 0x01
    983e:	ec df       	rcall	.-40     	; 0x9818 <sysclk_get_main_hz>
    9840:	dc 01       	movw	r26, r24
    9842:	cb 01       	movw	r24, r22
    9844:	29 81       	ldd	r18, Y+1	; 0x01
    9846:	22 2f       	mov	r18, r18
    9848:	30 e0       	ldi	r19, 0x00	; 0
    984a:	04 c0       	rjmp	.+8      	; 0x9854 <sysclk_get_per4_hz+0x22>
    984c:	b6 95       	lsr	r27
    984e:	a7 95       	ror	r26
    9850:	97 95       	ror	r25
    9852:	87 95       	ror	r24
    9854:	2a 95       	dec	r18
    9856:	d2 f7       	brpl	.-12     	; 0x984c <sysclk_get_per4_hz+0x1a>
    9858:	bc 01       	movw	r22, r24
    985a:	cd 01       	movw	r24, r26
    985c:	0f 90       	pop	r0
    985e:	df 91       	pop	r29
    9860:	cf 91       	pop	r28
    9862:	08 95       	ret

00009864 <sysclk_get_per2_hz>:
    9864:	cf 93       	push	r28
    9866:	df 93       	push	r29
    9868:	cd b7       	in	r28, 0x3d	; 61
    986a:	de b7       	in	r29, 0x3e	; 62
    986c:	e2 df       	rcall	.-60     	; 0x9832 <sysclk_get_per4_hz>
    986e:	dc 01       	movw	r26, r24
    9870:	cb 01       	movw	r24, r22
    9872:	bc 01       	movw	r22, r24
    9874:	cd 01       	movw	r24, r26
    9876:	df 91       	pop	r29
    9878:	cf 91       	pop	r28
    987a:	08 95       	ret

0000987c <sysclk_get_per_hz>:
    987c:	cf 93       	push	r28
    987e:	df 93       	push	r29
    9880:	cd b7       	in	r28, 0x3d	; 61
    9882:	de b7       	in	r29, 0x3e	; 62
    9884:	ef df       	rcall	.-34     	; 0x9864 <sysclk_get_per2_hz>
    9886:	dc 01       	movw	r26, r24
    9888:	cb 01       	movw	r24, r22
    988a:	bc 01       	movw	r22, r24
    988c:	cd 01       	movw	r24, r26
    988e:	df 91       	pop	r29
    9890:	cf 91       	pop	r28
    9892:	08 95       	ret

00009894 <sysclk_get_cpu_hz>:
    9894:	cf 93       	push	r28
    9896:	df 93       	push	r29
    9898:	cd b7       	in	r28, 0x3d	; 61
    989a:	de b7       	in	r29, 0x3e	; 62
    989c:	ef df       	rcall	.-34     	; 0x987c <sysclk_get_per_hz>
    989e:	dc 01       	movw	r26, r24
    98a0:	cb 01       	movw	r24, r22
    98a2:	bc 01       	movw	r22, r24
    98a4:	cd 01       	movw	r24, r26
    98a6:	df 91       	pop	r29
    98a8:	cf 91       	pop	r28
    98aa:	08 95       	ret

000098ac <__portable_avr_delay_cycles>:
    98ac:	04 c0       	rjmp	.+8      	; 0x98b6 <__portable_avr_delay_cycles+0xa>
    98ae:	61 50       	subi	r22, 0x01	; 1
    98b0:	71 09       	sbc	r23, r1
    98b2:	81 09       	sbc	r24, r1
    98b4:	91 09       	sbc	r25, r1
    98b6:	61 15       	cp	r22, r1
    98b8:	71 05       	cpc	r23, r1
    98ba:	81 05       	cpc	r24, r1
    98bc:	91 05       	cpc	r25, r1
    98be:	b9 f7       	brne	.-18     	; 0x98ae <__portable_avr_delay_cycles+0x2>
    98c0:	08 95       	ret

000098c2 <pmic_init>:
    98c2:	cf 93       	push	r28
    98c4:	df 93       	push	r29
    98c6:	cd b7       	in	r28, 0x3d	; 61
    98c8:	de b7       	in	r29, 0x3e	; 62
    98ca:	80 ea       	ldi	r24, 0xA0	; 160
    98cc:	90 e0       	ldi	r25, 0x00	; 0
    98ce:	27 e0       	ldi	r18, 0x07	; 7
    98d0:	fc 01       	movw	r30, r24
    98d2:	22 83       	std	Z+2, r18	; 0x02
    98d4:	00 00       	nop
    98d6:	df 91       	pop	r29
    98d8:	cf 91       	pop	r28
    98da:	08 95       	ret

000098dc <pmic_set_scheduling>:
    98dc:	cf 93       	push	r28
    98de:	df 93       	push	r29
    98e0:	1f 92       	push	r1
    98e2:	cd b7       	in	r28, 0x3d	; 61
    98e4:	de b7       	in	r29, 0x3e	; 62
    98e6:	89 83       	std	Y+1, r24	; 0x01
    98e8:	89 81       	ldd	r24, Y+1	; 0x01
    98ea:	88 2f       	mov	r24, r24
    98ec:	90 e0       	ldi	r25, 0x00	; 0
    98ee:	00 97       	sbiw	r24, 0x00	; 0
    98f0:	19 f0       	breq	.+6      	; 0x98f8 <pmic_set_scheduling+0x1c>
    98f2:	01 97       	sbiw	r24, 0x01	; 1
    98f4:	79 f0       	breq	.+30     	; 0x9914 <pmic_set_scheduling+0x38>
    98f6:	18 c0       	rjmp	.+48     	; 0x9928 <pmic_set_scheduling+0x4c>
    98f8:	80 ea       	ldi	r24, 0xA0	; 160
    98fa:	90 e0       	ldi	r25, 0x00	; 0
    98fc:	20 ea       	ldi	r18, 0xA0	; 160
    98fe:	30 e0       	ldi	r19, 0x00	; 0
    9900:	f9 01       	movw	r30, r18
    9902:	22 81       	ldd	r18, Z+2	; 0x02
    9904:	2f 77       	andi	r18, 0x7F	; 127
    9906:	fc 01       	movw	r30, r24
    9908:	22 83       	std	Z+2, r18	; 0x02
    990a:	80 ea       	ldi	r24, 0xA0	; 160
    990c:	90 e0       	ldi	r25, 0x00	; 0
    990e:	fc 01       	movw	r30, r24
    9910:	11 82       	std	Z+1, r1	; 0x01
    9912:	0a c0       	rjmp	.+20     	; 0x9928 <pmic_set_scheduling+0x4c>
    9914:	80 ea       	ldi	r24, 0xA0	; 160
    9916:	90 e0       	ldi	r25, 0x00	; 0
    9918:	20 ea       	ldi	r18, 0xA0	; 160
    991a:	30 e0       	ldi	r19, 0x00	; 0
    991c:	f9 01       	movw	r30, r18
    991e:	22 81       	ldd	r18, Z+2	; 0x02
    9920:	20 68       	ori	r18, 0x80	; 128
    9922:	fc 01       	movw	r30, r24
    9924:	22 83       	std	Z+2, r18	; 0x02
    9926:	00 00       	nop
    9928:	00 00       	nop
    992a:	0f 90       	pop	r0
    992c:	df 91       	pop	r29
    992e:	cf 91       	pop	r28
    9930:	08 95       	ret

00009932 <fs_0>:

//#include "asf.h"
void fs_0()
{
    9932:	cf 93       	push	r28
    9934:	df 93       	push	r29
    9936:	cd b7       	in	r28, 0x3d	; 61
    9938:	de b7       	in	r29, 0x3e	; 62
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
    993a:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <velocity>
    993e:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <velocity+0x1>
    9942:	a0 91 2c 22 	lds	r26, 0x222C	; 0x80222c <velocity+0x2>
    9946:	b0 91 2d 22 	lds	r27, 0x222D	; 0x80222d <velocity+0x3>
    994a:	20 e0       	ldi	r18, 0x00	; 0
    994c:	30 e0       	ldi	r19, 0x00	; 0
    994e:	40 e0       	ldi	r20, 0x00	; 0
    9950:	50 e4       	ldi	r21, 0x40	; 64
    9952:	bc 01       	movw	r22, r24
    9954:	cd 01       	movw	r24, r26
    9956:	dc d7       	rcall	.+4024   	; 0xa910 <__gesf2>
    9958:	18 16       	cp	r1, r24
    995a:	0c f0       	brlt	.+2      	; 0x995e <fs_0+0x2c>
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    995c:	62 c0       	rjmp	.+196    	; 0x9a22 <fs_0+0xf0>
//#include "asf.h"
void fs_0()
{
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
    995e:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <accZ>
    9962:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <accZ+0x1>
    9966:	a0 91 0b 22 	lds	r26, 0x220B	; 0x80220b <accZ+0x2>
    996a:	b0 91 0c 22 	lds	r27, 0x220C	; 0x80220c <accZ+0x3>
    996e:	20 e0       	ldi	r18, 0x00	; 0
    9970:	30 e0       	ldi	r19, 0x00	; 0
    9972:	40 ea       	ldi	r20, 0xA0	; 160
    9974:	50 e4       	ldi	r21, 0x40	; 64
    9976:	bc 01       	movw	r22, r24
    9978:	cd 01       	movw	r24, r26
    997a:	ca d7       	rcall	.+3988   	; 0xa910 <__gesf2>
    997c:	18 16       	cp	r1, r24
    997e:	0c f0       	brlt	.+2      	; 0x9982 <fs_0+0x50>
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    9980:	50 c0       	rjmp	.+160    	; 0x9a22 <fs_0+0xf0>
void fs_0()
{
	// detect launch??????
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
    9982:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    9986:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    998a:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    998e:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    9992:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    9996:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    999a:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    999e:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    99a2:	bc 01       	movw	r22, r24
    99a4:	cd 01       	movw	r24, r26
    99a6:	78 d5       	rcall	.+2800   	; 0xa498 <__subsf3>
    99a8:	dc 01       	movw	r26, r24
    99aa:	cb 01       	movw	r24, r22
    99ac:	bc 01       	movw	r22, r24
    99ae:	cd 01       	movw	r24, r26
    99b0:	7e d6       	rcall	.+3324   	; 0xa6ae <__fixsfsi>
    99b2:	dc 01       	movw	r26, r24
    99b4:	cb 01       	movw	r24, r22
    99b6:	82 3f       	cpi	r24, 0xF2	; 242
    99b8:	9f 4f       	sbci	r25, 0xFF	; 255
    99ba:	9c f1       	brlt	.+102    	; 0x9a22 <fs_0+0xf0>
    99bc:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    99c0:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    99c4:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    99c8:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    99cc:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    99d0:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    99d4:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    99d8:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    99dc:	bc 01       	movw	r22, r24
    99de:	cd 01       	movw	r24, r26
    99e0:	5b d5       	rcall	.+2742   	; 0xa498 <__subsf3>
    99e2:	dc 01       	movw	r26, r24
    99e4:	cb 01       	movw	r24, r22
    99e6:	bc 01       	movw	r22, r24
    99e8:	cd 01       	movw	r24, r26
    99ea:	61 d6       	rcall	.+3266   	; 0xa6ae <__fixsfsi>
    99ec:	dc 01       	movw	r26, r24
    99ee:	cb 01       	movw	r24, r22
    99f0:	0f 97       	sbiw	r24, 0x0f	; 15
    99f2:	bc f4       	brge	.+46     	; 0x9a22 <fs_0+0xf0>
		&& altitude > FS0_MIN_ALTITUDE)
    99f4:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <altitude>
    99f8:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <altitude+0x1>
    99fc:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <altitude+0x2>
    9a00:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <altitude+0x3>
    9a04:	20 e0       	ldi	r18, 0x00	; 0
    9a06:	30 e0       	ldi	r19, 0x00	; 0
    9a08:	40 e2       	ldi	r20, 0x20	; 32
    9a0a:	52 e4       	ldi	r21, 0x42	; 66
    9a0c:	bc 01       	movw	r22, r24
    9a0e:	cd 01       	movw	r24, r26
    9a10:	7f d7       	rcall	.+3838   	; 0xa910 <__gesf2>
    9a12:	18 16       	cp	r1, r24
    9a14:	0c f0       	brlt	.+2      	; 0x9a18 <fs_0+0xe6>
	{
			flightState ++;
	}
}
    9a16:	05 c0       	rjmp	.+10     	; 0x9a22 <fs_0+0xf0>
	if(velocity > FS0_MIN_VEL 
		&& accZ > FS0_MIN_ACCEL
		&& abs(accelHeight - altitude) < FS0_MAX_HEIGHT_DRIFT
		&& altitude > FS0_MIN_ALTITUDE)
	{
			flightState ++;
    9a18:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <flightState>
    9a1c:	8f 5f       	subi	r24, 0xFF	; 255
    9a1e:	80 93 29 22 	sts	0x2229, r24	; 0x802229 <flightState>
	}
}
    9a22:	00 00       	nop
    9a24:	df 91       	pop	r29
    9a26:	cf 91       	pop	r28
    9a28:	08 95       	ret

00009a2a <fs_1>:

void fs_1()
{
    9a2a:	cf 93       	push	r28
    9a2c:	df 93       	push	r29
    9a2e:	cd b7       	in	r28, 0x3d	; 61
    9a30:	de b7       	in	r29, 0x3e	; 62
	// get vertical velocity
	// see if we've found a peak vertical velocity
	// we auto-deploy
	// move to next flight state
	if(velocity < FS1_MAX_VEL 
    9a32:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <velocity>
    9a36:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <velocity+0x1>
    9a3a:	a0 91 2c 22 	lds	r26, 0x222C	; 0x80222c <velocity+0x2>
    9a3e:	b0 91 2d 22 	lds	r27, 0x222D	; 0x80222d <velocity+0x3>
    9a42:	20 e0       	ldi	r18, 0x00	; 0
    9a44:	30 e0       	ldi	r19, 0x00	; 0
    9a46:	40 e0       	ldi	r20, 0x00	; 0
    9a48:	50 ec       	ldi	r21, 0xC0	; 192
    9a4a:	bc 01       	movw	r22, r24
    9a4c:	cd 01       	movw	r24, r26
    9a4e:	89 d5       	rcall	.+2834   	; 0xa562 <__cmpsf2>
    9a50:	88 23       	and	r24, r24
    9a52:	0c f0       	brlt	.+2      	; 0x9a56 <fs_1+0x2c>
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
		&& altitude > FS1_MIN_ALTITUDE)
	{
			flightState ++;
	}
}
    9a54:	83 c0       	rjmp	.+262    	; 0x9b5c <fs_1+0x132>
	// get vertical velocity
	// see if we've found a peak vertical velocity
	// we auto-deploy
	// move to next flight state
	if(velocity < FS1_MAX_VEL 
		&& abs(accZ - 9.8) < FS1_MAX_ACCEL  
    9a56:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <accZ>
    9a5a:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <accZ+0x1>
    9a5e:	a0 91 0b 22 	lds	r26, 0x220B	; 0x80220b <accZ+0x2>
    9a62:	b0 91 0c 22 	lds	r27, 0x220C	; 0x80220c <accZ+0x3>
    9a66:	2d ec       	ldi	r18, 0xCD	; 205
    9a68:	3c ec       	ldi	r19, 0xCC	; 204
    9a6a:	4c e1       	ldi	r20, 0x1C	; 28
    9a6c:	51 e4       	ldi	r21, 0x41	; 65
    9a6e:	bc 01       	movw	r22, r24
    9a70:	cd 01       	movw	r24, r26
    9a72:	12 d5       	rcall	.+2596   	; 0xa498 <__subsf3>
    9a74:	dc 01       	movw	r26, r24
    9a76:	cb 01       	movw	r24, r22
    9a78:	bc 01       	movw	r22, r24
    9a7a:	cd 01       	movw	r24, r26
    9a7c:	18 d6       	rcall	.+3120   	; 0xa6ae <__fixsfsi>
    9a7e:	dc 01       	movw	r26, r24
    9a80:	cb 01       	movw	r24, r22
    9a82:	8f 3f       	cpi	r24, 0xFF	; 255
    9a84:	9f 4f       	sbci	r25, 0xFF	; 255
    9a86:	0c f4       	brge	.+2      	; 0x9a8a <fs_1+0x60>
    9a88:	69 c0       	rjmp	.+210    	; 0x9b5c <fs_1+0x132>
    9a8a:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <accZ>
    9a8e:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <accZ+0x1>
    9a92:	a0 91 0b 22 	lds	r26, 0x220B	; 0x80220b <accZ+0x2>
    9a96:	b0 91 0c 22 	lds	r27, 0x220C	; 0x80220c <accZ+0x3>
    9a9a:	2d ec       	ldi	r18, 0xCD	; 205
    9a9c:	3c ec       	ldi	r19, 0xCC	; 204
    9a9e:	4c e1       	ldi	r20, 0x1C	; 28
    9aa0:	51 e4       	ldi	r21, 0x41	; 65
    9aa2:	bc 01       	movw	r22, r24
    9aa4:	cd 01       	movw	r24, r26
    9aa6:	f8 d4       	rcall	.+2544   	; 0xa498 <__subsf3>
    9aa8:	dc 01       	movw	r26, r24
    9aaa:	cb 01       	movw	r24, r22
    9aac:	bc 01       	movw	r22, r24
    9aae:	cd 01       	movw	r24, r26
    9ab0:	fe d5       	rcall	.+3068   	; 0xa6ae <__fixsfsi>
    9ab2:	dc 01       	movw	r26, r24
    9ab4:	cb 01       	movw	r24, r22
    9ab6:	02 97       	sbiw	r24, 0x02	; 2
    9ab8:	0c f0       	brlt	.+2      	; 0x9abc <fs_1+0x92>
    9aba:	50 c0       	rjmp	.+160    	; 0x9b5c <fs_1+0x132>
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
    9abc:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    9ac0:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    9ac4:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    9ac8:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    9acc:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    9ad0:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    9ad4:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    9ad8:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    9adc:	bc 01       	movw	r22, r24
    9ade:	cd 01       	movw	r24, r26
    9ae0:	db d4       	rcall	.+2486   	; 0xa498 <__subsf3>
    9ae2:	dc 01       	movw	r26, r24
    9ae4:	cb 01       	movw	r24, r22
    9ae6:	bc 01       	movw	r22, r24
    9ae8:	cd 01       	movw	r24, r26
    9aea:	e1 d5       	rcall	.+3010   	; 0xa6ae <__fixsfsi>
    9aec:	dc 01       	movw	r26, r24
    9aee:	cb 01       	movw	r24, r22
    9af0:	8f 3c       	cpi	r24, 0xCF	; 207
    9af2:	9f 4f       	sbci	r25, 0xFF	; 255
    9af4:	9c f1       	brlt	.+102    	; 0x9b5c <fs_1+0x132>
    9af6:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    9afa:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    9afe:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    9b02:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    9b06:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    9b0a:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    9b0e:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    9b12:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    9b16:	bc 01       	movw	r22, r24
    9b18:	cd 01       	movw	r24, r26
    9b1a:	be d4       	rcall	.+2428   	; 0xa498 <__subsf3>
    9b1c:	dc 01       	movw	r26, r24
    9b1e:	cb 01       	movw	r24, r22
    9b20:	bc 01       	movw	r22, r24
    9b22:	cd 01       	movw	r24, r26
    9b24:	c4 d5       	rcall	.+2952   	; 0xa6ae <__fixsfsi>
    9b26:	dc 01       	movw	r26, r24
    9b28:	cb 01       	movw	r24, r22
    9b2a:	c2 97       	sbiw	r24, 0x32	; 50
    9b2c:	bc f4       	brge	.+46     	; 0x9b5c <fs_1+0x132>
		&& altitude > FS1_MIN_ALTITUDE)
    9b2e:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <altitude>
    9b32:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <altitude+0x1>
    9b36:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <altitude+0x2>
    9b3a:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <altitude+0x3>
    9b3e:	20 e0       	ldi	r18, 0x00	; 0
    9b40:	30 e0       	ldi	r19, 0x00	; 0
    9b42:	40 e2       	ldi	r20, 0x20	; 32
    9b44:	51 e4       	ldi	r21, 0x41	; 65
    9b46:	bc 01       	movw	r22, r24
    9b48:	cd 01       	movw	r24, r26
    9b4a:	e2 d6       	rcall	.+3524   	; 0xa910 <__gesf2>
    9b4c:	18 16       	cp	r1, r24
    9b4e:	0c f0       	brlt	.+2      	; 0x9b52 <fs_1+0x128>
	{
			flightState ++;
	}
}
    9b50:	05 c0       	rjmp	.+10     	; 0x9b5c <fs_1+0x132>
	if(velocity < FS1_MAX_VEL 
		&& abs(accZ - 9.8) < FS1_MAX_ACCEL  
		&& abs(accelHeight - altitude) < FS1_MAX_HEIGHT_DRIFT
		&& altitude > FS1_MIN_ALTITUDE)
	{
			flightState ++;
    9b52:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <flightState>
    9b56:	8f 5f       	subi	r24, 0xFF	; 255
    9b58:	80 93 29 22 	sts	0x2229, r24	; 0x802229 <flightState>
	}
}
    9b5c:	00 00       	nop
    9b5e:	df 91       	pop	r29
    9b60:	cf 91       	pop	r28
    9b62:	08 95       	ret

00009b64 <fs_2>:
void fs_2()
{
    9b64:	cf 93       	push	r28
    9b66:	df 93       	push	r29
    9b68:	cd b7       	in	r28, 0x3d	; 61
    9b6a:	de b7       	in	r29, 0x3e	; 62
	// make sure our velocity is nominal
	// if altitude is just above 450m, trigger servo for deployment (time servo and deployment to see how long it takes for umbilical to disconnect?)
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
    9b6c:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <velocity>
    9b70:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <velocity+0x1>
    9b74:	a0 91 2c 22 	lds	r26, 0x222C	; 0x80222c <velocity+0x2>
    9b78:	b0 91 2d 22 	lds	r27, 0x222D	; 0x80222d <velocity+0x3>
    9b7c:	20 e0       	ldi	r18, 0x00	; 0
    9b7e:	30 e0       	ldi	r19, 0x00	; 0
    9b80:	40 e0       	ldi	r20, 0x00	; 0
    9b82:	50 e4       	ldi	r21, 0x40	; 64
    9b84:	bc 01       	movw	r22, r24
    9b86:	cd 01       	movw	r24, r26
    9b88:	c3 d6       	rcall	.+3462   	; 0xa910 <__gesf2>
    9b8a:	18 16       	cp	r1, r24
    9b8c:	0c f0       	brlt	.+2      	; 0x9b90 <fs_2+0x2c>
	{
			servo_init();
			//set_servo(100);
			flightState ++;
	}
}
    9b8e:	64 c0       	rjmp	.+200    	; 0x9c58 <fs_2+0xf4>
	// if altitude is just above 450m, trigger servo for deployment (time servo and deployment to see how long it takes for umbilical to disconnect?)
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
    9b90:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <accZ>
    9b94:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <accZ+0x1>
    9b98:	a0 91 0b 22 	lds	r26, 0x220B	; 0x80220b <accZ+0x2>
    9b9c:	b0 91 0c 22 	lds	r27, 0x220C	; 0x80220c <accZ+0x3>
    9ba0:	20 e0       	ldi	r18, 0x00	; 0
    9ba2:	30 e0       	ldi	r19, 0x00	; 0
    9ba4:	40 ea       	ldi	r20, 0xA0	; 160
    9ba6:	50 ec       	ldi	r21, 0xC0	; 192
    9ba8:	bc 01       	movw	r22, r24
    9baa:	cd 01       	movw	r24, r26
    9bac:	b1 d6       	rcall	.+3426   	; 0xa910 <__gesf2>
    9bae:	18 16       	cp	r1, r24
    9bb0:	0c f0       	brlt	.+2      	; 0x9bb4 <fs_2+0x50>
	{
			servo_init();
			//set_servo(100);
			flightState ++;
	}
}
    9bb2:	52 c0       	rjmp	.+164    	; 0x9c58 <fs_2+0xf4>
	//  Is there a way to verify that our umbilical is disconnected??
	
	// BONUS: turn on camera
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
		&& abs(accelHeight - altitude) < FS2_MAX_HEIGHT_DRIFT 
    9bb4:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    9bb8:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    9bbc:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    9bc0:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    9bc4:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    9bc8:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    9bcc:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    9bd0:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    9bd4:	bc 01       	movw	r22, r24
    9bd6:	cd 01       	movw	r24, r26
    9bd8:	5f d4       	rcall	.+2238   	; 0xa498 <__subsf3>
    9bda:	dc 01       	movw	r26, r24
    9bdc:	cb 01       	movw	r24, r22
    9bde:	bc 01       	movw	r22, r24
    9be0:	cd 01       	movw	r24, r26
    9be2:	65 d5       	rcall	.+2762   	; 0xa6ae <__fixsfsi>
    9be4:	dc 01       	movw	r26, r24
    9be6:	cb 01       	movw	r24, r22
    9be8:	8f 3c       	cpi	r24, 0xCF	; 207
    9bea:	9f 4f       	sbci	r25, 0xFF	; 255
    9bec:	ac f1       	brlt	.+106    	; 0x9c58 <fs_2+0xf4>
    9bee:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    9bf2:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    9bf6:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    9bfa:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    9bfe:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    9c02:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    9c06:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    9c0a:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    9c0e:	bc 01       	movw	r22, r24
    9c10:	cd 01       	movw	r24, r26
    9c12:	42 d4       	rcall	.+2180   	; 0xa498 <__subsf3>
    9c14:	dc 01       	movw	r26, r24
    9c16:	cb 01       	movw	r24, r22
    9c18:	bc 01       	movw	r22, r24
    9c1a:	cd 01       	movw	r24, r26
    9c1c:	48 d5       	rcall	.+2704   	; 0xa6ae <__fixsfsi>
    9c1e:	dc 01       	movw	r26, r24
    9c20:	cb 01       	movw	r24, r22
    9c22:	c2 97       	sbiw	r24, 0x32	; 50
    9c24:	cc f4       	brge	.+50     	; 0x9c58 <fs_2+0xf4>
		&& altitude < FS2_MAX_ALTITUDE)
    9c26:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <altitude>
    9c2a:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <altitude+0x1>
    9c2e:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <altitude+0x2>
    9c32:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <altitude+0x3>
    9c36:	20 e0       	ldi	r18, 0x00	; 0
    9c38:	30 e0       	ldi	r19, 0x00	; 0
    9c3a:	46 ee       	ldi	r20, 0xE6	; 230
    9c3c:	53 e4       	ldi	r21, 0x43	; 67
    9c3e:	bc 01       	movw	r22, r24
    9c40:	cd 01       	movw	r24, r26
    9c42:	8f d4       	rcall	.+2334   	; 0xa562 <__cmpsf2>
    9c44:	88 23       	and	r24, r24
    9c46:	0c f0       	brlt	.+2      	; 0x9c4a <fs_2+0xe6>
	{
			servo_init();
			//set_servo(100);
			flightState ++;
	}
}
    9c48:	07 c0       	rjmp	.+14     	; 0x9c58 <fs_2+0xf4>
	if(velocity > FS2_MIN_VEL 
		&& accZ > FS2_MAX_ACCEL 
		&& abs(accelHeight - altitude) < FS2_MAX_HEIGHT_DRIFT 
		&& altitude < FS2_MAX_ALTITUDE)
	{
			servo_init();
    9c4a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <servo_init>
			//set_servo(100);
			flightState ++;
    9c4e:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <flightState>
    9c52:	8f 5f       	subi	r24, 0xFF	; 255
    9c54:	80 93 29 22 	sts	0x2229, r24	; 0x802229 <flightState>
	}
}
    9c58:	00 00       	nop
    9c5a:	df 91       	pop	r29
    9c5c:	cf 91       	pop	r28
    9c5e:	08 95       	ret

00009c60 <fs_3>:
void fs_3()
{
    9c60:	cf 93       	push	r28
    9c62:	df 93       	push	r29
    9c64:	cd b7       	in	r28, 0x3d	; 61
    9c66:	de b7       	in	r29, 0x3e	; 62
	// get altitude and vertical velocity
	// check nominal velocity
	// if altitude is < 40m and velocity < 1 m/s -->> landed
	//   Turn buzzer on
	//   stop transmitting
	if(abs(velocity) < FS3_MAX_VEL 
    9c68:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <velocity>
    9c6c:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <velocity+0x1>
    9c70:	a0 91 2c 22 	lds	r26, 0x222C	; 0x80222c <velocity+0x2>
    9c74:	b0 91 2d 22 	lds	r27, 0x222D	; 0x80222d <velocity+0x3>
    9c78:	bc 01       	movw	r22, r24
    9c7a:	cd 01       	movw	r24, r26
    9c7c:	18 d5       	rcall	.+2608   	; 0xa6ae <__fixsfsi>
    9c7e:	dc 01       	movw	r26, r24
    9c80:	cb 01       	movw	r24, r22
    9c82:	8e 3f       	cpi	r24, 0xFE	; 254
    9c84:	9f 4f       	sbci	r25, 0xFF	; 255
    9c86:	0c f4       	brge	.+2      	; 0x9c8a <fs_3+0x2a>
    9c88:	81 c0       	rjmp	.+258    	; 0x9d8c <fs_3+0x12c>
    9c8a:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <velocity>
    9c8e:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <velocity+0x1>
    9c92:	a0 91 2c 22 	lds	r26, 0x222C	; 0x80222c <velocity+0x2>
    9c96:	b0 91 2d 22 	lds	r27, 0x222D	; 0x80222d <velocity+0x3>
    9c9a:	bc 01       	movw	r22, r24
    9c9c:	cd 01       	movw	r24, r26
    9c9e:	07 d5       	rcall	.+2574   	; 0xa6ae <__fixsfsi>
    9ca0:	dc 01       	movw	r26, r24
    9ca2:	cb 01       	movw	r24, r22
    9ca4:	03 97       	sbiw	r24, 0x03	; 3
    9ca6:	0c f0       	brlt	.+2      	; 0x9caa <fs_3+0x4a>
    9ca8:	71 c0       	rjmp	.+226    	; 0x9d8c <fs_3+0x12c>
		&& abs(accZ) < FS3_MAX_ACCEL
    9caa:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <accZ>
    9cae:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <accZ+0x1>
    9cb2:	a0 91 0b 22 	lds	r26, 0x220B	; 0x80220b <accZ+0x2>
    9cb6:	b0 91 0c 22 	lds	r27, 0x220C	; 0x80220c <accZ+0x3>
    9cba:	bc 01       	movw	r22, r24
    9cbc:	cd 01       	movw	r24, r26
    9cbe:	f7 d4       	rcall	.+2542   	; 0xa6ae <__fixsfsi>
    9cc0:	dc 01       	movw	r26, r24
    9cc2:	cb 01       	movw	r24, r22
    9cc4:	87 3f       	cpi	r24, 0xF7	; 247
    9cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    9cc8:	0c f4       	brge	.+2      	; 0x9ccc <fs_3+0x6c>
    9cca:	60 c0       	rjmp	.+192    	; 0x9d8c <fs_3+0x12c>
    9ccc:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <accZ>
    9cd0:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <accZ+0x1>
    9cd4:	a0 91 0b 22 	lds	r26, 0x220B	; 0x80220b <accZ+0x2>
    9cd8:	b0 91 0c 22 	lds	r27, 0x220C	; 0x80220c <accZ+0x3>
    9cdc:	bc 01       	movw	r22, r24
    9cde:	cd 01       	movw	r24, r26
    9ce0:	e6 d4       	rcall	.+2508   	; 0xa6ae <__fixsfsi>
    9ce2:	dc 01       	movw	r26, r24
    9ce4:	cb 01       	movw	r24, r22
    9ce6:	0a 97       	sbiw	r24, 0x0a	; 10
    9ce8:	0c f0       	brlt	.+2      	; 0x9cec <fs_3+0x8c>
    9cea:	50 c0       	rjmp	.+160    	; 0x9d8c <fs_3+0x12c>
		&& abs(accelHeight - altitude) < FS3_MAX_HEIGHT_DRIFT
    9cec:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    9cf0:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    9cf4:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    9cf8:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    9cfc:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    9d00:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    9d04:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    9d08:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    9d0c:	bc 01       	movw	r22, r24
    9d0e:	cd 01       	movw	r24, r26
    9d10:	c3 d3       	rcall	.+1926   	; 0xa498 <__subsf3>
    9d12:	dc 01       	movw	r26, r24
    9d14:	cb 01       	movw	r24, r22
    9d16:	bc 01       	movw	r22, r24
    9d18:	cd 01       	movw	r24, r26
    9d1a:	c9 d4       	rcall	.+2450   	; 0xa6ae <__fixsfsi>
    9d1c:	dc 01       	movw	r26, r24
    9d1e:	cb 01       	movw	r24, r22
    9d20:	8f 3c       	cpi	r24, 0xCF	; 207
    9d22:	9f 4f       	sbci	r25, 0xFF	; 255
    9d24:	9c f1       	brlt	.+102    	; 0x9d8c <fs_3+0x12c>
    9d26:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <accelHeight>
    9d2a:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <accelHeight+0x1>
    9d2e:	a0 91 07 22 	lds	r26, 0x2207	; 0x802207 <accelHeight+0x2>
    9d32:	b0 91 08 22 	lds	r27, 0x2208	; 0x802208 <accelHeight+0x3>
    9d36:	20 91 33 22 	lds	r18, 0x2233	; 0x802233 <altitude>
    9d3a:	30 91 34 22 	lds	r19, 0x2234	; 0x802234 <altitude+0x1>
    9d3e:	40 91 35 22 	lds	r20, 0x2235	; 0x802235 <altitude+0x2>
    9d42:	50 91 36 22 	lds	r21, 0x2236	; 0x802236 <altitude+0x3>
    9d46:	bc 01       	movw	r22, r24
    9d48:	cd 01       	movw	r24, r26
    9d4a:	a6 d3       	rcall	.+1868   	; 0xa498 <__subsf3>
    9d4c:	dc 01       	movw	r26, r24
    9d4e:	cb 01       	movw	r24, r22
    9d50:	bc 01       	movw	r22, r24
    9d52:	cd 01       	movw	r24, r26
    9d54:	ac d4       	rcall	.+2392   	; 0xa6ae <__fixsfsi>
    9d56:	dc 01       	movw	r26, r24
    9d58:	cb 01       	movw	r24, r22
    9d5a:	c2 97       	sbiw	r24, 0x32	; 50
    9d5c:	bc f4       	brge	.+46     	; 0x9d8c <fs_3+0x12c>
		&& altitude > FS3_MAX_ALTITUDE)
    9d5e:	80 91 33 22 	lds	r24, 0x2233	; 0x802233 <altitude>
    9d62:	90 91 34 22 	lds	r25, 0x2234	; 0x802234 <altitude+0x1>
    9d66:	a0 91 35 22 	lds	r26, 0x2235	; 0x802235 <altitude+0x2>
    9d6a:	b0 91 36 22 	lds	r27, 0x2236	; 0x802236 <altitude+0x3>
    9d6e:	20 e0       	ldi	r18, 0x00	; 0
    9d70:	30 e0       	ldi	r19, 0x00	; 0
    9d72:	40 ea       	ldi	r20, 0xA0	; 160
    9d74:	52 e4       	ldi	r21, 0x42	; 66
    9d76:	bc 01       	movw	r22, r24
    9d78:	cd 01       	movw	r24, r26
    9d7a:	ca d5       	rcall	.+2964   	; 0xa910 <__gesf2>
    9d7c:	18 16       	cp	r1, r24
    9d7e:	0c f0       	brlt	.+2      	; 0x9d82 <fs_3+0x122>
	{
			buzz_on();
			blockTransmission = true;
	}
}
    9d80:	05 c0       	rjmp	.+10     	; 0x9d8c <fs_3+0x12c>
	if(abs(velocity) < FS3_MAX_VEL 
		&& abs(accZ) < FS3_MAX_ACCEL
		&& abs(accelHeight - altitude) < FS3_MAX_HEIGHT_DRIFT
		&& altitude > FS3_MAX_ALTITUDE)
	{
			buzz_on();
    9d82:	0e 94 09 1a 	call	0x3412	; 0x3412 <buzz_on>
			blockTransmission = true;
    9d86:	81 e0       	ldi	r24, 0x01	; 1
    9d88:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <blockTransmission>
	}
}
    9d8c:	00 00       	nop
    9d8e:	df 91       	pop	r29
    9d90:	cf 91       	pop	r28
    9d92:	08 95       	ret

00009d94 <main>:




int main (void)
{
    9d94:	2f 92       	push	r2
    9d96:	3f 92       	push	r3
    9d98:	4f 92       	push	r4
    9d9a:	5f 92       	push	r5
    9d9c:	6f 92       	push	r6
    9d9e:	7f 92       	push	r7
    9da0:	8f 92       	push	r8
    9da2:	9f 92       	push	r9
    9da4:	af 92       	push	r10
    9da6:	bf 92       	push	r11
    9da8:	cf 92       	push	r12
    9daa:	df 92       	push	r13
    9dac:	ef 92       	push	r14
    9dae:	ff 92       	push	r15
    9db0:	0f 93       	push	r16
    9db2:	1f 93       	push	r17
    9db4:	cf 93       	push	r28
    9db6:	df 93       	push	r29
    9db8:	cd b7       	in	r28, 0x3d	; 61
    9dba:	de b7       	in	r29, 0x3e	; 62
    9dbc:	c0 54       	subi	r28, 0x40	; 64
    9dbe:	d1 09       	sbc	r29, r1
    9dc0:	cd bf       	out	0x3d, r28	; 61
    9dc2:	de bf       	out	0x3e, r29	; 62
	blockTransmission = false;
    9dc4:	10 92 2e 22 	sts	0x222E, r1	; 0x80222e <blockTransmission>
	board_init();
    9dc8:	1f da       	rcall	.-3010   	; 0x9208 <board_init>
	//TODO: HANDLE RESETS
	
	
	**/
	
	sysclk_init();
    9dca:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sysclk_init>
	rtc_init();
    9dce:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <rtc_init>
		wdt_enable();
	}
	

	
	uart_terminal_init();
    9dd2:	01 dd       	rcall	.-1534   	; 0x97d6 <uart_terminal_init>
	newOLogInit();
    9dd4:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <newOLogInit>

	if(DEBUG) printf("uart is working\n");
    9dd8:	87 e6       	ldi	r24, 0x67	; 103
    9dda:	91 e2       	ldi	r25, 0x21	; 33
    9ddc:	0e 94 21 5d 	call	0xba42	; 0xba42 <puts>
	
	
	spi_init_module();
    9de0:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <spi_init_module>
	
	

	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
    9de4:	6e dd       	rcall	.-1316   	; 0x98c2 <pmic_init>
    9de6:	81 e0       	ldi	r24, 0x01	; 1
    9de8:	79 dd       	rcall	.-1294   	; 0x98dc <pmic_set_scheduling>
	irq_initialize_vectors();
    9dea:	80 ea       	ldi	r24, 0xA0	; 160
    9dec:	90 e0       	ldi	r25, 0x00	; 0
    9dee:	27 e0       	ldi	r18, 0x07	; 7
    9df0:	fc 01       	movw	r30, r24
    9df2:	22 83       	std	Z+2, r18	; 0x02
	cpu_irq_enable();
    9df4:	78 94       	sei
	
	init_GPS_pins_and_usart();
    9df6:	0e 94 58 29 	call	0x52b0	; 0x52b0 <init_GPS_pins_and_usart>
	init_gps_interrupts();
    9dfa:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <init_gps_interrupts>
	init_gps_buffers();	
    9dfe:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <init_gps_buffers>
	//imu_init();
	//delay_s(1);
	xbee_init();
    9e02:	0e 94 6e 22 	call	0x44dc	; 0x44dc <xbee_init>
	

	thermistor_init();
    9e06:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <thermistor_init>
	volt_init();
    9e0a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <volt_init>

	uint8_t servoPos = 0;
	//set_servo(0);
	
	buzz_on();
    9e0e:	19 82       	std	Y+1, r1	; 0x01
    9e10:	0e 94 09 1a 	call	0x3412	; 0x3412 <buzz_on>
	delay_ms(1000);
    9e14:	3f dd       	rcall	.-1410   	; 0x9894 <sysclk_get_cpu_hz>
    9e16:	dc 01       	movw	r26, r24
    9e18:	cb 01       	movw	r24, r22
    9e1a:	8c 01       	movw	r16, r24
    9e1c:	9d 01       	movw	r18, r26
    9e1e:	40 e0       	ldi	r20, 0x00	; 0
    9e20:	50 e0       	ldi	r21, 0x00	; 0
    9e22:	ba 01       	movw	r22, r20
    9e24:	09 a3       	std	Y+33, r16	; 0x21
    9e26:	1a a3       	std	Y+34, r17	; 0x22
    9e28:	2b a3       	std	Y+35, r18	; 0x23
    9e2a:	3c a3       	std	Y+36, r19	; 0x24
    9e2c:	4d a3       	std	Y+37, r20	; 0x25
    9e2e:	5e a3       	std	Y+38, r21	; 0x26
    9e30:	6f a3       	std	Y+39, r22	; 0x27
    9e32:	78 a7       	std	Y+40, r23	; 0x28
    9e34:	29 a0       	ldd	r2, Y+33	; 0x21
    9e36:	3a a0       	ldd	r3, Y+34	; 0x22
    9e38:	4b a0       	ldd	r4, Y+35	; 0x23
    9e3a:	5c a0       	ldd	r5, Y+36	; 0x24
    9e3c:	6d a0       	ldd	r6, Y+37	; 0x25
    9e3e:	7e a0       	ldd	r7, Y+38	; 0x26
    9e40:	8f a0       	ldd	r8, Y+39	; 0x27
    9e42:	98 a4       	ldd	r9, Y+40	; 0x28
    9e44:	22 2d       	mov	r18, r2
    9e46:	33 2d       	mov	r19, r3
    9e48:	44 2d       	mov	r20, r4
    9e4a:	55 2d       	mov	r21, r5
    9e4c:	66 2d       	mov	r22, r6
    9e4e:	77 2d       	mov	r23, r7
    9e50:	88 2d       	mov	r24, r8
    9e52:	99 2d       	mov	r25, r9
    9e54:	02 e0       	ldi	r16, 0x02	; 2
    9e56:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    9e5a:	a2 2e       	mov	r10, r18
    9e5c:	b3 2e       	mov	r11, r19
    9e5e:	c4 2e       	mov	r12, r20
    9e60:	d5 2e       	mov	r13, r21
    9e62:	e6 2e       	mov	r14, r22
    9e64:	f7 2e       	mov	r15, r23
    9e66:	08 2f       	mov	r16, r24
    9e68:	19 2f       	mov	r17, r25
    9e6a:	2a 2c       	mov	r2, r10
    9e6c:	3b 2c       	mov	r3, r11
    9e6e:	4c 2c       	mov	r4, r12
    9e70:	5d 2c       	mov	r5, r13
    9e72:	6e 2c       	mov	r6, r14
    9e74:	7f 2c       	mov	r7, r15
    9e76:	80 2e       	mov	r8, r16
    9e78:	91 2e       	mov	r9, r17
    9e7a:	22 2d       	mov	r18, r2
    9e7c:	33 2d       	mov	r19, r3
    9e7e:	44 2d       	mov	r20, r4
    9e80:	55 2d       	mov	r21, r5
    9e82:	66 2d       	mov	r22, r6
    9e84:	77 2d       	mov	r23, r7
    9e86:	88 2d       	mov	r24, r8
    9e88:	99 2d       	mov	r25, r9
    9e8a:	05 e0       	ldi	r16, 0x05	; 5
    9e8c:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    9e90:	a2 2e       	mov	r10, r18
    9e92:	b3 2e       	mov	r11, r19
    9e94:	c4 2e       	mov	r12, r20
    9e96:	d5 2e       	mov	r13, r21
    9e98:	e6 2e       	mov	r14, r22
    9e9a:	f7 2e       	mov	r15, r23
    9e9c:	08 2f       	mov	r16, r24
    9e9e:	19 2f       	mov	r17, r25
    9ea0:	2a 2d       	mov	r18, r10
    9ea2:	3b 2d       	mov	r19, r11
    9ea4:	4c 2d       	mov	r20, r12
    9ea6:	5d 2d       	mov	r21, r13
    9ea8:	6e 2d       	mov	r22, r14
    9eaa:	7f 2d       	mov	r23, r15
    9eac:	80 2f       	mov	r24, r16
    9eae:	91 2f       	mov	r25, r17
    9eb0:	a2 2c       	mov	r10, r2
    9eb2:	b3 2c       	mov	r11, r3
    9eb4:	c4 2c       	mov	r12, r4
    9eb6:	d5 2c       	mov	r13, r5
    9eb8:	e6 2c       	mov	r14, r6
    9eba:	f7 2c       	mov	r15, r7
    9ebc:	08 2d       	mov	r16, r8
    9ebe:	19 2d       	mov	r17, r9
    9ec0:	0e 94 34 5a 	call	0xb468	; 0xb468 <__subdi3>
    9ec4:	a2 2e       	mov	r10, r18
    9ec6:	b3 2e       	mov	r11, r19
    9ec8:	c4 2e       	mov	r12, r20
    9eca:	d5 2e       	mov	r13, r21
    9ecc:	e6 2e       	mov	r14, r22
    9ece:	f7 2e       	mov	r15, r23
    9ed0:	08 2f       	mov	r16, r24
    9ed2:	19 2f       	mov	r17, r25
    9ed4:	2a 2d       	mov	r18, r10
    9ed6:	3b 2d       	mov	r19, r11
    9ed8:	4c 2d       	mov	r20, r12
    9eda:	5d 2d       	mov	r21, r13
    9edc:	6e 2d       	mov	r22, r14
    9ede:	7f 2d       	mov	r23, r15
    9ee0:	80 2f       	mov	r24, r16
    9ee2:	91 2f       	mov	r25, r17
    9ee4:	a9 a0       	ldd	r10, Y+33	; 0x21
    9ee6:	ba a0       	ldd	r11, Y+34	; 0x22
    9ee8:	cb a0       	ldd	r12, Y+35	; 0x23
    9eea:	dc a0       	ldd	r13, Y+36	; 0x24
    9eec:	ed a0       	ldd	r14, Y+37	; 0x25
    9eee:	fe a0       	ldd	r15, Y+38	; 0x26
    9ef0:	0f a1       	ldd	r16, Y+39	; 0x27
    9ef2:	18 a5       	ldd	r17, Y+40	; 0x28
    9ef4:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <__adddi3>
    9ef8:	a2 2e       	mov	r10, r18
    9efa:	b3 2e       	mov	r11, r19
    9efc:	c4 2e       	mov	r12, r20
    9efe:	d5 2e       	mov	r13, r21
    9f00:	e6 2e       	mov	r14, r22
    9f02:	f7 2e       	mov	r15, r23
    9f04:	08 2f       	mov	r16, r24
    9f06:	19 2f       	mov	r17, r25
    9f08:	2a 2d       	mov	r18, r10
    9f0a:	3b 2d       	mov	r19, r11
    9f0c:	4c 2d       	mov	r20, r12
    9f0e:	5d 2d       	mov	r21, r13
    9f10:	6e 2d       	mov	r22, r14
    9f12:	7f 2d       	mov	r23, r15
    9f14:	80 2f       	mov	r24, r16
    9f16:	91 2f       	mov	r25, r17
    9f18:	03 e0       	ldi	r16, 0x03	; 3
    9f1a:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    9f1e:	22 2e       	mov	r2, r18
    9f20:	33 2e       	mov	r3, r19
    9f22:	44 2e       	mov	r4, r20
    9f24:	55 2e       	mov	r5, r21
    9f26:	66 2e       	mov	r6, r22
    9f28:	77 2e       	mov	r7, r23
    9f2a:	88 2e       	mov	r8, r24
    9f2c:	99 2e       	mov	r9, r25
    9f2e:	a2 2c       	mov	r10, r2
    9f30:	b3 2c       	mov	r11, r3
    9f32:	c4 2c       	mov	r12, r4
    9f34:	d5 2c       	mov	r13, r5
    9f36:	e6 2c       	mov	r14, r6
    9f38:	f7 2c       	mov	r15, r7
    9f3a:	08 2d       	mov	r16, r8
    9f3c:	19 2d       	mov	r17, r9
    9f3e:	2a 2c       	mov	r2, r10
    9f40:	3b 2c       	mov	r3, r11
    9f42:	4c 2c       	mov	r4, r12
    9f44:	5d 2c       	mov	r5, r13
    9f46:	6e 2c       	mov	r6, r14
    9f48:	7f 2c       	mov	r7, r15
    9f4a:	80 2e       	mov	r8, r16
    9f4c:	91 2e       	mov	r9, r17
    9f4e:	0f 2e       	mov	r0, r31
    9f50:	f6 e0       	ldi	r31, 0x06	; 6
    9f52:	af 2e       	mov	r10, r31
    9f54:	f0 2d       	mov	r31, r0
    9f56:	b1 2c       	mov	r11, r1
    9f58:	c1 2c       	mov	r12, r1
    9f5a:	d1 2c       	mov	r13, r1
    9f5c:	e1 2c       	mov	r14, r1
    9f5e:	f1 2c       	mov	r15, r1
    9f60:	00 e0       	ldi	r16, 0x00	; 0
    9f62:	10 e0       	ldi	r17, 0x00	; 0
    9f64:	22 2d       	mov	r18, r2
    9f66:	33 2d       	mov	r19, r3
    9f68:	44 2d       	mov	r20, r4
    9f6a:	55 2d       	mov	r21, r5
    9f6c:	66 2d       	mov	r22, r6
    9f6e:	77 2d       	mov	r23, r7
    9f70:	88 2d       	mov	r24, r8
    9f72:	99 2d       	mov	r25, r9
    9f74:	0e 94 8c 59 	call	0xb318	; 0xb318 <__udivdi3>
    9f78:	22 2e       	mov	r2, r18
    9f7a:	33 2e       	mov	r3, r19
    9f7c:	44 2e       	mov	r4, r20
    9f7e:	55 2e       	mov	r5, r21
    9f80:	66 2e       	mov	r6, r22
    9f82:	77 2e       	mov	r7, r23
    9f84:	88 2e       	mov	r8, r24
    9f86:	99 2e       	mov	r9, r25
    9f88:	a2 2c       	mov	r10, r2
    9f8a:	b3 2c       	mov	r11, r3
    9f8c:	c4 2c       	mov	r12, r4
    9f8e:	d5 2c       	mov	r13, r5
    9f90:	e6 2c       	mov	r14, r6
    9f92:	f7 2c       	mov	r15, r7
    9f94:	08 2d       	mov	r16, r8
    9f96:	19 2d       	mov	r17, r9
    9f98:	2a 2d       	mov	r18, r10
    9f9a:	3b 2d       	mov	r19, r11
    9f9c:	4c 2d       	mov	r20, r12
    9f9e:	5d 2d       	mov	r21, r13
    9fa0:	6e 2d       	mov	r22, r14
    9fa2:	7f 2d       	mov	r23, r15
    9fa4:	80 2f       	mov	r24, r16
    9fa6:	91 2f       	mov	r25, r17
    9fa8:	29 51       	subi	r18, 0x19	; 25
    9faa:	3c 4f       	sbci	r19, 0xFC	; 252
    9fac:	4f 4f       	sbci	r20, 0xFF	; 255
    9fae:	5f 4f       	sbci	r21, 0xFF	; 255
    9fb0:	6f 4f       	sbci	r22, 0xFF	; 255
    9fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    9fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    9fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    9fb8:	a2 2e       	mov	r10, r18
    9fba:	b3 2e       	mov	r11, r19
    9fbc:	c4 2e       	mov	r12, r20
    9fbe:	d5 2e       	mov	r13, r21
    9fc0:	e6 2e       	mov	r14, r22
    9fc2:	f7 2e       	mov	r15, r23
    9fc4:	08 2f       	mov	r16, r24
    9fc6:	19 2f       	mov	r17, r25
    9fc8:	2a 2d       	mov	r18, r10
    9fca:	3b 2d       	mov	r19, r11
    9fcc:	4c 2d       	mov	r20, r12
    9fce:	5d 2d       	mov	r21, r13
    9fd0:	6e 2d       	mov	r22, r14
    9fd2:	7f 2d       	mov	r23, r15
    9fd4:	80 2f       	mov	r24, r16
    9fd6:	91 2f       	mov	r25, r17
    9fd8:	d8 d3       	rcall	.+1968   	; 0xa78a <__floatundisf>
    9fda:	dc 01       	movw	r26, r24
    9fdc:	cb 01       	movw	r24, r22
    9fde:	20 e0       	ldi	r18, 0x00	; 0
    9fe0:	30 e0       	ldi	r19, 0x00	; 0
    9fe2:	4a e7       	ldi	r20, 0x7A	; 122
    9fe4:	54 e4       	ldi	r21, 0x44	; 68
    9fe6:	bc 01       	movw	r22, r24
    9fe8:	cd 01       	movw	r24, r26
    9fea:	bf d2       	rcall	.+1406   	; 0xa56a <__divsf3>
    9fec:	dc 01       	movw	r26, r24
    9fee:	cb 01       	movw	r24, r22
    9ff0:	bc 01       	movw	r22, r24
    9ff2:	cd 01       	movw	r24, r26
    9ff4:	27 d3       	rcall	.+1614   	; 0xa644 <__fixunssfdi>
    9ff6:	a2 2e       	mov	r10, r18
    9ff8:	b3 2e       	mov	r11, r19
    9ffa:	c4 2e       	mov	r12, r20
    9ffc:	d5 2e       	mov	r13, r21
    9ffe:	e6 2e       	mov	r14, r22
    a000:	f7 2e       	mov	r15, r23
    a002:	08 2f       	mov	r16, r24
    a004:	19 2f       	mov	r17, r25
    a006:	d6 01       	movw	r26, r12
    a008:	c5 01       	movw	r24, r10
    a00a:	bc 01       	movw	r22, r24
    a00c:	cd 01       	movw	r24, r26
    a00e:	4e dc       	rcall	.-1892   	; 0x98ac <__portable_avr_delay_cycles>
	buzz_off();
    a010:	0e 94 27 1a 	call	0x344e	; 0x344e <buzz_off>
	//xbeeWrite("hello There!");
	while (true)
	{
		
		
		printf("\ngood morning realterm");
    a014:	87 e7       	ldi	r24, 0x77	; 119
    a016:	91 e2       	ldi	r25, 0x21	; 33
    a018:	89 2f       	mov	r24, r25
    a01a:	8f 93       	push	r24
    a01c:	87 e7       	ldi	r24, 0x77	; 119
    a01e:	91 e2       	ldi	r25, 0x21	; 33
    a020:	8f 93       	push	r24
    a022:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <printf>
    a026:	0f 90       	pop	r0
		//xbeeWrite("hello There! xbee");
		imu_update();
    a028:	0f 90       	pop	r0
    a02a:	0e 94 4e 18 	call	0x309c	; 0x309c <imu_update>
		
		
		/***
		Get Telemetry - Part of every flight state
		***/
		missionTime = ((float)rtc_get_time())/10.0;
    a02e:	0e 94 95 30 	call	0x612a	; 0x612a <rtc_get_time>
    a032:	dc 01       	movw	r26, r24
    a034:	cb 01       	movw	r24, r22
    a036:	bc 01       	movw	r22, r24
    a038:	cd 01       	movw	r24, r26
    a03a:	6a d3       	rcall	.+1748   	; 0xa710 <__floatunsisf>
    a03c:	dc 01       	movw	r26, r24
    a03e:	cb 01       	movw	r24, r22
    a040:	20 e0       	ldi	r18, 0x00	; 0
    a042:	30 e0       	ldi	r19, 0x00	; 0
    a044:	40 e2       	ldi	r20, 0x20	; 32
    a046:	51 e4       	ldi	r21, 0x41	; 65
    a048:	bc 01       	movw	r22, r24
    a04a:	cd 01       	movw	r24, r26
    a04c:	8e d2       	rcall	.+1308   	; 0xa56a <__divsf3>
    a04e:	dc 01       	movw	r26, r24
    a050:	cb 01       	movw	r24, r22
    a052:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <missionTime>
    a056:	90 93 16 22 	sts	0x2216, r25	; 0x802216 <missionTime+0x1>
    a05a:	a0 93 17 22 	sts	0x2217, r26	; 0x802217 <missionTime+0x2>
    a05e:	b0 93 18 22 	sts	0x2218, r27	; 0x802218 <missionTime+0x3>
		pressure = getPressure();
    a062:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <getPressure>
    a066:	dc 01       	movw	r26, r24
    a068:	cb 01       	movw	r24, r22
    a06a:	80 93 1d 22 	sts	0x221D, r24	; 0x80221d <pressure>
    a06e:	90 93 1e 22 	sts	0x221E, r25	; 0x80221e <pressure+0x1>
    a072:	a0 93 1f 22 	sts	0x221F, r26	; 0x80221f <pressure+0x2>
    a076:	b0 93 20 22 	sts	0x2220, r27	; 0x802220 <pressure+0x3>
		printf("%f\n", pressure);
    a07a:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <pressure>
    a07e:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <pressure+0x1>
    a082:	a0 91 1f 22 	lds	r26, 0x221F	; 0x80221f <pressure+0x2>
    a086:	b0 91 20 22 	lds	r27, 0x2220	; 0x802220 <pressure+0x3>
    a08a:	2b 2f       	mov	r18, r27
    a08c:	2f 93       	push	r18
    a08e:	2a 2f       	mov	r18, r26
    a090:	2f 93       	push	r18
    a092:	29 2f       	mov	r18, r25
    a094:	2f 93       	push	r18
    a096:	8f 93       	push	r24
    a098:	80 ee       	ldi	r24, 0xE0	; 224
    a09a:	90 e2       	ldi	r25, 0x20	; 32
    a09c:	89 2f       	mov	r24, r25
    a09e:	8f 93       	push	r24
    a0a0:	80 ee       	ldi	r24, 0xE0	; 224
    a0a2:	90 e2       	ldi	r25, 0x20	; 32
    a0a4:	8f 93       	push	r24
    a0a6:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <printf>
    a0aa:	0f 90       	pop	r0
    a0ac:	0f 90       	pop	r0
    a0ae:	0f 90       	pop	r0
    a0b0:	0f 90       	pop	r0
    a0b2:	0f 90       	pop	r0
    a0b4:	0f 90       	pop	r0
		//printf("is it me?");
		
		
		if (last_finished != SENTENCE_NONE)
    a0b6:	80 91 78 25 	lds	r24, 0x2578	; 0x802578 <last_finished>
    a0ba:	88 23       	and	r24, r24
    a0bc:	09 f4       	brne	.+2      	; 0xa0c0 <main+0x32c>
    a0be:	54 c0       	rjmp	.+168    	; 0xa168 <main+0x3d4>
		{
			rbu8_read(&gps_receive_buffer,gpstmp,85);
    a0c0:	45 e5       	ldi	r20, 0x55	; 85
    a0c2:	50 e0       	ldi	r21, 0x00	; 0
    a0c4:	67 e5       	ldi	r22, 0x57	; 87
    a0c6:	72 e2       	ldi	r23, 0x22	; 34
    a0c8:	80 e7       	ldi	r24, 0x70	; 112
    a0ca:	95 e2       	ldi	r25, 0x25	; 37
    a0cc:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <rbu8_read>
			GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
    a0d0:	87 e5       	ldi	r24, 0x57	; 87
    a0d2:	92 e2       	ldi	r25, 0x22	; 34
    a0d4:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <strlen>
    a0d8:	28 2f       	mov	r18, r24
    a0da:	ce 01       	movw	r24, r28
    a0dc:	02 96       	adiw	r24, 0x02	; 2
    a0de:	42 2f       	mov	r20, r18
    a0e0:	67 e5       	ldi	r22, 0x57	; 87
    a0e2:	72 e2       	ldi	r23, 0x22	; 34
    a0e4:	0e 94 bb 29 	call	0x5376	; 0x5376 <getGPSDatafromNMEA>
			GPSAlt = gps_data.altitude;
    a0e8:	88 8d       	ldd	r24, Y+24	; 0x18
    a0ea:	99 8d       	ldd	r25, Y+25	; 0x19
    a0ec:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a0ee:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a0f0:	bc 01       	movw	r22, r24
    a0f2:	cd 01       	movw	r24, r26
    a0f4:	e1 d2       	rcall	.+1474   	; 0xa6b8 <__fixunssfsi>
    a0f6:	dc 01       	movw	r26, r24
    a0f8:	cb 01       	movw	r24, r22
    a0fa:	80 93 bc 24 	sts	0x24BC, r24	; 0x8024bc <GPSAlt>
    a0fe:	90 93 bd 24 	sts	0x24BD, r25	; 0x8024bd <GPSAlt+0x1>
    a102:	a0 93 be 24 	sts	0x24BE, r26	; 0x8024be <GPSAlt+0x2>
    a106:	b0 93 bf 24 	sts	0x24BF, r27	; 0x8024bf <GPSAlt+0x3>
			GPSLat = gps_data.latdecimal;
    a10a:	89 85       	ldd	r24, Y+9	; 0x09
    a10c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a10e:	ab 85       	ldd	r26, Y+11	; 0x0b
    a110:	bc 85       	ldd	r27, Y+12	; 0x0c
    a112:	bc 01       	movw	r22, r24
    a114:	cd 01       	movw	r24, r26
    a116:	d0 d2       	rcall	.+1440   	; 0xa6b8 <__fixunssfsi>
    a118:	dc 01       	movw	r26, r24
    a11a:	cb 01       	movw	r24, r22
    a11c:	80 93 25 22 	sts	0x2225, r24	; 0x802225 <GPSLat>
    a120:	90 93 26 22 	sts	0x2226, r25	; 0x802226 <GPSLat+0x1>
    a124:	a0 93 27 22 	sts	0x2227, r26	; 0x802227 <GPSLat+0x2>
    a128:	b0 93 28 22 	sts	0x2228, r27	; 0x802228 <GPSLat+0x3>
			GPSLong = gps_data.londecimal;
    a12c:	8c 89       	ldd	r24, Y+20	; 0x14
    a12e:	9d 89       	ldd	r25, Y+21	; 0x15
    a130:	ae 89       	ldd	r26, Y+22	; 0x16
    a132:	bf 89       	ldd	r27, Y+23	; 0x17
    a134:	bc 01       	movw	r22, r24
    a136:	cd 01       	movw	r24, r26
    a138:	bf d2       	rcall	.+1406   	; 0xa6b8 <__fixunssfsi>
    a13a:	dc 01       	movw	r26, r24
    a13c:	cb 01       	movw	r24, r22
    a13e:	80 93 b8 22 	sts	0x22B8, r24	; 0x8022b8 <GPSLong>
    a142:	90 93 b9 22 	sts	0x22B9, r25	; 0x8022b9 <GPSLong+0x1>
    a146:	a0 93 ba 22 	sts	0x22BA, r26	; 0x8022ba <GPSLong+0x2>
    a14a:	b0 93 bb 22 	sts	0x22BB, r27	; 0x8022bb <GPSLong+0x3>
			GPSSats = gps_data.sats;
    a14e:	88 a1       	ldd	r24, Y+32	; 0x20
    a150:	88 2f       	mov	r24, r24
    a152:	90 e0       	ldi	r25, 0x00	; 0
    a154:	a0 e0       	ldi	r26, 0x00	; 0
    a156:	b0 e0       	ldi	r27, 0x00	; 0
    a158:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <GPSSats>
    a15c:	90 93 ad 22 	sts	0x22AD, r25	; 0x8022ad <GPSSats+0x1>
    a160:	a0 93 ae 22 	sts	0x22AE, r26	; 0x8022ae <GPSSats+0x2>
    a164:	b0 93 af 22 	sts	0x22AF, r27	; 0x8022af <GPSSats+0x3>
			
		}
		//printf("Sats: %u\n",GPSSats);
		////printf("Lat: %u\n",GPSLat);
		////printf("Long: %u\n",GPSLong);
		temp = getTemperature();
    a168:	0e 94 3d 10 	call	0x207a	; 0x207a <getTemperature>
    a16c:	dc 01       	movw	r26, r24
    a16e:	cb 01       	movw	r24, r22
    a170:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <temp>
    a174:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <temp+0x1>
    a178:	a0 93 13 22 	sts	0x2213, r26	; 0x802213 <temp+0x2>
    a17c:	b0 93 14 22 	sts	0x2214, r27	; 0x802214 <temp+0x3>
		printf("%f\n", temp);
    a180:	80 91 11 22 	lds	r24, 0x2211	; 0x802211 <temp>
    a184:	90 91 12 22 	lds	r25, 0x2212	; 0x802212 <temp+0x1>
    a188:	a0 91 13 22 	lds	r26, 0x2213	; 0x802213 <temp+0x2>
    a18c:	b0 91 14 22 	lds	r27, 0x2214	; 0x802214 <temp+0x3>
    a190:	2b 2f       	mov	r18, r27
    a192:	2f 93       	push	r18
    a194:	2a 2f       	mov	r18, r26
    a196:	2f 93       	push	r18
    a198:	29 2f       	mov	r18, r25
    a19a:	2f 93       	push	r18
    a19c:	8f 93       	push	r24
    a19e:	80 ee       	ldi	r24, 0xE0	; 224
    a1a0:	90 e2       	ldi	r25, 0x20	; 32
    a1a2:	89 2f       	mov	r24, r25
    a1a4:	8f 93       	push	r24
    a1a6:	80 ee       	ldi	r24, 0xE0	; 224
    a1a8:	90 e2       	ldi	r25, 0x20	; 32
    a1aa:	8f 93       	push	r24
    a1ac:	0e 94 0e 5d 	call	0xba1c	; 0xba1c <printf>
    a1b0:	0f 90       	pop	r0
    a1b2:	0f 90       	pop	r0
    a1b4:	0f 90       	pop	r0
    a1b6:	0f 90       	pop	r0
    a1b8:	0f 90       	pop	r0
		altitude = pressure ; // TODO: finish function
    a1ba:	0f 90       	pop	r0
    a1bc:	80 91 1d 22 	lds	r24, 0x221D	; 0x80221d <pressure>
    a1c0:	90 91 1e 22 	lds	r25, 0x221E	; 0x80221e <pressure+0x1>
    a1c4:	a0 91 1f 22 	lds	r26, 0x221F	; 0x80221f <pressure+0x2>
    a1c8:	b0 91 20 22 	lds	r27, 0x2220	; 0x802220 <pressure+0x3>
    a1cc:	bc 01       	movw	r22, r24
    a1ce:	cd 01       	movw	r24, r26
    a1d0:	a1 d2       	rcall	.+1346   	; 0xa714 <__floatsisf>
    a1d2:	dc 01       	movw	r26, r24
    a1d4:	cb 01       	movw	r24, r22
    a1d6:	80 93 33 22 	sts	0x2233, r24	; 0x802233 <altitude>
    a1da:	90 93 34 22 	sts	0x2234, r25	; 0x802234 <altitude+0x1>
    a1de:	a0 93 35 22 	sts	0x2235, r26	; 0x802235 <altitude+0x2>
    a1e2:	b0 93 36 22 	sts	0x2236, r27	; 0x802236 <altitude+0x3>
		voltage = getVoltage();
    a1e6:	0e 94 0f 10 	call	0x201e	; 0x201e <getVoltage>
    a1ea:	dc 01       	movw	r26, r24
    a1ec:	cb 01       	movw	r24, r22
    a1ee:	80 93 19 22 	sts	0x2219, r24	; 0x802219 <voltage>
    a1f2:	90 93 1a 22 	sts	0x221A, r25	; 0x80221a <voltage+0x1>
    a1f6:	a0 93 1b 22 	sts	0x221B, r26	; 0x80221b <voltage+0x2>
    a1fa:	b0 93 1c 22 	sts	0x221C, r27	; 0x80221c <voltage+0x3>
		velocity = imu_vel_z();
    a1fe:	0e 94 96 19 	call	0x332c	; 0x332c <imu_vel_z>
    a202:	dc 01       	movw	r26, r24
    a204:	cb 01       	movw	r24, r22
    a206:	80 93 2a 22 	sts	0x222A, r24	; 0x80222a <velocity>
    a20a:	90 93 2b 22 	sts	0x222B, r25	; 0x80222b <velocity+0x1>
    a20e:	a0 93 2c 22 	sts	0x222C, r26	; 0x80222c <velocity+0x2>
    a212:	b0 93 2d 22 	sts	0x222D, r27	; 0x80222d <velocity+0x3>
		accelHeight = imu_pos_z();
    a216:	0e 94 a7 19 	call	0x334e	; 0x334e <imu_pos_z>
    a21a:	dc 01       	movw	r26, r24
    a21c:	cb 01       	movw	r24, r22
    a21e:	80 93 05 22 	sts	0x2205, r24	; 0x802205 <accelHeight>
    a222:	90 93 06 22 	sts	0x2206, r25	; 0x802206 <accelHeight+0x1>
    a226:	a0 93 07 22 	sts	0x2207, r26	; 0x802207 <accelHeight+0x2>
    a22a:	b0 93 08 22 	sts	0x2208, r27	; 0x802208 <accelHeight+0x3>
		accZ = imu_accel_z();
    a22e:	0e 94 85 19 	call	0x330a	; 0x330a <imu_accel_z>
    a232:	dc 01       	movw	r26, r24
    a234:	cb 01       	movw	r24, r22
    a236:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <accZ>
    a23a:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <accZ+0x1>
    a23e:	a0 93 0b 22 	sts	0x220B, r26	; 0x80220b <accZ+0x2>
    a242:	b0 93 0c 22 	sts	0x220C, r27	; 0x80220c <accZ+0x3>
		pitch = imu_pitch();
    a246:	0e 94 c9 19 	call	0x3392	; 0x3392 <imu_pitch>
    a24a:	dc 01       	movw	r26, r24
    a24c:	cb 01       	movw	r24, r22
    a24e:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <pitch>
    a252:	90 93 b1 22 	sts	0x22B1, r25	; 0x8022b1 <pitch+0x1>
    a256:	a0 93 b2 22 	sts	0x22B2, r26	; 0x8022b2 <pitch+0x2>
    a25a:	b0 93 b3 22 	sts	0x22B3, r27	; 0x8022b3 <pitch+0x3>
		roll = imu_roll();
    a25e:	0e 94 b8 19 	call	0x3370	; 0x3370 <imu_roll>
    a262:	dc 01       	movw	r26, r24
    a264:	cb 01       	movw	r24, r22
    a266:	80 93 b4 22 	sts	0x22B4, r24	; 0x8022b4 <roll>
    a26a:	90 93 b5 22 	sts	0x22B5, r25	; 0x8022b5 <roll+0x1>
    a26e:	a0 93 b6 22 	sts	0x22B6, r26	; 0x8022b6 <roll+0x2>
    a272:	b0 93 b7 22 	sts	0x22B7, r27	; 0x8022b7 <roll+0x3>
		heading = imu_heading();
    a276:	0e 94 da 19 	call	0x33b4	; 0x33b4 <imu_heading>
    a27a:	dc 01       	movw	r26, r24
    a27c:	cb 01       	movw	r24, r22
    a27e:	80 93 c0 24 	sts	0x24C0, r24	; 0x8024c0 <heading>
    a282:	90 93 c1 24 	sts	0x24C1, r25	; 0x8024c1 <heading+0x1>
    a286:	a0 93 c2 24 	sts	0x24C2, r26	; 0x8024c2 <heading+0x2>
    a28a:	b0 93 c3 24 	sts	0x24C3, r27	; 0x8024c3 <heading+0x3>
		
		switch(flightState)
    a28e:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <flightState>
    a292:	88 2f       	mov	r24, r24
    a294:	90 e0       	ldi	r25, 0x00	; 0
    a296:	81 30       	cpi	r24, 0x01	; 1
    a298:	91 05       	cpc	r25, r1
    a29a:	71 f0       	breq	.+28     	; 0xa2b8 <main+0x524>
    a29c:	82 30       	cpi	r24, 0x02	; 2
    a29e:	91 05       	cpc	r25, r1
    a2a0:	1c f4       	brge	.+6      	; 0xa2a8 <main+0x514>
    a2a2:	89 2b       	or	r24, r25
    a2a4:	39 f0       	breq	.+14     	; 0xa2b4 <main+0x520>
    a2a6:	0e c0       	rjmp	.+28     	; 0xa2c4 <main+0x530>
    a2a8:	82 30       	cpi	r24, 0x02	; 2
				break;
		    case 3:
				fs_3();
				break;
			default: 
				break;
    a2aa:	91 05       	cpc	r25, r1
		heading = imu_heading();
		
		switch(flightState)
		{
			case 0:
				fs_0();
    a2ac:	39 f0       	breq	.+14     	; 0xa2bc <main+0x528>
    a2ae:	03 97       	sbiw	r24, 0x03	; 3
				break;
    a2b0:	39 f0       	breq	.+14     	; 0xa2c0 <main+0x52c>
			case 1:
				fs_1();
    a2b2:	08 c0       	rjmp	.+16     	; 0xa2c4 <main+0x530>
    a2b4:	3e db       	rcall	.-2436   	; 0x9932 <fs_0>
				break;
    a2b6:	06 c0       	rjmp	.+12     	; 0xa2c4 <main+0x530>
			case 2:
				fs_2();
    a2b8:	b8 db       	rcall	.-2192   	; 0x9a2a <fs_1>
    a2ba:	04 c0       	rjmp	.+8      	; 0xa2c4 <main+0x530>
				break;
    a2bc:	53 dc       	rcall	.-1882   	; 0x9b64 <fs_2>
		    case 3:
				fs_3();
    a2be:	02 c0       	rjmp	.+4      	; 0xa2c4 <main+0x530>
    a2c0:	cf dc       	rcall	.-1634   	; 0x9c60 <fs_3>
				break;
    a2c2:	00 00       	nop
				break;
			
		};
		
			
		delay_ms(50);		
    a2c4:	e7 da       	rcall	.-2610   	; 0x9894 <sysclk_get_cpu_hz>
    a2c6:	dc 01       	movw	r26, r24
    a2c8:	cb 01       	movw	r24, r22
    a2ca:	9c 01       	movw	r18, r24
    a2cc:	ad 01       	movw	r20, r26
    a2ce:	60 e0       	ldi	r22, 0x00	; 0
    a2d0:	70 e0       	ldi	r23, 0x00	; 0
    a2d2:	cb 01       	movw	r24, r22
    a2d4:	82 2e       	mov	r8, r18
    a2d6:	93 2e       	mov	r9, r19
    a2d8:	a4 2e       	mov	r10, r20
    a2da:	b5 2e       	mov	r11, r21
    a2dc:	c6 2e       	mov	r12, r22
    a2de:	d7 2e       	mov	r13, r23
    a2e0:	e8 2e       	mov	r14, r24
    a2e2:	f9 2e       	mov	r15, r25
    a2e4:	28 2d       	mov	r18, r8
    a2e6:	39 2d       	mov	r19, r9
    a2e8:	4a 2d       	mov	r20, r10
    a2ea:	5b 2d       	mov	r21, r11
    a2ec:	6c 2d       	mov	r22, r12
    a2ee:	7d 2d       	mov	r23, r13
    a2f0:	8e 2d       	mov	r24, r14
    a2f2:	9f 2d       	mov	r25, r15
    a2f4:	01 e0       	ldi	r16, 0x01	; 1
    a2f6:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    a2fa:	29 a7       	std	Y+41, r18	; 0x29
    a2fc:	3a a7       	std	Y+42, r19	; 0x2a
    a2fe:	4b a7       	std	Y+43, r20	; 0x2b
    a300:	5c a7       	std	Y+44, r21	; 0x2c
    a302:	6d a7       	std	Y+45, r22	; 0x2d
    a304:	7e a7       	std	Y+46, r23	; 0x2e
    a306:	8f a7       	std	Y+47, r24	; 0x2f
    a308:	98 ab       	std	Y+48, r25	; 0x30
    a30a:	89 a4       	ldd	r8, Y+41	; 0x29
    a30c:	9a a4       	ldd	r9, Y+42	; 0x2a
    a30e:	ab a4       	ldd	r10, Y+43	; 0x2b
    a310:	bc a4       	ldd	r11, Y+44	; 0x2c
    a312:	cd a4       	ldd	r12, Y+45	; 0x2d
    a314:	de a4       	ldd	r13, Y+46	; 0x2e
    a316:	ef a4       	ldd	r14, Y+47	; 0x2f
    a318:	f8 a8       	ldd	r15, Y+48	; 0x30
    a31a:	28 2d       	mov	r18, r8
    a31c:	39 2d       	mov	r19, r9
    a31e:	4a 2d       	mov	r20, r10
    a320:	5b 2d       	mov	r21, r11
    a322:	6c 2d       	mov	r22, r12
    a324:	7d 2d       	mov	r23, r13
    a326:	8e 2d       	mov	r24, r14
    a328:	9f 2d       	mov	r25, r15
    a32a:	02 e0       	ldi	r16, 0x02	; 2
    a32c:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    a330:	29 ab       	std	Y+49, r18	; 0x31
    a332:	3a ab       	std	Y+50, r19	; 0x32
    a334:	4b ab       	std	Y+51, r20	; 0x33
    a336:	5c ab       	std	Y+52, r21	; 0x34
    a338:	6d ab       	std	Y+53, r22	; 0x35
    a33a:	7e ab       	std	Y+54, r23	; 0x36
    a33c:	8f ab       	std	Y+55, r24	; 0x37
    a33e:	98 af       	std	Y+56, r25	; 0x38
    a340:	28 2d       	mov	r18, r8
    a342:	39 2d       	mov	r19, r9
    a344:	4a 2d       	mov	r20, r10
    a346:	5b 2d       	mov	r21, r11
    a348:	6c 2d       	mov	r22, r12
    a34a:	7d 2d       	mov	r23, r13
    a34c:	8e 2d       	mov	r24, r14
    a34e:	9f 2d       	mov	r25, r15
    a350:	a9 a8       	ldd	r10, Y+49	; 0x31
    a352:	ba a8       	ldd	r11, Y+50	; 0x32
    a354:	cb a8       	ldd	r12, Y+51	; 0x33
    a356:	dc a8       	ldd	r13, Y+52	; 0x34
    a358:	ed a8       	ldd	r14, Y+53	; 0x35
    a35a:	fe a8       	ldd	r15, Y+54	; 0x36
    a35c:	0f a9       	ldd	r16, Y+55	; 0x37
    a35e:	18 ad       	ldd	r17, Y+56	; 0x38
    a360:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <__adddi3>
    a364:	82 2e       	mov	r8, r18
    a366:	93 2e       	mov	r9, r19
    a368:	a4 2e       	mov	r10, r20
    a36a:	b5 2e       	mov	r11, r21
    a36c:	c6 2e       	mov	r12, r22
    a36e:	d7 2e       	mov	r13, r23
    a370:	e8 2e       	mov	r14, r24
    a372:	f9 2e       	mov	r15, r25
    a374:	28 2d       	mov	r18, r8
    a376:	39 2d       	mov	r19, r9
    a378:	4a 2d       	mov	r20, r10
    a37a:	5b 2d       	mov	r21, r11
    a37c:	6c 2d       	mov	r22, r12
    a37e:	7d 2d       	mov	r23, r13
    a380:	8e 2d       	mov	r24, r14
    a382:	9f 2d       	mov	r25, r15
    a384:	02 e0       	ldi	r16, 0x02	; 2
    a386:	0e 94 e8 59 	call	0xb3d0	; 0xb3d0 <__ashldi3>
    a38a:	29 af       	std	Y+57, r18	; 0x39
    a38c:	3a af       	std	Y+58, r19	; 0x3a
    a38e:	4b af       	std	Y+59, r20	; 0x3b
    a390:	5c af       	std	Y+60, r21	; 0x3c
    a392:	6d af       	std	Y+61, r22	; 0x3d
    a394:	7e af       	std	Y+62, r23	; 0x3e
    a396:	8f af       	std	Y+63, r24	; 0x3f
    a398:	21 96       	adiw	r28, 0x01	; 1
    a39a:	9f af       	std	Y+63, r25	; 0x3f
    a39c:	21 97       	sbiw	r28, 0x01	; 1
    a39e:	28 2d       	mov	r18, r8
    a3a0:	39 2d       	mov	r19, r9
    a3a2:	4a 2d       	mov	r20, r10
    a3a4:	5b 2d       	mov	r21, r11
    a3a6:	6c 2d       	mov	r22, r12
    a3a8:	7d 2d       	mov	r23, r13
    a3aa:	8e 2d       	mov	r24, r14
    a3ac:	9f 2d       	mov	r25, r15
    a3ae:	a9 ac       	ldd	r10, Y+57	; 0x39
    a3b0:	ba ac       	ldd	r11, Y+58	; 0x3a
    a3b2:	cb ac       	ldd	r12, Y+59	; 0x3b
    a3b4:	dc ac       	ldd	r13, Y+60	; 0x3c
    a3b6:	ed ac       	ldd	r14, Y+61	; 0x3d
    a3b8:	fe ac       	ldd	r15, Y+62	; 0x3e
    a3ba:	0f ad       	ldd	r16, Y+63	; 0x3f
    a3bc:	21 96       	adiw	r28, 0x01	; 1
    a3be:	1f ad       	ldd	r17, Y+63	; 0x3f
    a3c0:	21 97       	sbiw	r28, 0x01	; 1
    a3c2:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <__adddi3>
    a3c6:	22 2e       	mov	r2, r18
    a3c8:	33 2e       	mov	r3, r19
    a3ca:	44 2e       	mov	r4, r20
    a3cc:	55 2e       	mov	r5, r21
    a3ce:	66 2e       	mov	r6, r22
    a3d0:	77 2e       	mov	r7, r23
    a3d2:	88 2e       	mov	r8, r24
    a3d4:	99 2e       	mov	r9, r25
    a3d6:	0f 2e       	mov	r0, r31
    a3d8:	f6 e0       	ldi	r31, 0x06	; 6
    a3da:	af 2e       	mov	r10, r31
    a3dc:	f0 2d       	mov	r31, r0
    a3de:	b1 2c       	mov	r11, r1
    a3e0:	c1 2c       	mov	r12, r1
    a3e2:	d1 2c       	mov	r13, r1
    a3e4:	e1 2c       	mov	r14, r1
    a3e6:	f1 2c       	mov	r15, r1
    a3e8:	00 e0       	ldi	r16, 0x00	; 0
    a3ea:	10 e0       	ldi	r17, 0x00	; 0
    a3ec:	22 2d       	mov	r18, r2
    a3ee:	33 2d       	mov	r19, r3
    a3f0:	44 2d       	mov	r20, r4
    a3f2:	55 2d       	mov	r21, r5
    a3f4:	66 2d       	mov	r22, r6
    a3f6:	77 2d       	mov	r23, r7
    a3f8:	88 2d       	mov	r24, r8
    a3fa:	99 2d       	mov	r25, r9
    a3fc:	8d d7       	rcall	.+3866   	; 0xb318 <__udivdi3>
    a3fe:	22 2e       	mov	r2, r18
    a400:	33 2e       	mov	r3, r19
    a402:	44 2e       	mov	r4, r20
    a404:	55 2e       	mov	r5, r21
    a406:	66 2e       	mov	r6, r22
    a408:	77 2e       	mov	r7, r23
    a40a:	88 2e       	mov	r8, r24
    a40c:	99 2e       	mov	r9, r25
    a40e:	a2 2c       	mov	r10, r2
    a410:	b3 2c       	mov	r11, r3
    a412:	c4 2c       	mov	r12, r4
    a414:	d5 2c       	mov	r13, r5
    a416:	e6 2c       	mov	r14, r6
    a418:	f7 2c       	mov	r15, r7
    a41a:	08 2d       	mov	r16, r8
    a41c:	19 2d       	mov	r17, r9
    a41e:	2a 2d       	mov	r18, r10
    a420:	3b 2d       	mov	r19, r11
    a422:	4c 2d       	mov	r20, r12
    a424:	5d 2d       	mov	r21, r13
    a426:	6e 2d       	mov	r22, r14
    a428:	7f 2d       	mov	r23, r15
    a42a:	80 2f       	mov	r24, r16
    a42c:	91 2f       	mov	r25, r17
    a42e:	29 51       	subi	r18, 0x19	; 25
    a430:	3c 4f       	sbci	r19, 0xFC	; 252
    a432:	4f 4f       	sbci	r20, 0xFF	; 255
    a434:	5f 4f       	sbci	r21, 0xFF	; 255
    a436:	6f 4f       	sbci	r22, 0xFF	; 255
    a438:	7f 4f       	sbci	r23, 0xFF	; 255
    a43a:	8f 4f       	sbci	r24, 0xFF	; 255
    a43c:	9f 4f       	sbci	r25, 0xFF	; 255
    a43e:	a2 2e       	mov	r10, r18
    a440:	b3 2e       	mov	r11, r19
    a442:	c4 2e       	mov	r12, r20
    a444:	d5 2e       	mov	r13, r21
    a446:	e6 2e       	mov	r14, r22
    a448:	f7 2e       	mov	r15, r23
    a44a:	08 2f       	mov	r16, r24
    a44c:	19 2f       	mov	r17, r25
    a44e:	2a 2d       	mov	r18, r10
    a450:	3b 2d       	mov	r19, r11
    a452:	4c 2d       	mov	r20, r12
    a454:	5d 2d       	mov	r21, r13
    a456:	6e 2d       	mov	r22, r14
    a458:	7f 2d       	mov	r23, r15
    a45a:	80 2f       	mov	r24, r16
    a45c:	91 2f       	mov	r25, r17
    a45e:	95 d1       	rcall	.+810    	; 0xa78a <__floatundisf>
    a460:	dc 01       	movw	r26, r24
    a462:	cb 01       	movw	r24, r22
    a464:	20 e0       	ldi	r18, 0x00	; 0
    a466:	30 e0       	ldi	r19, 0x00	; 0
    a468:	4a e7       	ldi	r20, 0x7A	; 122
    a46a:	54 e4       	ldi	r21, 0x44	; 68
    a46c:	bc 01       	movw	r22, r24
    a46e:	cd 01       	movw	r24, r26
    a470:	7c d0       	rcall	.+248    	; 0xa56a <__divsf3>
    a472:	dc 01       	movw	r26, r24
    a474:	cb 01       	movw	r24, r22
    a476:	bc 01       	movw	r22, r24
    a478:	cd 01       	movw	r24, r26
    a47a:	e4 d0       	rcall	.+456    	; 0xa644 <__fixunssfdi>
    a47c:	a2 2e       	mov	r10, r18
    a47e:	b3 2e       	mov	r11, r19
    a480:	c4 2e       	mov	r12, r20
    a482:	d5 2e       	mov	r13, r21
    a484:	e6 2e       	mov	r14, r22
    a486:	f7 2e       	mov	r15, r23
    a488:	08 2f       	mov	r16, r24
    a48a:	19 2f       	mov	r17, r25
    a48c:	d6 01       	movw	r26, r12
    a48e:	c5 01       	movw	r24, r10
    a490:	bc 01       	movw	r22, r24
    a492:	cd 01       	movw	r24, r26
    a494:	0b da       	rcall	.-3050   	; 0x98ac <__portable_avr_delay_cycles>
    a496:	be cd       	rjmp	.-1156   	; 0xa014 <main+0x280>

0000a498 <__subsf3>:
	}
    a498:	50 58       	subi	r21, 0x80	; 128

0000a49a <__addsf3>:
    a49a:	bb 27       	eor	r27, r27
    a49c:	aa 27       	eor	r26, r26
    a49e:	0e d0       	rcall	.+28     	; 0xa4bc <__addsf3x>
    a4a0:	fd c1       	rjmp	.+1018   	; 0xa89c <__fp_round>
    a4a2:	ee d1       	rcall	.+988    	; 0xa880 <__fp_pscA>
    a4a4:	30 f0       	brcs	.+12     	; 0xa4b2 <__addsf3+0x18>
    a4a6:	f3 d1       	rcall	.+998    	; 0xa88e <__fp_pscB>
    a4a8:	20 f0       	brcs	.+8      	; 0xa4b2 <__addsf3+0x18>
    a4aa:	31 f4       	brne	.+12     	; 0xa4b8 <__addsf3+0x1e>
    a4ac:	9f 3f       	cpi	r25, 0xFF	; 255
    a4ae:	11 f4       	brne	.+4      	; 0xa4b4 <__addsf3+0x1a>
    a4b0:	1e f4       	brtc	.+6      	; 0xa4b8 <__addsf3+0x1e>
    a4b2:	d3 c1       	rjmp	.+934    	; 0xa85a <__fp_nan>
    a4b4:	0e f4       	brtc	.+2      	; 0xa4b8 <__addsf3+0x1e>
    a4b6:	e0 95       	com	r30
    a4b8:	e7 fb       	bst	r30, 7
    a4ba:	c9 c1       	rjmp	.+914    	; 0xa84e <__fp_inf>

0000a4bc <__addsf3x>:
    a4bc:	e9 2f       	mov	r30, r25
    a4be:	ff d1       	rcall	.+1022   	; 0xa8be <__fp_split3>
    a4c0:	80 f3       	brcs	.-32     	; 0xa4a2 <__addsf3+0x8>
    a4c2:	ba 17       	cp	r27, r26
    a4c4:	62 07       	cpc	r22, r18
    a4c6:	73 07       	cpc	r23, r19
    a4c8:	84 07       	cpc	r24, r20
    a4ca:	95 07       	cpc	r25, r21
    a4cc:	18 f0       	brcs	.+6      	; 0xa4d4 <__addsf3x+0x18>
    a4ce:	71 f4       	brne	.+28     	; 0xa4ec <__addsf3x+0x30>
    a4d0:	9e f5       	brtc	.+102    	; 0xa538 <__addsf3x+0x7c>
    a4d2:	17 c2       	rjmp	.+1070   	; 0xa902 <__fp_zero>
    a4d4:	0e f4       	brtc	.+2      	; 0xa4d8 <__addsf3x+0x1c>
    a4d6:	e0 95       	com	r30
    a4d8:	0b 2e       	mov	r0, r27
    a4da:	ba 2f       	mov	r27, r26
    a4dc:	a0 2d       	mov	r26, r0
    a4de:	0b 01       	movw	r0, r22
    a4e0:	b9 01       	movw	r22, r18
    a4e2:	90 01       	movw	r18, r0
    a4e4:	0c 01       	movw	r0, r24
    a4e6:	ca 01       	movw	r24, r20
    a4e8:	a0 01       	movw	r20, r0
    a4ea:	11 24       	eor	r1, r1
    a4ec:	ff 27       	eor	r31, r31
    a4ee:	59 1b       	sub	r21, r25
    a4f0:	99 f0       	breq	.+38     	; 0xa518 <__addsf3x+0x5c>
    a4f2:	59 3f       	cpi	r21, 0xF9	; 249
    a4f4:	50 f4       	brcc	.+20     	; 0xa50a <__addsf3x+0x4e>
    a4f6:	50 3e       	cpi	r21, 0xE0	; 224
    a4f8:	68 f1       	brcs	.+90     	; 0xa554 <__addsf3x+0x98>
    a4fa:	1a 16       	cp	r1, r26
    a4fc:	f0 40       	sbci	r31, 0x00	; 0
    a4fe:	a2 2f       	mov	r26, r18
    a500:	23 2f       	mov	r18, r19
    a502:	34 2f       	mov	r19, r20
    a504:	44 27       	eor	r20, r20
    a506:	58 5f       	subi	r21, 0xF8	; 248
    a508:	f3 cf       	rjmp	.-26     	; 0xa4f0 <__addsf3x+0x34>
    a50a:	46 95       	lsr	r20
    a50c:	37 95       	ror	r19
    a50e:	27 95       	ror	r18
    a510:	a7 95       	ror	r26
    a512:	f0 40       	sbci	r31, 0x00	; 0
    a514:	53 95       	inc	r21
    a516:	c9 f7       	brne	.-14     	; 0xa50a <__addsf3x+0x4e>
    a518:	7e f4       	brtc	.+30     	; 0xa538 <__addsf3x+0x7c>
    a51a:	1f 16       	cp	r1, r31
    a51c:	ba 0b       	sbc	r27, r26
    a51e:	62 0b       	sbc	r22, r18
    a520:	73 0b       	sbc	r23, r19
    a522:	84 0b       	sbc	r24, r20
    a524:	ba f0       	brmi	.+46     	; 0xa554 <__addsf3x+0x98>
    a526:	91 50       	subi	r25, 0x01	; 1
    a528:	a1 f0       	breq	.+40     	; 0xa552 <__addsf3x+0x96>
    a52a:	ff 0f       	add	r31, r31
    a52c:	bb 1f       	adc	r27, r27
    a52e:	66 1f       	adc	r22, r22
    a530:	77 1f       	adc	r23, r23
    a532:	88 1f       	adc	r24, r24
    a534:	c2 f7       	brpl	.-16     	; 0xa526 <__addsf3x+0x6a>
    a536:	0e c0       	rjmp	.+28     	; 0xa554 <__addsf3x+0x98>
    a538:	ba 0f       	add	r27, r26
    a53a:	62 1f       	adc	r22, r18
    a53c:	73 1f       	adc	r23, r19
    a53e:	84 1f       	adc	r24, r20
    a540:	48 f4       	brcc	.+18     	; 0xa554 <__addsf3x+0x98>
    a542:	87 95       	ror	r24
    a544:	77 95       	ror	r23
    a546:	67 95       	ror	r22
    a548:	b7 95       	ror	r27
    a54a:	f7 95       	ror	r31
    a54c:	9e 3f       	cpi	r25, 0xFE	; 254
    a54e:	08 f0       	brcs	.+2      	; 0xa552 <__addsf3x+0x96>
    a550:	b3 cf       	rjmp	.-154    	; 0xa4b8 <__addsf3+0x1e>
    a552:	93 95       	inc	r25
    a554:	88 0f       	add	r24, r24
    a556:	08 f0       	brcs	.+2      	; 0xa55a <__addsf3x+0x9e>
    a558:	99 27       	eor	r25, r25
    a55a:	ee 0f       	add	r30, r30
    a55c:	97 95       	ror	r25
    a55e:	87 95       	ror	r24
    a560:	08 95       	ret

0000a562 <__cmpsf2>:
    a562:	51 d1       	rcall	.+674    	; 0xa806 <__fp_cmp>
    a564:	08 f4       	brcc	.+2      	; 0xa568 <__cmpsf2+0x6>
    a566:	81 e0       	ldi	r24, 0x01	; 1
    a568:	08 95       	ret

0000a56a <__divsf3>:
    a56a:	0c d0       	rcall	.+24     	; 0xa584 <__divsf3x>
    a56c:	97 c1       	rjmp	.+814    	; 0xa89c <__fp_round>
    a56e:	8f d1       	rcall	.+798    	; 0xa88e <__fp_pscB>
    a570:	40 f0       	brcs	.+16     	; 0xa582 <__divsf3+0x18>
    a572:	86 d1       	rcall	.+780    	; 0xa880 <__fp_pscA>
    a574:	30 f0       	brcs	.+12     	; 0xa582 <__divsf3+0x18>
    a576:	21 f4       	brne	.+8      	; 0xa580 <__divsf3+0x16>
    a578:	5f 3f       	cpi	r21, 0xFF	; 255
    a57a:	19 f0       	breq	.+6      	; 0xa582 <__divsf3+0x18>
    a57c:	68 c1       	rjmp	.+720    	; 0xa84e <__fp_inf>
    a57e:	51 11       	cpse	r21, r1
    a580:	c1 c1       	rjmp	.+898    	; 0xa904 <__fp_szero>
    a582:	6b c1       	rjmp	.+726    	; 0xa85a <__fp_nan>

0000a584 <__divsf3x>:
    a584:	9c d1       	rcall	.+824    	; 0xa8be <__fp_split3>
    a586:	98 f3       	brcs	.-26     	; 0xa56e <__divsf3+0x4>

0000a588 <__divsf3_pse>:
    a588:	99 23       	and	r25, r25
    a58a:	c9 f3       	breq	.-14     	; 0xa57e <__divsf3+0x14>
    a58c:	55 23       	and	r21, r21
    a58e:	b1 f3       	breq	.-20     	; 0xa57c <__divsf3+0x12>
    a590:	95 1b       	sub	r25, r21
    a592:	55 0b       	sbc	r21, r21
    a594:	bb 27       	eor	r27, r27
    a596:	aa 27       	eor	r26, r26
    a598:	62 17       	cp	r22, r18
    a59a:	73 07       	cpc	r23, r19
    a59c:	84 07       	cpc	r24, r20
    a59e:	38 f0       	brcs	.+14     	; 0xa5ae <__divsf3_pse+0x26>
    a5a0:	9f 5f       	subi	r25, 0xFF	; 255
    a5a2:	5f 4f       	sbci	r21, 0xFF	; 255
    a5a4:	22 0f       	add	r18, r18
    a5a6:	33 1f       	adc	r19, r19
    a5a8:	44 1f       	adc	r20, r20
    a5aa:	aa 1f       	adc	r26, r26
    a5ac:	a9 f3       	breq	.-22     	; 0xa598 <__divsf3_pse+0x10>
    a5ae:	33 d0       	rcall	.+102    	; 0xa616 <__divsf3_pse+0x8e>
    a5b0:	0e 2e       	mov	r0, r30
    a5b2:	3a f0       	brmi	.+14     	; 0xa5c2 <__divsf3_pse+0x3a>
    a5b4:	e0 e8       	ldi	r30, 0x80	; 128
    a5b6:	30 d0       	rcall	.+96     	; 0xa618 <__divsf3_pse+0x90>
    a5b8:	91 50       	subi	r25, 0x01	; 1
    a5ba:	50 40       	sbci	r21, 0x00	; 0
    a5bc:	e6 95       	lsr	r30
    a5be:	00 1c       	adc	r0, r0
    a5c0:	ca f7       	brpl	.-14     	; 0xa5b4 <__divsf3_pse+0x2c>
    a5c2:	29 d0       	rcall	.+82     	; 0xa616 <__divsf3_pse+0x8e>
    a5c4:	fe 2f       	mov	r31, r30
    a5c6:	27 d0       	rcall	.+78     	; 0xa616 <__divsf3_pse+0x8e>
    a5c8:	66 0f       	add	r22, r22
    a5ca:	77 1f       	adc	r23, r23
    a5cc:	88 1f       	adc	r24, r24
    a5ce:	bb 1f       	adc	r27, r27
    a5d0:	26 17       	cp	r18, r22
    a5d2:	37 07       	cpc	r19, r23
    a5d4:	48 07       	cpc	r20, r24
    a5d6:	ab 07       	cpc	r26, r27
    a5d8:	b0 e8       	ldi	r27, 0x80	; 128
    a5da:	09 f0       	breq	.+2      	; 0xa5de <__divsf3_pse+0x56>
    a5dc:	bb 0b       	sbc	r27, r27
    a5de:	80 2d       	mov	r24, r0
    a5e0:	bf 01       	movw	r22, r30
    a5e2:	ff 27       	eor	r31, r31
    a5e4:	93 58       	subi	r25, 0x83	; 131
    a5e6:	5f 4f       	sbci	r21, 0xFF	; 255
    a5e8:	2a f0       	brmi	.+10     	; 0xa5f4 <__divsf3_pse+0x6c>
    a5ea:	9e 3f       	cpi	r25, 0xFE	; 254
    a5ec:	51 05       	cpc	r21, r1
    a5ee:	68 f0       	brcs	.+26     	; 0xa60a <__divsf3_pse+0x82>
    a5f0:	2e c1       	rjmp	.+604    	; 0xa84e <__fp_inf>
    a5f2:	88 c1       	rjmp	.+784    	; 0xa904 <__fp_szero>
    a5f4:	5f 3f       	cpi	r21, 0xFF	; 255
    a5f6:	ec f3       	brlt	.-6      	; 0xa5f2 <__divsf3_pse+0x6a>
    a5f8:	98 3e       	cpi	r25, 0xE8	; 232
    a5fa:	dc f3       	brlt	.-10     	; 0xa5f2 <__divsf3_pse+0x6a>
    a5fc:	86 95       	lsr	r24
    a5fe:	77 95       	ror	r23
    a600:	67 95       	ror	r22
    a602:	b7 95       	ror	r27
    a604:	f7 95       	ror	r31
    a606:	9f 5f       	subi	r25, 0xFF	; 255
    a608:	c9 f7       	brne	.-14     	; 0xa5fc <__divsf3_pse+0x74>
    a60a:	88 0f       	add	r24, r24
    a60c:	91 1d       	adc	r25, r1
    a60e:	96 95       	lsr	r25
    a610:	87 95       	ror	r24
    a612:	97 f9       	bld	r25, 7
    a614:	08 95       	ret
    a616:	e1 e0       	ldi	r30, 0x01	; 1
    a618:	66 0f       	add	r22, r22
    a61a:	77 1f       	adc	r23, r23
    a61c:	88 1f       	adc	r24, r24
    a61e:	bb 1f       	adc	r27, r27
    a620:	62 17       	cp	r22, r18
    a622:	73 07       	cpc	r23, r19
    a624:	84 07       	cpc	r24, r20
    a626:	ba 07       	cpc	r27, r26
    a628:	20 f0       	brcs	.+8      	; 0xa632 <__divsf3_pse+0xaa>
    a62a:	62 1b       	sub	r22, r18
    a62c:	73 0b       	sbc	r23, r19
    a62e:	84 0b       	sbc	r24, r20
    a630:	ba 0b       	sbc	r27, r26
    a632:	ee 1f       	adc	r30, r30
    a634:	88 f7       	brcc	.-30     	; 0xa618 <__divsf3_pse+0x90>
    a636:	e0 95       	com	r30
    a638:	08 95       	ret

0000a63a <__fixsfdi>:
    a63a:	be e3       	ldi	r27, 0x3E	; 62
    a63c:	04 d0       	rcall	.+8      	; 0xa646 <__fixunssfdi+0x2>
    a63e:	08 f4       	brcc	.+2      	; 0xa642 <__fixsfdi+0x8>
    a640:	90 e8       	ldi	r25, 0x80	; 128
    a642:	08 95       	ret

0000a644 <__fixunssfdi>:
    a644:	bf e3       	ldi	r27, 0x3F	; 63
    a646:	22 27       	eor	r18, r18
    a648:	33 27       	eor	r19, r19
    a64a:	a9 01       	movw	r20, r18
    a64c:	40 d1       	rcall	.+640    	; 0xa8ce <__fp_splitA>
    a64e:	58 f1       	brcs	.+86     	; 0xa6a6 <__fixunssfdi+0x62>
    a650:	9f 57       	subi	r25, 0x7F	; 127
    a652:	40 f1       	brcs	.+80     	; 0xa6a4 <__fixunssfdi+0x60>
    a654:	b9 17       	cp	r27, r25
    a656:	38 f1       	brcs	.+78     	; 0xa6a6 <__fixunssfdi+0x62>
    a658:	bf e3       	ldi	r27, 0x3F	; 63
    a65a:	b9 1b       	sub	r27, r25
    a65c:	99 27       	eor	r25, r25
    a65e:	b8 50       	subi	r27, 0x08	; 8
    a660:	3a f4       	brpl	.+14     	; 0xa670 <__fixunssfdi+0x2c>
    a662:	66 0f       	add	r22, r22
    a664:	77 1f       	adc	r23, r23
    a666:	88 1f       	adc	r24, r24
    a668:	99 1f       	adc	r25, r25
    a66a:	b3 95       	inc	r27
    a66c:	d2 f3       	brmi	.-12     	; 0xa662 <__fixunssfdi+0x1e>
    a66e:	16 c0       	rjmp	.+44     	; 0xa69c <__fixunssfdi+0x58>
    a670:	b8 50       	subi	r27, 0x08	; 8
    a672:	4a f0       	brmi	.+18     	; 0xa686 <__fixunssfdi+0x42>
    a674:	23 2f       	mov	r18, r19
    a676:	34 2f       	mov	r19, r20
    a678:	45 2f       	mov	r20, r21
    a67a:	56 2f       	mov	r21, r22
    a67c:	67 2f       	mov	r22, r23
    a67e:	78 2f       	mov	r23, r24
    a680:	88 27       	eor	r24, r24
    a682:	b8 50       	subi	r27, 0x08	; 8
    a684:	ba f7       	brpl	.-18     	; 0xa674 <__fixunssfdi+0x30>
    a686:	b8 5f       	subi	r27, 0xF8	; 248
    a688:	49 f0       	breq	.+18     	; 0xa69c <__fixunssfdi+0x58>
    a68a:	86 95       	lsr	r24
    a68c:	77 95       	ror	r23
    a68e:	67 95       	ror	r22
    a690:	57 95       	ror	r21
    a692:	47 95       	ror	r20
    a694:	37 95       	ror	r19
    a696:	27 95       	ror	r18
    a698:	ba 95       	dec	r27
    a69a:	b9 f7       	brne	.-18     	; 0xa68a <__fixunssfdi+0x46>
    a69c:	0e f4       	brtc	.+2      	; 0xa6a0 <__fixunssfdi+0x5c>
    a69e:	e0 d0       	rcall	.+448    	; 0xa860 <__fp_negdi>
    a6a0:	88 94       	clc
    a6a2:	08 95       	ret
    a6a4:	88 94       	clc
    a6a6:	60 e0       	ldi	r22, 0x00	; 0
    a6a8:	70 e0       	ldi	r23, 0x00	; 0
    a6aa:	cb 01       	movw	r24, r22
    a6ac:	08 95       	ret

0000a6ae <__fixsfsi>:
    a6ae:	04 d0       	rcall	.+8      	; 0xa6b8 <__fixunssfsi>
    a6b0:	68 94       	set
    a6b2:	b1 11       	cpse	r27, r1
    a6b4:	27 c1       	rjmp	.+590    	; 0xa904 <__fp_szero>
    a6b6:	08 95       	ret

0000a6b8 <__fixunssfsi>:
    a6b8:	0a d1       	rcall	.+532    	; 0xa8ce <__fp_splitA>
    a6ba:	88 f0       	brcs	.+34     	; 0xa6de <__fixunssfsi+0x26>
    a6bc:	9f 57       	subi	r25, 0x7F	; 127
    a6be:	90 f0       	brcs	.+36     	; 0xa6e4 <__fixunssfsi+0x2c>
    a6c0:	b9 2f       	mov	r27, r25
    a6c2:	99 27       	eor	r25, r25
    a6c4:	b7 51       	subi	r27, 0x17	; 23
    a6c6:	a0 f0       	brcs	.+40     	; 0xa6f0 <__fixunssfsi+0x38>
    a6c8:	d1 f0       	breq	.+52     	; 0xa6fe <__fixunssfsi+0x46>
    a6ca:	66 0f       	add	r22, r22
    a6cc:	77 1f       	adc	r23, r23
    a6ce:	88 1f       	adc	r24, r24
    a6d0:	99 1f       	adc	r25, r25
    a6d2:	1a f0       	brmi	.+6      	; 0xa6da <__fixunssfsi+0x22>
    a6d4:	ba 95       	dec	r27
    a6d6:	c9 f7       	brne	.-14     	; 0xa6ca <__fixunssfsi+0x12>
    a6d8:	12 c0       	rjmp	.+36     	; 0xa6fe <__fixunssfsi+0x46>
    a6da:	b1 30       	cpi	r27, 0x01	; 1
    a6dc:	81 f0       	breq	.+32     	; 0xa6fe <__fixunssfsi+0x46>
    a6de:	11 d1       	rcall	.+546    	; 0xa902 <__fp_zero>
    a6e0:	b1 e0       	ldi	r27, 0x01	; 1
    a6e2:	08 95       	ret
    a6e4:	0e c1       	rjmp	.+540    	; 0xa902 <__fp_zero>
    a6e6:	67 2f       	mov	r22, r23
    a6e8:	78 2f       	mov	r23, r24
    a6ea:	88 27       	eor	r24, r24
    a6ec:	b8 5f       	subi	r27, 0xF8	; 248
    a6ee:	39 f0       	breq	.+14     	; 0xa6fe <__fixunssfsi+0x46>
    a6f0:	b9 3f       	cpi	r27, 0xF9	; 249
    a6f2:	cc f3       	brlt	.-14     	; 0xa6e6 <__fixunssfsi+0x2e>
    a6f4:	86 95       	lsr	r24
    a6f6:	77 95       	ror	r23
    a6f8:	67 95       	ror	r22
    a6fa:	b3 95       	inc	r27
    a6fc:	d9 f7       	brne	.-10     	; 0xa6f4 <__fixunssfsi+0x3c>
    a6fe:	3e f4       	brtc	.+14     	; 0xa70e <__fixunssfsi+0x56>
    a700:	90 95       	com	r25
    a702:	80 95       	com	r24
    a704:	70 95       	com	r23
    a706:	61 95       	neg	r22
    a708:	7f 4f       	sbci	r23, 0xFF	; 255
    a70a:	8f 4f       	sbci	r24, 0xFF	; 255
    a70c:	9f 4f       	sbci	r25, 0xFF	; 255
    a70e:	08 95       	ret

0000a710 <__floatunsisf>:
    a710:	e8 94       	clt
    a712:	09 c0       	rjmp	.+18     	; 0xa726 <__floatsisf+0x12>

0000a714 <__floatsisf>:
    a714:	97 fb       	bst	r25, 7
    a716:	3e f4       	brtc	.+14     	; 0xa726 <__floatsisf+0x12>
    a718:	90 95       	com	r25
    a71a:	80 95       	com	r24
    a71c:	70 95       	com	r23
    a71e:	61 95       	neg	r22
    a720:	7f 4f       	sbci	r23, 0xFF	; 255
    a722:	8f 4f       	sbci	r24, 0xFF	; 255
    a724:	9f 4f       	sbci	r25, 0xFF	; 255
    a726:	99 23       	and	r25, r25
    a728:	a9 f0       	breq	.+42     	; 0xa754 <__floatsisf+0x40>
    a72a:	f9 2f       	mov	r31, r25
    a72c:	96 e9       	ldi	r25, 0x96	; 150
    a72e:	bb 27       	eor	r27, r27
    a730:	93 95       	inc	r25
    a732:	f6 95       	lsr	r31
    a734:	87 95       	ror	r24
    a736:	77 95       	ror	r23
    a738:	67 95       	ror	r22
    a73a:	b7 95       	ror	r27
    a73c:	f1 11       	cpse	r31, r1
    a73e:	f8 cf       	rjmp	.-16     	; 0xa730 <__floatsisf+0x1c>
    a740:	fa f4       	brpl	.+62     	; 0xa780 <__floatsisf+0x6c>
    a742:	bb 0f       	add	r27, r27
    a744:	11 f4       	brne	.+4      	; 0xa74a <__floatsisf+0x36>
    a746:	60 ff       	sbrs	r22, 0
    a748:	1b c0       	rjmp	.+54     	; 0xa780 <__floatsisf+0x6c>
    a74a:	6f 5f       	subi	r22, 0xFF	; 255
    a74c:	7f 4f       	sbci	r23, 0xFF	; 255
    a74e:	8f 4f       	sbci	r24, 0xFF	; 255
    a750:	9f 4f       	sbci	r25, 0xFF	; 255
    a752:	16 c0       	rjmp	.+44     	; 0xa780 <__floatsisf+0x6c>
    a754:	88 23       	and	r24, r24
    a756:	11 f0       	breq	.+4      	; 0xa75c <__floatsisf+0x48>
    a758:	96 e9       	ldi	r25, 0x96	; 150
    a75a:	11 c0       	rjmp	.+34     	; 0xa77e <__floatsisf+0x6a>
    a75c:	77 23       	and	r23, r23
    a75e:	21 f0       	breq	.+8      	; 0xa768 <__floatsisf+0x54>
    a760:	9e e8       	ldi	r25, 0x8E	; 142
    a762:	87 2f       	mov	r24, r23
    a764:	76 2f       	mov	r23, r22
    a766:	05 c0       	rjmp	.+10     	; 0xa772 <__floatsisf+0x5e>
    a768:	66 23       	and	r22, r22
    a76a:	71 f0       	breq	.+28     	; 0xa788 <__floatsisf+0x74>
    a76c:	96 e8       	ldi	r25, 0x86	; 134
    a76e:	86 2f       	mov	r24, r22
    a770:	70 e0       	ldi	r23, 0x00	; 0
    a772:	60 e0       	ldi	r22, 0x00	; 0
    a774:	2a f0       	brmi	.+10     	; 0xa780 <__floatsisf+0x6c>
    a776:	9a 95       	dec	r25
    a778:	66 0f       	add	r22, r22
    a77a:	77 1f       	adc	r23, r23
    a77c:	88 1f       	adc	r24, r24
    a77e:	da f7       	brpl	.-10     	; 0xa776 <__floatsisf+0x62>
    a780:	88 0f       	add	r24, r24
    a782:	96 95       	lsr	r25
    a784:	87 95       	ror	r24
    a786:	97 f9       	bld	r25, 7
    a788:	08 95       	ret

0000a78a <__floatundisf>:
    a78a:	e8 94       	clt

0000a78c <__fp_di2sf>:
    a78c:	f9 2f       	mov	r31, r25
    a78e:	96 eb       	ldi	r25, 0xB6	; 182
    a790:	ff 23       	and	r31, r31
    a792:	81 f0       	breq	.+32     	; 0xa7b4 <__fp_di2sf+0x28>
    a794:	12 16       	cp	r1, r18
    a796:	13 06       	cpc	r1, r19
    a798:	14 06       	cpc	r1, r20
    a79a:	44 0b       	sbc	r20, r20
    a79c:	93 95       	inc	r25
    a79e:	f6 95       	lsr	r31
    a7a0:	87 95       	ror	r24
    a7a2:	77 95       	ror	r23
    a7a4:	67 95       	ror	r22
    a7a6:	57 95       	ror	r21
    a7a8:	40 40       	sbci	r20, 0x00	; 0
    a7aa:	ff 23       	and	r31, r31
    a7ac:	b9 f7       	brne	.-18     	; 0xa79c <__fp_di2sf+0x10>
    a7ae:	1b c0       	rjmp	.+54     	; 0xa7e6 <__fp_di2sf+0x5a>
    a7b0:	99 27       	eor	r25, r25
    a7b2:	08 95       	ret
    a7b4:	88 23       	and	r24, r24
    a7b6:	51 f4       	brne	.+20     	; 0xa7cc <__fp_di2sf+0x40>
    a7b8:	98 50       	subi	r25, 0x08	; 8
    a7ba:	d2 f7       	brpl	.-12     	; 0xa7b0 <__fp_di2sf+0x24>
    a7bc:	87 2b       	or	r24, r23
    a7be:	76 2f       	mov	r23, r22
    a7c0:	65 2f       	mov	r22, r21
    a7c2:	54 2f       	mov	r21, r20
    a7c4:	43 2f       	mov	r20, r19
    a7c6:	32 2f       	mov	r19, r18
    a7c8:	20 e0       	ldi	r18, 0x00	; 0
    a7ca:	b1 f3       	breq	.-20     	; 0xa7b8 <__fp_di2sf+0x2c>
    a7cc:	12 16       	cp	r1, r18
    a7ce:	13 06       	cpc	r1, r19
    a7d0:	14 06       	cpc	r1, r20
    a7d2:	44 0b       	sbc	r20, r20
    a7d4:	88 23       	and	r24, r24
    a7d6:	3a f0       	brmi	.+14     	; 0xa7e6 <__fp_di2sf+0x5a>
    a7d8:	9a 95       	dec	r25
    a7da:	44 0f       	add	r20, r20
    a7dc:	55 1f       	adc	r21, r21
    a7de:	66 1f       	adc	r22, r22
    a7e0:	77 1f       	adc	r23, r23
    a7e2:	88 1f       	adc	r24, r24
    a7e4:	ca f7       	brpl	.-14     	; 0xa7d8 <__fp_di2sf+0x4c>
    a7e6:	55 23       	and	r21, r21
    a7e8:	4a f4       	brpl	.+18     	; 0xa7fc <__fp_di2sf+0x70>
    a7ea:	44 0f       	add	r20, r20
    a7ec:	55 1f       	adc	r21, r21
    a7ee:	11 f4       	brne	.+4      	; 0xa7f4 <__fp_di2sf+0x68>
    a7f0:	60 ff       	sbrs	r22, 0
    a7f2:	04 c0       	rjmp	.+8      	; 0xa7fc <__fp_di2sf+0x70>
    a7f4:	6f 5f       	subi	r22, 0xFF	; 255
    a7f6:	7f 4f       	sbci	r23, 0xFF	; 255
    a7f8:	8f 4f       	sbci	r24, 0xFF	; 255
    a7fa:	9f 4f       	sbci	r25, 0xFF	; 255
    a7fc:	88 0f       	add	r24, r24
    a7fe:	96 95       	lsr	r25
    a800:	87 95       	ror	r24
    a802:	97 f9       	bld	r25, 7
    a804:	08 95       	ret

0000a806 <__fp_cmp>:
    a806:	99 0f       	add	r25, r25
    a808:	00 08       	sbc	r0, r0
    a80a:	55 0f       	add	r21, r21
    a80c:	aa 0b       	sbc	r26, r26
    a80e:	e0 e8       	ldi	r30, 0x80	; 128
    a810:	fe ef       	ldi	r31, 0xFE	; 254
    a812:	16 16       	cp	r1, r22
    a814:	17 06       	cpc	r1, r23
    a816:	e8 07       	cpc	r30, r24
    a818:	f9 07       	cpc	r31, r25
    a81a:	c0 f0       	brcs	.+48     	; 0xa84c <__fp_cmp+0x46>
    a81c:	12 16       	cp	r1, r18
    a81e:	13 06       	cpc	r1, r19
    a820:	e4 07       	cpc	r30, r20
    a822:	f5 07       	cpc	r31, r21
    a824:	98 f0       	brcs	.+38     	; 0xa84c <__fp_cmp+0x46>
    a826:	62 1b       	sub	r22, r18
    a828:	73 0b       	sbc	r23, r19
    a82a:	84 0b       	sbc	r24, r20
    a82c:	95 0b       	sbc	r25, r21
    a82e:	39 f4       	brne	.+14     	; 0xa83e <__fp_cmp+0x38>
    a830:	0a 26       	eor	r0, r26
    a832:	61 f0       	breq	.+24     	; 0xa84c <__fp_cmp+0x46>
    a834:	23 2b       	or	r18, r19
    a836:	24 2b       	or	r18, r20
    a838:	25 2b       	or	r18, r21
    a83a:	21 f4       	brne	.+8      	; 0xa844 <__fp_cmp+0x3e>
    a83c:	08 95       	ret
    a83e:	0a 26       	eor	r0, r26
    a840:	09 f4       	brne	.+2      	; 0xa844 <__fp_cmp+0x3e>
    a842:	a1 40       	sbci	r26, 0x01	; 1
    a844:	a6 95       	lsr	r26
    a846:	8f ef       	ldi	r24, 0xFF	; 255
    a848:	81 1d       	adc	r24, r1
    a84a:	81 1d       	adc	r24, r1
    a84c:	08 95       	ret

0000a84e <__fp_inf>:
    a84e:	97 f9       	bld	r25, 7
    a850:	9f 67       	ori	r25, 0x7F	; 127
    a852:	80 e8       	ldi	r24, 0x80	; 128
    a854:	70 e0       	ldi	r23, 0x00	; 0
    a856:	60 e0       	ldi	r22, 0x00	; 0
    a858:	08 95       	ret

0000a85a <__fp_nan>:
    a85a:	9f ef       	ldi	r25, 0xFF	; 255
    a85c:	80 ec       	ldi	r24, 0xC0	; 192
    a85e:	08 95       	ret

0000a860 <__fp_negdi>:
    a860:	90 95       	com	r25
    a862:	80 95       	com	r24
    a864:	70 95       	com	r23
    a866:	60 95       	com	r22
    a868:	50 95       	com	r21
    a86a:	40 95       	com	r20
    a86c:	30 95       	com	r19
    a86e:	21 95       	neg	r18
    a870:	3f 4f       	sbci	r19, 0xFF	; 255
    a872:	4f 4f       	sbci	r20, 0xFF	; 255
    a874:	5f 4f       	sbci	r21, 0xFF	; 255
    a876:	6f 4f       	sbci	r22, 0xFF	; 255
    a878:	7f 4f       	sbci	r23, 0xFF	; 255
    a87a:	8f 4f       	sbci	r24, 0xFF	; 255
    a87c:	9f 4f       	sbci	r25, 0xFF	; 255
    a87e:	08 95       	ret

0000a880 <__fp_pscA>:
    a880:	00 24       	eor	r0, r0
    a882:	0a 94       	dec	r0
    a884:	16 16       	cp	r1, r22
    a886:	17 06       	cpc	r1, r23
    a888:	18 06       	cpc	r1, r24
    a88a:	09 06       	cpc	r0, r25
    a88c:	08 95       	ret

0000a88e <__fp_pscB>:
    a88e:	00 24       	eor	r0, r0
    a890:	0a 94       	dec	r0
    a892:	12 16       	cp	r1, r18
    a894:	13 06       	cpc	r1, r19
    a896:	14 06       	cpc	r1, r20
    a898:	05 06       	cpc	r0, r21
    a89a:	08 95       	ret

0000a89c <__fp_round>:
    a89c:	09 2e       	mov	r0, r25
    a89e:	03 94       	inc	r0
    a8a0:	00 0c       	add	r0, r0
    a8a2:	11 f4       	brne	.+4      	; 0xa8a8 <__fp_round+0xc>
    a8a4:	88 23       	and	r24, r24
    a8a6:	52 f0       	brmi	.+20     	; 0xa8bc <__fp_round+0x20>
    a8a8:	bb 0f       	add	r27, r27
    a8aa:	40 f4       	brcc	.+16     	; 0xa8bc <__fp_round+0x20>
    a8ac:	bf 2b       	or	r27, r31
    a8ae:	11 f4       	brne	.+4      	; 0xa8b4 <__fp_round+0x18>
    a8b0:	60 ff       	sbrs	r22, 0
    a8b2:	04 c0       	rjmp	.+8      	; 0xa8bc <__fp_round+0x20>
    a8b4:	6f 5f       	subi	r22, 0xFF	; 255
    a8b6:	7f 4f       	sbci	r23, 0xFF	; 255
    a8b8:	8f 4f       	sbci	r24, 0xFF	; 255
    a8ba:	9f 4f       	sbci	r25, 0xFF	; 255
    a8bc:	08 95       	ret

0000a8be <__fp_split3>:
    a8be:	57 fd       	sbrc	r21, 7
    a8c0:	90 58       	subi	r25, 0x80	; 128
    a8c2:	44 0f       	add	r20, r20
    a8c4:	55 1f       	adc	r21, r21
    a8c6:	59 f0       	breq	.+22     	; 0xa8de <__fp_splitA+0x10>
    a8c8:	5f 3f       	cpi	r21, 0xFF	; 255
    a8ca:	71 f0       	breq	.+28     	; 0xa8e8 <__fp_splitA+0x1a>
    a8cc:	47 95       	ror	r20

0000a8ce <__fp_splitA>:
    a8ce:	88 0f       	add	r24, r24
    a8d0:	97 fb       	bst	r25, 7
    a8d2:	99 1f       	adc	r25, r25
    a8d4:	61 f0       	breq	.+24     	; 0xa8ee <__fp_splitA+0x20>
    a8d6:	9f 3f       	cpi	r25, 0xFF	; 255
    a8d8:	79 f0       	breq	.+30     	; 0xa8f8 <__fp_splitA+0x2a>
    a8da:	87 95       	ror	r24
    a8dc:	08 95       	ret
    a8de:	12 16       	cp	r1, r18
    a8e0:	13 06       	cpc	r1, r19
    a8e2:	14 06       	cpc	r1, r20
    a8e4:	55 1f       	adc	r21, r21
    a8e6:	f2 cf       	rjmp	.-28     	; 0xa8cc <__fp_split3+0xe>
    a8e8:	46 95       	lsr	r20
    a8ea:	f1 df       	rcall	.-30     	; 0xa8ce <__fp_splitA>
    a8ec:	08 c0       	rjmp	.+16     	; 0xa8fe <__fp_splitA+0x30>
    a8ee:	16 16       	cp	r1, r22
    a8f0:	17 06       	cpc	r1, r23
    a8f2:	18 06       	cpc	r1, r24
    a8f4:	99 1f       	adc	r25, r25
    a8f6:	f1 cf       	rjmp	.-30     	; 0xa8da <__fp_splitA+0xc>
    a8f8:	86 95       	lsr	r24
    a8fa:	71 05       	cpc	r23, r1
    a8fc:	61 05       	cpc	r22, r1
    a8fe:	08 94       	sec
    a900:	08 95       	ret

0000a902 <__fp_zero>:
    a902:	e8 94       	clt

0000a904 <__fp_szero>:
    a904:	bb 27       	eor	r27, r27
    a906:	66 27       	eor	r22, r22
    a908:	77 27       	eor	r23, r23
    a90a:	cb 01       	movw	r24, r22
    a90c:	97 f9       	bld	r25, 7
    a90e:	08 95       	ret

0000a910 <__gesf2>:
    a910:	7a df       	rcall	.-268    	; 0xa806 <__fp_cmp>
    a912:	08 f4       	brcc	.+2      	; 0xa916 <__gesf2+0x6>
    a914:	8f ef       	ldi	r24, 0xFF	; 255
    a916:	08 95       	ret
    a918:	0e f0       	brts	.+2      	; 0xa91c <__gesf2+0xc>
    a91a:	a6 c0       	rjmp	.+332    	; 0xaa68 <__fp_mpack>
    a91c:	9e cf       	rjmp	.-196    	; 0xa85a <__fp_nan>
    a91e:	68 94       	set
    a920:	96 cf       	rjmp	.-212    	; 0xa84e <__fp_inf>

0000a922 <log>:
    a922:	d5 df       	rcall	.-86     	; 0xa8ce <__fp_splitA>
    a924:	c8 f3       	brcs	.-14     	; 0xa918 <__gesf2+0x8>
    a926:	99 23       	and	r25, r25
    a928:	d1 f3       	breq	.-12     	; 0xa91e <__gesf2+0xe>
    a92a:	c6 f3       	brts	.-16     	; 0xa91c <__gesf2+0xc>
    a92c:	df 93       	push	r29
    a92e:	cf 93       	push	r28
    a930:	1f 93       	push	r17
    a932:	0f 93       	push	r16
    a934:	ff 92       	push	r15
    a936:	c9 2f       	mov	r28, r25
    a938:	dd 27       	eor	r29, r29
    a93a:	88 23       	and	r24, r24
    a93c:	2a f0       	brmi	.+10     	; 0xa948 <log+0x26>
    a93e:	21 97       	sbiw	r28, 0x01	; 1
    a940:	66 0f       	add	r22, r22
    a942:	77 1f       	adc	r23, r23
    a944:	88 1f       	adc	r24, r24
    a946:	da f7       	brpl	.-10     	; 0xa93e <log+0x1c>
    a948:	20 e0       	ldi	r18, 0x00	; 0
    a94a:	30 e0       	ldi	r19, 0x00	; 0
    a94c:	40 e8       	ldi	r20, 0x80	; 128
    a94e:	5f eb       	ldi	r21, 0xBF	; 191
    a950:	9f e3       	ldi	r25, 0x3F	; 63
    a952:	88 39       	cpi	r24, 0x98	; 152
    a954:	20 f0       	brcs	.+8      	; 0xa95e <log+0x3c>
    a956:	80 3e       	cpi	r24, 0xE0	; 224
    a958:	30 f0       	brcs	.+12     	; 0xa966 <log+0x44>
    a95a:	21 96       	adiw	r28, 0x01	; 1
    a95c:	8f 77       	andi	r24, 0x7F	; 127
    a95e:	9d dd       	rcall	.-1222   	; 0xa49a <__addsf3>
    a960:	ec ef       	ldi	r30, 0xFC	; 252
    a962:	f1 e0       	ldi	r31, 0x01	; 1
    a964:	03 c0       	rjmp	.+6      	; 0xa96c <log+0x4a>
    a966:	99 dd       	rcall	.-1230   	; 0xa49a <__addsf3>
    a968:	e9 e2       	ldi	r30, 0x29	; 41
    a96a:	f2 e0       	ldi	r31, 0x02	; 2
    a96c:	8b d0       	rcall	.+278    	; 0xaa84 <__fp_powser>
    a96e:	8b 01       	movw	r16, r22
    a970:	be 01       	movw	r22, r28
    a972:	ec 01       	movw	r28, r24
    a974:	fb 2e       	mov	r15, r27
    a976:	6f 57       	subi	r22, 0x7F	; 127
    a978:	71 09       	sbc	r23, r1
    a97a:	75 95       	asr	r23
    a97c:	77 1f       	adc	r23, r23
    a97e:	88 0b       	sbc	r24, r24
    a980:	99 0b       	sbc	r25, r25
    a982:	c8 de       	rcall	.-624    	; 0xa714 <__floatsisf>
    a984:	28 e1       	ldi	r18, 0x18	; 24
    a986:	32 e7       	ldi	r19, 0x72	; 114
    a988:	41 e3       	ldi	r20, 0x31	; 49
    a98a:	5f e3       	ldi	r21, 0x3F	; 63
    a98c:	16 d0       	rcall	.+44     	; 0xa9ba <__mulsf3x>
    a98e:	af 2d       	mov	r26, r15
    a990:	98 01       	movw	r18, r16
    a992:	ae 01       	movw	r20, r28
    a994:	ff 90       	pop	r15
    a996:	0f 91       	pop	r16
    a998:	1f 91       	pop	r17
    a99a:	cf 91       	pop	r28
    a99c:	df 91       	pop	r29
    a99e:	8e dd       	rcall	.-1252   	; 0xa4bc <__addsf3x>
    a9a0:	7d cf       	rjmp	.-262    	; 0xa89c <__fp_round>

0000a9a2 <__mulsf3>:
    a9a2:	0b d0       	rcall	.+22     	; 0xa9ba <__mulsf3x>
    a9a4:	7b cf       	rjmp	.-266    	; 0xa89c <__fp_round>
    a9a6:	6c df       	rcall	.-296    	; 0xa880 <__fp_pscA>
    a9a8:	28 f0       	brcs	.+10     	; 0xa9b4 <__mulsf3+0x12>
    a9aa:	71 df       	rcall	.-286    	; 0xa88e <__fp_pscB>
    a9ac:	18 f0       	brcs	.+6      	; 0xa9b4 <__mulsf3+0x12>
    a9ae:	95 23       	and	r25, r21
    a9b0:	09 f0       	breq	.+2      	; 0xa9b4 <__mulsf3+0x12>
    a9b2:	4d cf       	rjmp	.-358    	; 0xa84e <__fp_inf>
    a9b4:	52 cf       	rjmp	.-348    	; 0xa85a <__fp_nan>
    a9b6:	11 24       	eor	r1, r1
    a9b8:	a5 cf       	rjmp	.-182    	; 0xa904 <__fp_szero>

0000a9ba <__mulsf3x>:
    a9ba:	81 df       	rcall	.-254    	; 0xa8be <__fp_split3>
    a9bc:	a0 f3       	brcs	.-24     	; 0xa9a6 <__mulsf3+0x4>

0000a9be <__mulsf3_pse>:
    a9be:	95 9f       	mul	r25, r21
    a9c0:	d1 f3       	breq	.-12     	; 0xa9b6 <__mulsf3+0x14>
    a9c2:	95 0f       	add	r25, r21
    a9c4:	50 e0       	ldi	r21, 0x00	; 0
    a9c6:	55 1f       	adc	r21, r21
    a9c8:	62 9f       	mul	r22, r18
    a9ca:	f0 01       	movw	r30, r0
    a9cc:	72 9f       	mul	r23, r18
    a9ce:	bb 27       	eor	r27, r27
    a9d0:	f0 0d       	add	r31, r0
    a9d2:	b1 1d       	adc	r27, r1
    a9d4:	63 9f       	mul	r22, r19
    a9d6:	aa 27       	eor	r26, r26
    a9d8:	f0 0d       	add	r31, r0
    a9da:	b1 1d       	adc	r27, r1
    a9dc:	aa 1f       	adc	r26, r26
    a9de:	64 9f       	mul	r22, r20
    a9e0:	66 27       	eor	r22, r22
    a9e2:	b0 0d       	add	r27, r0
    a9e4:	a1 1d       	adc	r26, r1
    a9e6:	66 1f       	adc	r22, r22
    a9e8:	82 9f       	mul	r24, r18
    a9ea:	22 27       	eor	r18, r18
    a9ec:	b0 0d       	add	r27, r0
    a9ee:	a1 1d       	adc	r26, r1
    a9f0:	62 1f       	adc	r22, r18
    a9f2:	73 9f       	mul	r23, r19
    a9f4:	b0 0d       	add	r27, r0
    a9f6:	a1 1d       	adc	r26, r1
    a9f8:	62 1f       	adc	r22, r18
    a9fa:	83 9f       	mul	r24, r19
    a9fc:	a0 0d       	add	r26, r0
    a9fe:	61 1d       	adc	r22, r1
    aa00:	22 1f       	adc	r18, r18
    aa02:	74 9f       	mul	r23, r20
    aa04:	33 27       	eor	r19, r19
    aa06:	a0 0d       	add	r26, r0
    aa08:	61 1d       	adc	r22, r1
    aa0a:	23 1f       	adc	r18, r19
    aa0c:	84 9f       	mul	r24, r20
    aa0e:	60 0d       	add	r22, r0
    aa10:	21 1d       	adc	r18, r1
    aa12:	82 2f       	mov	r24, r18
    aa14:	76 2f       	mov	r23, r22
    aa16:	6a 2f       	mov	r22, r26
    aa18:	11 24       	eor	r1, r1
    aa1a:	9f 57       	subi	r25, 0x7F	; 127
    aa1c:	50 40       	sbci	r21, 0x00	; 0
    aa1e:	8a f0       	brmi	.+34     	; 0xaa42 <__mulsf3_pse+0x84>
    aa20:	e1 f0       	breq	.+56     	; 0xaa5a <__mulsf3_pse+0x9c>
    aa22:	88 23       	and	r24, r24
    aa24:	4a f0       	brmi	.+18     	; 0xaa38 <__mulsf3_pse+0x7a>
    aa26:	ee 0f       	add	r30, r30
    aa28:	ff 1f       	adc	r31, r31
    aa2a:	bb 1f       	adc	r27, r27
    aa2c:	66 1f       	adc	r22, r22
    aa2e:	77 1f       	adc	r23, r23
    aa30:	88 1f       	adc	r24, r24
    aa32:	91 50       	subi	r25, 0x01	; 1
    aa34:	50 40       	sbci	r21, 0x00	; 0
    aa36:	a9 f7       	brne	.-22     	; 0xaa22 <__mulsf3_pse+0x64>
    aa38:	9e 3f       	cpi	r25, 0xFE	; 254
    aa3a:	51 05       	cpc	r21, r1
    aa3c:	70 f0       	brcs	.+28     	; 0xaa5a <__mulsf3_pse+0x9c>
    aa3e:	07 cf       	rjmp	.-498    	; 0xa84e <__fp_inf>
    aa40:	61 cf       	rjmp	.-318    	; 0xa904 <__fp_szero>
    aa42:	5f 3f       	cpi	r21, 0xFF	; 255
    aa44:	ec f3       	brlt	.-6      	; 0xaa40 <__mulsf3_pse+0x82>
    aa46:	98 3e       	cpi	r25, 0xE8	; 232
    aa48:	dc f3       	brlt	.-10     	; 0xaa40 <__mulsf3_pse+0x82>
    aa4a:	86 95       	lsr	r24
    aa4c:	77 95       	ror	r23
    aa4e:	67 95       	ror	r22
    aa50:	b7 95       	ror	r27
    aa52:	f7 95       	ror	r31
    aa54:	e7 95       	ror	r30
    aa56:	9f 5f       	subi	r25, 0xFF	; 255
    aa58:	c1 f7       	brne	.-16     	; 0xaa4a <__mulsf3_pse+0x8c>
    aa5a:	fe 2b       	or	r31, r30
    aa5c:	88 0f       	add	r24, r24
    aa5e:	91 1d       	adc	r25, r1
    aa60:	96 95       	lsr	r25
    aa62:	87 95       	ror	r24
    aa64:	97 f9       	bld	r25, 7
    aa66:	08 95       	ret

0000aa68 <__fp_mpack>:
    aa68:	9f 3f       	cpi	r25, 0xFF	; 255
    aa6a:	31 f0       	breq	.+12     	; 0xaa78 <__fp_mpack_finite+0xc>

0000aa6c <__fp_mpack_finite>:
    aa6c:	91 50       	subi	r25, 0x01	; 1
    aa6e:	20 f4       	brcc	.+8      	; 0xaa78 <__fp_mpack_finite+0xc>
    aa70:	87 95       	ror	r24
    aa72:	77 95       	ror	r23
    aa74:	67 95       	ror	r22
    aa76:	b7 95       	ror	r27
    aa78:	88 0f       	add	r24, r24
    aa7a:	91 1d       	adc	r25, r1
    aa7c:	96 95       	lsr	r25
    aa7e:	87 95       	ror	r24
    aa80:	97 f9       	bld	r25, 7
    aa82:	08 95       	ret

0000aa84 <__fp_powser>:
    aa84:	df 93       	push	r29
    aa86:	cf 93       	push	r28
    aa88:	1f 93       	push	r17
    aa8a:	0f 93       	push	r16
    aa8c:	ff 92       	push	r15
    aa8e:	ef 92       	push	r14
    aa90:	df 92       	push	r13
    aa92:	7b 01       	movw	r14, r22
    aa94:	8c 01       	movw	r16, r24
    aa96:	68 94       	set
    aa98:	05 c0       	rjmp	.+10     	; 0xaaa4 <__fp_powser+0x20>
    aa9a:	da 2e       	mov	r13, r26
    aa9c:	ef 01       	movw	r28, r30
    aa9e:	8d df       	rcall	.-230    	; 0xa9ba <__mulsf3x>
    aaa0:	fe 01       	movw	r30, r28
    aaa2:	e8 94       	clt
    aaa4:	a5 91       	lpm	r26, Z+
    aaa6:	25 91       	lpm	r18, Z+
    aaa8:	35 91       	lpm	r19, Z+
    aaaa:	45 91       	lpm	r20, Z+
    aaac:	55 91       	lpm	r21, Z+
    aaae:	ae f3       	brts	.-22     	; 0xaa9a <__fp_powser+0x16>
    aab0:	ef 01       	movw	r28, r30
    aab2:	04 dd       	rcall	.-1528   	; 0xa4bc <__addsf3x>
    aab4:	fe 01       	movw	r30, r28
    aab6:	97 01       	movw	r18, r14
    aab8:	a8 01       	movw	r20, r16
    aaba:	da 94       	dec	r13
    aabc:	79 f7       	brne	.-34     	; 0xaa9c <__fp_powser+0x18>
    aabe:	df 90       	pop	r13
    aac0:	ef 90       	pop	r14
    aac2:	ff 90       	pop	r15
    aac4:	0f 91       	pop	r16
    aac6:	1f 91       	pop	r17
    aac8:	cf 91       	pop	r28
    aaca:	df 91       	pop	r29
    aacc:	08 95       	ret

0000aace <vfprintf>:
    aace:	2f 92       	push	r2
    aad0:	3f 92       	push	r3
    aad2:	4f 92       	push	r4
    aad4:	5f 92       	push	r5
    aad6:	6f 92       	push	r6
    aad8:	7f 92       	push	r7
    aada:	8f 92       	push	r8
    aadc:	9f 92       	push	r9
    aade:	af 92       	push	r10
    aae0:	bf 92       	push	r11
    aae2:	cf 92       	push	r12
    aae4:	df 92       	push	r13
    aae6:	ef 92       	push	r14
    aae8:	ff 92       	push	r15
    aaea:	0f 93       	push	r16
    aaec:	1f 93       	push	r17
    aaee:	cf 93       	push	r28
    aaf0:	df 93       	push	r29
    aaf2:	cd b7       	in	r28, 0x3d	; 61
    aaf4:	de b7       	in	r29, 0x3e	; 62
    aaf6:	60 97       	sbiw	r28, 0x10	; 16
    aaf8:	cd bf       	out	0x3d, r28	; 61
    aafa:	de bf       	out	0x3e, r29	; 62
    aafc:	7c 01       	movw	r14, r24
    aafe:	1b 01       	movw	r2, r22
    ab00:	6a 01       	movw	r12, r20
    ab02:	fc 01       	movw	r30, r24
    ab04:	16 82       	std	Z+6, r1	; 0x06
    ab06:	17 82       	std	Z+7, r1	; 0x07
    ab08:	83 81       	ldd	r24, Z+3	; 0x03
    ab0a:	81 ff       	sbrs	r24, 1
    ab0c:	2a c3       	rjmp	.+1620   	; 0xb162 <vfprintf+0x694>
    ab0e:	9e 01       	movw	r18, r28
    ab10:	2f 5f       	subi	r18, 0xFF	; 255
    ab12:	3f 4f       	sbci	r19, 0xFF	; 255
    ab14:	39 01       	movw	r6, r18
    ab16:	f7 01       	movw	r30, r14
    ab18:	93 81       	ldd	r25, Z+3	; 0x03
    ab1a:	f1 01       	movw	r30, r2
    ab1c:	93 fd       	sbrc	r25, 3
    ab1e:	85 91       	lpm	r24, Z+
    ab20:	93 ff       	sbrs	r25, 3
    ab22:	81 91       	ld	r24, Z+
    ab24:	1f 01       	movw	r2, r30
    ab26:	88 23       	and	r24, r24
    ab28:	09 f4       	brne	.+2      	; 0xab2c <vfprintf+0x5e>
    ab2a:	17 c3       	rjmp	.+1582   	; 0xb15a <vfprintf+0x68c>
    ab2c:	85 32       	cpi	r24, 0x25	; 37
    ab2e:	39 f4       	brne	.+14     	; 0xab3e <vfprintf+0x70>
    ab30:	93 fd       	sbrc	r25, 3
    ab32:	85 91       	lpm	r24, Z+
    ab34:	93 ff       	sbrs	r25, 3
    ab36:	81 91       	ld	r24, Z+
    ab38:	1f 01       	movw	r2, r30
    ab3a:	85 32       	cpi	r24, 0x25	; 37
    ab3c:	31 f4       	brne	.+12     	; 0xab4a <vfprintf+0x7c>
    ab3e:	b7 01       	movw	r22, r14
    ab40:	90 e0       	ldi	r25, 0x00	; 0
    ab42:	30 d7       	rcall	.+3680   	; 0xb9a4 <fputc>
    ab44:	56 01       	movw	r10, r12
    ab46:	65 01       	movw	r12, r10
    ab48:	e6 cf       	rjmp	.-52     	; 0xab16 <vfprintf+0x48>
    ab4a:	10 e0       	ldi	r17, 0x00	; 0
    ab4c:	51 2c       	mov	r5, r1
    ab4e:	91 2c       	mov	r9, r1
    ab50:	ff e1       	ldi	r31, 0x1F	; 31
    ab52:	f9 15       	cp	r31, r9
    ab54:	d8 f0       	brcs	.+54     	; 0xab8c <vfprintf+0xbe>
    ab56:	8b 32       	cpi	r24, 0x2B	; 43
    ab58:	79 f0       	breq	.+30     	; 0xab78 <vfprintf+0xaa>
    ab5a:	38 f4       	brcc	.+14     	; 0xab6a <vfprintf+0x9c>
    ab5c:	80 32       	cpi	r24, 0x20	; 32
    ab5e:	79 f0       	breq	.+30     	; 0xab7e <vfprintf+0xb0>
    ab60:	83 32       	cpi	r24, 0x23	; 35
    ab62:	a1 f4       	brne	.+40     	; 0xab8c <vfprintf+0xbe>
    ab64:	f9 2d       	mov	r31, r9
    ab66:	f0 61       	ori	r31, 0x10	; 16
    ab68:	2e c0       	rjmp	.+92     	; 0xabc6 <vfprintf+0xf8>
    ab6a:	8d 32       	cpi	r24, 0x2D	; 45
    ab6c:	61 f0       	breq	.+24     	; 0xab86 <vfprintf+0xb8>
    ab6e:	80 33       	cpi	r24, 0x30	; 48
    ab70:	69 f4       	brne	.+26     	; 0xab8c <vfprintf+0xbe>
    ab72:	29 2d       	mov	r18, r9
    ab74:	21 60       	ori	r18, 0x01	; 1
    ab76:	2d c0       	rjmp	.+90     	; 0xabd2 <vfprintf+0x104>
    ab78:	39 2d       	mov	r19, r9
    ab7a:	32 60       	ori	r19, 0x02	; 2
    ab7c:	93 2e       	mov	r9, r19
    ab7e:	89 2d       	mov	r24, r9
    ab80:	84 60       	ori	r24, 0x04	; 4
    ab82:	98 2e       	mov	r9, r24
    ab84:	2a c0       	rjmp	.+84     	; 0xabda <vfprintf+0x10c>
    ab86:	e9 2d       	mov	r30, r9
    ab88:	e8 60       	ori	r30, 0x08	; 8
    ab8a:	15 c0       	rjmp	.+42     	; 0xabb6 <vfprintf+0xe8>
    ab8c:	97 fc       	sbrc	r9, 7
    ab8e:	2d c0       	rjmp	.+90     	; 0xabea <vfprintf+0x11c>
    ab90:	20 ed       	ldi	r18, 0xD0	; 208
    ab92:	28 0f       	add	r18, r24
    ab94:	2a 30       	cpi	r18, 0x0A	; 10
    ab96:	88 f4       	brcc	.+34     	; 0xabba <vfprintf+0xec>
    ab98:	96 fe       	sbrs	r9, 6
    ab9a:	06 c0       	rjmp	.+12     	; 0xaba8 <vfprintf+0xda>
    ab9c:	3a e0       	ldi	r19, 0x0A	; 10
    ab9e:	13 9f       	mul	r17, r19
    aba0:	20 0d       	add	r18, r0
    aba2:	11 24       	eor	r1, r1
    aba4:	12 2f       	mov	r17, r18
    aba6:	19 c0       	rjmp	.+50     	; 0xabda <vfprintf+0x10c>
    aba8:	8a e0       	ldi	r24, 0x0A	; 10
    abaa:	58 9e       	mul	r5, r24
    abac:	20 0d       	add	r18, r0
    abae:	11 24       	eor	r1, r1
    abb0:	52 2e       	mov	r5, r18
    abb2:	e9 2d       	mov	r30, r9
    abb4:	e0 62       	ori	r30, 0x20	; 32
    abb6:	9e 2e       	mov	r9, r30
    abb8:	10 c0       	rjmp	.+32     	; 0xabda <vfprintf+0x10c>
    abba:	8e 32       	cpi	r24, 0x2E	; 46
    abbc:	31 f4       	brne	.+12     	; 0xabca <vfprintf+0xfc>
    abbe:	96 fc       	sbrc	r9, 6
    abc0:	cc c2       	rjmp	.+1432   	; 0xb15a <vfprintf+0x68c>
    abc2:	f9 2d       	mov	r31, r9
    abc4:	f0 64       	ori	r31, 0x40	; 64
    abc6:	9f 2e       	mov	r9, r31
    abc8:	08 c0       	rjmp	.+16     	; 0xabda <vfprintf+0x10c>
    abca:	8c 36       	cpi	r24, 0x6C	; 108
    abcc:	21 f4       	brne	.+8      	; 0xabd6 <vfprintf+0x108>
    abce:	29 2d       	mov	r18, r9
    abd0:	20 68       	ori	r18, 0x80	; 128
    abd2:	92 2e       	mov	r9, r18
    abd4:	02 c0       	rjmp	.+4      	; 0xabda <vfprintf+0x10c>
    abd6:	88 36       	cpi	r24, 0x68	; 104
    abd8:	41 f4       	brne	.+16     	; 0xabea <vfprintf+0x11c>
    abda:	f1 01       	movw	r30, r2
    abdc:	93 fd       	sbrc	r25, 3
    abde:	85 91       	lpm	r24, Z+
    abe0:	93 ff       	sbrs	r25, 3
    abe2:	81 91       	ld	r24, Z+
    abe4:	1f 01       	movw	r2, r30
    abe6:	81 11       	cpse	r24, r1
    abe8:	b3 cf       	rjmp	.-154    	; 0xab50 <vfprintf+0x82>
    abea:	9b eb       	ldi	r25, 0xBB	; 187
    abec:	98 0f       	add	r25, r24
    abee:	93 30       	cpi	r25, 0x03	; 3
    abf0:	20 f4       	brcc	.+8      	; 0xabfa <vfprintf+0x12c>
    abf2:	99 2d       	mov	r25, r9
    abf4:	90 61       	ori	r25, 0x10	; 16
    abf6:	80 5e       	subi	r24, 0xE0	; 224
    abf8:	07 c0       	rjmp	.+14     	; 0xac08 <vfprintf+0x13a>
    abfa:	9b e9       	ldi	r25, 0x9B	; 155
    abfc:	98 0f       	add	r25, r24
    abfe:	93 30       	cpi	r25, 0x03	; 3
    ac00:	08 f0       	brcs	.+2      	; 0xac04 <vfprintf+0x136>
    ac02:	59 c1       	rjmp	.+690    	; 0xaeb6 <vfprintf+0x3e8>
    ac04:	99 2d       	mov	r25, r9
    ac06:	9f 7e       	andi	r25, 0xEF	; 239
    ac08:	96 ff       	sbrs	r25, 6
    ac0a:	16 e0       	ldi	r17, 0x06	; 6
    ac0c:	9f 73       	andi	r25, 0x3F	; 63
    ac0e:	99 2e       	mov	r9, r25
    ac10:	85 36       	cpi	r24, 0x65	; 101
    ac12:	19 f4       	brne	.+6      	; 0xac1a <vfprintf+0x14c>
    ac14:	90 64       	ori	r25, 0x40	; 64
    ac16:	99 2e       	mov	r9, r25
    ac18:	08 c0       	rjmp	.+16     	; 0xac2a <vfprintf+0x15c>
    ac1a:	86 36       	cpi	r24, 0x66	; 102
    ac1c:	21 f4       	brne	.+8      	; 0xac26 <vfprintf+0x158>
    ac1e:	39 2f       	mov	r19, r25
    ac20:	30 68       	ori	r19, 0x80	; 128
    ac22:	93 2e       	mov	r9, r19
    ac24:	02 c0       	rjmp	.+4      	; 0xac2a <vfprintf+0x15c>
    ac26:	11 11       	cpse	r17, r1
    ac28:	11 50       	subi	r17, 0x01	; 1
    ac2a:	97 fe       	sbrs	r9, 7
    ac2c:	07 c0       	rjmp	.+14     	; 0xac3c <vfprintf+0x16e>
    ac2e:	1c 33       	cpi	r17, 0x3C	; 60
    ac30:	50 f4       	brcc	.+20     	; 0xac46 <vfprintf+0x178>
    ac32:	44 24       	eor	r4, r4
    ac34:	43 94       	inc	r4
    ac36:	41 0e       	add	r4, r17
    ac38:	27 e0       	ldi	r18, 0x07	; 7
    ac3a:	0b c0       	rjmp	.+22     	; 0xac52 <vfprintf+0x184>
    ac3c:	18 30       	cpi	r17, 0x08	; 8
    ac3e:	38 f0       	brcs	.+14     	; 0xac4e <vfprintf+0x180>
    ac40:	27 e0       	ldi	r18, 0x07	; 7
    ac42:	17 e0       	ldi	r17, 0x07	; 7
    ac44:	05 c0       	rjmp	.+10     	; 0xac50 <vfprintf+0x182>
    ac46:	27 e0       	ldi	r18, 0x07	; 7
    ac48:	9c e3       	ldi	r25, 0x3C	; 60
    ac4a:	49 2e       	mov	r4, r25
    ac4c:	02 c0       	rjmp	.+4      	; 0xac52 <vfprintf+0x184>
    ac4e:	21 2f       	mov	r18, r17
    ac50:	41 2c       	mov	r4, r1
    ac52:	56 01       	movw	r10, r12
    ac54:	84 e0       	ldi	r24, 0x04	; 4
    ac56:	a8 0e       	add	r10, r24
    ac58:	b1 1c       	adc	r11, r1
    ac5a:	f6 01       	movw	r30, r12
    ac5c:	60 81       	ld	r22, Z
    ac5e:	71 81       	ldd	r23, Z+1	; 0x01
    ac60:	82 81       	ldd	r24, Z+2	; 0x02
    ac62:	93 81       	ldd	r25, Z+3	; 0x03
    ac64:	04 2d       	mov	r16, r4
    ac66:	a3 01       	movw	r20, r6
    ac68:	44 d5       	rcall	.+2696   	; 0xb6f2 <__ftoa_engine>
    ac6a:	6c 01       	movw	r12, r24
    ac6c:	f9 81       	ldd	r31, Y+1	; 0x01
    ac6e:	fc 87       	std	Y+12, r31	; 0x0c
    ac70:	f0 ff       	sbrs	r31, 0
    ac72:	02 c0       	rjmp	.+4      	; 0xac78 <vfprintf+0x1aa>
    ac74:	f3 ff       	sbrs	r31, 3
    ac76:	06 c0       	rjmp	.+12     	; 0xac84 <vfprintf+0x1b6>
    ac78:	91 fc       	sbrc	r9, 1
    ac7a:	06 c0       	rjmp	.+12     	; 0xac88 <vfprintf+0x1ba>
    ac7c:	92 fe       	sbrs	r9, 2
    ac7e:	06 c0       	rjmp	.+12     	; 0xac8c <vfprintf+0x1be>
    ac80:	00 e2       	ldi	r16, 0x20	; 32
    ac82:	05 c0       	rjmp	.+10     	; 0xac8e <vfprintf+0x1c0>
    ac84:	0d e2       	ldi	r16, 0x2D	; 45
    ac86:	03 c0       	rjmp	.+6      	; 0xac8e <vfprintf+0x1c0>
    ac88:	0b e2       	ldi	r16, 0x2B	; 43
    ac8a:	01 c0       	rjmp	.+2      	; 0xac8e <vfprintf+0x1c0>
    ac8c:	00 e0       	ldi	r16, 0x00	; 0
    ac8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac90:	8c 70       	andi	r24, 0x0C	; 12
    ac92:	19 f0       	breq	.+6      	; 0xac9a <vfprintf+0x1cc>
    ac94:	01 11       	cpse	r16, r1
    ac96:	43 c2       	rjmp	.+1158   	; 0xb11e <vfprintf+0x650>
    ac98:	80 c2       	rjmp	.+1280   	; 0xb19a <vfprintf+0x6cc>
    ac9a:	97 fe       	sbrs	r9, 7
    ac9c:	10 c0       	rjmp	.+32     	; 0xacbe <vfprintf+0x1f0>
    ac9e:	4c 0c       	add	r4, r12
    aca0:	fc 85       	ldd	r31, Y+12	; 0x0c
    aca2:	f4 ff       	sbrs	r31, 4
    aca4:	04 c0       	rjmp	.+8      	; 0xacae <vfprintf+0x1e0>
    aca6:	8a 81       	ldd	r24, Y+2	; 0x02
    aca8:	81 33       	cpi	r24, 0x31	; 49
    acaa:	09 f4       	brne	.+2      	; 0xacae <vfprintf+0x1e0>
    acac:	4a 94       	dec	r4
    acae:	14 14       	cp	r1, r4
    acb0:	74 f5       	brge	.+92     	; 0xad0e <vfprintf+0x240>
    acb2:	28 e0       	ldi	r18, 0x08	; 8
    acb4:	24 15       	cp	r18, r4
    acb6:	78 f5       	brcc	.+94     	; 0xad16 <vfprintf+0x248>
    acb8:	88 e0       	ldi	r24, 0x08	; 8
    acba:	48 2e       	mov	r4, r24
    acbc:	2c c0       	rjmp	.+88     	; 0xad16 <vfprintf+0x248>
    acbe:	96 fc       	sbrc	r9, 6
    acc0:	2a c0       	rjmp	.+84     	; 0xad16 <vfprintf+0x248>
    acc2:	81 2f       	mov	r24, r17
    acc4:	90 e0       	ldi	r25, 0x00	; 0
    acc6:	8c 15       	cp	r24, r12
    acc8:	9d 05       	cpc	r25, r13
    acca:	9c f0       	brlt	.+38     	; 0xacf2 <vfprintf+0x224>
    accc:	3c ef       	ldi	r19, 0xFC	; 252
    acce:	c3 16       	cp	r12, r19
    acd0:	3f ef       	ldi	r19, 0xFF	; 255
    acd2:	d3 06       	cpc	r13, r19
    acd4:	74 f0       	brlt	.+28     	; 0xacf2 <vfprintf+0x224>
    acd6:	89 2d       	mov	r24, r9
    acd8:	80 68       	ori	r24, 0x80	; 128
    acda:	98 2e       	mov	r9, r24
    acdc:	0a c0       	rjmp	.+20     	; 0xacf2 <vfprintf+0x224>
    acde:	e2 e0       	ldi	r30, 0x02	; 2
    ace0:	f0 e0       	ldi	r31, 0x00	; 0
    ace2:	ec 0f       	add	r30, r28
    ace4:	fd 1f       	adc	r31, r29
    ace6:	e1 0f       	add	r30, r17
    ace8:	f1 1d       	adc	r31, r1
    acea:	80 81       	ld	r24, Z
    acec:	80 33       	cpi	r24, 0x30	; 48
    acee:	19 f4       	brne	.+6      	; 0xacf6 <vfprintf+0x228>
    acf0:	11 50       	subi	r17, 0x01	; 1
    acf2:	11 11       	cpse	r17, r1
    acf4:	f4 cf       	rjmp	.-24     	; 0xacde <vfprintf+0x210>
    acf6:	97 fe       	sbrs	r9, 7
    acf8:	0e c0       	rjmp	.+28     	; 0xad16 <vfprintf+0x248>
    acfa:	44 24       	eor	r4, r4
    acfc:	43 94       	inc	r4
    acfe:	41 0e       	add	r4, r17
    ad00:	81 2f       	mov	r24, r17
    ad02:	90 e0       	ldi	r25, 0x00	; 0
    ad04:	c8 16       	cp	r12, r24
    ad06:	d9 06       	cpc	r13, r25
    ad08:	2c f4       	brge	.+10     	; 0xad14 <vfprintf+0x246>
    ad0a:	1c 19       	sub	r17, r12
    ad0c:	04 c0       	rjmp	.+8      	; 0xad16 <vfprintf+0x248>
    ad0e:	44 24       	eor	r4, r4
    ad10:	43 94       	inc	r4
    ad12:	01 c0       	rjmp	.+2      	; 0xad16 <vfprintf+0x248>
    ad14:	10 e0       	ldi	r17, 0x00	; 0
    ad16:	97 fe       	sbrs	r9, 7
    ad18:	06 c0       	rjmp	.+12     	; 0xad26 <vfprintf+0x258>
    ad1a:	1c 14       	cp	r1, r12
    ad1c:	1d 04       	cpc	r1, r13
    ad1e:	34 f4       	brge	.+12     	; 0xad2c <vfprintf+0x25e>
    ad20:	c6 01       	movw	r24, r12
    ad22:	01 96       	adiw	r24, 0x01	; 1
    ad24:	05 c0       	rjmp	.+10     	; 0xad30 <vfprintf+0x262>
    ad26:	85 e0       	ldi	r24, 0x05	; 5
    ad28:	90 e0       	ldi	r25, 0x00	; 0
    ad2a:	02 c0       	rjmp	.+4      	; 0xad30 <vfprintf+0x262>
    ad2c:	81 e0       	ldi	r24, 0x01	; 1
    ad2e:	90 e0       	ldi	r25, 0x00	; 0
    ad30:	01 11       	cpse	r16, r1
    ad32:	01 96       	adiw	r24, 0x01	; 1
    ad34:	11 23       	and	r17, r17
    ad36:	31 f0       	breq	.+12     	; 0xad44 <vfprintf+0x276>
    ad38:	21 2f       	mov	r18, r17
    ad3a:	30 e0       	ldi	r19, 0x00	; 0
    ad3c:	2f 5f       	subi	r18, 0xFF	; 255
    ad3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ad40:	82 0f       	add	r24, r18
    ad42:	93 1f       	adc	r25, r19
    ad44:	25 2d       	mov	r18, r5
    ad46:	30 e0       	ldi	r19, 0x00	; 0
    ad48:	82 17       	cp	r24, r18
    ad4a:	93 07       	cpc	r25, r19
    ad4c:	14 f4       	brge	.+4      	; 0xad52 <vfprintf+0x284>
    ad4e:	58 1a       	sub	r5, r24
    ad50:	01 c0       	rjmp	.+2      	; 0xad54 <vfprintf+0x286>
    ad52:	51 2c       	mov	r5, r1
    ad54:	89 2d       	mov	r24, r9
    ad56:	89 70       	andi	r24, 0x09	; 9
    ad58:	41 f4       	brne	.+16     	; 0xad6a <vfprintf+0x29c>
    ad5a:	55 20       	and	r5, r5
    ad5c:	31 f0       	breq	.+12     	; 0xad6a <vfprintf+0x29c>
    ad5e:	b7 01       	movw	r22, r14
    ad60:	80 e2       	ldi	r24, 0x20	; 32
    ad62:	90 e0       	ldi	r25, 0x00	; 0
    ad64:	1f d6       	rcall	.+3134   	; 0xb9a4 <fputc>
    ad66:	5a 94       	dec	r5
    ad68:	f8 cf       	rjmp	.-16     	; 0xad5a <vfprintf+0x28c>
    ad6a:	00 23       	and	r16, r16
    ad6c:	21 f0       	breq	.+8      	; 0xad76 <vfprintf+0x2a8>
    ad6e:	b7 01       	movw	r22, r14
    ad70:	80 2f       	mov	r24, r16
    ad72:	90 e0       	ldi	r25, 0x00	; 0
    ad74:	17 d6       	rcall	.+3118   	; 0xb9a4 <fputc>
    ad76:	93 fc       	sbrc	r9, 3
    ad78:	08 c0       	rjmp	.+16     	; 0xad8a <vfprintf+0x2bc>
    ad7a:	55 20       	and	r5, r5
    ad7c:	31 f0       	breq	.+12     	; 0xad8a <vfprintf+0x2bc>
    ad7e:	b7 01       	movw	r22, r14
    ad80:	80 e3       	ldi	r24, 0x30	; 48
    ad82:	90 e0       	ldi	r25, 0x00	; 0
    ad84:	0f d6       	rcall	.+3102   	; 0xb9a4 <fputc>
    ad86:	5a 94       	dec	r5
    ad88:	f8 cf       	rjmp	.-16     	; 0xad7a <vfprintf+0x2ac>
    ad8a:	97 fe       	sbrs	r9, 7
    ad8c:	4a c0       	rjmp	.+148    	; 0xae22 <vfprintf+0x354>
    ad8e:	46 01       	movw	r8, r12
    ad90:	d7 fe       	sbrs	r13, 7
    ad92:	02 c0       	rjmp	.+4      	; 0xad98 <vfprintf+0x2ca>
    ad94:	81 2c       	mov	r8, r1
    ad96:	91 2c       	mov	r9, r1
    ad98:	c6 01       	movw	r24, r12
    ad9a:	88 19       	sub	r24, r8
    ad9c:	99 09       	sbc	r25, r9
    ad9e:	f3 01       	movw	r30, r6
    ada0:	e8 0f       	add	r30, r24
    ada2:	f9 1f       	adc	r31, r25
    ada4:	ed 87       	std	Y+13, r30	; 0x0d
    ada6:	fe 87       	std	Y+14, r31	; 0x0e
    ada8:	96 01       	movw	r18, r12
    adaa:	24 19       	sub	r18, r4
    adac:	31 09       	sbc	r19, r1
    adae:	2f 87       	std	Y+15, r18	; 0x0f
    adb0:	38 8b       	std	Y+16, r19	; 0x10
    adb2:	01 2f       	mov	r16, r17
    adb4:	10 e0       	ldi	r17, 0x00	; 0
    adb6:	11 95       	neg	r17
    adb8:	01 95       	neg	r16
    adba:	11 09       	sbc	r17, r1
    adbc:	3f ef       	ldi	r19, 0xFF	; 255
    adbe:	83 16       	cp	r8, r19
    adc0:	93 06       	cpc	r9, r19
    adc2:	21 f4       	brne	.+8      	; 0xadcc <vfprintf+0x2fe>
    adc4:	b7 01       	movw	r22, r14
    adc6:	8e e2       	ldi	r24, 0x2E	; 46
    adc8:	90 e0       	ldi	r25, 0x00	; 0
    adca:	ec d5       	rcall	.+3032   	; 0xb9a4 <fputc>
    adcc:	c8 14       	cp	r12, r8
    adce:	d9 04       	cpc	r13, r9
    add0:	4c f0       	brlt	.+18     	; 0xade4 <vfprintf+0x316>
    add2:	8f 85       	ldd	r24, Y+15	; 0x0f
    add4:	98 89       	ldd	r25, Y+16	; 0x10
    add6:	88 15       	cp	r24, r8
    add8:	99 05       	cpc	r25, r9
    adda:	24 f4       	brge	.+8      	; 0xade4 <vfprintf+0x316>
    addc:	ed 85       	ldd	r30, Y+13	; 0x0d
    adde:	fe 85       	ldd	r31, Y+14	; 0x0e
    ade0:	81 81       	ldd	r24, Z+1	; 0x01
    ade2:	01 c0       	rjmp	.+2      	; 0xade6 <vfprintf+0x318>
    ade4:	80 e3       	ldi	r24, 0x30	; 48
    ade6:	f1 e0       	ldi	r31, 0x01	; 1
    ade8:	8f 1a       	sub	r8, r31
    adea:	91 08       	sbc	r9, r1
    adec:	2d 85       	ldd	r18, Y+13	; 0x0d
    adee:	3e 85       	ldd	r19, Y+14	; 0x0e
    adf0:	2f 5f       	subi	r18, 0xFF	; 255
    adf2:	3f 4f       	sbci	r19, 0xFF	; 255
    adf4:	2d 87       	std	Y+13, r18	; 0x0d
    adf6:	3e 87       	std	Y+14, r19	; 0x0e
    adf8:	80 16       	cp	r8, r16
    adfa:	91 06       	cpc	r9, r17
    adfc:	24 f0       	brlt	.+8      	; 0xae06 <vfprintf+0x338>
    adfe:	b7 01       	movw	r22, r14
    ae00:	90 e0       	ldi	r25, 0x00	; 0
    ae02:	d0 d5       	rcall	.+2976   	; 0xb9a4 <fputc>
    ae04:	db cf       	rjmp	.-74     	; 0xadbc <vfprintf+0x2ee>
    ae06:	c8 14       	cp	r12, r8
    ae08:	d9 04       	cpc	r13, r9
    ae0a:	41 f4       	brne	.+16     	; 0xae1c <vfprintf+0x34e>
    ae0c:	9a 81       	ldd	r25, Y+2	; 0x02
    ae0e:	96 33       	cpi	r25, 0x36	; 54
    ae10:	20 f4       	brcc	.+8      	; 0xae1a <vfprintf+0x34c>
    ae12:	95 33       	cpi	r25, 0x35	; 53
    ae14:	19 f4       	brne	.+6      	; 0xae1c <vfprintf+0x34e>
    ae16:	3c 85       	ldd	r19, Y+12	; 0x0c
    ae18:	34 ff       	sbrs	r19, 4
    ae1a:	81 e3       	ldi	r24, 0x31	; 49
    ae1c:	b7 01       	movw	r22, r14
    ae1e:	90 e0       	ldi	r25, 0x00	; 0
    ae20:	48 c0       	rjmp	.+144    	; 0xaeb2 <vfprintf+0x3e4>
    ae22:	8a 81       	ldd	r24, Y+2	; 0x02
    ae24:	81 33       	cpi	r24, 0x31	; 49
    ae26:	19 f0       	breq	.+6      	; 0xae2e <vfprintf+0x360>
    ae28:	9c 85       	ldd	r25, Y+12	; 0x0c
    ae2a:	9f 7e       	andi	r25, 0xEF	; 239
    ae2c:	9c 87       	std	Y+12, r25	; 0x0c
    ae2e:	b7 01       	movw	r22, r14
    ae30:	90 e0       	ldi	r25, 0x00	; 0
    ae32:	b8 d5       	rcall	.+2928   	; 0xb9a4 <fputc>
    ae34:	11 11       	cpse	r17, r1
    ae36:	05 c0       	rjmp	.+10     	; 0xae42 <vfprintf+0x374>
    ae38:	94 fc       	sbrc	r9, 4
    ae3a:	16 c0       	rjmp	.+44     	; 0xae68 <vfprintf+0x39a>
    ae3c:	85 e6       	ldi	r24, 0x65	; 101
    ae3e:	90 e0       	ldi	r25, 0x00	; 0
    ae40:	15 c0       	rjmp	.+42     	; 0xae6c <vfprintf+0x39e>
    ae42:	b7 01       	movw	r22, r14
    ae44:	8e e2       	ldi	r24, 0x2E	; 46
    ae46:	90 e0       	ldi	r25, 0x00	; 0
    ae48:	ad d5       	rcall	.+2906   	; 0xb9a4 <fputc>
    ae4a:	1e 5f       	subi	r17, 0xFE	; 254
    ae4c:	82 e0       	ldi	r24, 0x02	; 2
    ae4e:	01 e0       	ldi	r16, 0x01	; 1
    ae50:	08 0f       	add	r16, r24
    ae52:	f3 01       	movw	r30, r6
    ae54:	e8 0f       	add	r30, r24
    ae56:	f1 1d       	adc	r31, r1
    ae58:	80 81       	ld	r24, Z
    ae5a:	b7 01       	movw	r22, r14
    ae5c:	90 e0       	ldi	r25, 0x00	; 0
    ae5e:	a2 d5       	rcall	.+2884   	; 0xb9a4 <fputc>
    ae60:	80 2f       	mov	r24, r16
    ae62:	01 13       	cpse	r16, r17
    ae64:	f4 cf       	rjmp	.-24     	; 0xae4e <vfprintf+0x380>
    ae66:	e8 cf       	rjmp	.-48     	; 0xae38 <vfprintf+0x36a>
    ae68:	85 e4       	ldi	r24, 0x45	; 69
    ae6a:	90 e0       	ldi	r25, 0x00	; 0
    ae6c:	b7 01       	movw	r22, r14
    ae6e:	9a d5       	rcall	.+2868   	; 0xb9a4 <fputc>
    ae70:	d7 fc       	sbrc	r13, 7
    ae72:	06 c0       	rjmp	.+12     	; 0xae80 <vfprintf+0x3b2>
    ae74:	c1 14       	cp	r12, r1
    ae76:	d1 04       	cpc	r13, r1
    ae78:	41 f4       	brne	.+16     	; 0xae8a <vfprintf+0x3bc>
    ae7a:	ec 85       	ldd	r30, Y+12	; 0x0c
    ae7c:	e4 ff       	sbrs	r30, 4
    ae7e:	05 c0       	rjmp	.+10     	; 0xae8a <vfprintf+0x3bc>
    ae80:	d1 94       	neg	r13
    ae82:	c1 94       	neg	r12
    ae84:	d1 08       	sbc	r13, r1
    ae86:	8d e2       	ldi	r24, 0x2D	; 45
    ae88:	01 c0       	rjmp	.+2      	; 0xae8c <vfprintf+0x3be>
    ae8a:	8b e2       	ldi	r24, 0x2B	; 43
    ae8c:	b7 01       	movw	r22, r14
    ae8e:	90 e0       	ldi	r25, 0x00	; 0
    ae90:	89 d5       	rcall	.+2834   	; 0xb9a4 <fputc>
    ae92:	80 e3       	ldi	r24, 0x30	; 48
    ae94:	2a e0       	ldi	r18, 0x0A	; 10
    ae96:	c2 16       	cp	r12, r18
    ae98:	d1 04       	cpc	r13, r1
    ae9a:	2c f0       	brlt	.+10     	; 0xaea6 <vfprintf+0x3d8>
    ae9c:	8f 5f       	subi	r24, 0xFF	; 255
    ae9e:	fa e0       	ldi	r31, 0x0A	; 10
    aea0:	cf 1a       	sub	r12, r31
    aea2:	d1 08       	sbc	r13, r1
    aea4:	f7 cf       	rjmp	.-18     	; 0xae94 <vfprintf+0x3c6>
    aea6:	b7 01       	movw	r22, r14
    aea8:	90 e0       	ldi	r25, 0x00	; 0
    aeaa:	7c d5       	rcall	.+2808   	; 0xb9a4 <fputc>
    aeac:	b7 01       	movw	r22, r14
    aeae:	c6 01       	movw	r24, r12
    aeb0:	c0 96       	adiw	r24, 0x30	; 48
    aeb2:	78 d5       	rcall	.+2800   	; 0xb9a4 <fputc>
    aeb4:	49 c1       	rjmp	.+658    	; 0xb148 <vfprintf+0x67a>
    aeb6:	83 36       	cpi	r24, 0x63	; 99
    aeb8:	31 f0       	breq	.+12     	; 0xaec6 <vfprintf+0x3f8>
    aeba:	83 37       	cpi	r24, 0x73	; 115
    aebc:	79 f0       	breq	.+30     	; 0xaedc <vfprintf+0x40e>
    aebe:	83 35       	cpi	r24, 0x53	; 83
    aec0:	09 f0       	breq	.+2      	; 0xaec4 <vfprintf+0x3f6>
    aec2:	52 c0       	rjmp	.+164    	; 0xaf68 <vfprintf+0x49a>
    aec4:	1f c0       	rjmp	.+62     	; 0xaf04 <vfprintf+0x436>
    aec6:	56 01       	movw	r10, r12
    aec8:	32 e0       	ldi	r19, 0x02	; 2
    aeca:	a3 0e       	add	r10, r19
    aecc:	b1 1c       	adc	r11, r1
    aece:	f6 01       	movw	r30, r12
    aed0:	80 81       	ld	r24, Z
    aed2:	89 83       	std	Y+1, r24	; 0x01
    aed4:	01 e0       	ldi	r16, 0x01	; 1
    aed6:	10 e0       	ldi	r17, 0x00	; 0
    aed8:	63 01       	movw	r12, r6
    aeda:	11 c0       	rjmp	.+34     	; 0xaefe <vfprintf+0x430>
    aedc:	56 01       	movw	r10, r12
    aede:	f2 e0       	ldi	r31, 0x02	; 2
    aee0:	af 0e       	add	r10, r31
    aee2:	b1 1c       	adc	r11, r1
    aee4:	f6 01       	movw	r30, r12
    aee6:	c0 80       	ld	r12, Z
    aee8:	d1 80       	ldd	r13, Z+1	; 0x01
    aeea:	96 fe       	sbrs	r9, 6
    aeec:	03 c0       	rjmp	.+6      	; 0xaef4 <vfprintf+0x426>
    aeee:	61 2f       	mov	r22, r17
    aef0:	70 e0       	ldi	r23, 0x00	; 0
    aef2:	02 c0       	rjmp	.+4      	; 0xaef8 <vfprintf+0x42a>
    aef4:	6f ef       	ldi	r22, 0xFF	; 255
    aef6:	7f ef       	ldi	r23, 0xFF	; 255
    aef8:	c6 01       	movw	r24, r12
    aefa:	f0 d4       	rcall	.+2528   	; 0xb8dc <strnlen>
    aefc:	8c 01       	movw	r16, r24
    aefe:	f9 2d       	mov	r31, r9
    af00:	ff 77       	andi	r31, 0x7F	; 127
    af02:	13 c0       	rjmp	.+38     	; 0xaf2a <vfprintf+0x45c>
    af04:	56 01       	movw	r10, r12
    af06:	22 e0       	ldi	r18, 0x02	; 2
    af08:	a2 0e       	add	r10, r18
    af0a:	b1 1c       	adc	r11, r1
    af0c:	f6 01       	movw	r30, r12
    af0e:	c0 80       	ld	r12, Z
    af10:	d1 80       	ldd	r13, Z+1	; 0x01
    af12:	96 fe       	sbrs	r9, 6
    af14:	03 c0       	rjmp	.+6      	; 0xaf1c <vfprintf+0x44e>
    af16:	61 2f       	mov	r22, r17
    af18:	70 e0       	ldi	r23, 0x00	; 0
    af1a:	02 c0       	rjmp	.+4      	; 0xaf20 <vfprintf+0x452>
    af1c:	6f ef       	ldi	r22, 0xFF	; 255
    af1e:	7f ef       	ldi	r23, 0xFF	; 255
    af20:	c6 01       	movw	r24, r12
    af22:	bf d4       	rcall	.+2430   	; 0xb8a2 <strnlen_P>
    af24:	8c 01       	movw	r16, r24
    af26:	f9 2d       	mov	r31, r9
    af28:	f0 68       	ori	r31, 0x80	; 128
    af2a:	9f 2e       	mov	r9, r31
    af2c:	f3 fd       	sbrc	r31, 3
    af2e:	18 c0       	rjmp	.+48     	; 0xaf60 <vfprintf+0x492>
    af30:	85 2d       	mov	r24, r5
    af32:	90 e0       	ldi	r25, 0x00	; 0
    af34:	08 17       	cp	r16, r24
    af36:	19 07       	cpc	r17, r25
    af38:	98 f4       	brcc	.+38     	; 0xaf60 <vfprintf+0x492>
    af3a:	b7 01       	movw	r22, r14
    af3c:	80 e2       	ldi	r24, 0x20	; 32
    af3e:	90 e0       	ldi	r25, 0x00	; 0
    af40:	31 d5       	rcall	.+2658   	; 0xb9a4 <fputc>
    af42:	5a 94       	dec	r5
    af44:	f5 cf       	rjmp	.-22     	; 0xaf30 <vfprintf+0x462>
    af46:	f6 01       	movw	r30, r12
    af48:	97 fc       	sbrc	r9, 7
    af4a:	85 91       	lpm	r24, Z+
    af4c:	97 fe       	sbrs	r9, 7
    af4e:	81 91       	ld	r24, Z+
    af50:	6f 01       	movw	r12, r30
    af52:	b7 01       	movw	r22, r14
    af54:	90 e0       	ldi	r25, 0x00	; 0
    af56:	26 d5       	rcall	.+2636   	; 0xb9a4 <fputc>
    af58:	51 10       	cpse	r5, r1
    af5a:	5a 94       	dec	r5
    af5c:	01 50       	subi	r16, 0x01	; 1
    af5e:	11 09       	sbc	r17, r1
    af60:	01 15       	cp	r16, r1
    af62:	11 05       	cpc	r17, r1
    af64:	81 f7       	brne	.-32     	; 0xaf46 <vfprintf+0x478>
    af66:	f0 c0       	rjmp	.+480    	; 0xb148 <vfprintf+0x67a>
    af68:	84 36       	cpi	r24, 0x64	; 100
    af6a:	11 f0       	breq	.+4      	; 0xaf70 <vfprintf+0x4a2>
    af6c:	89 36       	cpi	r24, 0x69	; 105
    af6e:	59 f5       	brne	.+86     	; 0xafc6 <vfprintf+0x4f8>
    af70:	56 01       	movw	r10, r12
    af72:	97 fe       	sbrs	r9, 7
    af74:	09 c0       	rjmp	.+18     	; 0xaf88 <vfprintf+0x4ba>
    af76:	24 e0       	ldi	r18, 0x04	; 4
    af78:	a2 0e       	add	r10, r18
    af7a:	b1 1c       	adc	r11, r1
    af7c:	f6 01       	movw	r30, r12
    af7e:	60 81       	ld	r22, Z
    af80:	71 81       	ldd	r23, Z+1	; 0x01
    af82:	82 81       	ldd	r24, Z+2	; 0x02
    af84:	93 81       	ldd	r25, Z+3	; 0x03
    af86:	0a c0       	rjmp	.+20     	; 0xaf9c <vfprintf+0x4ce>
    af88:	f2 e0       	ldi	r31, 0x02	; 2
    af8a:	af 0e       	add	r10, r31
    af8c:	b1 1c       	adc	r11, r1
    af8e:	f6 01       	movw	r30, r12
    af90:	60 81       	ld	r22, Z
    af92:	71 81       	ldd	r23, Z+1	; 0x01
    af94:	07 2e       	mov	r0, r23
    af96:	00 0c       	add	r0, r0
    af98:	88 0b       	sbc	r24, r24
    af9a:	99 0b       	sbc	r25, r25
    af9c:	f9 2d       	mov	r31, r9
    af9e:	ff 76       	andi	r31, 0x6F	; 111
    afa0:	9f 2e       	mov	r9, r31
    afa2:	97 ff       	sbrs	r25, 7
    afa4:	09 c0       	rjmp	.+18     	; 0xafb8 <vfprintf+0x4ea>
    afa6:	90 95       	com	r25
    afa8:	80 95       	com	r24
    afaa:	70 95       	com	r23
    afac:	61 95       	neg	r22
    afae:	7f 4f       	sbci	r23, 0xFF	; 255
    afb0:	8f 4f       	sbci	r24, 0xFF	; 255
    afb2:	9f 4f       	sbci	r25, 0xFF	; 255
    afb4:	f0 68       	ori	r31, 0x80	; 128
    afb6:	9f 2e       	mov	r9, r31
    afb8:	2a e0       	ldi	r18, 0x0A	; 10
    afba:	30 e0       	ldi	r19, 0x00	; 0
    afbc:	a3 01       	movw	r20, r6
    afbe:	9a d5       	rcall	.+2868   	; 0xbaf4 <__ultoa_invert>
    afc0:	c8 2e       	mov	r12, r24
    afc2:	c6 18       	sub	r12, r6
    afc4:	3e c0       	rjmp	.+124    	; 0xb042 <vfprintf+0x574>
    afc6:	09 2d       	mov	r16, r9
    afc8:	85 37       	cpi	r24, 0x75	; 117
    afca:	21 f4       	brne	.+8      	; 0xafd4 <vfprintf+0x506>
    afcc:	0f 7e       	andi	r16, 0xEF	; 239
    afce:	2a e0       	ldi	r18, 0x0A	; 10
    afd0:	30 e0       	ldi	r19, 0x00	; 0
    afd2:	1d c0       	rjmp	.+58     	; 0xb00e <vfprintf+0x540>
    afd4:	09 7f       	andi	r16, 0xF9	; 249
    afd6:	8f 36       	cpi	r24, 0x6F	; 111
    afd8:	91 f0       	breq	.+36     	; 0xaffe <vfprintf+0x530>
    afda:	18 f4       	brcc	.+6      	; 0xafe2 <vfprintf+0x514>
    afdc:	88 35       	cpi	r24, 0x58	; 88
    afde:	59 f0       	breq	.+22     	; 0xaff6 <vfprintf+0x528>
    afe0:	bc c0       	rjmp	.+376    	; 0xb15a <vfprintf+0x68c>
    afe2:	80 37       	cpi	r24, 0x70	; 112
    afe4:	19 f0       	breq	.+6      	; 0xafec <vfprintf+0x51e>
    afe6:	88 37       	cpi	r24, 0x78	; 120
    afe8:	11 f0       	breq	.+4      	; 0xafee <vfprintf+0x520>
    afea:	b7 c0       	rjmp	.+366    	; 0xb15a <vfprintf+0x68c>
    afec:	00 61       	ori	r16, 0x10	; 16
    afee:	04 ff       	sbrs	r16, 4
    aff0:	09 c0       	rjmp	.+18     	; 0xb004 <vfprintf+0x536>
    aff2:	04 60       	ori	r16, 0x04	; 4
    aff4:	07 c0       	rjmp	.+14     	; 0xb004 <vfprintf+0x536>
    aff6:	94 fe       	sbrs	r9, 4
    aff8:	08 c0       	rjmp	.+16     	; 0xb00a <vfprintf+0x53c>
    affa:	06 60       	ori	r16, 0x06	; 6
    affc:	06 c0       	rjmp	.+12     	; 0xb00a <vfprintf+0x53c>
    affe:	28 e0       	ldi	r18, 0x08	; 8
    b000:	30 e0       	ldi	r19, 0x00	; 0
    b002:	05 c0       	rjmp	.+10     	; 0xb00e <vfprintf+0x540>
    b004:	20 e1       	ldi	r18, 0x10	; 16
    b006:	30 e0       	ldi	r19, 0x00	; 0
    b008:	02 c0       	rjmp	.+4      	; 0xb00e <vfprintf+0x540>
    b00a:	20 e1       	ldi	r18, 0x10	; 16
    b00c:	32 e0       	ldi	r19, 0x02	; 2
    b00e:	56 01       	movw	r10, r12
    b010:	07 ff       	sbrs	r16, 7
    b012:	09 c0       	rjmp	.+18     	; 0xb026 <vfprintf+0x558>
    b014:	84 e0       	ldi	r24, 0x04	; 4
    b016:	a8 0e       	add	r10, r24
    b018:	b1 1c       	adc	r11, r1
    b01a:	f6 01       	movw	r30, r12
    b01c:	60 81       	ld	r22, Z
    b01e:	71 81       	ldd	r23, Z+1	; 0x01
    b020:	82 81       	ldd	r24, Z+2	; 0x02
    b022:	93 81       	ldd	r25, Z+3	; 0x03
    b024:	08 c0       	rjmp	.+16     	; 0xb036 <vfprintf+0x568>
    b026:	f2 e0       	ldi	r31, 0x02	; 2
    b028:	af 0e       	add	r10, r31
    b02a:	b1 1c       	adc	r11, r1
    b02c:	f6 01       	movw	r30, r12
    b02e:	60 81       	ld	r22, Z
    b030:	71 81       	ldd	r23, Z+1	; 0x01
    b032:	80 e0       	ldi	r24, 0x00	; 0
    b034:	90 e0       	ldi	r25, 0x00	; 0
    b036:	a3 01       	movw	r20, r6
    b038:	5d d5       	rcall	.+2746   	; 0xbaf4 <__ultoa_invert>
    b03a:	c8 2e       	mov	r12, r24
    b03c:	c6 18       	sub	r12, r6
    b03e:	0f 77       	andi	r16, 0x7F	; 127
    b040:	90 2e       	mov	r9, r16
    b042:	96 fe       	sbrs	r9, 6
    b044:	0b c0       	rjmp	.+22     	; 0xb05c <vfprintf+0x58e>
    b046:	09 2d       	mov	r16, r9
    b048:	0e 7f       	andi	r16, 0xFE	; 254
    b04a:	c1 16       	cp	r12, r17
    b04c:	50 f4       	brcc	.+20     	; 0xb062 <vfprintf+0x594>
    b04e:	94 fe       	sbrs	r9, 4
    b050:	0a c0       	rjmp	.+20     	; 0xb066 <vfprintf+0x598>
    b052:	92 fc       	sbrc	r9, 2
    b054:	08 c0       	rjmp	.+16     	; 0xb066 <vfprintf+0x598>
    b056:	09 2d       	mov	r16, r9
    b058:	0e 7e       	andi	r16, 0xEE	; 238
    b05a:	05 c0       	rjmp	.+10     	; 0xb066 <vfprintf+0x598>
    b05c:	dc 2c       	mov	r13, r12
    b05e:	09 2d       	mov	r16, r9
    b060:	03 c0       	rjmp	.+6      	; 0xb068 <vfprintf+0x59a>
    b062:	dc 2c       	mov	r13, r12
    b064:	01 c0       	rjmp	.+2      	; 0xb068 <vfprintf+0x59a>
    b066:	d1 2e       	mov	r13, r17
    b068:	04 ff       	sbrs	r16, 4
    b06a:	0d c0       	rjmp	.+26     	; 0xb086 <vfprintf+0x5b8>
    b06c:	fe 01       	movw	r30, r28
    b06e:	ec 0d       	add	r30, r12
    b070:	f1 1d       	adc	r31, r1
    b072:	80 81       	ld	r24, Z
    b074:	80 33       	cpi	r24, 0x30	; 48
    b076:	11 f4       	brne	.+4      	; 0xb07c <vfprintf+0x5ae>
    b078:	09 7e       	andi	r16, 0xE9	; 233
    b07a:	09 c0       	rjmp	.+18     	; 0xb08e <vfprintf+0x5c0>
    b07c:	02 ff       	sbrs	r16, 2
    b07e:	06 c0       	rjmp	.+12     	; 0xb08c <vfprintf+0x5be>
    b080:	d3 94       	inc	r13
    b082:	d3 94       	inc	r13
    b084:	04 c0       	rjmp	.+8      	; 0xb08e <vfprintf+0x5c0>
    b086:	80 2f       	mov	r24, r16
    b088:	86 78       	andi	r24, 0x86	; 134
    b08a:	09 f0       	breq	.+2      	; 0xb08e <vfprintf+0x5c0>
    b08c:	d3 94       	inc	r13
    b08e:	03 fd       	sbrc	r16, 3
    b090:	10 c0       	rjmp	.+32     	; 0xb0b2 <vfprintf+0x5e4>
    b092:	00 ff       	sbrs	r16, 0
    b094:	06 c0       	rjmp	.+12     	; 0xb0a2 <vfprintf+0x5d4>
    b096:	1c 2d       	mov	r17, r12
    b098:	d5 14       	cp	r13, r5
    b09a:	78 f4       	brcc	.+30     	; 0xb0ba <vfprintf+0x5ec>
    b09c:	15 0d       	add	r17, r5
    b09e:	1d 19       	sub	r17, r13
    b0a0:	0c c0       	rjmp	.+24     	; 0xb0ba <vfprintf+0x5ec>
    b0a2:	d5 14       	cp	r13, r5
    b0a4:	50 f4       	brcc	.+20     	; 0xb0ba <vfprintf+0x5ec>
    b0a6:	b7 01       	movw	r22, r14
    b0a8:	80 e2       	ldi	r24, 0x20	; 32
    b0aa:	90 e0       	ldi	r25, 0x00	; 0
    b0ac:	7b d4       	rcall	.+2294   	; 0xb9a4 <fputc>
    b0ae:	d3 94       	inc	r13
    b0b0:	f8 cf       	rjmp	.-16     	; 0xb0a2 <vfprintf+0x5d4>
    b0b2:	d5 14       	cp	r13, r5
    b0b4:	10 f4       	brcc	.+4      	; 0xb0ba <vfprintf+0x5ec>
    b0b6:	5d 18       	sub	r5, r13
    b0b8:	01 c0       	rjmp	.+2      	; 0xb0bc <vfprintf+0x5ee>
    b0ba:	51 2c       	mov	r5, r1
    b0bc:	04 ff       	sbrs	r16, 4
    b0be:	0f c0       	rjmp	.+30     	; 0xb0de <vfprintf+0x610>
    b0c0:	b7 01       	movw	r22, r14
    b0c2:	80 e3       	ldi	r24, 0x30	; 48
    b0c4:	90 e0       	ldi	r25, 0x00	; 0
    b0c6:	6e d4       	rcall	.+2268   	; 0xb9a4 <fputc>
    b0c8:	02 ff       	sbrs	r16, 2
    b0ca:	16 c0       	rjmp	.+44     	; 0xb0f8 <vfprintf+0x62a>
    b0cc:	01 fd       	sbrc	r16, 1
    b0ce:	03 c0       	rjmp	.+6      	; 0xb0d6 <vfprintf+0x608>
    b0d0:	88 e7       	ldi	r24, 0x78	; 120
    b0d2:	90 e0       	ldi	r25, 0x00	; 0
    b0d4:	02 c0       	rjmp	.+4      	; 0xb0da <vfprintf+0x60c>
    b0d6:	88 e5       	ldi	r24, 0x58	; 88
    b0d8:	90 e0       	ldi	r25, 0x00	; 0
    b0da:	b7 01       	movw	r22, r14
    b0dc:	0c c0       	rjmp	.+24     	; 0xb0f6 <vfprintf+0x628>
    b0de:	80 2f       	mov	r24, r16
    b0e0:	86 78       	andi	r24, 0x86	; 134
    b0e2:	51 f0       	breq	.+20     	; 0xb0f8 <vfprintf+0x62a>
    b0e4:	01 ff       	sbrs	r16, 1
    b0e6:	02 c0       	rjmp	.+4      	; 0xb0ec <vfprintf+0x61e>
    b0e8:	8b e2       	ldi	r24, 0x2B	; 43
    b0ea:	01 c0       	rjmp	.+2      	; 0xb0ee <vfprintf+0x620>
    b0ec:	80 e2       	ldi	r24, 0x20	; 32
    b0ee:	07 fd       	sbrc	r16, 7
    b0f0:	8d e2       	ldi	r24, 0x2D	; 45
    b0f2:	b7 01       	movw	r22, r14
    b0f4:	90 e0       	ldi	r25, 0x00	; 0
    b0f6:	56 d4       	rcall	.+2220   	; 0xb9a4 <fputc>
    b0f8:	c1 16       	cp	r12, r17
    b0fa:	30 f4       	brcc	.+12     	; 0xb108 <vfprintf+0x63a>
    b0fc:	b7 01       	movw	r22, r14
    b0fe:	80 e3       	ldi	r24, 0x30	; 48
    b100:	90 e0       	ldi	r25, 0x00	; 0
    b102:	50 d4       	rcall	.+2208   	; 0xb9a4 <fputc>
    b104:	11 50       	subi	r17, 0x01	; 1
    b106:	f8 cf       	rjmp	.-16     	; 0xb0f8 <vfprintf+0x62a>
    b108:	ca 94       	dec	r12
    b10a:	f3 01       	movw	r30, r6
    b10c:	ec 0d       	add	r30, r12
    b10e:	f1 1d       	adc	r31, r1
    b110:	80 81       	ld	r24, Z
    b112:	b7 01       	movw	r22, r14
    b114:	90 e0       	ldi	r25, 0x00	; 0
    b116:	46 d4       	rcall	.+2188   	; 0xb9a4 <fputc>
    b118:	c1 10       	cpse	r12, r1
    b11a:	f6 cf       	rjmp	.-20     	; 0xb108 <vfprintf+0x63a>
    b11c:	15 c0       	rjmp	.+42     	; 0xb148 <vfprintf+0x67a>
    b11e:	f4 e0       	ldi	r31, 0x04	; 4
    b120:	f5 15       	cp	r31, r5
    b122:	50 f5       	brcc	.+84     	; 0xb178 <vfprintf+0x6aa>
    b124:	84 e0       	ldi	r24, 0x04	; 4
    b126:	58 1a       	sub	r5, r24
    b128:	93 fe       	sbrs	r9, 3
    b12a:	1e c0       	rjmp	.+60     	; 0xb168 <vfprintf+0x69a>
    b12c:	01 11       	cpse	r16, r1
    b12e:	25 c0       	rjmp	.+74     	; 0xb17a <vfprintf+0x6ac>
    b130:	2c 85       	ldd	r18, Y+12	; 0x0c
    b132:	23 ff       	sbrs	r18, 3
    b134:	27 c0       	rjmp	.+78     	; 0xb184 <vfprintf+0x6b6>
    b136:	06 e5       	ldi	r16, 0x56	; 86
    b138:	12 e0       	ldi	r17, 0x02	; 2
    b13a:	39 2d       	mov	r19, r9
    b13c:	30 71       	andi	r19, 0x10	; 16
    b13e:	93 2e       	mov	r9, r19
    b140:	f8 01       	movw	r30, r16
    b142:	84 91       	lpm	r24, Z
    b144:	81 11       	cpse	r24, r1
    b146:	21 c0       	rjmp	.+66     	; 0xb18a <vfprintf+0x6bc>
    b148:	55 20       	and	r5, r5
    b14a:	09 f4       	brne	.+2      	; 0xb14e <vfprintf+0x680>
    b14c:	fc cc       	rjmp	.-1544   	; 0xab46 <vfprintf+0x78>
    b14e:	b7 01       	movw	r22, r14
    b150:	80 e2       	ldi	r24, 0x20	; 32
    b152:	90 e0       	ldi	r25, 0x00	; 0
    b154:	27 d4       	rcall	.+2126   	; 0xb9a4 <fputc>
    b156:	5a 94       	dec	r5
    b158:	f7 cf       	rjmp	.-18     	; 0xb148 <vfprintf+0x67a>
    b15a:	f7 01       	movw	r30, r14
    b15c:	86 81       	ldd	r24, Z+6	; 0x06
    b15e:	97 81       	ldd	r25, Z+7	; 0x07
    b160:	23 c0       	rjmp	.+70     	; 0xb1a8 <vfprintf+0x6da>
    b162:	8f ef       	ldi	r24, 0xFF	; 255
    b164:	9f ef       	ldi	r25, 0xFF	; 255
    b166:	20 c0       	rjmp	.+64     	; 0xb1a8 <vfprintf+0x6da>
    b168:	b7 01       	movw	r22, r14
    b16a:	80 e2       	ldi	r24, 0x20	; 32
    b16c:	90 e0       	ldi	r25, 0x00	; 0
    b16e:	1a d4       	rcall	.+2100   	; 0xb9a4 <fputc>
    b170:	5a 94       	dec	r5
    b172:	51 10       	cpse	r5, r1
    b174:	f9 cf       	rjmp	.-14     	; 0xb168 <vfprintf+0x69a>
    b176:	da cf       	rjmp	.-76     	; 0xb12c <vfprintf+0x65e>
    b178:	51 2c       	mov	r5, r1
    b17a:	b7 01       	movw	r22, r14
    b17c:	80 2f       	mov	r24, r16
    b17e:	90 e0       	ldi	r25, 0x00	; 0
    b180:	11 d4       	rcall	.+2082   	; 0xb9a4 <fputc>
    b182:	d6 cf       	rjmp	.-84     	; 0xb130 <vfprintf+0x662>
    b184:	0a e5       	ldi	r16, 0x5A	; 90
    b186:	12 e0       	ldi	r17, 0x02	; 2
    b188:	d8 cf       	rjmp	.-80     	; 0xb13a <vfprintf+0x66c>
    b18a:	91 10       	cpse	r9, r1
    b18c:	80 52       	subi	r24, 0x20	; 32
    b18e:	b7 01       	movw	r22, r14
    b190:	90 e0       	ldi	r25, 0x00	; 0
    b192:	08 d4       	rcall	.+2064   	; 0xb9a4 <fputc>
    b194:	0f 5f       	subi	r16, 0xFF	; 255
    b196:	1f 4f       	sbci	r17, 0xFF	; 255
    b198:	d3 cf       	rjmp	.-90     	; 0xb140 <vfprintf+0x672>
    b19a:	23 e0       	ldi	r18, 0x03	; 3
    b19c:	25 15       	cp	r18, r5
    b19e:	10 f4       	brcc	.+4      	; 0xb1a4 <vfprintf+0x6d6>
    b1a0:	83 e0       	ldi	r24, 0x03	; 3
    b1a2:	c1 cf       	rjmp	.-126    	; 0xb126 <vfprintf+0x658>
    b1a4:	51 2c       	mov	r5, r1
    b1a6:	c4 cf       	rjmp	.-120    	; 0xb130 <vfprintf+0x662>
    b1a8:	60 96       	adiw	r28, 0x10	; 16
    b1aa:	cd bf       	out	0x3d, r28	; 61
    b1ac:	de bf       	out	0x3e, r29	; 62
    b1ae:	df 91       	pop	r29
    b1b0:	cf 91       	pop	r28
    b1b2:	1f 91       	pop	r17
    b1b4:	0f 91       	pop	r16
    b1b6:	ff 90       	pop	r15
    b1b8:	ef 90       	pop	r14
    b1ba:	df 90       	pop	r13
    b1bc:	cf 90       	pop	r12
    b1be:	bf 90       	pop	r11
    b1c0:	af 90       	pop	r10
    b1c2:	9f 90       	pop	r9
    b1c4:	8f 90       	pop	r8
    b1c6:	7f 90       	pop	r7
    b1c8:	6f 90       	pop	r6
    b1ca:	5f 90       	pop	r5
    b1cc:	4f 90       	pop	r4
    b1ce:	3f 90       	pop	r3
    b1d0:	2f 90       	pop	r2
    b1d2:	08 95       	ret

0000b1d4 <__mulsi3>:
    b1d4:	db 01       	movw	r26, r22
    b1d6:	8f 93       	push	r24
    b1d8:	9f 93       	push	r25
    b1da:	41 d0       	rcall	.+130    	; 0xb25e <__muluhisi3>
    b1dc:	bf 91       	pop	r27
    b1de:	af 91       	pop	r26
    b1e0:	a2 9f       	mul	r26, r18
    b1e2:	80 0d       	add	r24, r0
    b1e4:	91 1d       	adc	r25, r1
    b1e6:	a3 9f       	mul	r26, r19
    b1e8:	90 0d       	add	r25, r0
    b1ea:	b2 9f       	mul	r27, r18
    b1ec:	90 0d       	add	r25, r0
    b1ee:	11 24       	eor	r1, r1
    b1f0:	08 95       	ret

0000b1f2 <__udivmodhi4>:
    b1f2:	aa 1b       	sub	r26, r26
    b1f4:	bb 1b       	sub	r27, r27
    b1f6:	51 e1       	ldi	r21, 0x11	; 17
    b1f8:	07 c0       	rjmp	.+14     	; 0xb208 <__udivmodhi4_ep>

0000b1fa <__udivmodhi4_loop>:
    b1fa:	aa 1f       	adc	r26, r26
    b1fc:	bb 1f       	adc	r27, r27
    b1fe:	a6 17       	cp	r26, r22
    b200:	b7 07       	cpc	r27, r23
    b202:	10 f0       	brcs	.+4      	; 0xb208 <__udivmodhi4_ep>
    b204:	a6 1b       	sub	r26, r22
    b206:	b7 0b       	sbc	r27, r23

0000b208 <__udivmodhi4_ep>:
    b208:	88 1f       	adc	r24, r24
    b20a:	99 1f       	adc	r25, r25
    b20c:	5a 95       	dec	r21
    b20e:	a9 f7       	brne	.-22     	; 0xb1fa <__udivmodhi4_loop>
    b210:	80 95       	com	r24
    b212:	90 95       	com	r25
    b214:	bc 01       	movw	r22, r24
    b216:	cd 01       	movw	r24, r26
    b218:	08 95       	ret

0000b21a <__udivmodsi4>:
    b21a:	a1 e2       	ldi	r26, 0x21	; 33
    b21c:	1a 2e       	mov	r1, r26
    b21e:	aa 1b       	sub	r26, r26
    b220:	bb 1b       	sub	r27, r27
    b222:	fd 01       	movw	r30, r26
    b224:	0d c0       	rjmp	.+26     	; 0xb240 <__udivmodsi4_ep>

0000b226 <__udivmodsi4_loop>:
    b226:	aa 1f       	adc	r26, r26
    b228:	bb 1f       	adc	r27, r27
    b22a:	ee 1f       	adc	r30, r30
    b22c:	ff 1f       	adc	r31, r31
    b22e:	a2 17       	cp	r26, r18
    b230:	b3 07       	cpc	r27, r19
    b232:	e4 07       	cpc	r30, r20
    b234:	f5 07       	cpc	r31, r21
    b236:	20 f0       	brcs	.+8      	; 0xb240 <__udivmodsi4_ep>
    b238:	a2 1b       	sub	r26, r18
    b23a:	b3 0b       	sbc	r27, r19
    b23c:	e4 0b       	sbc	r30, r20
    b23e:	f5 0b       	sbc	r31, r21

0000b240 <__udivmodsi4_ep>:
    b240:	66 1f       	adc	r22, r22
    b242:	77 1f       	adc	r23, r23
    b244:	88 1f       	adc	r24, r24
    b246:	99 1f       	adc	r25, r25
    b248:	1a 94       	dec	r1
    b24a:	69 f7       	brne	.-38     	; 0xb226 <__udivmodsi4_loop>
    b24c:	60 95       	com	r22
    b24e:	70 95       	com	r23
    b250:	80 95       	com	r24
    b252:	90 95       	com	r25
    b254:	9b 01       	movw	r18, r22
    b256:	ac 01       	movw	r20, r24
    b258:	bd 01       	movw	r22, r26
    b25a:	cf 01       	movw	r24, r30
    b25c:	08 95       	ret

0000b25e <__muluhisi3>:
    b25e:	19 d1       	rcall	.+562    	; 0xb492 <__umulhisi3>
    b260:	a5 9f       	mul	r26, r21
    b262:	90 0d       	add	r25, r0
    b264:	b4 9f       	mul	r27, r20
    b266:	90 0d       	add	r25, r0
    b268:	a4 9f       	mul	r26, r20
    b26a:	80 0d       	add	r24, r0
    b26c:	91 1d       	adc	r25, r1
    b26e:	11 24       	eor	r1, r1
    b270:	08 95       	ret

0000b272 <__muldi3>:
    b272:	df 93       	push	r29
    b274:	cf 93       	push	r28
    b276:	1f 93       	push	r17
    b278:	0f 93       	push	r16
    b27a:	9a 9d       	mul	r25, r10
    b27c:	f0 2d       	mov	r31, r0
    b27e:	21 9f       	mul	r18, r17
    b280:	f0 0d       	add	r31, r0
    b282:	8b 9d       	mul	r24, r11
    b284:	f0 0d       	add	r31, r0
    b286:	8a 9d       	mul	r24, r10
    b288:	e0 2d       	mov	r30, r0
    b28a:	f1 0d       	add	r31, r1
    b28c:	03 9f       	mul	r16, r19
    b28e:	f0 0d       	add	r31, r0
    b290:	02 9f       	mul	r16, r18
    b292:	e0 0d       	add	r30, r0
    b294:	f1 1d       	adc	r31, r1
    b296:	4e 9d       	mul	r20, r14
    b298:	e0 0d       	add	r30, r0
    b29a:	f1 1d       	adc	r31, r1
    b29c:	5e 9d       	mul	r21, r14
    b29e:	f0 0d       	add	r31, r0
    b2a0:	4f 9d       	mul	r20, r15
    b2a2:	f0 0d       	add	r31, r0
    b2a4:	7f 93       	push	r23
    b2a6:	6f 93       	push	r22
    b2a8:	bf 92       	push	r11
    b2aa:	af 92       	push	r10
    b2ac:	5f 93       	push	r21
    b2ae:	4f 93       	push	r20
    b2b0:	d5 01       	movw	r26, r10
    b2b2:	ef d0       	rcall	.+478    	; 0xb492 <__umulhisi3>
    b2b4:	8b 01       	movw	r16, r22
    b2b6:	ac 01       	movw	r20, r24
    b2b8:	d7 01       	movw	r26, r14
    b2ba:	eb d0       	rcall	.+470    	; 0xb492 <__umulhisi3>
    b2bc:	eb 01       	movw	r28, r22
    b2be:	e8 0f       	add	r30, r24
    b2c0:	f9 1f       	adc	r31, r25
    b2c2:	d6 01       	movw	r26, r12
    b2c4:	1f d0       	rcall	.+62     	; 0xb304 <__muldi3_6>
    b2c6:	2f 91       	pop	r18
    b2c8:	3f 91       	pop	r19
    b2ca:	d6 01       	movw	r26, r12
    b2cc:	e2 d0       	rcall	.+452    	; 0xb492 <__umulhisi3>
    b2ce:	c6 0f       	add	r28, r22
    b2d0:	d7 1f       	adc	r29, r23
    b2d2:	e8 1f       	adc	r30, r24
    b2d4:	f9 1f       	adc	r31, r25
    b2d6:	af 91       	pop	r26
    b2d8:	bf 91       	pop	r27
    b2da:	14 d0       	rcall	.+40     	; 0xb304 <__muldi3_6>
    b2dc:	2f 91       	pop	r18
    b2de:	3f 91       	pop	r19
    b2e0:	d8 d0       	rcall	.+432    	; 0xb492 <__umulhisi3>
    b2e2:	c6 0f       	add	r28, r22
    b2e4:	d7 1f       	adc	r29, r23
    b2e6:	e8 1f       	adc	r30, r24
    b2e8:	f9 1f       	adc	r31, r25
    b2ea:	d6 01       	movw	r26, r12
    b2ec:	d2 d0       	rcall	.+420    	; 0xb492 <__umulhisi3>
    b2ee:	e6 0f       	add	r30, r22
    b2f0:	f7 1f       	adc	r31, r23
    b2f2:	98 01       	movw	r18, r16
    b2f4:	be 01       	movw	r22, r28
    b2f6:	cf 01       	movw	r24, r30
    b2f8:	11 24       	eor	r1, r1
    b2fa:	0f 91       	pop	r16
    b2fc:	1f 91       	pop	r17
    b2fe:	cf 91       	pop	r28
    b300:	df 91       	pop	r29
    b302:	08 95       	ret

0000b304 <__muldi3_6>:
    b304:	c6 d0       	rcall	.+396    	; 0xb492 <__umulhisi3>
    b306:	46 0f       	add	r20, r22
    b308:	57 1f       	adc	r21, r23
    b30a:	c8 1f       	adc	r28, r24
    b30c:	d9 1f       	adc	r29, r25
    b30e:	08 f4       	brcc	.+2      	; 0xb312 <__muldi3_6+0xe>
    b310:	31 96       	adiw	r30, 0x01	; 1
    b312:	08 95       	ret

0000b314 <__umoddi3>:
    b314:	68 94       	set
    b316:	01 c0       	rjmp	.+2      	; 0xb31a <__udivdi3_umoddi3>

0000b318 <__udivdi3>:
    b318:	e8 94       	clt

0000b31a <__udivdi3_umoddi3>:
    b31a:	8f 92       	push	r8
    b31c:	9f 92       	push	r9
    b31e:	cf 93       	push	r28
    b320:	df 93       	push	r29
    b322:	05 d0       	rcall	.+10     	; 0xb32e <__udivmod64>
    b324:	df 91       	pop	r29
    b326:	cf 91       	pop	r28
    b328:	9f 90       	pop	r9
    b32a:	8f 90       	pop	r8
    b32c:	08 95       	ret

0000b32e <__udivmod64>:
    b32e:	88 24       	eor	r8, r8
    b330:	99 24       	eor	r9, r9
    b332:	f4 01       	movw	r30, r8
    b334:	e4 01       	movw	r28, r8
    b336:	b0 e4       	ldi	r27, 0x40	; 64
    b338:	9f 93       	push	r25
    b33a:	aa 27       	eor	r26, r26
    b33c:	9a 15       	cp	r25, r10
    b33e:	8b 04       	cpc	r8, r11
    b340:	9c 04       	cpc	r9, r12
    b342:	ed 05       	cpc	r30, r13
    b344:	fe 05       	cpc	r31, r14
    b346:	cf 05       	cpc	r28, r15
    b348:	d0 07       	cpc	r29, r16
    b34a:	a1 07       	cpc	r26, r17
    b34c:	98 f4       	brcc	.+38     	; 0xb374 <__udivmod64+0x46>
    b34e:	ad 2f       	mov	r26, r29
    b350:	dc 2f       	mov	r29, r28
    b352:	cf 2f       	mov	r28, r31
    b354:	fe 2f       	mov	r31, r30
    b356:	e9 2d       	mov	r30, r9
    b358:	98 2c       	mov	r9, r8
    b35a:	89 2e       	mov	r8, r25
    b35c:	98 2f       	mov	r25, r24
    b35e:	87 2f       	mov	r24, r23
    b360:	76 2f       	mov	r23, r22
    b362:	65 2f       	mov	r22, r21
    b364:	54 2f       	mov	r21, r20
    b366:	43 2f       	mov	r20, r19
    b368:	32 2f       	mov	r19, r18
    b36a:	22 27       	eor	r18, r18
    b36c:	b8 50       	subi	r27, 0x08	; 8
    b36e:	31 f7       	brne	.-52     	; 0xb33c <__udivmod64+0xe>
    b370:	bf 91       	pop	r27
    b372:	27 c0       	rjmp	.+78     	; 0xb3c2 <__udivmod64+0x94>
    b374:	1b 2e       	mov	r1, r27
    b376:	bf 91       	pop	r27
    b378:	bb 27       	eor	r27, r27
    b37a:	22 0f       	add	r18, r18
    b37c:	33 1f       	adc	r19, r19
    b37e:	44 1f       	adc	r20, r20
    b380:	55 1f       	adc	r21, r21
    b382:	66 1f       	adc	r22, r22
    b384:	77 1f       	adc	r23, r23
    b386:	88 1f       	adc	r24, r24
    b388:	99 1f       	adc	r25, r25
    b38a:	88 1c       	adc	r8, r8
    b38c:	99 1c       	adc	r9, r9
    b38e:	ee 1f       	adc	r30, r30
    b390:	ff 1f       	adc	r31, r31
    b392:	cc 1f       	adc	r28, r28
    b394:	dd 1f       	adc	r29, r29
    b396:	aa 1f       	adc	r26, r26
    b398:	bb 1f       	adc	r27, r27
    b39a:	8a 14       	cp	r8, r10
    b39c:	9b 04       	cpc	r9, r11
    b39e:	ec 05       	cpc	r30, r12
    b3a0:	fd 05       	cpc	r31, r13
    b3a2:	ce 05       	cpc	r28, r14
    b3a4:	df 05       	cpc	r29, r15
    b3a6:	a0 07       	cpc	r26, r16
    b3a8:	b1 07       	cpc	r27, r17
    b3aa:	48 f0       	brcs	.+18     	; 0xb3be <__udivmod64+0x90>
    b3ac:	8a 18       	sub	r8, r10
    b3ae:	9b 08       	sbc	r9, r11
    b3b0:	ec 09       	sbc	r30, r12
    b3b2:	fd 09       	sbc	r31, r13
    b3b4:	ce 09       	sbc	r28, r14
    b3b6:	df 09       	sbc	r29, r15
    b3b8:	a0 0b       	sbc	r26, r16
    b3ba:	b1 0b       	sbc	r27, r17
    b3bc:	21 60       	ori	r18, 0x01	; 1
    b3be:	1a 94       	dec	r1
    b3c0:	e1 f6       	brne	.-72     	; 0xb37a <__udivmod64+0x4c>
    b3c2:	2e f4       	brtc	.+10     	; 0xb3ce <__udivmod64+0xa0>
    b3c4:	94 01       	movw	r18, r8
    b3c6:	af 01       	movw	r20, r30
    b3c8:	be 01       	movw	r22, r28
    b3ca:	cd 01       	movw	r24, r26
    b3cc:	00 0c       	add	r0, r0
    b3ce:	08 95       	ret

0000b3d0 <__ashldi3>:
    b3d0:	0f 93       	push	r16
    b3d2:	08 30       	cpi	r16, 0x08	; 8
    b3d4:	90 f0       	brcs	.+36     	; 0xb3fa <__ashldi3+0x2a>
    b3d6:	98 2f       	mov	r25, r24
    b3d8:	87 2f       	mov	r24, r23
    b3da:	76 2f       	mov	r23, r22
    b3dc:	65 2f       	mov	r22, r21
    b3de:	54 2f       	mov	r21, r20
    b3e0:	43 2f       	mov	r20, r19
    b3e2:	32 2f       	mov	r19, r18
    b3e4:	22 27       	eor	r18, r18
    b3e6:	08 50       	subi	r16, 0x08	; 8
    b3e8:	f4 cf       	rjmp	.-24     	; 0xb3d2 <__ashldi3+0x2>
    b3ea:	22 0f       	add	r18, r18
    b3ec:	33 1f       	adc	r19, r19
    b3ee:	44 1f       	adc	r20, r20
    b3f0:	55 1f       	adc	r21, r21
    b3f2:	66 1f       	adc	r22, r22
    b3f4:	77 1f       	adc	r23, r23
    b3f6:	88 1f       	adc	r24, r24
    b3f8:	99 1f       	adc	r25, r25
    b3fa:	0a 95       	dec	r16
    b3fc:	b2 f7       	brpl	.-20     	; 0xb3ea <__ashldi3+0x1a>
    b3fe:	0f 91       	pop	r16
    b400:	08 95       	ret

0000b402 <__ashrdi3>:
    b402:	97 fb       	bst	r25, 7
    b404:	10 f8       	bld	r1, 0

0000b406 <__lshrdi3>:
    b406:	16 94       	lsr	r1
    b408:	00 08       	sbc	r0, r0
    b40a:	0f 93       	push	r16
    b40c:	08 30       	cpi	r16, 0x08	; 8
    b40e:	98 f0       	brcs	.+38     	; 0xb436 <__lshrdi3+0x30>
    b410:	08 50       	subi	r16, 0x08	; 8
    b412:	23 2f       	mov	r18, r19
    b414:	34 2f       	mov	r19, r20
    b416:	45 2f       	mov	r20, r21
    b418:	56 2f       	mov	r21, r22
    b41a:	67 2f       	mov	r22, r23
    b41c:	78 2f       	mov	r23, r24
    b41e:	89 2f       	mov	r24, r25
    b420:	90 2d       	mov	r25, r0
    b422:	f4 cf       	rjmp	.-24     	; 0xb40c <__lshrdi3+0x6>
    b424:	05 94       	asr	r0
    b426:	97 95       	ror	r25
    b428:	87 95       	ror	r24
    b42a:	77 95       	ror	r23
    b42c:	67 95       	ror	r22
    b42e:	57 95       	ror	r21
    b430:	47 95       	ror	r20
    b432:	37 95       	ror	r19
    b434:	27 95       	ror	r18
    b436:	0a 95       	dec	r16
    b438:	aa f7       	brpl	.-22     	; 0xb424 <__lshrdi3+0x1e>
    b43a:	0f 91       	pop	r16
    b43c:	08 95       	ret

0000b43e <__adddi3>:
    b43e:	2a 0d       	add	r18, r10
    b440:	3b 1d       	adc	r19, r11
    b442:	4c 1d       	adc	r20, r12
    b444:	5d 1d       	adc	r21, r13
    b446:	6e 1d       	adc	r22, r14
    b448:	7f 1d       	adc	r23, r15
    b44a:	80 1f       	adc	r24, r16
    b44c:	91 1f       	adc	r25, r17
    b44e:	08 95       	ret

0000b450 <__adddi3_s8>:
    b450:	00 24       	eor	r0, r0
    b452:	a7 fd       	sbrc	r26, 7
    b454:	00 94       	com	r0
    b456:	2a 0f       	add	r18, r26
    b458:	30 1d       	adc	r19, r0
    b45a:	40 1d       	adc	r20, r0
    b45c:	50 1d       	adc	r21, r0
    b45e:	60 1d       	adc	r22, r0
    b460:	70 1d       	adc	r23, r0
    b462:	80 1d       	adc	r24, r0
    b464:	90 1d       	adc	r25, r0
    b466:	08 95       	ret

0000b468 <__subdi3>:
    b468:	2a 19       	sub	r18, r10
    b46a:	3b 09       	sbc	r19, r11
    b46c:	4c 09       	sbc	r20, r12
    b46e:	5d 09       	sbc	r21, r13
    b470:	6e 09       	sbc	r22, r14
    b472:	7f 09       	sbc	r23, r15
    b474:	80 0b       	sbc	r24, r16
    b476:	91 0b       	sbc	r25, r17
    b478:	08 95       	ret

0000b47a <__cmpdi2_s8>:
    b47a:	00 24       	eor	r0, r0
    b47c:	a7 fd       	sbrc	r26, 7
    b47e:	00 94       	com	r0
    b480:	2a 17       	cp	r18, r26
    b482:	30 05       	cpc	r19, r0
    b484:	40 05       	cpc	r20, r0
    b486:	50 05       	cpc	r21, r0
    b488:	60 05       	cpc	r22, r0
    b48a:	70 05       	cpc	r23, r0
    b48c:	80 05       	cpc	r24, r0
    b48e:	90 05       	cpc	r25, r0
    b490:	08 95       	ret

0000b492 <__umulhisi3>:
    b492:	a2 9f       	mul	r26, r18
    b494:	b0 01       	movw	r22, r0
    b496:	b3 9f       	mul	r27, r19
    b498:	c0 01       	movw	r24, r0
    b49a:	a3 9f       	mul	r26, r19
    b49c:	70 0d       	add	r23, r0
    b49e:	81 1d       	adc	r24, r1
    b4a0:	11 24       	eor	r1, r1
    b4a2:	91 1d       	adc	r25, r1
    b4a4:	b2 9f       	mul	r27, r18
    b4a6:	70 0d       	add	r23, r0
    b4a8:	81 1d       	adc	r24, r1
    b4aa:	11 24       	eor	r1, r1
    b4ac:	91 1d       	adc	r25, r1
    b4ae:	08 95       	ret

0000b4b0 <malloc>:
    b4b0:	0f 93       	push	r16
    b4b2:	1f 93       	push	r17
    b4b4:	cf 93       	push	r28
    b4b6:	df 93       	push	r29
    b4b8:	82 30       	cpi	r24, 0x02	; 2
    b4ba:	91 05       	cpc	r25, r1
    b4bc:	10 f4       	brcc	.+4      	; 0xb4c2 <malloc+0x12>
    b4be:	82 e0       	ldi	r24, 0x02	; 2
    b4c0:	90 e0       	ldi	r25, 0x00	; 0
    b4c2:	e0 91 eb 27 	lds	r30, 0x27EB	; 0x8027eb <__flp>
    b4c6:	f0 91 ec 27 	lds	r31, 0x27EC	; 0x8027ec <__flp+0x1>
    b4ca:	20 e0       	ldi	r18, 0x00	; 0
    b4cc:	30 e0       	ldi	r19, 0x00	; 0
    b4ce:	a0 e0       	ldi	r26, 0x00	; 0
    b4d0:	b0 e0       	ldi	r27, 0x00	; 0
    b4d2:	30 97       	sbiw	r30, 0x00	; 0
    b4d4:	19 f1       	breq	.+70     	; 0xb51c <malloc+0x6c>
    b4d6:	40 81       	ld	r20, Z
    b4d8:	51 81       	ldd	r21, Z+1	; 0x01
    b4da:	02 81       	ldd	r16, Z+2	; 0x02
    b4dc:	13 81       	ldd	r17, Z+3	; 0x03
    b4de:	48 17       	cp	r20, r24
    b4e0:	59 07       	cpc	r21, r25
    b4e2:	c8 f0       	brcs	.+50     	; 0xb516 <malloc+0x66>
    b4e4:	84 17       	cp	r24, r20
    b4e6:	95 07       	cpc	r25, r21
    b4e8:	69 f4       	brne	.+26     	; 0xb504 <malloc+0x54>
    b4ea:	10 97       	sbiw	r26, 0x00	; 0
    b4ec:	31 f0       	breq	.+12     	; 0xb4fa <malloc+0x4a>
    b4ee:	12 96       	adiw	r26, 0x02	; 2
    b4f0:	0c 93       	st	X, r16
    b4f2:	12 97       	sbiw	r26, 0x02	; 2
    b4f4:	13 96       	adiw	r26, 0x03	; 3
    b4f6:	1c 93       	st	X, r17
    b4f8:	27 c0       	rjmp	.+78     	; 0xb548 <malloc+0x98>
    b4fa:	00 93 eb 27 	sts	0x27EB, r16	; 0x8027eb <__flp>
    b4fe:	10 93 ec 27 	sts	0x27EC, r17	; 0x8027ec <__flp+0x1>
    b502:	22 c0       	rjmp	.+68     	; 0xb548 <malloc+0x98>
    b504:	21 15       	cp	r18, r1
    b506:	31 05       	cpc	r19, r1
    b508:	19 f0       	breq	.+6      	; 0xb510 <malloc+0x60>
    b50a:	42 17       	cp	r20, r18
    b50c:	53 07       	cpc	r21, r19
    b50e:	18 f4       	brcc	.+6      	; 0xb516 <malloc+0x66>
    b510:	9a 01       	movw	r18, r20
    b512:	bd 01       	movw	r22, r26
    b514:	ef 01       	movw	r28, r30
    b516:	df 01       	movw	r26, r30
    b518:	f8 01       	movw	r30, r16
    b51a:	db cf       	rjmp	.-74     	; 0xb4d2 <malloc+0x22>
    b51c:	21 15       	cp	r18, r1
    b51e:	31 05       	cpc	r19, r1
    b520:	f9 f0       	breq	.+62     	; 0xb560 <malloc+0xb0>
    b522:	28 1b       	sub	r18, r24
    b524:	39 0b       	sbc	r19, r25
    b526:	24 30       	cpi	r18, 0x04	; 4
    b528:	31 05       	cpc	r19, r1
    b52a:	80 f4       	brcc	.+32     	; 0xb54c <malloc+0x9c>
    b52c:	8a 81       	ldd	r24, Y+2	; 0x02
    b52e:	9b 81       	ldd	r25, Y+3	; 0x03
    b530:	61 15       	cp	r22, r1
    b532:	71 05       	cpc	r23, r1
    b534:	21 f0       	breq	.+8      	; 0xb53e <malloc+0x8e>
    b536:	fb 01       	movw	r30, r22
    b538:	82 83       	std	Z+2, r24	; 0x02
    b53a:	93 83       	std	Z+3, r25	; 0x03
    b53c:	04 c0       	rjmp	.+8      	; 0xb546 <malloc+0x96>
    b53e:	80 93 eb 27 	sts	0x27EB, r24	; 0x8027eb <__flp>
    b542:	90 93 ec 27 	sts	0x27EC, r25	; 0x8027ec <__flp+0x1>
    b546:	fe 01       	movw	r30, r28
    b548:	32 96       	adiw	r30, 0x02	; 2
    b54a:	44 c0       	rjmp	.+136    	; 0xb5d4 <malloc+0x124>
    b54c:	fe 01       	movw	r30, r28
    b54e:	e2 0f       	add	r30, r18
    b550:	f3 1f       	adc	r31, r19
    b552:	81 93       	st	Z+, r24
    b554:	91 93       	st	Z+, r25
    b556:	22 50       	subi	r18, 0x02	; 2
    b558:	31 09       	sbc	r19, r1
    b55a:	28 83       	st	Y, r18
    b55c:	39 83       	std	Y+1, r19	; 0x01
    b55e:	3a c0       	rjmp	.+116    	; 0xb5d4 <malloc+0x124>
    b560:	20 91 e9 27 	lds	r18, 0x27E9	; 0x8027e9 <__brkval>
    b564:	30 91 ea 27 	lds	r19, 0x27EA	; 0x8027ea <__brkval+0x1>
    b568:	23 2b       	or	r18, r19
    b56a:	41 f4       	brne	.+16     	; 0xb57c <malloc+0xcc>
    b56c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    b570:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    b574:	20 93 e9 27 	sts	0x27E9, r18	; 0x8027e9 <__brkval>
    b578:	30 93 ea 27 	sts	0x27EA, r19	; 0x8027ea <__brkval+0x1>
    b57c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    b580:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    b584:	21 15       	cp	r18, r1
    b586:	31 05       	cpc	r19, r1
    b588:	41 f4       	brne	.+16     	; 0xb59a <malloc+0xea>
    b58a:	2d b7       	in	r18, 0x3d	; 61
    b58c:	3e b7       	in	r19, 0x3e	; 62
    b58e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    b592:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    b596:	24 1b       	sub	r18, r20
    b598:	35 0b       	sbc	r19, r21
    b59a:	e0 91 e9 27 	lds	r30, 0x27E9	; 0x8027e9 <__brkval>
    b59e:	f0 91 ea 27 	lds	r31, 0x27EA	; 0x8027ea <__brkval+0x1>
    b5a2:	e2 17       	cp	r30, r18
    b5a4:	f3 07       	cpc	r31, r19
    b5a6:	a0 f4       	brcc	.+40     	; 0xb5d0 <malloc+0x120>
    b5a8:	2e 1b       	sub	r18, r30
    b5aa:	3f 0b       	sbc	r19, r31
    b5ac:	28 17       	cp	r18, r24
    b5ae:	39 07       	cpc	r19, r25
    b5b0:	78 f0       	brcs	.+30     	; 0xb5d0 <malloc+0x120>
    b5b2:	ac 01       	movw	r20, r24
    b5b4:	4e 5f       	subi	r20, 0xFE	; 254
    b5b6:	5f 4f       	sbci	r21, 0xFF	; 255
    b5b8:	24 17       	cp	r18, r20
    b5ba:	35 07       	cpc	r19, r21
    b5bc:	48 f0       	brcs	.+18     	; 0xb5d0 <malloc+0x120>
    b5be:	4e 0f       	add	r20, r30
    b5c0:	5f 1f       	adc	r21, r31
    b5c2:	40 93 e9 27 	sts	0x27E9, r20	; 0x8027e9 <__brkval>
    b5c6:	50 93 ea 27 	sts	0x27EA, r21	; 0x8027ea <__brkval+0x1>
    b5ca:	81 93       	st	Z+, r24
    b5cc:	91 93       	st	Z+, r25
    b5ce:	02 c0       	rjmp	.+4      	; 0xb5d4 <malloc+0x124>
    b5d0:	e0 e0       	ldi	r30, 0x00	; 0
    b5d2:	f0 e0       	ldi	r31, 0x00	; 0
    b5d4:	cf 01       	movw	r24, r30
    b5d6:	df 91       	pop	r29
    b5d8:	cf 91       	pop	r28
    b5da:	1f 91       	pop	r17
    b5dc:	0f 91       	pop	r16
    b5de:	08 95       	ret

0000b5e0 <free>:
    b5e0:	cf 93       	push	r28
    b5e2:	df 93       	push	r29
    b5e4:	00 97       	sbiw	r24, 0x00	; 0
    b5e6:	09 f4       	brne	.+2      	; 0xb5ea <free+0xa>
    b5e8:	81 c0       	rjmp	.+258    	; 0xb6ec <free+0x10c>
    b5ea:	fc 01       	movw	r30, r24
    b5ec:	32 97       	sbiw	r30, 0x02	; 2
    b5ee:	12 82       	std	Z+2, r1	; 0x02
    b5f0:	13 82       	std	Z+3, r1	; 0x03
    b5f2:	a0 91 eb 27 	lds	r26, 0x27EB	; 0x8027eb <__flp>
    b5f6:	b0 91 ec 27 	lds	r27, 0x27EC	; 0x8027ec <__flp+0x1>
    b5fa:	10 97       	sbiw	r26, 0x00	; 0
    b5fc:	81 f4       	brne	.+32     	; 0xb61e <free+0x3e>
    b5fe:	20 81       	ld	r18, Z
    b600:	31 81       	ldd	r19, Z+1	; 0x01
    b602:	82 0f       	add	r24, r18
    b604:	93 1f       	adc	r25, r19
    b606:	20 91 e9 27 	lds	r18, 0x27E9	; 0x8027e9 <__brkval>
    b60a:	30 91 ea 27 	lds	r19, 0x27EA	; 0x8027ea <__brkval+0x1>
    b60e:	28 17       	cp	r18, r24
    b610:	39 07       	cpc	r19, r25
    b612:	51 f5       	brne	.+84     	; 0xb668 <free+0x88>
    b614:	e0 93 e9 27 	sts	0x27E9, r30	; 0x8027e9 <__brkval>
    b618:	f0 93 ea 27 	sts	0x27EA, r31	; 0x8027ea <__brkval+0x1>
    b61c:	67 c0       	rjmp	.+206    	; 0xb6ec <free+0x10c>
    b61e:	ed 01       	movw	r28, r26
    b620:	20 e0       	ldi	r18, 0x00	; 0
    b622:	30 e0       	ldi	r19, 0x00	; 0
    b624:	ce 17       	cp	r28, r30
    b626:	df 07       	cpc	r29, r31
    b628:	40 f4       	brcc	.+16     	; 0xb63a <free+0x5a>
    b62a:	4a 81       	ldd	r20, Y+2	; 0x02
    b62c:	5b 81       	ldd	r21, Y+3	; 0x03
    b62e:	9e 01       	movw	r18, r28
    b630:	41 15       	cp	r20, r1
    b632:	51 05       	cpc	r21, r1
    b634:	f1 f0       	breq	.+60     	; 0xb672 <free+0x92>
    b636:	ea 01       	movw	r28, r20
    b638:	f5 cf       	rjmp	.-22     	; 0xb624 <free+0x44>
    b63a:	c2 83       	std	Z+2, r28	; 0x02
    b63c:	d3 83       	std	Z+3, r29	; 0x03
    b63e:	40 81       	ld	r20, Z
    b640:	51 81       	ldd	r21, Z+1	; 0x01
    b642:	84 0f       	add	r24, r20
    b644:	95 1f       	adc	r25, r21
    b646:	c8 17       	cp	r28, r24
    b648:	d9 07       	cpc	r29, r25
    b64a:	59 f4       	brne	.+22     	; 0xb662 <free+0x82>
    b64c:	88 81       	ld	r24, Y
    b64e:	99 81       	ldd	r25, Y+1	; 0x01
    b650:	84 0f       	add	r24, r20
    b652:	95 1f       	adc	r25, r21
    b654:	02 96       	adiw	r24, 0x02	; 2
    b656:	80 83       	st	Z, r24
    b658:	91 83       	std	Z+1, r25	; 0x01
    b65a:	8a 81       	ldd	r24, Y+2	; 0x02
    b65c:	9b 81       	ldd	r25, Y+3	; 0x03
    b65e:	82 83       	std	Z+2, r24	; 0x02
    b660:	93 83       	std	Z+3, r25	; 0x03
    b662:	21 15       	cp	r18, r1
    b664:	31 05       	cpc	r19, r1
    b666:	29 f4       	brne	.+10     	; 0xb672 <free+0x92>
    b668:	e0 93 eb 27 	sts	0x27EB, r30	; 0x8027eb <__flp>
    b66c:	f0 93 ec 27 	sts	0x27EC, r31	; 0x8027ec <__flp+0x1>
    b670:	3d c0       	rjmp	.+122    	; 0xb6ec <free+0x10c>
    b672:	e9 01       	movw	r28, r18
    b674:	ea 83       	std	Y+2, r30	; 0x02
    b676:	fb 83       	std	Y+3, r31	; 0x03
    b678:	49 91       	ld	r20, Y+
    b67a:	59 91       	ld	r21, Y+
    b67c:	c4 0f       	add	r28, r20
    b67e:	d5 1f       	adc	r29, r21
    b680:	ec 17       	cp	r30, r28
    b682:	fd 07       	cpc	r31, r29
    b684:	61 f4       	brne	.+24     	; 0xb69e <free+0xbe>
    b686:	80 81       	ld	r24, Z
    b688:	91 81       	ldd	r25, Z+1	; 0x01
    b68a:	84 0f       	add	r24, r20
    b68c:	95 1f       	adc	r25, r21
    b68e:	02 96       	adiw	r24, 0x02	; 2
    b690:	e9 01       	movw	r28, r18
    b692:	88 83       	st	Y, r24
    b694:	99 83       	std	Y+1, r25	; 0x01
    b696:	82 81       	ldd	r24, Z+2	; 0x02
    b698:	93 81       	ldd	r25, Z+3	; 0x03
    b69a:	8a 83       	std	Y+2, r24	; 0x02
    b69c:	9b 83       	std	Y+3, r25	; 0x03
    b69e:	e0 e0       	ldi	r30, 0x00	; 0
    b6a0:	f0 e0       	ldi	r31, 0x00	; 0
    b6a2:	12 96       	adiw	r26, 0x02	; 2
    b6a4:	8d 91       	ld	r24, X+
    b6a6:	9c 91       	ld	r25, X
    b6a8:	13 97       	sbiw	r26, 0x03	; 3
    b6aa:	00 97       	sbiw	r24, 0x00	; 0
    b6ac:	19 f0       	breq	.+6      	; 0xb6b4 <free+0xd4>
    b6ae:	fd 01       	movw	r30, r26
    b6b0:	dc 01       	movw	r26, r24
    b6b2:	f7 cf       	rjmp	.-18     	; 0xb6a2 <free+0xc2>
    b6b4:	8d 91       	ld	r24, X+
    b6b6:	9c 91       	ld	r25, X
    b6b8:	11 97       	sbiw	r26, 0x01	; 1
    b6ba:	9d 01       	movw	r18, r26
    b6bc:	2e 5f       	subi	r18, 0xFE	; 254
    b6be:	3f 4f       	sbci	r19, 0xFF	; 255
    b6c0:	82 0f       	add	r24, r18
    b6c2:	93 1f       	adc	r25, r19
    b6c4:	20 91 e9 27 	lds	r18, 0x27E9	; 0x8027e9 <__brkval>
    b6c8:	30 91 ea 27 	lds	r19, 0x27EA	; 0x8027ea <__brkval+0x1>
    b6cc:	28 17       	cp	r18, r24
    b6ce:	39 07       	cpc	r19, r25
    b6d0:	69 f4       	brne	.+26     	; 0xb6ec <free+0x10c>
    b6d2:	30 97       	sbiw	r30, 0x00	; 0
    b6d4:	29 f4       	brne	.+10     	; 0xb6e0 <free+0x100>
    b6d6:	10 92 eb 27 	sts	0x27EB, r1	; 0x8027eb <__flp>
    b6da:	10 92 ec 27 	sts	0x27EC, r1	; 0x8027ec <__flp+0x1>
    b6de:	02 c0       	rjmp	.+4      	; 0xb6e4 <free+0x104>
    b6e0:	12 82       	std	Z+2, r1	; 0x02
    b6e2:	13 82       	std	Z+3, r1	; 0x03
    b6e4:	a0 93 e9 27 	sts	0x27E9, r26	; 0x8027e9 <__brkval>
    b6e8:	b0 93 ea 27 	sts	0x27EA, r27	; 0x8027ea <__brkval+0x1>
    b6ec:	df 91       	pop	r29
    b6ee:	cf 91       	pop	r28
    b6f0:	08 95       	ret

0000b6f2 <__ftoa_engine>:
    b6f2:	28 30       	cpi	r18, 0x08	; 8
    b6f4:	08 f0       	brcs	.+2      	; 0xb6f8 <__ftoa_engine+0x6>
    b6f6:	27 e0       	ldi	r18, 0x07	; 7
    b6f8:	33 27       	eor	r19, r19
    b6fa:	da 01       	movw	r26, r20
    b6fc:	99 0f       	add	r25, r25
    b6fe:	31 1d       	adc	r19, r1
    b700:	87 fd       	sbrc	r24, 7
    b702:	91 60       	ori	r25, 0x01	; 1
    b704:	00 96       	adiw	r24, 0x00	; 0
    b706:	61 05       	cpc	r22, r1
    b708:	71 05       	cpc	r23, r1
    b70a:	39 f4       	brne	.+14     	; 0xb71a <__ftoa_engine+0x28>
    b70c:	32 60       	ori	r19, 0x02	; 2
    b70e:	2e 5f       	subi	r18, 0xFE	; 254
    b710:	3d 93       	st	X+, r19
    b712:	30 e3       	ldi	r19, 0x30	; 48
    b714:	2a 95       	dec	r18
    b716:	e1 f7       	brne	.-8      	; 0xb710 <__ftoa_engine+0x1e>
    b718:	08 95       	ret
    b71a:	9f 3f       	cpi	r25, 0xFF	; 255
    b71c:	30 f0       	brcs	.+12     	; 0xb72a <__ftoa_engine+0x38>
    b71e:	80 38       	cpi	r24, 0x80	; 128
    b720:	71 05       	cpc	r23, r1
    b722:	61 05       	cpc	r22, r1
    b724:	09 f0       	breq	.+2      	; 0xb728 <__ftoa_engine+0x36>
    b726:	3c 5f       	subi	r19, 0xFC	; 252
    b728:	3c 5f       	subi	r19, 0xFC	; 252
    b72a:	3d 93       	st	X+, r19
    b72c:	91 30       	cpi	r25, 0x01	; 1
    b72e:	08 f0       	brcs	.+2      	; 0xb732 <__ftoa_engine+0x40>
    b730:	80 68       	ori	r24, 0x80	; 128
    b732:	91 1d       	adc	r25, r1
    b734:	df 93       	push	r29
    b736:	cf 93       	push	r28
    b738:	1f 93       	push	r17
    b73a:	0f 93       	push	r16
    b73c:	ff 92       	push	r15
    b73e:	ef 92       	push	r14
    b740:	19 2f       	mov	r17, r25
    b742:	98 7f       	andi	r25, 0xF8	; 248
    b744:	96 95       	lsr	r25
    b746:	e9 2f       	mov	r30, r25
    b748:	96 95       	lsr	r25
    b74a:	96 95       	lsr	r25
    b74c:	e9 0f       	add	r30, r25
    b74e:	ff 27       	eor	r31, r31
    b750:	e8 54       	subi	r30, 0x48	; 72
    b752:	fd 4f       	sbci	r31, 0xFD	; 253
    b754:	99 27       	eor	r25, r25
    b756:	33 27       	eor	r19, r19
    b758:	ee 24       	eor	r14, r14
    b75a:	ff 24       	eor	r15, r15
    b75c:	a7 01       	movw	r20, r14
    b75e:	e7 01       	movw	r28, r14
    b760:	05 90       	lpm	r0, Z+
    b762:	08 94       	sec
    b764:	07 94       	ror	r0
    b766:	28 f4       	brcc	.+10     	; 0xb772 <__ftoa_engine+0x80>
    b768:	36 0f       	add	r19, r22
    b76a:	e7 1e       	adc	r14, r23
    b76c:	f8 1e       	adc	r15, r24
    b76e:	49 1f       	adc	r20, r25
    b770:	51 1d       	adc	r21, r1
    b772:	66 0f       	add	r22, r22
    b774:	77 1f       	adc	r23, r23
    b776:	88 1f       	adc	r24, r24
    b778:	99 1f       	adc	r25, r25
    b77a:	06 94       	lsr	r0
    b77c:	a1 f7       	brne	.-24     	; 0xb766 <__ftoa_engine+0x74>
    b77e:	05 90       	lpm	r0, Z+
    b780:	07 94       	ror	r0
    b782:	28 f4       	brcc	.+10     	; 0xb78e <__ftoa_engine+0x9c>
    b784:	e7 0e       	add	r14, r23
    b786:	f8 1e       	adc	r15, r24
    b788:	49 1f       	adc	r20, r25
    b78a:	56 1f       	adc	r21, r22
    b78c:	c1 1d       	adc	r28, r1
    b78e:	77 0f       	add	r23, r23
    b790:	88 1f       	adc	r24, r24
    b792:	99 1f       	adc	r25, r25
    b794:	66 1f       	adc	r22, r22
    b796:	06 94       	lsr	r0
    b798:	a1 f7       	brne	.-24     	; 0xb782 <__ftoa_engine+0x90>
    b79a:	05 90       	lpm	r0, Z+
    b79c:	07 94       	ror	r0
    b79e:	28 f4       	brcc	.+10     	; 0xb7aa <__ftoa_engine+0xb8>
    b7a0:	f8 0e       	add	r15, r24
    b7a2:	49 1f       	adc	r20, r25
    b7a4:	56 1f       	adc	r21, r22
    b7a6:	c7 1f       	adc	r28, r23
    b7a8:	d1 1d       	adc	r29, r1
    b7aa:	88 0f       	add	r24, r24
    b7ac:	99 1f       	adc	r25, r25
    b7ae:	66 1f       	adc	r22, r22
    b7b0:	77 1f       	adc	r23, r23
    b7b2:	06 94       	lsr	r0
    b7b4:	a1 f7       	brne	.-24     	; 0xb79e <__ftoa_engine+0xac>
    b7b6:	05 90       	lpm	r0, Z+
    b7b8:	07 94       	ror	r0
    b7ba:	20 f4       	brcc	.+8      	; 0xb7c4 <__ftoa_engine+0xd2>
    b7bc:	49 0f       	add	r20, r25
    b7be:	56 1f       	adc	r21, r22
    b7c0:	c7 1f       	adc	r28, r23
    b7c2:	d8 1f       	adc	r29, r24
    b7c4:	99 0f       	add	r25, r25
    b7c6:	66 1f       	adc	r22, r22
    b7c8:	77 1f       	adc	r23, r23
    b7ca:	88 1f       	adc	r24, r24
    b7cc:	06 94       	lsr	r0
    b7ce:	a9 f7       	brne	.-22     	; 0xb7ba <__ftoa_engine+0xc8>
    b7d0:	84 91       	lpm	r24, Z
    b7d2:	10 95       	com	r17
    b7d4:	17 70       	andi	r17, 0x07	; 7
    b7d6:	41 f0       	breq	.+16     	; 0xb7e8 <__ftoa_engine+0xf6>
    b7d8:	d6 95       	lsr	r29
    b7da:	c7 95       	ror	r28
    b7dc:	57 95       	ror	r21
    b7de:	47 95       	ror	r20
    b7e0:	f7 94       	ror	r15
    b7e2:	e7 94       	ror	r14
    b7e4:	1a 95       	dec	r17
    b7e6:	c1 f7       	brne	.-16     	; 0xb7d8 <__ftoa_engine+0xe6>
    b7e8:	ee e5       	ldi	r30, 0x5E	; 94
    b7ea:	f2 e0       	ldi	r31, 0x02	; 2
    b7ec:	68 94       	set
    b7ee:	15 90       	lpm	r1, Z+
    b7f0:	15 91       	lpm	r17, Z+
    b7f2:	35 91       	lpm	r19, Z+
    b7f4:	65 91       	lpm	r22, Z+
    b7f6:	95 91       	lpm	r25, Z+
    b7f8:	05 90       	lpm	r0, Z+
    b7fa:	7f e2       	ldi	r23, 0x2F	; 47
    b7fc:	73 95       	inc	r23
    b7fe:	e1 18       	sub	r14, r1
    b800:	f1 0a       	sbc	r15, r17
    b802:	43 0b       	sbc	r20, r19
    b804:	56 0b       	sbc	r21, r22
    b806:	c9 0b       	sbc	r28, r25
    b808:	d0 09       	sbc	r29, r0
    b80a:	c0 f7       	brcc	.-16     	; 0xb7fc <__ftoa_engine+0x10a>
    b80c:	e1 0c       	add	r14, r1
    b80e:	f1 1e       	adc	r15, r17
    b810:	43 1f       	adc	r20, r19
    b812:	56 1f       	adc	r21, r22
    b814:	c9 1f       	adc	r28, r25
    b816:	d0 1d       	adc	r29, r0
    b818:	7e f4       	brtc	.+30     	; 0xb838 <__ftoa_engine+0x146>
    b81a:	70 33       	cpi	r23, 0x30	; 48
    b81c:	11 f4       	brne	.+4      	; 0xb822 <__ftoa_engine+0x130>
    b81e:	8a 95       	dec	r24
    b820:	e6 cf       	rjmp	.-52     	; 0xb7ee <__ftoa_engine+0xfc>
    b822:	e8 94       	clt
    b824:	01 50       	subi	r16, 0x01	; 1
    b826:	30 f0       	brcs	.+12     	; 0xb834 <__ftoa_engine+0x142>
    b828:	08 0f       	add	r16, r24
    b82a:	0a f4       	brpl	.+2      	; 0xb82e <__ftoa_engine+0x13c>
    b82c:	00 27       	eor	r16, r16
    b82e:	02 17       	cp	r16, r18
    b830:	08 f4       	brcc	.+2      	; 0xb834 <__ftoa_engine+0x142>
    b832:	20 2f       	mov	r18, r16
    b834:	23 95       	inc	r18
    b836:	02 2f       	mov	r16, r18
    b838:	7a 33       	cpi	r23, 0x3A	; 58
    b83a:	28 f0       	brcs	.+10     	; 0xb846 <__ftoa_engine+0x154>
    b83c:	79 e3       	ldi	r23, 0x39	; 57
    b83e:	7d 93       	st	X+, r23
    b840:	2a 95       	dec	r18
    b842:	e9 f7       	brne	.-6      	; 0xb83e <__ftoa_engine+0x14c>
    b844:	10 c0       	rjmp	.+32     	; 0xb866 <__ftoa_engine+0x174>
    b846:	7d 93       	st	X+, r23
    b848:	2a 95       	dec	r18
    b84a:	89 f6       	brne	.-94     	; 0xb7ee <__ftoa_engine+0xfc>
    b84c:	06 94       	lsr	r0
    b84e:	97 95       	ror	r25
    b850:	67 95       	ror	r22
    b852:	37 95       	ror	r19
    b854:	17 95       	ror	r17
    b856:	17 94       	ror	r1
    b858:	e1 18       	sub	r14, r1
    b85a:	f1 0a       	sbc	r15, r17
    b85c:	43 0b       	sbc	r20, r19
    b85e:	56 0b       	sbc	r21, r22
    b860:	c9 0b       	sbc	r28, r25
    b862:	d0 09       	sbc	r29, r0
    b864:	98 f0       	brcs	.+38     	; 0xb88c <__ftoa_engine+0x19a>
    b866:	23 95       	inc	r18
    b868:	7e 91       	ld	r23, -X
    b86a:	73 95       	inc	r23
    b86c:	7a 33       	cpi	r23, 0x3A	; 58
    b86e:	08 f0       	brcs	.+2      	; 0xb872 <__ftoa_engine+0x180>
    b870:	70 e3       	ldi	r23, 0x30	; 48
    b872:	7c 93       	st	X, r23
    b874:	20 13       	cpse	r18, r16
    b876:	b8 f7       	brcc	.-18     	; 0xb866 <__ftoa_engine+0x174>
    b878:	7e 91       	ld	r23, -X
    b87a:	70 61       	ori	r23, 0x10	; 16
    b87c:	7d 93       	st	X+, r23
    b87e:	30 f0       	brcs	.+12     	; 0xb88c <__ftoa_engine+0x19a>
    b880:	83 95       	inc	r24
    b882:	71 e3       	ldi	r23, 0x31	; 49
    b884:	7d 93       	st	X+, r23
    b886:	70 e3       	ldi	r23, 0x30	; 48
    b888:	2a 95       	dec	r18
    b88a:	e1 f7       	brne	.-8      	; 0xb884 <__ftoa_engine+0x192>
    b88c:	11 24       	eor	r1, r1
    b88e:	ef 90       	pop	r14
    b890:	ff 90       	pop	r15
    b892:	0f 91       	pop	r16
    b894:	1f 91       	pop	r17
    b896:	cf 91       	pop	r28
    b898:	df 91       	pop	r29
    b89a:	99 27       	eor	r25, r25
    b89c:	87 fd       	sbrc	r24, 7
    b89e:	90 95       	com	r25
    b8a0:	08 95       	ret

0000b8a2 <strnlen_P>:
    b8a2:	fc 01       	movw	r30, r24
    b8a4:	05 90       	lpm	r0, Z+
    b8a6:	61 50       	subi	r22, 0x01	; 1
    b8a8:	70 40       	sbci	r23, 0x00	; 0
    b8aa:	01 10       	cpse	r0, r1
    b8ac:	d8 f7       	brcc	.-10     	; 0xb8a4 <strnlen_P+0x2>
    b8ae:	80 95       	com	r24
    b8b0:	90 95       	com	r25
    b8b2:	8e 0f       	add	r24, r30
    b8b4:	9f 1f       	adc	r25, r31
    b8b6:	08 95       	ret

0000b8b8 <memcpy>:
    b8b8:	fb 01       	movw	r30, r22
    b8ba:	dc 01       	movw	r26, r24
    b8bc:	02 c0       	rjmp	.+4      	; 0xb8c2 <memcpy+0xa>
    b8be:	01 90       	ld	r0, Z+
    b8c0:	0d 92       	st	X+, r0
    b8c2:	41 50       	subi	r20, 0x01	; 1
    b8c4:	50 40       	sbci	r21, 0x00	; 0
    b8c6:	d8 f7       	brcc	.-10     	; 0xb8be <memcpy+0x6>
    b8c8:	08 95       	ret

0000b8ca <strlen>:
    b8ca:	fc 01       	movw	r30, r24
    b8cc:	01 90       	ld	r0, Z+
    b8ce:	00 20       	and	r0, r0
    b8d0:	e9 f7       	brne	.-6      	; 0xb8cc <strlen+0x2>
    b8d2:	80 95       	com	r24
    b8d4:	90 95       	com	r25
    b8d6:	8e 0f       	add	r24, r30
    b8d8:	9f 1f       	adc	r25, r31
    b8da:	08 95       	ret

0000b8dc <strnlen>:
    b8dc:	fc 01       	movw	r30, r24
    b8de:	61 50       	subi	r22, 0x01	; 1
    b8e0:	70 40       	sbci	r23, 0x00	; 0
    b8e2:	01 90       	ld	r0, Z+
    b8e4:	01 10       	cpse	r0, r1
    b8e6:	d8 f7       	brcc	.-10     	; 0xb8de <strnlen+0x2>
    b8e8:	80 95       	com	r24
    b8ea:	90 95       	com	r25
    b8ec:	8e 0f       	add	r24, r30
    b8ee:	9f 1f       	adc	r25, r31
    b8f0:	08 95       	ret

0000b8f2 <fdevopen>:
    b8f2:	0f 93       	push	r16
    b8f4:	1f 93       	push	r17
    b8f6:	cf 93       	push	r28
    b8f8:	df 93       	push	r29
    b8fa:	00 97       	sbiw	r24, 0x00	; 0
    b8fc:	31 f4       	brne	.+12     	; 0xb90a <fdevopen+0x18>
    b8fe:	61 15       	cp	r22, r1
    b900:	71 05       	cpc	r23, r1
    b902:	19 f4       	brne	.+6      	; 0xb90a <fdevopen+0x18>
    b904:	80 e0       	ldi	r24, 0x00	; 0
    b906:	90 e0       	ldi	r25, 0x00	; 0
    b908:	39 c0       	rjmp	.+114    	; 0xb97c <fdevopen+0x8a>
    b90a:	8b 01       	movw	r16, r22
    b90c:	ec 01       	movw	r28, r24
    b90e:	6e e0       	ldi	r22, 0x0E	; 14
    b910:	70 e0       	ldi	r23, 0x00	; 0
    b912:	81 e0       	ldi	r24, 0x01	; 1
    b914:	90 e0       	ldi	r25, 0x00	; 0
    b916:	4c d1       	rcall	.+664    	; 0xbbb0 <calloc>
    b918:	fc 01       	movw	r30, r24
    b91a:	89 2b       	or	r24, r25
    b91c:	99 f3       	breq	.-26     	; 0xb904 <fdevopen+0x12>
    b91e:	80 e8       	ldi	r24, 0x80	; 128
    b920:	83 83       	std	Z+3, r24	; 0x03
    b922:	01 15       	cp	r16, r1
    b924:	11 05       	cpc	r17, r1
    b926:	71 f0       	breq	.+28     	; 0xb944 <fdevopen+0x52>
    b928:	02 87       	std	Z+10, r16	; 0x0a
    b92a:	13 87       	std	Z+11, r17	; 0x0b
    b92c:	81 e8       	ldi	r24, 0x81	; 129
    b92e:	83 83       	std	Z+3, r24	; 0x03
    b930:	80 91 ed 27 	lds	r24, 0x27ED	; 0x8027ed <__iob>
    b934:	90 91 ee 27 	lds	r25, 0x27EE	; 0x8027ee <__iob+0x1>
    b938:	89 2b       	or	r24, r25
    b93a:	21 f4       	brne	.+8      	; 0xb944 <fdevopen+0x52>
    b93c:	e0 93 ed 27 	sts	0x27ED, r30	; 0x8027ed <__iob>
    b940:	f0 93 ee 27 	sts	0x27EE, r31	; 0x8027ee <__iob+0x1>
    b944:	20 97       	sbiw	r28, 0x00	; 0
    b946:	c9 f0       	breq	.+50     	; 0xb97a <fdevopen+0x88>
    b948:	c0 87       	std	Z+8, r28	; 0x08
    b94a:	d1 87       	std	Z+9, r29	; 0x09
    b94c:	83 81       	ldd	r24, Z+3	; 0x03
    b94e:	82 60       	ori	r24, 0x02	; 2
    b950:	83 83       	std	Z+3, r24	; 0x03
    b952:	80 91 ef 27 	lds	r24, 0x27EF	; 0x8027ef <__iob+0x2>
    b956:	90 91 f0 27 	lds	r25, 0x27F0	; 0x8027f0 <__iob+0x3>
    b95a:	89 2b       	or	r24, r25
    b95c:	71 f4       	brne	.+28     	; 0xb97a <fdevopen+0x88>
    b95e:	e0 93 ef 27 	sts	0x27EF, r30	; 0x8027ef <__iob+0x2>
    b962:	f0 93 f0 27 	sts	0x27F0, r31	; 0x8027f0 <__iob+0x3>
    b966:	80 91 f1 27 	lds	r24, 0x27F1	; 0x8027f1 <__iob+0x4>
    b96a:	90 91 f2 27 	lds	r25, 0x27F2	; 0x8027f2 <__iob+0x5>
    b96e:	89 2b       	or	r24, r25
    b970:	21 f4       	brne	.+8      	; 0xb97a <fdevopen+0x88>
    b972:	e0 93 f1 27 	sts	0x27F1, r30	; 0x8027f1 <__iob+0x4>
    b976:	f0 93 f2 27 	sts	0x27F2, r31	; 0x8027f2 <__iob+0x5>
    b97a:	cf 01       	movw	r24, r30
    b97c:	df 91       	pop	r29
    b97e:	cf 91       	pop	r28
    b980:	1f 91       	pop	r17
    b982:	0f 91       	pop	r16
    b984:	08 95       	ret

0000b986 <fprintf>:
    b986:	cf 93       	push	r28
    b988:	df 93       	push	r29
    b98a:	cd b7       	in	r28, 0x3d	; 61
    b98c:	de b7       	in	r29, 0x3e	; 62
    b98e:	ae 01       	movw	r20, r28
    b990:	46 5f       	subi	r20, 0xF6	; 246
    b992:	5f 4f       	sbci	r21, 0xFF	; 255
    b994:	68 85       	ldd	r22, Y+8	; 0x08
    b996:	79 85       	ldd	r23, Y+9	; 0x09
    b998:	8e 81       	ldd	r24, Y+6	; 0x06
    b99a:	9f 81       	ldd	r25, Y+7	; 0x07
    b99c:	98 d8       	rcall	.-3792   	; 0xaace <vfprintf>
    b99e:	df 91       	pop	r29
    b9a0:	cf 91       	pop	r28
    b9a2:	08 95       	ret

0000b9a4 <fputc>:
    b9a4:	0f 93       	push	r16
    b9a6:	1f 93       	push	r17
    b9a8:	cf 93       	push	r28
    b9aa:	df 93       	push	r29
    b9ac:	fb 01       	movw	r30, r22
    b9ae:	23 81       	ldd	r18, Z+3	; 0x03
    b9b0:	21 fd       	sbrc	r18, 1
    b9b2:	03 c0       	rjmp	.+6      	; 0xb9ba <fputc+0x16>
    b9b4:	8f ef       	ldi	r24, 0xFF	; 255
    b9b6:	9f ef       	ldi	r25, 0xFF	; 255
    b9b8:	2c c0       	rjmp	.+88     	; 0xba12 <fputc+0x6e>
    b9ba:	22 ff       	sbrs	r18, 2
    b9bc:	16 c0       	rjmp	.+44     	; 0xb9ea <fputc+0x46>
    b9be:	46 81       	ldd	r20, Z+6	; 0x06
    b9c0:	57 81       	ldd	r21, Z+7	; 0x07
    b9c2:	24 81       	ldd	r18, Z+4	; 0x04
    b9c4:	35 81       	ldd	r19, Z+5	; 0x05
    b9c6:	42 17       	cp	r20, r18
    b9c8:	53 07       	cpc	r21, r19
    b9ca:	44 f4       	brge	.+16     	; 0xb9dc <fputc+0x38>
    b9cc:	a0 81       	ld	r26, Z
    b9ce:	b1 81       	ldd	r27, Z+1	; 0x01
    b9d0:	9d 01       	movw	r18, r26
    b9d2:	2f 5f       	subi	r18, 0xFF	; 255
    b9d4:	3f 4f       	sbci	r19, 0xFF	; 255
    b9d6:	20 83       	st	Z, r18
    b9d8:	31 83       	std	Z+1, r19	; 0x01
    b9da:	8c 93       	st	X, r24
    b9dc:	26 81       	ldd	r18, Z+6	; 0x06
    b9de:	37 81       	ldd	r19, Z+7	; 0x07
    b9e0:	2f 5f       	subi	r18, 0xFF	; 255
    b9e2:	3f 4f       	sbci	r19, 0xFF	; 255
    b9e4:	26 83       	std	Z+6, r18	; 0x06
    b9e6:	37 83       	std	Z+7, r19	; 0x07
    b9e8:	14 c0       	rjmp	.+40     	; 0xba12 <fputc+0x6e>
    b9ea:	8b 01       	movw	r16, r22
    b9ec:	ec 01       	movw	r28, r24
    b9ee:	fb 01       	movw	r30, r22
    b9f0:	00 84       	ldd	r0, Z+8	; 0x08
    b9f2:	f1 85       	ldd	r31, Z+9	; 0x09
    b9f4:	e0 2d       	mov	r30, r0
    b9f6:	19 95       	eicall
    b9f8:	89 2b       	or	r24, r25
    b9fa:	e1 f6       	brne	.-72     	; 0xb9b4 <fputc+0x10>
    b9fc:	d8 01       	movw	r26, r16
    b9fe:	16 96       	adiw	r26, 0x06	; 6
    ba00:	8d 91       	ld	r24, X+
    ba02:	9c 91       	ld	r25, X
    ba04:	17 97       	sbiw	r26, 0x07	; 7
    ba06:	01 96       	adiw	r24, 0x01	; 1
    ba08:	16 96       	adiw	r26, 0x06	; 6
    ba0a:	8d 93       	st	X+, r24
    ba0c:	9c 93       	st	X, r25
    ba0e:	17 97       	sbiw	r26, 0x07	; 7
    ba10:	ce 01       	movw	r24, r28
    ba12:	df 91       	pop	r29
    ba14:	cf 91       	pop	r28
    ba16:	1f 91       	pop	r17
    ba18:	0f 91       	pop	r16
    ba1a:	08 95       	ret

0000ba1c <printf>:
    ba1c:	cf 93       	push	r28
    ba1e:	df 93       	push	r29
    ba20:	cd b7       	in	r28, 0x3d	; 61
    ba22:	de b7       	in	r29, 0x3e	; 62
    ba24:	ae 01       	movw	r20, r28
    ba26:	4a 5f       	subi	r20, 0xFA	; 250
    ba28:	5f 4f       	sbci	r21, 0xFF	; 255
    ba2a:	fa 01       	movw	r30, r20
    ba2c:	61 91       	ld	r22, Z+
    ba2e:	71 91       	ld	r23, Z+
    ba30:	af 01       	movw	r20, r30
    ba32:	80 91 ef 27 	lds	r24, 0x27EF	; 0x8027ef <__iob+0x2>
    ba36:	90 91 f0 27 	lds	r25, 0x27F0	; 0x8027f0 <__iob+0x3>
    ba3a:	49 d8       	rcall	.-3950   	; 0xaace <vfprintf>
    ba3c:	df 91       	pop	r29
    ba3e:	cf 91       	pop	r28
    ba40:	08 95       	ret

0000ba42 <puts>:
    ba42:	0f 93       	push	r16
    ba44:	1f 93       	push	r17
    ba46:	cf 93       	push	r28
    ba48:	df 93       	push	r29
    ba4a:	e0 91 ef 27 	lds	r30, 0x27EF	; 0x8027ef <__iob+0x2>
    ba4e:	f0 91 f0 27 	lds	r31, 0x27F0	; 0x8027f0 <__iob+0x3>
    ba52:	23 81       	ldd	r18, Z+3	; 0x03
    ba54:	21 ff       	sbrs	r18, 1
    ba56:	1b c0       	rjmp	.+54     	; 0xba8e <puts+0x4c>
    ba58:	8c 01       	movw	r16, r24
    ba5a:	d0 e0       	ldi	r29, 0x00	; 0
    ba5c:	c0 e0       	ldi	r28, 0x00	; 0
    ba5e:	f8 01       	movw	r30, r16
    ba60:	81 91       	ld	r24, Z+
    ba62:	8f 01       	movw	r16, r30
    ba64:	60 91 ef 27 	lds	r22, 0x27EF	; 0x8027ef <__iob+0x2>
    ba68:	70 91 f0 27 	lds	r23, 0x27F0	; 0x8027f0 <__iob+0x3>
    ba6c:	db 01       	movw	r26, r22
    ba6e:	18 96       	adiw	r26, 0x08	; 8
    ba70:	ed 91       	ld	r30, X+
    ba72:	fc 91       	ld	r31, X
    ba74:	19 97       	sbiw	r26, 0x09	; 9
    ba76:	88 23       	and	r24, r24
    ba78:	31 f0       	breq	.+12     	; 0xba86 <puts+0x44>
    ba7a:	19 95       	eicall
    ba7c:	89 2b       	or	r24, r25
    ba7e:	79 f3       	breq	.-34     	; 0xba5e <puts+0x1c>
    ba80:	df ef       	ldi	r29, 0xFF	; 255
    ba82:	cf ef       	ldi	r28, 0xFF	; 255
    ba84:	ec cf       	rjmp	.-40     	; 0xba5e <puts+0x1c>
    ba86:	8a e0       	ldi	r24, 0x0A	; 10
    ba88:	19 95       	eicall
    ba8a:	89 2b       	or	r24, r25
    ba8c:	19 f0       	breq	.+6      	; 0xba94 <puts+0x52>
    ba8e:	8f ef       	ldi	r24, 0xFF	; 255
    ba90:	9f ef       	ldi	r25, 0xFF	; 255
    ba92:	02 c0       	rjmp	.+4      	; 0xba98 <puts+0x56>
    ba94:	8d 2f       	mov	r24, r29
    ba96:	9c 2f       	mov	r25, r28
    ba98:	df 91       	pop	r29
    ba9a:	cf 91       	pop	r28
    ba9c:	1f 91       	pop	r17
    ba9e:	0f 91       	pop	r16
    baa0:	08 95       	ret

0000baa2 <sprintf>:
    baa2:	0f 93       	push	r16
    baa4:	1f 93       	push	r17
    baa6:	cf 93       	push	r28
    baa8:	df 93       	push	r29
    baaa:	cd b7       	in	r28, 0x3d	; 61
    baac:	de b7       	in	r29, 0x3e	; 62
    baae:	2e 97       	sbiw	r28, 0x0e	; 14
    bab0:	cd bf       	out	0x3d, r28	; 61
    bab2:	de bf       	out	0x3e, r29	; 62
    bab4:	0e 89       	ldd	r16, Y+22	; 0x16
    bab6:	1f 89       	ldd	r17, Y+23	; 0x17
    bab8:	86 e0       	ldi	r24, 0x06	; 6
    baba:	8c 83       	std	Y+4, r24	; 0x04
    babc:	09 83       	std	Y+1, r16	; 0x01
    babe:	1a 83       	std	Y+2, r17	; 0x02
    bac0:	8f ef       	ldi	r24, 0xFF	; 255
    bac2:	9f e7       	ldi	r25, 0x7F	; 127
    bac4:	8d 83       	std	Y+5, r24	; 0x05
    bac6:	9e 83       	std	Y+6, r25	; 0x06
    bac8:	ae 01       	movw	r20, r28
    baca:	46 5e       	subi	r20, 0xE6	; 230
    bacc:	5f 4f       	sbci	r21, 0xFF	; 255
    bace:	68 8d       	ldd	r22, Y+24	; 0x18
    bad0:	79 8d       	ldd	r23, Y+25	; 0x19
    bad2:	ce 01       	movw	r24, r28
    bad4:	01 96       	adiw	r24, 0x01	; 1
    bad6:	0e 94 67 55 	call	0xaace	; 0xaace <vfprintf>
    bada:	ef 81       	ldd	r30, Y+7	; 0x07
    badc:	f8 85       	ldd	r31, Y+8	; 0x08
    bade:	e0 0f       	add	r30, r16
    bae0:	f1 1f       	adc	r31, r17
    bae2:	10 82       	st	Z, r1
    bae4:	2e 96       	adiw	r28, 0x0e	; 14
    bae6:	cd bf       	out	0x3d, r28	; 61
    bae8:	de bf       	out	0x3e, r29	; 62
    baea:	df 91       	pop	r29
    baec:	cf 91       	pop	r28
    baee:	1f 91       	pop	r17
    baf0:	0f 91       	pop	r16
    baf2:	08 95       	ret

0000baf4 <__ultoa_invert>:
    baf4:	fa 01       	movw	r30, r20
    baf6:	aa 27       	eor	r26, r26
    baf8:	28 30       	cpi	r18, 0x08	; 8
    bafa:	51 f1       	breq	.+84     	; 0xbb50 <__ultoa_invert+0x5c>
    bafc:	20 31       	cpi	r18, 0x10	; 16
    bafe:	81 f1       	breq	.+96     	; 0xbb60 <__ultoa_invert+0x6c>
    bb00:	e8 94       	clt
    bb02:	6f 93       	push	r22
    bb04:	6e 7f       	andi	r22, 0xFE	; 254
    bb06:	6e 5f       	subi	r22, 0xFE	; 254
    bb08:	7f 4f       	sbci	r23, 0xFF	; 255
    bb0a:	8f 4f       	sbci	r24, 0xFF	; 255
    bb0c:	9f 4f       	sbci	r25, 0xFF	; 255
    bb0e:	af 4f       	sbci	r26, 0xFF	; 255
    bb10:	b1 e0       	ldi	r27, 0x01	; 1
    bb12:	3e d0       	rcall	.+124    	; 0xbb90 <__ultoa_invert+0x9c>
    bb14:	b4 e0       	ldi	r27, 0x04	; 4
    bb16:	3c d0       	rcall	.+120    	; 0xbb90 <__ultoa_invert+0x9c>
    bb18:	67 0f       	add	r22, r23
    bb1a:	78 1f       	adc	r23, r24
    bb1c:	89 1f       	adc	r24, r25
    bb1e:	9a 1f       	adc	r25, r26
    bb20:	a1 1d       	adc	r26, r1
    bb22:	68 0f       	add	r22, r24
    bb24:	79 1f       	adc	r23, r25
    bb26:	8a 1f       	adc	r24, r26
    bb28:	91 1d       	adc	r25, r1
    bb2a:	a1 1d       	adc	r26, r1
    bb2c:	6a 0f       	add	r22, r26
    bb2e:	71 1d       	adc	r23, r1
    bb30:	81 1d       	adc	r24, r1
    bb32:	91 1d       	adc	r25, r1
    bb34:	a1 1d       	adc	r26, r1
    bb36:	20 d0       	rcall	.+64     	; 0xbb78 <__ultoa_invert+0x84>
    bb38:	09 f4       	brne	.+2      	; 0xbb3c <__ultoa_invert+0x48>
    bb3a:	68 94       	set
    bb3c:	3f 91       	pop	r19
    bb3e:	2a e0       	ldi	r18, 0x0A	; 10
    bb40:	26 9f       	mul	r18, r22
    bb42:	11 24       	eor	r1, r1
    bb44:	30 19       	sub	r19, r0
    bb46:	30 5d       	subi	r19, 0xD0	; 208
    bb48:	31 93       	st	Z+, r19
    bb4a:	de f6       	brtc	.-74     	; 0xbb02 <__ultoa_invert+0xe>
    bb4c:	cf 01       	movw	r24, r30
    bb4e:	08 95       	ret
    bb50:	46 2f       	mov	r20, r22
    bb52:	47 70       	andi	r20, 0x07	; 7
    bb54:	40 5d       	subi	r20, 0xD0	; 208
    bb56:	41 93       	st	Z+, r20
    bb58:	b3 e0       	ldi	r27, 0x03	; 3
    bb5a:	0f d0       	rcall	.+30     	; 0xbb7a <__ultoa_invert+0x86>
    bb5c:	c9 f7       	brne	.-14     	; 0xbb50 <__ultoa_invert+0x5c>
    bb5e:	f6 cf       	rjmp	.-20     	; 0xbb4c <__ultoa_invert+0x58>
    bb60:	46 2f       	mov	r20, r22
    bb62:	4f 70       	andi	r20, 0x0F	; 15
    bb64:	40 5d       	subi	r20, 0xD0	; 208
    bb66:	4a 33       	cpi	r20, 0x3A	; 58
    bb68:	18 f0       	brcs	.+6      	; 0xbb70 <__ultoa_invert+0x7c>
    bb6a:	49 5d       	subi	r20, 0xD9	; 217
    bb6c:	31 fd       	sbrc	r19, 1
    bb6e:	40 52       	subi	r20, 0x20	; 32
    bb70:	41 93       	st	Z+, r20
    bb72:	02 d0       	rcall	.+4      	; 0xbb78 <__ultoa_invert+0x84>
    bb74:	a9 f7       	brne	.-22     	; 0xbb60 <__ultoa_invert+0x6c>
    bb76:	ea cf       	rjmp	.-44     	; 0xbb4c <__ultoa_invert+0x58>
    bb78:	b4 e0       	ldi	r27, 0x04	; 4
    bb7a:	a6 95       	lsr	r26
    bb7c:	97 95       	ror	r25
    bb7e:	87 95       	ror	r24
    bb80:	77 95       	ror	r23
    bb82:	67 95       	ror	r22
    bb84:	ba 95       	dec	r27
    bb86:	c9 f7       	brne	.-14     	; 0xbb7a <__ultoa_invert+0x86>
    bb88:	00 97       	sbiw	r24, 0x00	; 0
    bb8a:	61 05       	cpc	r22, r1
    bb8c:	71 05       	cpc	r23, r1
    bb8e:	08 95       	ret
    bb90:	9b 01       	movw	r18, r22
    bb92:	ac 01       	movw	r20, r24
    bb94:	0a 2e       	mov	r0, r26
    bb96:	06 94       	lsr	r0
    bb98:	57 95       	ror	r21
    bb9a:	47 95       	ror	r20
    bb9c:	37 95       	ror	r19
    bb9e:	27 95       	ror	r18
    bba0:	ba 95       	dec	r27
    bba2:	c9 f7       	brne	.-14     	; 0xbb96 <__ultoa_invert+0xa2>
    bba4:	62 0f       	add	r22, r18
    bba6:	73 1f       	adc	r23, r19
    bba8:	84 1f       	adc	r24, r20
    bbaa:	95 1f       	adc	r25, r21
    bbac:	a0 1d       	adc	r26, r0
    bbae:	08 95       	ret

0000bbb0 <calloc>:
    bbb0:	0f 93       	push	r16
    bbb2:	1f 93       	push	r17
    bbb4:	cf 93       	push	r28
    bbb6:	df 93       	push	r29
    bbb8:	86 9f       	mul	r24, r22
    bbba:	80 01       	movw	r16, r0
    bbbc:	87 9f       	mul	r24, r23
    bbbe:	10 0d       	add	r17, r0
    bbc0:	96 9f       	mul	r25, r22
    bbc2:	10 0d       	add	r17, r0
    bbc4:	11 24       	eor	r1, r1
    bbc6:	c8 01       	movw	r24, r16
    bbc8:	73 dc       	rcall	.-1818   	; 0xb4b0 <malloc>
    bbca:	ec 01       	movw	r28, r24
    bbcc:	00 97       	sbiw	r24, 0x00	; 0
    bbce:	21 f0       	breq	.+8      	; 0xbbd8 <calloc+0x28>
    bbd0:	a8 01       	movw	r20, r16
    bbd2:	60 e0       	ldi	r22, 0x00	; 0
    bbd4:	70 e0       	ldi	r23, 0x00	; 0
    bbd6:	06 d0       	rcall	.+12     	; 0xbbe4 <memset>
    bbd8:	ce 01       	movw	r24, r28
    bbda:	df 91       	pop	r29
    bbdc:	cf 91       	pop	r28
    bbde:	1f 91       	pop	r17
    bbe0:	0f 91       	pop	r16
    bbe2:	08 95       	ret

0000bbe4 <memset>:
    bbe4:	dc 01       	movw	r26, r24
    bbe6:	01 c0       	rjmp	.+2      	; 0xbbea <memset+0x6>
    bbe8:	6d 93       	st	X+, r22
    bbea:	41 50       	subi	r20, 0x01	; 1
    bbec:	50 40       	sbci	r21, 0x00	; 0
    bbee:	e0 f7       	brcc	.-8      	; 0xbbe8 <memset+0x4>
    bbf0:	08 95       	ret

0000bbf2 <_exit>:
    bbf2:	f8 94       	cli

0000bbf4 <__stop_program>:
    bbf4:	ff cf       	rjmp	.-2      	; 0xbbf4 <__stop_program>
